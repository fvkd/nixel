---
Function {
 argument: Destructured {
  identifier: RightAt(
   "args",
  ),
  arguments: [
   DestructuredArgument {
    identifier: "maintainer",
    default: None,
   },
   DestructuredArgument {
    identifier: "localSystem",
    default: Some(
     Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "system",
           position: (2, 19),
          },
         ],
        },
        to: PropertyAccess {
         expression: Variable {
          identifier: "args",
          position: (2, 28),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "system",
            position: (2, 33),
           },
          ],
         },
         default: Some(
          PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (2, 43),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "currentSystem",
              position: (2, 52),
             },
            ],
           },
           default: None,
          },
         ),
        },
       },
      ],
      recursive: false,
      position: (2, 17),
     },
    ),
   },
   DestructuredArgument {
    identifier: "system",
    default: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "localSystem",
       position: (3, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "system",
         position: (3, 24),
        },
       ],
      },
      default: None,
     },
    ),
   },
   DestructuredArgument {
    identifier: "crossSystem",
    default: Some(
     Variable {
      identifier: "localSystem",
      position: (4, 17),
     },
    ),
   },
  ],
  ellipsis: true,
 },
 definition: LetIn {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "pkgs",
       position: (15, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: Variable {
      identifier: "import",
      position: (15, 10),
     },
     arguments: [
      Path {
       parts: [
        Raw {
         content: "./../../default.nix",
         position: (15, 17),
        },
       ],
       position: (15, 17),
      },
      Parentheses {
       expression: FunctionApplication {
        function: Variable {
         identifier: "removeAttrs",
         position: (15, 38),
        },
        arguments: [
         Variable {
          identifier: "args",
          position: (15, 50),
         },
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "maintainer",
              position: (15, 58),
             },
            ],
            position: (15, 57),
           },
          ],
          position: (15, 55),
         },
        ],
       },
       position: (15, 37),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "maintainer_",
       position: (16, 3),
      },
     ],
    },
    to: PropertyAccess {
     expression: Variable {
      identifier: "pkgs",
      position: (16, 17),
     },
     attribute_path: AttributePath {
      parts: [
       Raw {
        content: "lib",
        position: (16, 22),
       },
       Raw {
        content: "maintainers",
        position: (16, 26),
       },
       Interpolation {
        expression: Variable {
         identifier: "maintainer",
         position: (16, 40),
        },
       },
      ],
     },
     default: None,
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "packagesWith",
       position: (17, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "cond",
     },
     definition: Function {
      argument: Simple {
       identifier: "return",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: Parentheses {
        expression: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "pkgs",
           position: (18, 6),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "lib",
             position: (18, 11),
            },
            Raw {
             content: "flatten",
             position: (18, 15),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (19, 8),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "lib",
                position: (19, 13),
               },
               Raw {
                content: "mapAttrsToList",
                position: (19, 17),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "name",
               },
               definition: Function {
                argument: Simple {
                 identifier: "pkg",
                },
                definition: LetIn {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "result",
                      position: (22, 13),
                     },
                    ],
                   },
                   to: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (22, 22),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "tryEval",
                        position: (22, 31),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Parentheses {
                      expression: IfThenElse {
                       predicate: BinaryOperation {
                        operator: LogicalAnd,
                        operands: [
                         FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "pkgs",
                            position: (24, 20),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "lib",
                              position: (24, 25),
                             },
                             Raw {
                              content: "isDerivation",
                              position: (24, 29),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "pkg",
                            position: (24, 42),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "cond",
                           position: (24, 49),
                          },
                          arguments: [
                           Variable {
                            identifier: "name",
                            position: (24, 54),
                           },
                           Variable {
                            identifier: "pkg",
                            position: (24, 59),
                           },
                          ],
                         },
                        ],
                        position: (24, 46),
                       },
                       then: FunctionApplication {
                        function: PropertyAccess {
                         expression: Variable {
                          identifier: "builtins",
                          position: (28, 19),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "seq",
                            position: (28, 28),
                           },
                          ],
                         },
                         default: None,
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "pkg",
                           position: (28, 32),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "outPath",
                             position: (28, 36),
                            },
                           ],
                          },
                          default: None,
                         },
                         List {
                          elements: [
                           Parentheses {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "return",
                              position: (29, 24),
                             },
                             arguments: [
                              Variable {
                               identifier: "name",
                               position: (29, 31),
                              },
                              Variable {
                               identifier: "pkg",
                               position: (29, 36),
                              },
                             ],
                            },
                            position: (29, 23),
                           },
                          ],
                          position: (29, 21),
                         },
                        ],
                       },
                       else_: IfThenElse {
                        predicate: BinaryOperation {
                         operator: LogicalOr,
                         operands: [
                          PropertyAccess {
                           expression: Variable {
                            identifier: "pkg",
                            position: (30, 25),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "recurseForDerivations",
                              position: (30, 29),
                             },
                            ],
                           },
                           default: Some(
                            Variable {
                             identifier: "false",
                             position: (30, 54),
                            },
                           ),
                          },
                          PropertyAccess {
                           expression: Variable {
                            identifier: "pkg",
                            position: (30, 63),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "recurseForRelease",
                              position: (30, 67),
                             },
                            ],
                           },
                           default: Some(
                            Variable {
                             identifier: "false",
                             position: (30, 88),
                            },
                           ),
                          },
                         ],
                         position: (30, 60),
                        },
                        then: FunctionApplication {
                         function: Variable {
                          identifier: "packagesWith",
                          position: (31, 22),
                         },
                         arguments: [
                          Variable {
                           identifier: "cond",
                           position: (31, 35),
                          },
                          Variable {
                           identifier: "return",
                           position: (31, 40),
                          },
                          Variable {
                           identifier: "pkg",
                           position: (31, 47),
                          },
                         ],
                        },
                        else_: List {
                         elements: [],
                         position: (32, 22),
                        },
                        position: (30, 22),
                       },
                       position: (24, 17),
                      },
                      position: (23, 15),
                     },
                    ],
                   },
                  },
                 ],
                 target: IfThenElse {
                  predicate: PropertyAccess {
                   expression: Variable {
                    identifier: "result",
                    position: (35, 14),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "success",
                      position: (35, 21),
                     },
                    ],
                   },
                   default: None,
                  },
                  then: PropertyAccess {
                   expression: Variable {
                    identifier: "result",
                    position: (35, 34),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (35, 41),
                     },
                    ],
                   },
                   default: None,
                  },
                  else_: List {
                   elements: [],
                   position: (36, 16),
                  },
                  position: (35, 11),
                 },
                 position: (21, 11),
                },
                position: (20, 16),
               },
               position: (20, 10),
              },
              position: (20, 9),
             },
             Variable {
              identifier: "set",
              position: (38, 9),
             },
            ],
           },
           position: (19, 7),
          },
         ],
        },
        position: (18, 5),
       },
       position: (17, 32),
      },
      position: (17, 24),
     },
     position: (17, 18),
    },
   },
  ],
  target: FunctionApplication {
   function: Variable {
    identifier: "packagesWith",
    position: (42, 1),
   },
   arguments: [
    Parentheses {
     expression: Function {
      argument: Simple {
       identifier: "name",
      },
      definition: Function {
       argument: Simple {
        identifier: "pkg",
       },
       definition: Parentheses {
        expression: IfThenElse {
         predicate: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (45, 10),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "hasAttr",
                position: (45, 19),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "meta",
                position: (45, 28),
               },
              ],
              position: (45, 27),
             },
             Variable {
              identifier: "pkg",
              position: (45, 34),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (45, 41),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "hasAttr",
                position: (45, 50),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "maintainers",
                position: (45, 59),
               },
              ],
              position: (45, 58),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkg",
               position: (45, 72),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "meta",
                 position: (45, 76),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
          position: (45, 38),
         },
         then: Parentheses {
          expression: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (47, 12),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "isList",
                position: (47, 21),
               },
              ],
             },
             default: None,
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkg",
               position: (47, 28),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "meta",
                 position: (47, 32),
                },
                Raw {
                 content: "maintainers",
                 position: (47, 37),
                },
               ],
              },
              default: None,
             },
            ],
           },
           then: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (48, 14),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "elem",
                position: (48, 23),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "maintainer_",
              position: (48, 28),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkg",
               position: (48, 40),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "meta",
                 position: (48, 44),
                },
                Raw {
                 content: "maintainers",
                 position: (48, 49),
                },
               ],
              },
              default: None,
             },
            ],
           },
           else_: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "maintainer_",
              position: (49, 14),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkg",
               position: (49, 29),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "meta",
                 position: (49, 33),
                },
                Raw {
                 content: "maintainers",
                 position: (49, 38),
                },
               ],
              },
              default: None,
             },
            ],
            position: (49, 26),
           },
           position: (47, 9),
          },
          position: (46, 12),
         },
         else_: Variable {
          identifier: "false",
          position: (51, 12),
         },
         position: (45, 7),
        },
        position: (44, 5),
       },
       position: (43, 10),
      },
      position: (43, 4),
     },
     position: (43, 3),
    },
    Parentheses {
     expression: Function {
      argument: Simple {
       identifier: "name",
      },
      definition: Function {
       argument: Simple {
        identifier: "pkg",
       },
       definition: Variable {
        identifier: "pkg",
        position: (54, 15),
       },
       position: (54, 10),
      },
      position: (54, 4),
     },
     position: (54, 3),
    },
    Variable {
     identifier: "pkgs",
     position: (55, 3),
    },
   ],
  },
  position: (14, 1),
 },
 position: (1, 1),
}