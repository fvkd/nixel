---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: PropertyAccess {
   expression: Variable {
    identifier: "lib",
    position: (17, 7),
   },
   attribute_path: AttributePath {
    attributes: [
     Raw {
      content: "trivial",
      position: (17, 12),
     },
    ],
   },
   default: None,
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "libStr",
        position: (19, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (19, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (19, 16),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "libAttr",
        position: (20, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (20, 13),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrsets",
         position: (20, 17),
        },
       ],
      },
      default: None,
     },
    ),
    Inherit(
     Some(
      Variable {
       identifier: "lib",
       position: (22, 12),
      },
     ),
     [
      Raw {
       content: "isFunction",
       position: (22, 17),
      },
     ],
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mkValueStringDefault",
         position: (33, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: With {
         expression: Variable {
          identifier: "builtins",
          position: (33, 38),
         },
         target: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "err",
               position: (34, 9),
              },
             ],
            },
            Function {
             argument: Some(
              "t",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "abort",
                position: (34, 21),
               },
               arguments: [
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  String {
                   parts: [
                    Raw {
                     content: "generators.mkValueStringDefault: ",
                     position: (35, 13),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "t",
                      position: (36, 15),
                     },
                    },
                    Raw {
                     content: " not supported: ",
                     position: (36, 17),
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "toPretty",
                       position: (36, 35),
                      },
                      arguments: [
                       Map {
                        bindings: [],
                        recursive: false,
                        position: (36, 44),
                       },
                       Variable {
                        identifier: "v",
                        position: (36, 47),
                       },
                      ],
                     },
                    },
                   ],
                  },
                 ],
                 position: (35, 48),
                },
               ],
              },
              position: (34, 18),
             },
             position: (34, 15),
            },
           ),
          ],
          target: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isInt",
             position: (37, 13),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (37, 24),
             },
            ],
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "toString",
             position: (37, 31),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (37, 40),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (39, 13),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isDerivation",
                 position: (39, 17),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (39, 30),
              },
             ],
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "toString",
              position: (39, 37),
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (39, 46),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isString",
               position: (41, 13),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (41, 24),
               },
              ],
             },
             then: Variable {
              identifier: "v",
              position: (41, 31),
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: EqualTo,
               operands: [
                Variable {
                 identifier: "true",
                 position: (43, 13),
                },
                Variable {
                 identifier: "v",
                 position: (43, 24),
                },
               ],
               position: (43, 19),
              },
              then: String {
               parts: [
                Raw {
                 content: "true",
                 position: (43, 32),
                },
               ],
              },
              else_: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "false",
                  position: (45, 13),
                 },
                 Variable {
                  identifier: "v",
                  position: (45, 24),
                 },
                ],
                position: (45, 19),
               },
               then: String {
                parts: [
                 Raw {
                  content: "false",
                  position: (45, 32),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "null",
                   position: (46, 13),
                  },
                  Variable {
                   identifier: "v",
                   position: (46, 24),
                  },
                 ],
                 position: (46, 19),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "null",
                   position: (46, 32),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isList",
                   position: (48, 13),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (48, 24),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "err",
                   position: (48, 31),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "lists",
                      position: (48, 36),
                     },
                    ],
                   },
                   Variable {
                    identifier: "v",
                    position: (48, 43),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isAttrs",
                    position: (50, 13),
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (50, 24),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "err",
                    position: (50, 31),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "attrsets",
                       position: (50, 36),
                      },
                     ],
                    },
                    Variable {
                     identifier: "v",
                     position: (50, 46),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isFunction",
                     position: (52, 13),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (52, 24),
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "err",
                     position: (52, 31),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "functions",
                        position: (52, 36),
                       },
                      ],
                     },
                     Variable {
                      identifier: "v",
                      position: (52, 47),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: FunctionApplication {
                     function: Variable {
                      identifier: "isFloat",
                      position: (56, 13),
                     },
                     arguments: [
                      Variable {
                       identifier: "v",
                       position: (56, 24),
                      },
                     ],
                    },
                    then: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "libStr",
                       position: (56, 31),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "floatToString",
                         position: (56, 38),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "v",
                       position: (56, 52),
                      },
                     ],
                    },
                    else_: FunctionApplication {
                     function: Variable {
                      identifier: "err",
                      position: (57, 10),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "this value is",
                         position: (57, 15),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (57, 31),
                       },
                       arguments: [
                        Variable {
                         identifier: "v",
                         position: (57, 40),
                        },
                       ],
                      },
                     ],
                    },
                    position: (56, 10),
                   },
                   position: (52, 10),
                  },
                  position: (50, 10),
                 },
                 position: (48, 10),
                },
                position: (46, 10),
               },
               position: (45, 10),
              },
              position: (43, 10),
             },
             position: (41, 10),
            },
            position: (39, 10),
           },
           position: (37, 10),
          },
          position: (34, 5),
         },
         position: (33, 33),
        },
        position: (33, 30),
       },
       position: (33, 26),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mkKeyValueDefault",
         position: (69, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "mkValueString",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkValueStringDefault",
             position: (70, 21),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (70, 42),
             },
            ],
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "sep",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "k",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "v",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: String {
           parts: [
            Expression {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (72, 8),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "escape",
                  position: (72, 15),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               List {
                elements: [
                 Variable {
                  identifier: "sep",
                  position: (72, 23),
                 },
                ],
                position: (72, 22),
               },
               Variable {
                identifier: "k",
                position: (72, 28),
               },
              ],
             },
            },
            Expression {
             expression: Variable {
              identifier: "sep",
              position: (72, 32),
             },
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "mkValueString",
               position: (72, 38),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (72, 52),
               },
              ],
             },
            },
           ],
          },
          position: (71, 14),
         },
         position: (71, 11),
        },
        position: (71, 6),
       },
       position: (69, 23),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toKeyValue",
         position: (82, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "listsAsDuplicateKeys",
          default: Some(
           Variable {
            identifier: "false",
            position: (84, 28),
           },
          ),
         },
         FunctionArgument {
          identifier: "mkKeyValue",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkKeyValueDefault",
             position: (83, 18),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (83, 36),
             },
             String {
              parts: [
               Raw {
                content: "=",
                position: (83, 40),
               },
              ],
             },
            ],
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "mkLine",
             position: (86, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "k",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: BinaryOperation {
             operator: Addition,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "mkKeyValue",
                position: (86, 22),
               },
               arguments: [
                Variable {
                 identifier: "k",
                 position: (86, 33),
                },
                Variable {
                 identifier: "v",
                 position: (86, 35),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "\n",
                 position: (86, 40),
                },
               ],
              },
             ],
             position: (86, 37),
            },
            position: (86, 19),
           },
           position: (86, 16),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "mkLines",
             position: (87, 7),
            },
           ],
          },
          IfThenElse {
           predicate: Variable {
            identifier: "listsAsDuplicateKeys",
            position: (87, 20),
           },
           then: Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (88, 20),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mkLine",
                 position: (88, 25),
                },
                arguments: [
                 Variable {
                  identifier: "k",
                  position: (88, 32),
                 },
                ],
               },
               IfThenElse {
                predicate: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (88, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "isList",
                     position: (88, 43),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (88, 50),
                  },
                 ],
                },
                then: Variable {
                 identifier: "v",
                 position: (88, 57),
                },
                else_: List {
                 elements: [
                  Variable {
                   identifier: "v",
                   position: (88, 65),
                  },
                 ],
                 position: (88, 64),
                },
                position: (88, 36),
               },
              ],
             },
             position: (88, 17),
            },
            position: (88, 14),
           },
           else_: Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: List {
              elements: [
               FunctionApplication {
                function: Variable {
                 identifier: "mkLine",
                 position: (89, 23),
                },
                arguments: [
                 Variable {
                  identifier: "k",
                  position: (89, 30),
                 },
                 Variable {
                  identifier: "v",
                  position: (89, 32),
                 },
                ],
               },
              ],
              position: (89, 20),
             },
             position: (89, 17),
            },
            position: (89, 14),
           },
           position: (87, 17),
          },
         ),
        ],
        target: Function {
         argument: Some(
          "attrs",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "libStr",
            position: (90, 13),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "concatStrings",
              position: (90, 20),
             },
            ],
           },
           default: None,
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (90, 35),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "concatLists",
                position: (90, 39),
               },
              ],
             },
             default: None,
            },
            arguments: [
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libAttr",
                position: (90, 52),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mapAttrsToList",
                  position: (90, 60),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "mkLines",
                position: (90, 75),
               },
               Variable {
                identifier: "attrs",
                position: (90, 83),
               },
              ],
             },
            ],
           },
          ],
         },
         position: (90, 6),
        },
        position: (86, 3),
       },
       position: (82, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toINI",
         position: (113, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "listsAsDuplicateKeys",
          default: Some(
           Variable {
            identifier: "false",
            position: (119, 28),
           },
          ),
         },
         FunctionArgument {
          identifier: "mkKeyValue",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkKeyValueDefault",
             position: (117, 21),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (117, 39),
             },
             String {
              parts: [
               Raw {
                content: "=",
                position: (117, 43),
               },
              ],
             },
            ],
           },
          ),
         },
         FunctionArgument {
          identifier: "mkSectionName",
          default: Some(
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "libStr",
               position: (115, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "escape",
                 position: (115, 35),
                },
               ],
              },
              default: None,
             },
             arguments: [
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "[",
                   position: (115, 45),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "]",
                   position: (115, 49),
                  },
                 ],
                },
               ],
               position: (115, 42),
              },
              Variable {
               identifier: "name",
               position: (115, 54),
              },
             ],
            },
            position: (115, 22),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "attrsOfAttrs",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mapAttrsToStringsSep",
              position: (123, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "sep",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "mapFn",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "attrs",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "libStr",
                 position: (124, 11),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "concatStringsSep",
                   position: (124, 18),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "sep",
                 position: (124, 35),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "libAttr",
                   position: (125, 14),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "mapAttrsToList",
                     position: (125, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "mapFn",
                   position: (125, 37),
                  },
                  Variable {
                   identifier: "attrs",
                   position: (125, 43),
                  },
                 ],
                },
               ],
              },
              position: (123, 44),
             },
             position: (123, 37),
            },
            position: (123, 32),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkSection",
              position: (126, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "sectName",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "sectValues",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: Addition,
              operands: [
               String {
                parts: [
                 Raw {
                  content: "[",
                  position: (127, 1),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "mkSectionName",
                    position: (127, 14),
                   },
                   arguments: [
                    Variable {
                     identifier: "sectName",
                     position: (127, 28),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "]\n",
                  position: (127, 37),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "toKeyValue",
                 position: (128, 14),
                },
                arguments: [
                 Map {
                  bindings: [
                   Inherit(
                    None,
                    [
                     Raw {
                      content: "mkKeyValue",
                      position: (128, 35),
                     },
                     Raw {
                      content: "listsAsDuplicateKeys",
                      position: (128, 46),
                     },
                    ],
                   ),
                  ],
                  recursive: false,
                  position: (128, 25),
                 },
                 Variable {
                  identifier: "sectValues",
                  position: (128, 70),
                 },
                ],
               },
              ],
              position: (128, 12),
             },
             position: (126, 31),
            },
            position: (126, 21),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "mapAttrsToStringsSep",
           position: (131, 7),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
              position: (131, 29),
             },
            ],
           },
           Variable {
            identifier: "mkSection",
            position: (131, 33),
           },
           Variable {
            identifier: "attrsOfAttrs",
            position: (131, 43),
           },
          ],
         },
         position: (121, 5),
        },
        position: (120, 6),
       },
       position: (113, 11),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toINIWithGlobalSection",
         position: (164, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "listsAsDuplicateKeys",
          default: Some(
           Variable {
            identifier: "false",
            position: (170, 28),
           },
          ),
         },
         FunctionArgument {
          identifier: "mkKeyValue",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkKeyValueDefault",
             position: (168, 21),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (168, 39),
             },
             String {
              parts: [
               Raw {
                content: "=",
                position: (168, 43),
               },
              ],
             },
            ],
           },
          ),
         },
         FunctionArgument {
          identifier: "mkSectionName",
          default: Some(
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "libStr",
               position: (166, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "escape",
                 position: (166, 35),
                },
               ],
              },
              default: None,
             },
             arguments: [
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "[",
                   position: (166, 45),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "]",
                   position: (166, 49),
                  },
                 ],
                },
               ],
               position: (166, 42),
              },
              Variable {
               identifier: "name",
               position: (166, 54),
              },
             ],
            },
            position: (166, 22),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: Function {
        argument: None,
        arguments: FunctionArguments {
         arguments: [
          FunctionArgument {
           identifier: "sections",
           default: None,
          },
          FunctionArgument {
           identifier: "globalSection",
           default: None,
          },
         ],
         ellipsis: false,
        },
        definition: BinaryOperation {
         operator: Addition,
         operands: [
          IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "globalSection",
              position: (172, 10),
             },
             Map {
              bindings: [],
              recursive: false,
              position: (172, 27),
             },
            ],
            position: (172, 24),
           },
           then: String {
            parts: [],
           },
           else_: BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "toKeyValue",
               position: (174, 13),
              },
              arguments: [
               Map {
                bindings: [
                 Inherit(
                  None,
                  [
                   Raw {
                    content: "mkKeyValue",
                    position: (174, 34),
                   },
                   Raw {
                    content: "listsAsDuplicateKeys",
                    position: (174, 45),
                   },
                  ],
                 ),
                ],
                recursive: false,
                position: (174, 24),
               },
               Variable {
                identifier: "globalSection",
                position: (174, 69),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "\n",
                position: (175, 15),
               },
              ],
             },
            ],
            position: (175, 12),
           },
           position: (172, 7),
          },
          FunctionApplication {
           function: Variable {
            identifier: "toINI",
            position: (176, 8),
           },
           arguments: [
            Map {
             bindings: [
              Inherit(
               None,
               [
                Raw {
                 content: "mkSectionName",
                 position: (176, 24),
                },
                Raw {
                 content: "mkKeyValue",
                 position: (176, 38),
                },
                Raw {
                 content: "listsAsDuplicateKeys",
                 position: (176, 49),
                },
               ],
              ),
             ],
             recursive: false,
             position: (176, 14),
            },
            Variable {
             identifier: "sections",
             position: (176, 73),
            },
           ],
          },
         ],
         position: (176, 5),
        },
        position: (171, 6),
       },
       position: (164, 28),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toGitINI",
         position: (196, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: With {
        expression: Variable {
         identifier: "builtins",
         position: (197, 10),
        },
        target: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkSectionName",
              position: (199, 7),
             },
            ],
           },
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "containsQuote",
                  position: (201, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "libStr",
                  position: (201, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "hasInfix",
                    position: (201, 34),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "\"",
                    position: (201, 45),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (201, 49),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "sections",
                  position: (202, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "libStr",
                  position: (202, 22),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "splitString",
                    position: (202, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: ".",
                    position: (202, 42),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (202, 45),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "section",
                  position: (203, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "head",
                 position: (203, 21),
                },
                arguments: [
                 Variable {
                  identifier: "sections",
                  position: (203, 26),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "subsections",
                  position: (204, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (204, 25),
                },
                arguments: [
                 Variable {
                  identifier: "sections",
                  position: (204, 30),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "subsection",
                  position: (205, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (205, 24),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: ".",
                    position: (205, 42),
                   },
                  ],
                 },
                 Variable {
                  identifier: "subsections",
                  position: (205, 45),
                 },
                ],
               },
              ),
             ],
             target: IfThenElse {
              predicate: BinaryOperation {
               operator: LogicalOr,
               operands: [
                Variable {
                 identifier: "containsQuote",
                 position: (206, 15),
                },
                BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "subsections",
                   position: (206, 32),
                  },
                  List {
                   elements: [],
                   position: (206, 47),
                  },
                 ],
                 position: (206, 44),
                },
               ],
               position: (206, 29),
              },
              then: Variable {
               identifier: "name",
               position: (207, 11),
              },
              else_: String {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "section",
                  position: (209, 15),
                 },
                },
                Raw {
                 content: " \"",
                 position: (209, 23),
                },
                Expression {
                 expression: Variable {
                  identifier: "subsection",
                  position: (209, 27),
                 },
                },
                Raw {
                 content: "\"",
                 position: (209, 38),
                },
               ],
              },
              position: (206, 12),
             },
             position: (200, 9),
            },
            position: (199, 23),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkKeyValue",
              position: (212, 7),
             },
            ],
           },
           Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "mkKeyValue",
                   position: (213, 13),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkKeyValueDefault",
                  position: (213, 26),
                 },
                 arguments: [
                  Map {
                   bindings: [],
                   recursive: false,
                   position: (213, 44),
                  },
                  String {
                   parts: [
                    Raw {
                     content: " = ",
                     position: (213, 49),
                    },
                   ],
                  },
                  Variable {
                   identifier: "k",
                   position: (213, 54),
                  },
                 ],
                },
               ),
              ],
              target: FunctionApplication {
               function: Variable {
                identifier: "concatStringsSep",
                position: (214, 12),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "\n",
                   position: (214, 30),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (214, 35),
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "kv",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: BinaryOperation {
                    operator: Addition,
                    operands: [
                     String {
                      parts: [
                       Raw {
                        content: "\t",
                        position: (214, 45),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "mkKeyValue",
                       position: (214, 51),
                      },
                      arguments: [
                       Variable {
                        identifier: "kv",
                        position: (214, 62),
                       },
                      ],
                     },
                    ],
                    position: (214, 49),
                   },
                   position: (214, 40),
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (214, 67),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "toList",
                       position: (214, 71),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (214, 78),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
              position: (213, 9),
             },
             position: (212, 23),
            },
            position: (212, 20),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "gitFlattenAttrs",
              position: (217, 7),
             },
            ],
           },
           LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "recurse",
                 position: (218, 9),
                },
               ],
              },
              Function {
               argument: Some(
                "path",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "value",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: IfThenElse {
                 predicate: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "isAttrs",
                     position: (219, 14),
                    },
                    arguments: [
                     Variable {
                      identifier: "value",
                      position: (219, 22),
                     },
                    ],
                   },
                   UnaryOperation {
                    operator: Not,
                    operand: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "lib",
                       position: (219, 32),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "isDerivation",
                         position: (219, 36),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (219, 49),
                      },
                     ],
                    },
                    position: (219, 31),
                   },
                  ],
                  position: (219, 28),
                 },
                 then: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (220, 13),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "mapAttrsToList",
                      position: (220, 17),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "name",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: Function {
                     argument: Some(
                      "value",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: FunctionApplication {
                      function: Variable {
                       identifier: "recurse",
                       position: (220, 46),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: Concatenation,
                        operands: [
                         List {
                          elements: [
                           Variable {
                            identifier: "name",
                            position: (220, 57),
                           },
                          ],
                          position: (220, 55),
                         },
                         Variable {
                          identifier: "path",
                          position: (220, 67),
                         },
                        ],
                        position: (220, 64),
                       },
                       Variable {
                        identifier: "value",
                        position: (220, 73),
                       },
                      ],
                     },
                     position: (220, 39),
                    },
                    position: (220, 33),
                   },
                   Variable {
                    identifier: "value",
                    position: (220, 80),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: BinaryOperation {
                   operator: GreaterThan,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "length",
                      position: (221, 19),
                     },
                     arguments: [
                      Variable {
                       identifier: "path",
                       position: (221, 26),
                      },
                     ],
                    },
                    Int {
                     value: 1,
                     position: (221, 33),
                    },
                   ],
                   position: (221, 31),
                  },
                  then: Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "concatStringsSep",
                          position: (222, 15),
                         },
                         arguments: [
                          String {
                           parts: [
                            Raw {
                             content: ".",
                             position: (222, 33),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "lib",
                             position: (222, 37),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "reverseList",
                               position: (222, 41),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            FunctionApplication {
                             function: Variable {
                              identifier: "tail",
                              position: (222, 54),
                             },
                             arguments: [
                              Variable {
                               identifier: "path",
                               position: (222, 59),
                              },
                             ],
                            },
                           ],
                          },
                         ],
                        },
                       },
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "head",
                          position: (222, 69),
                         },
                         arguments: [
                          Variable {
                           identifier: "path",
                           position: (222, 74),
                          },
                         ],
                        },
                       },
                      ],
                     },
                     Variable {
                      identifier: "value",
                      position: (222, 82),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (221, 40),
                  },
                  else_: Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "head",
                          position: (224, 15),
                         },
                         arguments: [
                          Variable {
                           identifier: "path",
                           position: (224, 20),
                          },
                         ],
                        },
                       },
                      ],
                     },
                     Variable {
                      identifier: "value",
                      position: (224, 28),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (223, 18),
                  },
                  position: (221, 16),
                 },
                 position: (219, 11),
                },
                position: (218, 25),
               },
               position: (218, 19),
              },
             ),
            ],
            target: Function {
             argument: Some(
              "attrs",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (226, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "foldl",
                  position: (226, 21),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (226, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "recursiveUpdate",
                   position: (226, 31),
                  },
                 ],
                },
                default: None,
               },
               Map {
                bindings: [],
                recursive: false,
                position: (226, 47),
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (226, 52),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "flatten",
                    position: (226, 56),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "recurse",
                   position: (226, 65),
                  },
                  arguments: [
                   List {
                    elements: [],
                    position: (226, 73),
                   },
                   Variable {
                    identifier: "attrs",
                    position: (226, 77),
                   },
                  ],
                 },
                ],
               },
              ],
             },
             position: (226, 10),
            },
            position: (217, 25),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "toINI_",
              position: (228, 7),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "toINI",
             position: (228, 16),
            },
            arguments: [
             Map {
              bindings: [
               Inherit(
                None,
                [
                 Raw {
                  content: "mkKeyValue",
                  position: (228, 32),
                 },
                 Raw {
                  content: "mkSectionName",
                  position: (228, 43),
                 },
                ],
               ),
              ],
              recursive: false,
              position: (228, 22),
             },
            ],
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "toINI_",
           position: (230, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "gitFlattenAttrs",
             position: (230, 15),
            },
            arguments: [
             Variable {
              identifier: "attrs",
              position: (230, 31),
             },
            ],
           },
          ],
         },
         position: (198, 5),
        },
        position: (197, 5),
       },
       position: (196, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toJSON",
         position: (235, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (235, 16),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "toJSON",
           position: (235, 25),
          },
         ],
        },
        default: None,
       },
       position: (235, 12),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toYAML",
         position: (243, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "toJSON",
         position: (243, 21),
        },
        arguments: [
         Variable {
          identifier: "args",
          position: (243, 28),
         },
        ],
       },
       position: (243, 12),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "withRecursion",
         position: (245, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "throwOnDepthLimit",
          default: Some(
           Variable {
            identifier: "true",
            position: (250, 27),
           },
          ),
         },
         FunctionArgument {
          identifier: "depthLimit",
          default: None,
         },
        ],
        ellipsis: false,
       },
       definition: Assert {
        expression: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (252, 14),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "isInt",
             position: (252, 23),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "depthLimit",
           position: (252, 29),
          },
         ],
        },
        target: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "transform",
              position: (254, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "depth",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: BinaryOperation {
              operator: LogicalAnd,
              operands: [
               BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 Variable {
                  identifier: "depthLimit",
                  position: (255, 14),
                 },
                 Variable {
                  identifier: "null",
                  position: (255, 28),
                 },
                ],
                position: (255, 25),
               },
               BinaryOperation {
                operator: GreaterThan,
                operands: [
                 Variable {
                  identifier: "depth",
                  position: (255, 36),
                 },
                 Variable {
                  identifier: "depthLimit",
                  position: (255, 44),
                 },
                ],
                position: (255, 42),
               },
              ],
              position: (255, 33),
             },
             then: IfThenElse {
              predicate: Variable {
               identifier: "throwOnDepthLimit",
               position: (256, 16),
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "throw",
                position: (257, 20),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "Exceeded maximum eval-depth limit of ",
                   position: (257, 27),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (257, 66),
                    },
                    arguments: [
                     Variable {
                      identifier: "depthLimit",
                      position: (257, 75),
                     },
                    ],
                   },
                  },
                  Raw {
                   content: " while trying to evaluate with `generators.withRecursion'!",
                   position: (257, 86),
                  },
                 ],
                },
               ],
              },
              else_: FunctionApplication {
               function: Variable {
                identifier: "const",
                position: (258, 20),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "<unevaluated>",
                   position: (258, 27),
                  },
                 ],
                },
               ],
              },
              position: (256, 13),
             },
             else_: Variable {
              identifier: "id",
              position: (259, 16),
             },
             position: (255, 11),
            },
            position: (254, 21),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mapAny",
              position: (260, 9),
             },
            ],
           },
           With {
            expression: Variable {
             identifier: "builtins",
             position: (260, 23),
            },
            target: Function {
             argument: Some(
              "depth",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "evalNext",
                    position: (262, 13),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "x",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "mapAny",
                    position: (262, 27),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      Variable {
                       identifier: "depth",
                       position: (262, 35),
                      },
                      Int {
                       value: 1,
                       position: (262, 43),
                      },
                     ],
                     position: (262, 41),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "transform",
                      position: (262, 47),
                     },
                     arguments: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        Variable {
                         identifier: "depth",
                         position: (262, 58),
                        },
                        Int {
                         value: 1,
                         position: (262, 66),
                        },
                       ],
                       position: (262, 64),
                      },
                      Variable {
                       identifier: "x",
                       position: (262, 69),
                      },
                     ],
                    },
                   ],
                  },
                  position: (262, 24),
                 },
                ),
               ],
               target: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isAttrs",
                  position: (264, 16),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (264, 24),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "mapAttrs",
                  position: (264, 31),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "const",
                    position: (264, 41),
                   },
                   arguments: [
                    Variable {
                     identifier: "evalNext",
                     position: (264, 47),
                    },
                   ],
                  },
                  Variable {
                   identifier: "v",
                   position: (264, 57),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isList",
                   position: (265, 21),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (265, 28),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (265, 35),
                  },
                  arguments: [
                   Variable {
                    identifier: "evalNext",
                    position: (265, 39),
                   },
                   Variable {
                    identifier: "v",
                    position: (265, 48),
                   },
                  ],
                 },
                 else_: FunctionApplication {
                  function: Variable {
                   identifier: "transform",
                   position: (266, 18),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: Addition,
                    operands: [
                     Variable {
                      identifier: "depth",
                      position: (266, 29),
                     },
                     Int {
                      value: 1,
                      position: (266, 37),
                     },
                    ],
                    position: (266, 35),
                   },
                   Variable {
                    identifier: "v",
                    position: (266, 40),
                   },
                  ],
                 },
                 position: (265, 18),
                },
                position: (264, 13),
               },
               position: (261, 11),
              },
              position: (260, 40),
             },
             position: (260, 33),
            },
            position: (260, 18),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "mapAny",
           position: (268, 9),
          },
          arguments: [
           Int {
            value: 0,
            position: (268, 16),
           },
          ],
         },
         position: (253, 7),
        },
        position: (252, 7),
       },
       position: (246, 5),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toPretty",
         position: (273, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "multiline",
          default: Some(
           Variable {
            identifier: "true",
            position: (279, 17),
           },
          ),
         },
         FunctionArgument {
          identifier: "allowPrettyValues",
          default: Some(
           Variable {
            identifier: "false",
            position: (277, 25),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "go",
             position: (282, 5),
            },
           ],
          },
          Function {
           argument: Some(
            "indent",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: With {
             expression: Variable {
              identifier: "builtins",
              position: (282, 26),
             },
             target: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "isPath",
                   position: (283, 13),
                  },
                 ],
                },
                Function {
                 argument: Some(
                  "v",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "typeOf",
                     position: (283, 27),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (283, 34),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "path",
                      position: (283, 40),
                     },
                    ],
                   },
                  ],
                  position: (283, 36),
                 },
                 position: (283, 24),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "introSpace",
                   position: (284, 13),
                  },
                 ],
                },
                IfThenElse {
                 predicate: Variable {
                  identifier: "multiline",
                  position: (284, 29),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (284, 45),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "indent",
                     position: (284, 49),
                    },
                   },
                   Raw {
                    content: "  ",
                    position: (284, 56),
                   },
                  ],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: " ",
                    position: (284, 66),
                   },
                  ],
                 },
                 position: (284, 26),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "outroSpace",
                   position: (285, 13),
                  },
                 ],
                },
                IfThenElse {
                 predicate: Variable {
                  identifier: "multiline",
                  position: (285, 29),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (285, 45),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "indent",
                     position: (285, 49),
                    },
                   },
                  ],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: " ",
                    position: (285, 64),
                   },
                  ],
                 },
                 position: (285, 26),
                },
               ),
              ],
              target: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isInt",
                 position: (286, 13),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (286, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (286, 31),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (286, 40),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isFloat",
                  position: (287, 13),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (287, 24),
                  },
                 ],
                },
                then: String {
                 parts: [
                  Raw {
                   content: "~",
                   position: (287, 32),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (287, 35),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (287, 44),
                     },
                    ],
                   },
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isString",
                   position: (288, 13),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (288, 24),
                   },
                  ],
                 },
                 then: LetIn {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "newlineSplits",
                       position: (291, 9),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "filter",
                      position: (291, 25),
                     },
                     arguments: [
                      Function {
                       argument: Some(
                        "v",
                       ),
                       arguments: FunctionArguments {
                        arguments: [],
                        ellipsis: false,
                       },
                       definition: UnaryOperation {
                        operator: Not,
                        operand: FunctionApplication {
                         function: Variable {
                          identifier: "isList",
                          position: (291, 38),
                         },
                         arguments: [
                          Variable {
                           identifier: "v",
                           position: (291, 45),
                          },
                         ],
                        },
                        position: (291, 36),
                       },
                       position: (291, 33),
                      },
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "builtins",
                         position: (291, 49),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "split",
                           position: (291, 58),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "\n",
                           position: (291, 65),
                          },
                         ],
                        },
                        Variable {
                         identifier: "v",
                         position: (291, 69),
                        },
                       ],
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "multilineResult",
                       position: (293, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        BinaryOperation {
                         operator: Addition,
                         operands: [
                          BinaryOperation {
                           operator: Addition,
                           operands: [
                            String {
                             parts: [
                              Raw {
                               content: "''",
                               position: (293, 28),
                              },
                             ],
                            },
                            Variable {
                             identifier: "introSpace",
                             position: (293, 34),
                            },
                           ],
                           position: (293, 32),
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (293, 47),
                           },
                           arguments: [
                            Variable {
                             identifier: "introSpace",
                             position: (293, 64),
                            },
                            FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "lib",
                               position: (293, 76),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "init",
                                 position: (293, 80),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              Variable {
                               identifier: "newlineSplits",
                               position: (293, 85),
                              },
                             ],
                            },
                           ],
                          },
                         ],
                         position: (293, 45),
                        },
                        Variable {
                         identifier: "outroSpace",
                         position: (293, 102),
                        },
                       ],
                       position: (293, 100),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "''",
                         position: (293, 116),
                        },
                       ],
                      },
                     ],
                     position: (293, 113),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "multilineResult'",
                       position: (295, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        BinaryOperation {
                         operator: Addition,
                         operands: [
                          String {
                           parts: [
                            Raw {
                             content: "''",
                             position: (295, 29),
                            },
                           ],
                          },
                          Variable {
                           identifier: "introSpace",
                           position: (295, 35),
                          },
                         ],
                         position: (295, 33),
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "concatStringsSep",
                          position: (295, 48),
                         },
                         arguments: [
                          Variable {
                           identifier: "introSpace",
                           position: (295, 65),
                          },
                          Variable {
                           identifier: "newlineSplits",
                           position: (295, 76),
                          },
                         ],
                        },
                       ],
                       position: (295, 46),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "''",
                         position: (295, 93),
                        },
                       ],
                      },
                     ],
                     position: (295, 90),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "singlelineResult",
                       position: (297, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        String {
                         parts: [
                          Raw {
                           content: "\"",
                           position: (297, 29),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: PropertyAccess {
                          expression: Variable {
                           identifier: "libStr",
                           position: (297, 35),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "escape",
                             position: (297, 42),
                            },
                           ],
                          },
                          default: None,
                         },
                         arguments: [
                          List {
                           elements: [
                            String {
                             parts: [
                              Raw {
                               content: "\"",
                               position: (297, 52),
                              },
                             ],
                            },
                           ],
                           position: (297, 49),
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (297, 59),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\\n",
                               position: (297, 77),
                              },
                             ],
                            },
                            Variable {
                             identifier: "newlineSplits",
                             position: (297, 82),
                            },
                           ],
                          },
                         ],
                        },
                       ],
                       position: (297, 33),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "\"",
                         position: (297, 100),
                        },
                       ],
                      },
                     ],
                     position: (297, 97),
                    },
                   ),
                  ],
                  target: IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     Variable {
                      identifier: "multiline",
                      position: (298, 13),
                     },
                     BinaryOperation {
                      operator: GreaterThan,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "length",
                         position: (298, 26),
                        },
                        arguments: [
                         Variable {
                          identifier: "newlineSplits",
                          position: (298, 33),
                         },
                        ],
                       },
                       Int {
                        value: 1,
                        position: (298, 49),
                       },
                      ],
                      position: (298, 47),
                     },
                    ],
                    position: (298, 23),
                   },
                   then: IfThenElse {
                    predicate: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (299, 12),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "last",
                           position: (299, 16),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "newlineSplits",
                         position: (299, 21),
                        },
                       ],
                      },
                      String {
                       parts: [],
                      },
                     ],
                     position: (299, 35),
                    },
                    then: Variable {
                     identifier: "multilineResult",
                     position: (299, 46),
                    },
                    else_: Variable {
                     identifier: "multilineResult'",
                     position: (299, 67),
                    },
                    position: (299, 9),
                   },
                   else_: Variable {
                    identifier: "singlelineResult",
                    position: (300, 12),
                   },
                   position: (298, 10),
                  },
                  position: (289, 7),
                 },
                 else_: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    Variable {
                     identifier: "true",
                     position: (301, 13),
                    },
                    Variable {
                     identifier: "v",
                     position: (301, 24),
                    },
                   ],
                   position: (301, 19),
                  },
                  then: String {
                   parts: [
                    Raw {
                     content: "true",
                     position: (301, 32),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     Variable {
                      identifier: "false",
                      position: (302, 13),
                     },
                     Variable {
                      identifier: "v",
                      position: (302, 24),
                     },
                    ],
                    position: (302, 19),
                   },
                   then: String {
                    parts: [
                     Raw {
                      content: "false",
                      position: (302, 32),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      Variable {
                       identifier: "null",
                       position: (303, 13),
                      },
                      Variable {
                       identifier: "v",
                       position: (303, 24),
                      },
                     ],
                     position: (303, 19),
                    },
                    then: String {
                     parts: [
                      Raw {
                       content: "null",
                       position: (303, 32),
                      },
                     ],
                    },
                    else_: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "isPath",
                       position: (304, 13),
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (304, 24),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "toString",
                       position: (304, 31),
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (304, 40),
                       },
                      ],
                     },
                     else_: IfThenElse {
                      predicate: FunctionApplication {
                       function: Variable {
                        identifier: "isList",
                        position: (305, 13),
                       },
                       arguments: [
                        Variable {
                         identifier: "v",
                         position: (305, 24),
                        },
                       ],
                      },
                      then: IfThenElse {
                       predicate: BinaryOperation {
                        operator: EqualTo,
                        operands: [
                         Variable {
                          identifier: "v",
                          position: (306, 10),
                         },
                         List {
                          elements: [],
                          position: (306, 15),
                         },
                        ],
                        position: (306, 12),
                       },
                       then: String {
                        parts: [
                         Raw {
                          content: "[ ]",
                          position: (306, 24),
                         },
                        ],
                       },
                       else_: BinaryOperation {
                        operator: Addition,
                        operands: [
                         BinaryOperation {
                          operator: Addition,
                          operands: [
                           BinaryOperation {
                            operator: Addition,
                            operands: [
                             BinaryOperation {
                              operator: Addition,
                              operands: [
                               String {
                                parts: [
                                 Raw {
                                  content: "[",
                                  position: (307, 13),
                                 },
                                ],
                               },
                               Variable {
                                identifier: "introSpace",
                                position: (307, 18),
                               },
                              ],
                              position: (307, 16),
                             },
                             FunctionApplication {
                              function: PropertyAccess {
                               expression: Variable {
                                identifier: "libStr",
                                position: (308, 11),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "concatMapStringsSep",
                                  position: (308, 18),
                                 },
                                ],
                               },
                               default: None,
                              },
                              arguments: [
                               Variable {
                                identifier: "introSpace",
                                position: (308, 38),
                               },
                               FunctionApplication {
                                function: Variable {
                                 identifier: "go",
                                 position: (308, 50),
                                },
                                arguments: [
                                 BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   Variable {
                                    identifier: "indent",
                                    position: (308, 54),
                                   },
                                   String {
                                    parts: [
                                     Raw {
                                      content: "  ",
                                      position: (308, 64),
                                     },
                                    ],
                                   },
                                  ],
                                  position: (308, 61),
                                 },
                                ],
                               },
                               Variable {
                                identifier: "v",
                                position: (308, 70),
                               },
                              ],
                             },
                            ],
                            position: (308, 9),
                           },
                           Variable {
                            identifier: "outroSpace",
                            position: (309, 11),
                           },
                          ],
                          position: (309, 9),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "]",
                            position: (309, 25),
                           },
                          ],
                         },
                        ],
                        position: (309, 22),
                       },
                       position: (306, 7),
                      },
                      else_: IfThenElse {
                       predicate: FunctionApplication {
                        function: Variable {
                         identifier: "isFunction",
                         position: (310, 13),
                        },
                        arguments: [
                         Variable {
                          identifier: "v",
                          position: (310, 24),
                         },
                        ],
                       },
                       then: LetIn {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "fna",
                             position: (311, 11),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "lib",
                             position: (311, 17),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "functionArgs",
                               position: (311, 21),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            Variable {
                             identifier: "v",
                             position: (311, 34),
                            },
                           ],
                          },
                         ),
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "showFnas",
                             position: (312, 11),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (312, 22),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: ", ",
                               position: (312, 40),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "libAttr",
                               position: (312, 45),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "mapAttrsToList",
                                 position: (312, 53),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              Function {
                               argument: Some(
                                "name",
                               ),
                               arguments: FunctionArguments {
                                arguments: [],
                                ellipsis: false,
                               },
                               definition: Function {
                                argument: Some(
                                 "hasDefVal",
                                ),
                                arguments: FunctionArguments {
                                 arguments: [],
                                 ellipsis: false,
                                },
                                definition: IfThenElse {
                                 predicate: Variable {
                                  identifier: "hasDefVal",
                                  position: (313, 45),
                                 },
                                 then: BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   Variable {
                                    identifier: "name",
                                    position: (313, 60),
                                   },
                                   String {
                                    parts: [
                                     Raw {
                                      content: "?",
                                      position: (313, 68),
                                     },
                                    ],
                                   },
                                  ],
                                  position: (313, 65),
                                 },
                                 else_: Variable {
                                  identifier: "name",
                                  position: (313, 76),
                                 },
                                 position: (313, 42),
                                },
                                position: (313, 31),
                               },
                               position: (313, 25),
                              },
                              Variable {
                               identifier: "fna",
                               position: (314, 24),
                              },
                             ],
                            },
                           ],
                          },
                         ),
                        ],
                        target: IfThenElse {
                         predicate: BinaryOperation {
                          operator: EqualTo,
                          operands: [
                           Variable {
                            identifier: "fna",
                            position: (315, 13),
                           },
                           Map {
                            bindings: [],
                            recursive: false,
                            position: (315, 20),
                           },
                          ],
                          position: (315, 17),
                         },
                         then: String {
                          parts: [
                           Raw {
                            content: "<function>",
                            position: (315, 32),
                           },
                          ],
                         },
                         else_: String {
                          parts: [
                           Raw {
                            content: "<function, args: {",
                            position: (316, 32),
                           },
                           Expression {
                            expression: Variable {
                             identifier: "showFnas",
                             position: (316, 52),
                            },
                           },
                           Raw {
                            content: "}>",
                            position: (316, 61),
                           },
                          ],
                         },
                         position: (315, 10),
                        },
                        position: (311, 7),
                       },
                       else_: IfThenElse {
                        predicate: FunctionApplication {
                         function: Variable {
                          identifier: "isAttrs",
                          position: (317, 13),
                         },
                         arguments: [
                          Variable {
                           identifier: "v",
                           position: (317, 24),
                          },
                         ],
                        },
                        then: IfThenElse {
                         predicate: BinaryOperation {
                          operator: LogicalAnd,
                          operands: [
                           BinaryOperation {
                            operator: EqualTo,
                            operands: [
                             FunctionApplication {
                              function: Variable {
                               identifier: "attrNames",
                               position: (319, 10),
                              },
                              arguments: [
                               Variable {
                                identifier: "v",
                                position: (319, 20),
                               },
                              ],
                             },
                             List {
                              elements: [
                               String {
                                parts: [
                                 Raw {
                                  content: "__pretty",
                                  position: (319, 28),
                                 },
                                ],
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "val",
                                  position: (319, 39),
                                 },
                                ],
                               },
                              ],
                              position: (319, 25),
                             },
                            ],
                            position: (319, 22),
                           },
                           Variable {
                            identifier: "allowPrettyValues",
                            position: (319, 49),
                           },
                          ],
                          position: (319, 46),
                         },
                         then: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "v",
                            position: (320, 15),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "__pretty",
                              position: (320, 17),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "v",
                             position: (320, 26),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "val",
                               position: (320, 28),
                              },
                             ],
                            },
                            default: None,
                           },
                          ],
                         },
                         else_: IfThenElse {
                          predicate: BinaryOperation {
                           operator: EqualTo,
                           operands: [
                            Variable {
                             identifier: "v",
                             position: (321, 15),
                            },
                            Map {
                             bindings: [],
                             recursive: false,
                             position: (321, 20),
                            },
                           ],
                           position: (321, 17),
                          },
                          then: String {
                           parts: [
                            Raw {
                             content: "{ }",
                             position: (321, 29),
                            },
                           ],
                          },
                          else_: IfThenElse {
                           predicate: BinaryOperation {
                            operator: LogicalAnd,
                            operands: [
                             HasProperty {
                              expression: Variable {
                               identifier: "v",
                               position: (322, 15),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (322, 19),
                                },
                               ],
                              },
                              position: (322, 17),
                             },
                             BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "v",
                                 position: (322, 27),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "type",
                                   position: (322, 29),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "derivation",
                                  position: (322, 38),
                                 },
                                ],
                               },
                              ],
                              position: (322, 34),
                             },
                            ],
                            position: (322, 24),
                           },
                           then: String {
                            parts: [
                             Raw {
                              content: "<derivation ",
                              position: (323, 10),
                             },
                             Expression {
                              expression: PropertyAccess {
                               expression: Variable {
                                identifier: "v",
                                position: (323, 24),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "drvPath",
                                  position: (323, 26),
                                 },
                                ],
                               },
                               default: Some(
                                String {
                                 parts: [
                                  Raw {
                                   content: "???",
                                   position: (323, 38),
                                  },
                                 ],
                                },
                               ),
                              },
                             },
                             Raw {
                              content: ">",
                              position: (323, 43),
                             },
                            ],
                           },
                           else_: BinaryOperation {
                            operator: Addition,
                            operands: [
                             BinaryOperation {
                              operator: Addition,
                              operands: [
                               BinaryOperation {
                                operator: Addition,
                                operands: [
                                 BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "{",
                                      position: (324, 13),
                                     },
                                    ],
                                   },
                                   Variable {
                                    identifier: "introSpace",
                                    position: (324, 18),
                                   },
                                  ],
                                  position: (324, 16),
                                 },
                                 FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "libStr",
                                    position: (325, 13),
                                   },
                                   attribute_path: AttributePath {
                                    attributes: [
                                     Raw {
                                      content: "concatStringsSep",
                                      position: (325, 20),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   Variable {
                                    identifier: "introSpace",
                                    position: (325, 37),
                                   },
                                   FunctionApplication {
                                    function: PropertyAccess {
                                     expression: Variable {
                                      identifier: "libAttr",
                                      position: (325, 49),
                                     },
                                     attribute_path: AttributePath {
                                      attributes: [
                                       Raw {
                                        content: "mapAttrsToList",
                                        position: (325, 57),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                    arguments: [
                                     Function {
                                      argument: Some(
                                       "name",
                                      ),
                                      arguments: FunctionArguments {
                                       arguments: [],
                                       ellipsis: false,
                                      },
                                      definition: Function {
                                       argument: Some(
                                        "value",
                                       ),
                                       arguments: FunctionArguments {
                                        arguments: [],
                                        ellipsis: false,
                                       },
                                       definition: String {
                                        parts: [
                                         Expression {
                                          expression: FunctionApplication {
                                           function: PropertyAccess {
                                            expression: Variable {
                                             identifier: "libStr",
                                             position: (327, 20),
                                            },
                                            attribute_path: AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "escapeNixIdentifier",
                                               position: (327, 27),
                                              },
                                             ],
                                            },
                                            default: None,
                                           },
                                           arguments: [
                                            Variable {
                                             identifier: "name",
                                             position: (327, 47),
                                            },
                                           ],
                                          },
                                         },
                                         Raw {
                                          content: " = ",
                                          position: (327, 52),
                                         },
                                         Expression {
                                          expression: FunctionApplication {
                                           function: Variable {
                                            identifier: "go",
                                            position: (327, 57),
                                           },
                                           arguments: [
                                            BinaryOperation {
                                             operator: Addition,
                                             operands: [
                                              Variable {
                                               identifier: "indent",
                                               position: (327, 61),
                                              },
                                              String {
                                               parts: [
                                                Raw {
                                                 content: "  ",
                                                 position: (327, 71),
                                                },
                                               ],
                                              },
                                             ],
                                             position: (327, 68),
                                            },
                                            Variable {
                                             identifier: "value",
                                             position: (327, 76),
                                            },
                                           ],
                                          },
                                         },
                                         Raw {
                                          content: ";",
                                          position: (327, 82),
                                         },
                                        ],
                                       },
                                       position: (326, 22),
                                      },
                                      position: (326, 16),
                                     },
                                     Variable {
                                      identifier: "v",
                                      position: (327, 86),
                                     },
                                    ],
                                   },
                                  ],
                                 },
                                ],
                                position: (325, 11),
                               },
                               Variable {
                                identifier: "outroSpace",
                                position: (328, 11),
                               },
                              ],
                              position: (328, 9),
                             },
                             String {
                              parts: [
                               Raw {
                                content: "}",
                                position: (328, 25),
                               },
                              ],
                             },
                            ],
                            position: (328, 22),
                           },
                           position: (322, 12),
                          },
                          position: (321, 12),
                         },
                         position: (319, 7),
                        },
                        else_: FunctionApplication {
                         function: Variable {
                          identifier: "abort",
                          position: (329, 10),
                         },
                         arguments: [
                          String {
                           parts: [
                            Raw {
                             content: "generators.toPretty: should never happen (v = ",
                             position: (329, 17),
                            },
                            Expression {
                             expression: Variable {
                              identifier: "v",
                              position: (329, 65),
                             },
                            },
                            Raw {
                             content: ")",
                             position: (329, 67),
                            },
                           ],
                          },
                         ],
                        },
                        position: (317, 10),
                       },
                       position: (310, 10),
                      },
                      position: (305, 10),
                     },
                     position: (304, 10),
                    },
                    position: (303, 10),
                   },
                   position: (302, 10),
                  },
                  position: (301, 10),
                 },
                 position: (288, 10),
                },
                position: (287, 10),
               },
               position: (286, 8),
              },
              position: (283, 5),
             },
             position: (282, 21),
            },
            position: (282, 18),
           },
           position: (282, 10),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "go",
          position: (330, 6),
         },
         arguments: [
          String {
           parts: [],
          },
         ],
        },
        position: (281, 5),
       },
       position: (273, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toPlist",
         position: (333, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "isFloat",
              position: (334, 5),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (334, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "isFloat",
               position: (334, 24),
              },
             ],
            },
            default: Some(
             Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Variable {
               identifier: "false",
               position: (334, 39),
              },
              position: (334, 36),
             },
            ),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "expr",
              position: (335, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: With {
              expression: Variable {
               identifier: "builtins",
               position: (335, 26),
              },
              target: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "x",
                  position: (336, 10),
                 },
                 Variable {
                  identifier: "null",
                  position: (336, 15),
                 },
                ],
                position: (336, 12),
               },
               then: String {
                parts: [],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isBool",
                  position: (337, 10),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (337, 17),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "bool",
                  position: (337, 26),
                 },
                 arguments: [
                  Variable {
                   identifier: "ind",
                   position: (337, 31),
                  },
                  Variable {
                   identifier: "x",
                   position: (337, 35),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isInt",
                   position: (338, 10),
                  },
                  arguments: [
                   Variable {
                    identifier: "x",
                    position: (338, 16),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "int",
                   position: (338, 26),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (338, 30),
                   },
                   Variable {
                    identifier: "x",
                    position: (338, 34),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isString",
                    position: (339, 10),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (339, 19),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "str",
                    position: (339, 26),
                   },
                   arguments: [
                    Variable {
                     identifier: "ind",
                     position: (339, 30),
                    },
                    Variable {
                     identifier: "x",
                     position: (339, 34),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isList",
                     position: (340, 10),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (340, 17),
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "list",
                     position: (340, 26),
                    },
                    arguments: [
                     Variable {
                      identifier: "ind",
                      position: (340, 31),
                     },
                     Variable {
                      identifier: "x",
                      position: (340, 35),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: FunctionApplication {
                     function: Variable {
                      identifier: "isAttrs",
                      position: (341, 10),
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (341, 18),
                      },
                     ],
                    },
                    then: FunctionApplication {
                     function: Variable {
                      identifier: "attrs",
                      position: (341, 26),
                     },
                     arguments: [
                      Variable {
                       identifier: "ind",
                       position: (341, 32),
                      },
                      Variable {
                       identifier: "x",
                       position: (341, 36),
                      },
                     ],
                    },
                    else_: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "isFloat",
                       position: (342, 10),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (342, 18),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "float",
                       position: (342, 26),
                      },
                      arguments: [
                       Variable {
                        identifier: "ind",
                        position: (342, 32),
                       },
                       Variable {
                        identifier: "x",
                        position: (342, 36),
                       },
                      ],
                     },
                     else_: FunctionApplication {
                      function: Variable {
                       identifier: "abort",
                       position: (343, 7),
                      },
                      arguments: [
                       String {
                        parts: [
                         Raw {
                          content: "generators.toPlist: should never happen (v = ",
                          position: (343, 14),
                         },
                         Expression {
                          expression: Variable {
                           identifier: "v",
                           position: (343, 61),
                          },
                         },
                         Raw {
                          content: ")",
                          position: (343, 63),
                         },
                        ],
                       },
                      ],
                     },
                     position: (342, 7),
                    },
                    position: (341, 7),
                   },
                   position: (340, 7),
                  },
                  position: (339, 7),
                 },
                 position: (338, 7),
                },
                position: (337, 7),
               },
               position: (336, 7),
              },
              position: (335, 21),
             },
             position: (335, 17),
            },
            position: (335, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "literal",
              position: (345, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: Addition,
              operands: [
               Variable {
                identifier: "ind",
                position: (345, 23),
               },
               Variable {
                identifier: "x",
                position: (345, 29),
               },
              ],
              position: (345, 27),
             },
             position: (345, 20),
            },
            position: (345, 15),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "bool",
              position: (347, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (347, 20),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (347, 28),
               },
               IfThenElse {
                predicate: Variable {
                 identifier: "x",
                 position: (347, 37),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "<true/>",
                   position: (347, 45),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "<false/>",
                   position: (347, 60),
                  },
                 ],
                },
                position: (347, 34),
               },
              ],
             },
             position: (347, 17),
            },
            position: (347, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "int",
              position: (348, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (348, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (348, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<integer>",
                  position: (348, 32),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (348, 43),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (348, 52),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "</integer>",
                  position: (348, 54),
                 },
                ],
               },
              ],
             },
             position: (348, 16),
            },
            position: (348, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "str",
              position: (349, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (349, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (349, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<string>",
                  position: (349, 32),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "x",
                   position: (349, 42),
                  },
                 },
                 Raw {
                  content: "</string>",
                  position: (349, 44),
                 },
                ],
               },
              ],
             },
             position: (349, 16),
            },
            position: (349, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "key",
              position: (350, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (350, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (350, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<key>",
                  position: (350, 32),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "x",
                   position: (350, 39),
                  },
                 },
                 Raw {
                  content: "</key>",
                  position: (350, 41),
                 },
                ],
               },
              ],
             },
             position: (350, 16),
            },
            position: (350, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "float",
              position: (351, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (351, 21),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (351, 29),
               },
               String {
                parts: [
                 Raw {
                  content: "<real>",
                  position: (351, 34),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (351, 42),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (351, 51),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "</real>",
                  position: (351, 53),
                 },
                ],
               },
              ],
             },
             position: (351, 18),
            },
            position: (351, 13),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "indent",
              position: (353, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "expr",
              position: (353, 19),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "\t",
                 position: (353, 25),
                },
                Expression {
                 expression: Variable {
                  identifier: "ind",
                  position: (353, 29),
                 },
                },
               ],
              },
             ],
            },
            position: (353, 14),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "item",
              position: (355, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "libStr",
               position: (355, 17),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "concatMapStringsSep",
                 position: (355, 24),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "\n",
                 position: (355, 45),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "indent",
                position: (355, 50),
               },
               arguments: [
                Variable {
                 identifier: "ind",
                 position: (355, 57),
                },
               ],
              },
             ],
            },
            position: (355, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "list",
              position: (357, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (357, 20),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "concatStringsSep",
                  position: (357, 27),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                  position: (357, 45),
                 },
                ],
               },
               List {
                elements: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (358, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (358, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "<array>",
                      position: (358, 21),
                     },
                    ],
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "item",
                   position: (359, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (359, 13),
                   },
                   Variable {
                    identifier: "x",
                    position: (359, 17),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (360, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (360, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "</array>",
                      position: (360, 21),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (357, 49),
               },
              ],
             },
             position: (357, 17),
            },
            position: (357, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attrs",
              position: (363, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (363, 21),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "concatStringsSep",
                  position: (363, 28),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                  position: (363, 46),
                 },
                ],
               },
               List {
                elements: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (364, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (364, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "<dict>",
                      position: (364, 21),
                     },
                    ],
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "attr",
                   position: (365, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (365, 13),
                   },
                   Variable {
                    identifier: "x",
                    position: (365, 17),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (366, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (366, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "</dict>",
                      position: (366, 21),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (363, 50),
               },
              ],
             },
             position: (363, 18),
            },
            position: (363, 13),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attr",
              position: (369, 5),
             },
            ],
           },
           LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "attrFilter",
                 position: (369, 16),
                },
               ],
              },
              Function {
               argument: Some(
                "name",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "value",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "name",
                     position: (369, 42),
                    },
                    String {
                     parts: [
                      Raw {
                       content: "_module",
                       position: (369, 51),
                      },
                     ],
                    },
                   ],
                   position: (369, 47),
                  },
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "value",
                     position: (369, 63),
                    },
                    Variable {
                     identifier: "null",
                     position: (369, 72),
                    },
                   ],
                   position: (369, 69),
                  },
                 ],
                 position: (369, 60),
                },
                position: (369, 35),
               },
               position: (369, 29),
              },
             ),
            ],
            target: Function {
             argument: Some(
              "ind",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "libStr",
                 position: (370, 16),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "concatStringsSep",
                   position: (370, 23),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "\n",
                   position: (370, 41),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (370, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "flatten",
                     position: (370, 50),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (370, 59),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "mapAttrsToList",
                       position: (370, 63),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Function {
                     argument: Some(
                      "name",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: Function {
                      argument: Some(
                       "value",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (371, 21),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "optional",
                           position: (371, 25),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "attrFilter",
                          position: (371, 35),
                         },
                         arguments: [
                          Variable {
                           identifier: "name",
                           position: (371, 46),
                          },
                          Variable {
                           identifier: "value",
                           position: (371, 51),
                          },
                         ],
                        },
                        List {
                         elements: [
                          FunctionApplication {
                           function: Variable {
                            identifier: "key",
                            position: (372, 8),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\t",
                               position: (372, 13),
                              },
                              Expression {
                               expression: Variable {
                                identifier: "ind",
                                position: (372, 17),
                               },
                              },
                             ],
                            },
                            Variable {
                             identifier: "name",
                             position: (372, 23),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "expr",
                            position: (373, 8),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\t",
                               position: (373, 14),
                              },
                              Expression {
                               expression: Variable {
                                identifier: "ind",
                                position: (373, 18),
                               },
                              },
                             ],
                            },
                            Variable {
                             identifier: "value",
                             position: (373, 24),
                            },
                           ],
                          },
                         ],
                         position: (371, 58),
                        },
                       ],
                      },
                      position: (371, 14),
                     },
                     position: (371, 8),
                    },
                    Variable {
                     identifier: "x",
                     position: (374, 8),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
              position: (370, 13),
             },
             position: (370, 8),
            },
            position: (369, 12),
           },
          ),
         ],
         target: String {
          parts: [
           Raw {
            content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n",
            position: (376, 8),
           },
           Expression {
            expression: FunctionApplication {
             function: Variable {
              identifier: "expr",
              position: (379, 3),
             },
             arguments: [
              String {
               parts: [],
              },
              Variable {
               identifier: "v",
               position: (379, 11),
              },
             ],
            },
           },
           Raw {
            content: "\n</plist>",
            position: (379, 13),
           },
          ],
         },
         position: (333, 20),
        },
        position: (333, 17),
       },
       position: (333, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toDhall",
         position: (386, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: With {
         expression: Variable {
          identifier: "builtins",
          position: (387, 10),
         },
         target: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "concatItems",
               position: (388, 9),
              },
             ],
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (388, 23),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "strings",
                 position: (388, 27),
                },
                Raw {
                 content: "concatStringsSep",
                 position: (388, 35),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: ", ",
                 position: (388, 53),
                },
               ],
              },
             ],
            },
           ),
          ],
          target: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isAttrs",
             position: (389, 11),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (389, 19),
             },
            ],
           },
           then: String {
            parts: [
             Raw {
              content: "{ ",
              position: (390, 8),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "concatItems",
                position: (391, 9),
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (391, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "attrsets",
                     position: (391, 26),
                    },
                    Raw {
                     content: "mapAttrsToList",
                     position: (391, 35),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "key",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Function {
                    argument: Some(
                     "value",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: String {
                     parts: [
                      Expression {
                       expression: Variable {
                        identifier: "key",
                        position: (392, 27),
                       },
                      },
                      Raw {
                       content: " = ",
                       position: (392, 31),
                      },
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "toDhall",
                         position: (392, 36),
                        },
                        arguments: [
                         Variable {
                          identifier: "args",
                          position: (392, 44),
                         },
                         Variable {
                          identifier: "value",
                          position: (392, 49),
                         },
                        ],
                       },
                      },
                     ],
                    },
                    position: (392, 17),
                   },
                   position: (392, 12),
                  },
                  Variable {
                   identifier: "v",
                   position: (392, 58),
                  },
                 ],
                },
               ],
              },
             },
             Raw {
              content: " }",
              position: (393, 8),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "isList",
              position: (394, 13),
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (394, 20),
              },
             ],
            },
            then: String {
             parts: [
              Raw {
               content: "[ ",
               position: (395, 8),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatItems",
                 position: (395, 12),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (395, 25),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "toDhall",
                     position: (395, 30),
                    },
                    arguments: [
                     Variable {
                      identifier: "args",
                      position: (395, 38),
                     },
                    ],
                   },
                   Variable {
                    identifier: "v",
                    position: (395, 44),
                   },
                  ],
                 },
                ],
               },
              },
              Raw {
               content: " ]",
               position: (395, 47),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isInt",
               position: (396, 13),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (396, 19),
               },
              ],
             },
             then: String {
              parts: [
               Expression {
                expression: IfThenElse {
                 predicate: BinaryOperation {
                  operator: LessThan,
                  operands: [
                   Variable {
                    identifier: "v",
                    position: (397, 13),
                   },
                   Int {
                    value: 0,
                    position: (397, 17),
                   },
                  ],
                  position: (397, 15),
                 },
                 then: String {
                  parts: [],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: "+",
                    position: (397, 33),
                   },
                  ],
                 },
                 position: (397, 10),
                },
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "toString",
                  position: (397, 38),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (397, 47),
                  },
                 ],
                },
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "isBool",
                position: (398, 13),
               },
               arguments: [
                Variable {
                 identifier: "v",
                 position: (398, 20),
                },
               ],
              },
              then: IfThenElse {
               predicate: Variable {
                identifier: "v",
                position: (399, 11),
               },
               then: String {
                parts: [
                 Raw {
                  content: "True",
                  position: (399, 19),
                 },
                ],
               },
               else_: String {
                parts: [
                 Raw {
                  content: "False",
                  position: (399, 31),
                 },
                ],
               },
               position: (399, 8),
              },
              else_: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isFunction",
                 position: (400, 13),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (400, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "abort",
                 position: (401, 7),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "generators.toDhall: cannot convert a function to Dhall",
                    position: (401, 14),
                   },
                  ],
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isNull",
                  position: (402, 13),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (402, 20),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "abort",
                  position: (403, 7),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "generators.toDhall: cannot convert a null to Dhall",
                     position: (403, 14),
                    },
                   ],
                  },
                 ],
                },
                else_: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (405, 7),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "toJSON",
                     position: (405, 16),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (405, 23),
                  },
                 ],
                },
                position: (402, 10),
               },
               position: (400, 10),
              },
              position: (398, 10),
             },
             position: (396, 10),
            },
            position: (394, 10),
           },
           position: (389, 8),
          },
          position: (388, 5),
         },
         position: (387, 5),
        },
        position: (386, 23),
       },
       position: (386, 13),
      },
     ),
    ],
    recursive: true,
    position: (25, 1),
   },
   position: (18, 1),
  },
  position: (17, 1),
 },
 position: (16, 1),
}