---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: PropertyAccess {
   expression: Variable {
    identifier: "lib",
    position: (17, 7),
   },
   attribute_path: AttributePath {
    attributes: [
     Raw {
      content: "trivial",
      position: (17, 12),
     },
    ],
   },
   default: None,
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "libStr",
        position: (19, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (19, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (19, 16),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "libAttr",
        position: (20, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (20, 13),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrsets",
         position: (20, 17),
        },
       ],
      },
      default: None,
     },
    ),
    Inherit(
     Some(
      Variable {
       identifier: "lib",
       position: (22, 12),
      },
     ),
     [
      Raw {
       content: "isFunction",
       position: (22, 17),
      },
     ],
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mkValueStringDefault",
         position: (33, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: With {
         expression: Variable {
          identifier: "builtins",
          position: (33, 38),
         },
         target: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "err",
               position: (34, 9),
              },
             ],
            },
            Function {
             argument: Some(
              "t",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "abort",
                position: (34, 21),
               },
               arguments: [
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  String {
                   parts: [
                    Raw {
                     content: "generators.mkValueStringDefault: ",
                     position: (35, 13),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "t",
                      position: (36, 15),
                     },
                    },
                    Raw {
                     content: " not supported: ",
                     position: (36, 17),
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "toPretty",
                       position: (36, 35),
                      },
                      arguments: [
                       Map {
                        bindings: [],
                        recursive: false,
                        position: (36, 44),
                       },
                       Variable {
                        identifier: "v",
                        position: (36, 47),
                       },
                      ],
                     },
                    },
                   ],
                  },
                 ],
                 position: (35, 48),
                },
               ],
              },
              position: (34, 18),
             },
             position: (34, 15),
            },
           ),
          ],
          target: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isInt",
             position: (37, 13),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (37, 24),
             },
            ],
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "toString",
             position: (37, 31),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (37, 40),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (39, 13),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isDerivation",
                 position: (39, 17),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (39, 30),
              },
             ],
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "toString",
              position: (39, 37),
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (39, 46),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isString",
               position: (41, 13),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (41, 24),
               },
              ],
             },
             then: Variable {
              identifier: "v",
              position: (41, 31),
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: EqualTo,
               operands: [
                Variable {
                 identifier: "true",
                 position: (43, 13),
                },
                Variable {
                 identifier: "v",
                 position: (43, 24),
                },
               ],
               position: (43, 19),
              },
              then: String {
               parts: [
                Raw {
                 content: "true",
                 position: (43, 32),
                },
               ],
              },
              else_: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "false",
                  position: (45, 13),
                 },
                 Variable {
                  identifier: "v",
                  position: (45, 24),
                 },
                ],
                position: (45, 19),
               },
               then: String {
                parts: [
                 Raw {
                  content: "false",
                  position: (45, 32),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "null",
                   position: (46, 13),
                  },
                  Variable {
                   identifier: "v",
                   position: (46, 24),
                  },
                 ],
                 position: (46, 19),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "null",
                   position: (46, 32),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isList",
                   position: (48, 13),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (48, 24),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "err",
                   position: (48, 31),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "lists",
                      position: (48, 36),
                     },
                    ],
                   },
                   Variable {
                    identifier: "v",
                    position: (48, 43),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isAttrs",
                    position: (50, 13),
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (50, 24),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "err",
                    position: (50, 31),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "attrsets",
                       position: (50, 36),
                      },
                     ],
                    },
                    Variable {
                     identifier: "v",
                     position: (50, 46),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isFunction",
                     position: (52, 13),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (52, 24),
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "err",
                     position: (52, 31),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "functions",
                        position: (52, 36),
                       },
                      ],
                     },
                     Variable {
                      identifier: "v",
                      position: (52, 47),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: FunctionApplication {
                     function: Variable {
                      identifier: "isFloat",
                      position: (56, 13),
                     },
                     arguments: [
                      Variable {
                       identifier: "v",
                       position: (56, 24),
                      },
                     ],
                    },
                    then: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "libStr",
                       position: (56, 31),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "floatToString",
                         position: (56, 38),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "v",
                       position: (56, 52),
                      },
                     ],
                    },
                    else_: FunctionApplication {
                     function: Variable {
                      identifier: "err",
                      position: (57, 10),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "this value is",
                         position: (57, 15),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (57, 31),
                       },
                       arguments: [
                        Variable {
                         identifier: "v",
                         position: (57, 40),
                        },
                       ],
                      },
                     ],
                    },
                    position: (56, 10),
                   },
                   position: (52, 10),
                  },
                  position: (50, 10),
                 },
                 position: (48, 10),
                },
                position: (46, 10),
               },
               position: (45, 10),
              },
              position: (43, 10),
             },
             position: (41, 10),
            },
            position: (39, 10),
           },
           position: (37, 10),
          },
          position: (34, 5),
         },
         position: (33, 33),
        },
        position: (33, 30),
       },
       position: (33, 26),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mkKeyValueDefault",
         position: (69, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "mkValueString",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkValueStringDefault",
             position: (70, 21),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (70, 42),
             },
            ],
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "sep",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "k",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "v",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: String {
           parts: [
            Expression {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (72, 8),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "escape",
                  position: (72, 15),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               List {
                elements: [
                 Variable {
                  identifier: "sep",
                  position: (72, 23),
                 },
                ],
                position: (72, 22),
               },
               Variable {
                identifier: "k",
                position: (72, 28),
               },
              ],
             },
            },
            Expression {
             expression: Variable {
              identifier: "sep",
              position: (72, 32),
             },
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "mkValueString",
               position: (72, 38),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (72, 52),
               },
              ],
             },
            },
           ],
          },
          position: (71, 14),
         },
         position: (71, 11),
        },
        position: (71, 6),
       },
       position: (69, 23),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toKeyValue",
         position: (82, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "listsAsDuplicateKeys",
          default: Some(
           Variable {
            identifier: "false",
            position: (84, 28),
           },
          ),
         },
         FunctionArgument {
          identifier: "mkKeyValue",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkKeyValueDefault",
             position: (83, 18),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (83, 36),
             },
             String {
              parts: [
               Raw {
                content: "=",
                position: (83, 40),
               },
              ],
             },
            ],
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "mkLine",
             position: (86, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "k",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: BinaryOperation {
             operator: Addition,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "mkKeyValue",
                position: (86, 22),
               },
               arguments: [
                Variable {
                 identifier: "k",
                 position: (86, 33),
                },
                Variable {
                 identifier: "v",
                 position: (86, 35),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "\n",
                 position: (86, 40),
                },
               ],
              },
             ],
             position: (86, 37),
            },
            position: (86, 19),
           },
           position: (86, 16),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "mkLines",
             position: (87, 7),
            },
           ],
          },
          IfThenElse {
           predicate: Variable {
            identifier: "listsAsDuplicateKeys",
            position: (87, 20),
           },
           then: Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (88, 20),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mkLine",
                 position: (88, 25),
                },
                arguments: [
                 Variable {
                  identifier: "k",
                  position: (88, 32),
                 },
                ],
               },
               IfThenElse {
                predicate: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (88, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "isList",
                     position: (88, 43),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (88, 50),
                  },
                 ],
                },
                then: Variable {
                 identifier: "v",
                 position: (88, 57),
                },
                else_: List {
                 elements: [
                  Variable {
                   identifier: "v",
                   position: (88, 65),
                  },
                 ],
                 position: (88, 64),
                },
                position: (88, 36),
               },
              ],
             },
             position: (88, 17),
            },
            position: (88, 14),
           },
           else_: Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: List {
              elements: [
               FunctionApplication {
                function: Variable {
                 identifier: "mkLine",
                 position: (89, 23),
                },
                arguments: [
                 Variable {
                  identifier: "k",
                  position: (89, 30),
                 },
                 Variable {
                  identifier: "v",
                  position: (89, 32),
                 },
                ],
               },
              ],
              position: (89, 20),
             },
             position: (89, 17),
            },
            position: (89, 14),
           },
           position: (87, 17),
          },
         ),
        ],
        target: Function {
         argument: Some(
          "attrs",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "libStr",
            position: (90, 13),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "concatStrings",
              position: (90, 20),
             },
            ],
           },
           default: None,
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (90, 35),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "concatLists",
                position: (90, 39),
               },
              ],
             },
             default: None,
            },
            arguments: [
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libAttr",
                position: (90, 52),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mapAttrsToList",
                  position: (90, 60),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "mkLines",
                position: (90, 75),
               },
               Variable {
                identifier: "attrs",
                position: (90, 83),
               },
              ],
             },
            ],
           },
          ],
         },
         position: (90, 6),
        },
        position: (86, 3),
       },
       position: (82, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toINI",
         position: (113, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "listsAsDuplicateKeys",
          default: Some(
           Variable {
            identifier: "false",
            position: (119, 28),
           },
          ),
         },
         FunctionArgument {
          identifier: "mkKeyValue",
          default: Some(
           FunctionApplication {
            function: Variable {
             identifier: "mkKeyValueDefault",
             position: (117, 21),
            },
            arguments: [
             Map {
              bindings: [],
              recursive: false,
              position: (117, 39),
             },
             String {
              parts: [
               Raw {
                content: "=",
                position: (117, 43),
               },
              ],
             },
            ],
           },
          ),
         },
         FunctionArgument {
          identifier: "mkSectionName",
          default: Some(
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "libStr",
               position: (115, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "escape",
                 position: (115, 35),
                },
               ],
              },
              default: None,
             },
             arguments: [
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "[",
                   position: (115, 45),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "]",
                   position: (115, 49),
                  },
                 ],
                },
               ],
               position: (115, 42),
              },
              Variable {
               identifier: "name",
               position: (115, 54),
              },
             ],
            },
            position: (115, 22),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "attrsOfAttrs",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mapAttrsToStringsSep",
              position: (123, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "sep",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "mapFn",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "attrs",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "libStr",
                 position: (124, 11),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "concatStringsSep",
                   position: (124, 18),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "sep",
                 position: (124, 35),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "libAttr",
                   position: (125, 14),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "mapAttrsToList",
                     position: (125, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "mapFn",
                   position: (125, 37),
                  },
                  Variable {
                   identifier: "attrs",
                   position: (125, 43),
                  },
                 ],
                },
               ],
              },
              position: (123, 44),
             },
             position: (123, 37),
            },
            position: (123, 32),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkSection",
              position: (126, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "sectName",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "sectValues",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: Addition,
              operands: [
               String {
                parts: [
                 Raw {
                  content: "[",
                  position: (127, 1),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "mkSectionName",
                    position: (127, 14),
                   },
                   arguments: [
                    Variable {
                     identifier: "sectName",
                     position: (127, 28),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "]\n",
                  position: (127, 37),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "toKeyValue",
                 position: (128, 14),
                },
                arguments: [
                 Map {
                  bindings: [
                   Inherit(
                    None,
                    [
                     Raw {
                      content: "mkKeyValue",
                      position: (128, 35),
                     },
                     Raw {
                      content: "listsAsDuplicateKeys",
                      position: (128, 46),
                     },
                    ],
                   ),
                  ],
                  recursive: false,
                  position: (128, 25),
                 },
                 Variable {
                  identifier: "sectValues",
                  position: (128, 70),
                 },
                ],
               },
              ],
              position: (128, 12),
             },
             position: (126, 31),
            },
            position: (126, 21),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "mapAttrsToStringsSep",
           position: (131, 7),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
              position: (131, 29),
             },
            ],
           },
           Variable {
            identifier: "mkSection",
            position: (131, 33),
           },
           Variable {
            identifier: "attrsOfAttrs",
            position: (131, 43),
           },
          ],
         },
         position: (121, 5),
        },
        position: (120, 6),
       },
       position: (113, 11),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toGitINI",
         position: (151, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: With {
        expression: Variable {
         identifier: "builtins",
         position: (152, 10),
        },
        target: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkSectionName",
              position: (154, 7),
             },
            ],
           },
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "containsQuote",
                  position: (156, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "libStr",
                  position: (156, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "hasInfix",
                    position: (156, 34),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "\"",
                    position: (156, 45),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (156, 49),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "sections",
                  position: (157, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "libStr",
                  position: (157, 22),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "splitString",
                    position: (157, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: ".",
                    position: (157, 42),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (157, 45),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "section",
                  position: (158, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "head",
                 position: (158, 21),
                },
                arguments: [
                 Variable {
                  identifier: "sections",
                  position: (158, 26),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "subsections",
                  position: (159, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (159, 25),
                },
                arguments: [
                 Variable {
                  identifier: "sections",
                  position: (159, 30),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "subsection",
                  position: (160, 11),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (160, 24),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: ".",
                    position: (160, 42),
                   },
                  ],
                 },
                 Variable {
                  identifier: "subsections",
                  position: (160, 45),
                 },
                ],
               },
              ),
             ],
             target: IfThenElse {
              predicate: BinaryOperation {
               operator: LogicalOr,
               operands: [
                Variable {
                 identifier: "containsQuote",
                 position: (161, 15),
                },
                BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "subsections",
                   position: (161, 32),
                  },
                  List {
                   elements: [],
                   position: (161, 47),
                  },
                 ],
                 position: (161, 44),
                },
               ],
               position: (161, 29),
              },
              then: Variable {
               identifier: "name",
               position: (162, 11),
              },
              else_: String {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "section",
                  position: (164, 15),
                 },
                },
                Raw {
                 content: " \"",
                 position: (164, 23),
                },
                Expression {
                 expression: Variable {
                  identifier: "subsection",
                  position: (164, 27),
                 },
                },
                Raw {
                 content: "\"",
                 position: (164, 38),
                },
               ],
              },
              position: (161, 12),
             },
             position: (155, 9),
            },
            position: (154, 23),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkKeyValue",
              position: (167, 7),
             },
            ],
           },
           Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "mkKeyValue",
                   position: (168, 13),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkKeyValueDefault",
                  position: (168, 26),
                 },
                 arguments: [
                  Map {
                   bindings: [],
                   recursive: false,
                   position: (168, 44),
                  },
                  String {
                   parts: [
                    Raw {
                     content: " = ",
                     position: (168, 49),
                    },
                   ],
                  },
                  Variable {
                   identifier: "k",
                   position: (168, 54),
                  },
                 ],
                },
               ),
              ],
              target: FunctionApplication {
               function: Variable {
                identifier: "concatStringsSep",
                position: (169, 12),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "\n",
                   position: (169, 30),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (169, 35),
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "kv",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: BinaryOperation {
                    operator: Addition,
                    operands: [
                     String {
                      parts: [
                       Raw {
                        content: "\t",
                        position: (169, 45),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "mkKeyValue",
                       position: (169, 51),
                      },
                      arguments: [
                       Variable {
                        identifier: "kv",
                        position: (169, 62),
                       },
                      ],
                     },
                    ],
                    position: (169, 49),
                   },
                   position: (169, 40),
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (169, 67),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "toList",
                       position: (169, 71),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (169, 78),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
              position: (168, 9),
             },
             position: (167, 23),
            },
            position: (167, 20),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "gitFlattenAttrs",
              position: (172, 7),
             },
            ],
           },
           LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "recurse",
                 position: (173, 9),
                },
               ],
              },
              Function {
               argument: Some(
                "path",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "value",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: IfThenElse {
                 predicate: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "isAttrs",
                     position: (174, 14),
                    },
                    arguments: [
                     Variable {
                      identifier: "value",
                      position: (174, 22),
                     },
                    ],
                   },
                   UnaryOperation {
                    operator: Not,
                    operand: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "lib",
                       position: (174, 32),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "isDerivation",
                         position: (174, 36),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (174, 49),
                      },
                     ],
                    },
                    position: (174, 31),
                   },
                  ],
                  position: (174, 28),
                 },
                 then: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (175, 13),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "mapAttrsToList",
                      position: (175, 17),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "name",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: Function {
                     argument: Some(
                      "value",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: FunctionApplication {
                      function: Variable {
                       identifier: "recurse",
                       position: (175, 46),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: Concatenation,
                        operands: [
                         List {
                          elements: [
                           Variable {
                            identifier: "name",
                            position: (175, 57),
                           },
                          ],
                          position: (175, 55),
                         },
                         Variable {
                          identifier: "path",
                          position: (175, 67),
                         },
                        ],
                        position: (175, 64),
                       },
                       Variable {
                        identifier: "value",
                        position: (175, 73),
                       },
                      ],
                     },
                     position: (175, 39),
                    },
                    position: (175, 33),
                   },
                   Variable {
                    identifier: "value",
                    position: (175, 80),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: BinaryOperation {
                   operator: GreaterThan,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "length",
                      position: (176, 19),
                     },
                     arguments: [
                      Variable {
                       identifier: "path",
                       position: (176, 26),
                      },
                     ],
                    },
                    Int {
                     value: 1,
                     position: (176, 33),
                    },
                   ],
                   position: (176, 31),
                  },
                  then: Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "concatStringsSep",
                          position: (177, 15),
                         },
                         arguments: [
                          String {
                           parts: [
                            Raw {
                             content: ".",
                             position: (177, 33),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "lib",
                             position: (177, 37),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "reverseList",
                               position: (177, 41),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            FunctionApplication {
                             function: Variable {
                              identifier: "tail",
                              position: (177, 54),
                             },
                             arguments: [
                              Variable {
                               identifier: "path",
                               position: (177, 59),
                              },
                             ],
                            },
                           ],
                          },
                         ],
                        },
                       },
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "head",
                          position: (177, 69),
                         },
                         arguments: [
                          Variable {
                           identifier: "path",
                           position: (177, 74),
                          },
                         ],
                        },
                       },
                      ],
                     },
                     Variable {
                      identifier: "value",
                      position: (177, 82),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (176, 40),
                  },
                  else_: Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "head",
                          position: (179, 15),
                         },
                         arguments: [
                          Variable {
                           identifier: "path",
                           position: (179, 20),
                          },
                         ],
                        },
                       },
                      ],
                     },
                     Variable {
                      identifier: "value",
                      position: (179, 28),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (178, 18),
                  },
                  position: (176, 16),
                 },
                 position: (174, 11),
                },
                position: (173, 25),
               },
               position: (173, 19),
              },
             ),
            ],
            target: Function {
             argument: Some(
              "attrs",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (181, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "foldl",
                  position: (181, 21),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (181, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "recursiveUpdate",
                   position: (181, 31),
                  },
                 ],
                },
                default: None,
               },
               Map {
                bindings: [],
                recursive: false,
                position: (181, 47),
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (181, 52),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "flatten",
                    position: (181, 56),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "recurse",
                   position: (181, 65),
                  },
                  arguments: [
                   List {
                    elements: [],
                    position: (181, 73),
                   },
                   Variable {
                    identifier: "attrs",
                    position: (181, 77),
                   },
                  ],
                 },
                ],
               },
              ],
             },
             position: (181, 10),
            },
            position: (172, 25),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "toINI_",
              position: (183, 7),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "toINI",
             position: (183, 16),
            },
            arguments: [
             Map {
              bindings: [
               Inherit(
                None,
                [
                 Raw {
                  content: "mkKeyValue",
                  position: (183, 32),
                 },
                 Raw {
                  content: "mkSectionName",
                  position: (183, 43),
                 },
                ],
               ),
              ],
              recursive: false,
              position: (183, 22),
             },
            ],
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "toINI_",
           position: (185, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "gitFlattenAttrs",
             position: (185, 15),
            },
            arguments: [
             Variable {
              identifier: "attrs",
              position: (185, 31),
             },
            ],
           },
          ],
         },
         position: (153, 5),
        },
        position: (152, 5),
       },
       position: (151, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toJSON",
         position: (190, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (190, 16),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "toJSON",
           position: (190, 25),
          },
         ],
        },
        default: None,
       },
       position: (190, 12),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toYAML",
         position: (198, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "toJSON",
         position: (198, 21),
        },
        arguments: [
         Variable {
          identifier: "args",
          position: (198, 28),
         },
        ],
       },
       position: (198, 12),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "withRecursion",
         position: (200, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "throwOnDepthLimit",
          default: Some(
           Variable {
            identifier: "true",
            position: (205, 27),
           },
          ),
         },
         FunctionArgument {
          identifier: "depthLimit",
          default: None,
         },
        ],
        ellipsis: false,
       },
       definition: Assert {
        expression: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (207, 14),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "isInt",
             position: (207, 23),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "depthLimit",
           position: (207, 29),
          },
         ],
        },
        target: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "transform",
              position: (209, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "depth",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: BinaryOperation {
              operator: LogicalAnd,
              operands: [
               BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 Variable {
                  identifier: "depthLimit",
                  position: (210, 14),
                 },
                 Variable {
                  identifier: "null",
                  position: (210, 28),
                 },
                ],
                position: (210, 25),
               },
               BinaryOperation {
                operator: GreaterThan,
                operands: [
                 Variable {
                  identifier: "depth",
                  position: (210, 36),
                 },
                 Variable {
                  identifier: "depthLimit",
                  position: (210, 44),
                 },
                ],
                position: (210, 42),
               },
              ],
              position: (210, 33),
             },
             then: IfThenElse {
              predicate: Variable {
               identifier: "throwOnDepthLimit",
               position: (211, 16),
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "throw",
                position: (212, 20),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "Exceeded maximum eval-depth limit of ",
                   position: (212, 27),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (212, 66),
                    },
                    arguments: [
                     Variable {
                      identifier: "depthLimit",
                      position: (212, 75),
                     },
                    ],
                   },
                  },
                  Raw {
                   content: " while trying to evaluate with `generators.withRecursion'!",
                   position: (212, 86),
                  },
                 ],
                },
               ],
              },
              else_: FunctionApplication {
               function: Variable {
                identifier: "const",
                position: (213, 20),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "<unevaluated>",
                   position: (213, 27),
                  },
                 ],
                },
               ],
              },
              position: (211, 13),
             },
             else_: Variable {
              identifier: "id",
              position: (214, 16),
             },
             position: (210, 11),
            },
            position: (209, 21),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mapAny",
              position: (215, 9),
             },
            ],
           },
           With {
            expression: Variable {
             identifier: "builtins",
             position: (215, 23),
            },
            target: Function {
             argument: Some(
              "depth",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "evalNext",
                    position: (217, 13),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "x",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "mapAny",
                    position: (217, 27),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      Variable {
                       identifier: "depth",
                       position: (217, 35),
                      },
                      Int {
                       value: 1,
                       position: (217, 43),
                      },
                     ],
                     position: (217, 41),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "transform",
                      position: (217, 47),
                     },
                     arguments: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        Variable {
                         identifier: "depth",
                         position: (217, 58),
                        },
                        Int {
                         value: 1,
                         position: (217, 66),
                        },
                       ],
                       position: (217, 64),
                      },
                      Variable {
                       identifier: "x",
                       position: (217, 69),
                      },
                     ],
                    },
                   ],
                  },
                  position: (217, 24),
                 },
                ),
               ],
               target: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isAttrs",
                  position: (219, 16),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (219, 24),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "mapAttrs",
                  position: (219, 31),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "const",
                    position: (219, 41),
                   },
                   arguments: [
                    Variable {
                     identifier: "evalNext",
                     position: (219, 47),
                    },
                   ],
                  },
                  Variable {
                   identifier: "v",
                   position: (219, 57),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isList",
                   position: (220, 21),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (220, 28),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (220, 35),
                  },
                  arguments: [
                   Variable {
                    identifier: "evalNext",
                    position: (220, 39),
                   },
                   Variable {
                    identifier: "v",
                    position: (220, 48),
                   },
                  ],
                 },
                 else_: FunctionApplication {
                  function: Variable {
                   identifier: "transform",
                   position: (221, 18),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: Addition,
                    operands: [
                     Variable {
                      identifier: "depth",
                      position: (221, 29),
                     },
                     Int {
                      value: 1,
                      position: (221, 37),
                     },
                    ],
                    position: (221, 35),
                   },
                   Variable {
                    identifier: "v",
                    position: (221, 40),
                   },
                  ],
                 },
                 position: (220, 18),
                },
                position: (219, 13),
               },
               position: (216, 11),
              },
              position: (215, 40),
             },
             position: (215, 33),
            },
            position: (215, 18),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "mapAny",
           position: (223, 9),
          },
          arguments: [
           Int {
            value: 0,
            position: (223, 16),
           },
          ],
         },
         position: (208, 7),
        },
        position: (207, 7),
       },
       position: (201, 5),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toPretty",
         position: (228, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [
         FunctionArgument {
          identifier: "multiline",
          default: Some(
           Variable {
            identifier: "true",
            position: (234, 17),
           },
          ),
         },
         FunctionArgument {
          identifier: "allowPrettyValues",
          default: Some(
           Variable {
            identifier: "false",
            position: (232, 25),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "go",
             position: (237, 5),
            },
           ],
          },
          Function {
           argument: Some(
            "indent",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: With {
             expression: Variable {
              identifier: "builtins",
              position: (237, 26),
             },
             target: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "isPath",
                   position: (238, 13),
                  },
                 ],
                },
                Function {
                 argument: Some(
                  "v",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "typeOf",
                     position: (238, 27),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (238, 34),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "path",
                      position: (238, 40),
                     },
                    ],
                   },
                  ],
                  position: (238, 36),
                 },
                 position: (238, 24),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "introSpace",
                   position: (239, 13),
                  },
                 ],
                },
                IfThenElse {
                 predicate: Variable {
                  identifier: "multiline",
                  position: (239, 29),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (239, 45),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "indent",
                     position: (239, 49),
                    },
                   },
                   Raw {
                    content: "  ",
                    position: (239, 56),
                   },
                  ],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: " ",
                    position: (239, 66),
                   },
                  ],
                 },
                 position: (239, 26),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "outroSpace",
                   position: (240, 13),
                  },
                 ],
                },
                IfThenElse {
                 predicate: Variable {
                  identifier: "multiline",
                  position: (240, 29),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (240, 45),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "indent",
                     position: (240, 49),
                    },
                   },
                  ],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: " ",
                    position: (240, 64),
                   },
                  ],
                 },
                 position: (240, 26),
                },
               ),
              ],
              target: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isInt",
                 position: (241, 13),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (241, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (241, 31),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (241, 40),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isFloat",
                  position: (242, 13),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (242, 24),
                  },
                 ],
                },
                then: String {
                 parts: [
                  Raw {
                   content: "~",
                   position: (242, 32),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (242, 35),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (242, 44),
                     },
                    ],
                   },
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isString",
                   position: (243, 13),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (243, 24),
                   },
                  ],
                 },
                 then: LetIn {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "newlineSplits",
                       position: (246, 9),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "filter",
                      position: (246, 25),
                     },
                     arguments: [
                      Function {
                       argument: Some(
                        "v",
                       ),
                       arguments: FunctionArguments {
                        arguments: [],
                        ellipsis: false,
                       },
                       definition: UnaryOperation {
                        operator: Not,
                        operand: FunctionApplication {
                         function: Variable {
                          identifier: "isList",
                          position: (246, 38),
                         },
                         arguments: [
                          Variable {
                           identifier: "v",
                           position: (246, 45),
                          },
                         ],
                        },
                        position: (246, 36),
                       },
                       position: (246, 33),
                      },
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "builtins",
                         position: (246, 49),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "split",
                           position: (246, 58),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "\n",
                           position: (246, 65),
                          },
                         ],
                        },
                        Variable {
                         identifier: "v",
                         position: (246, 69),
                        },
                       ],
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "multilineResult",
                       position: (248, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        BinaryOperation {
                         operator: Addition,
                         operands: [
                          BinaryOperation {
                           operator: Addition,
                           operands: [
                            String {
                             parts: [
                              Raw {
                               content: "''",
                               position: (248, 28),
                              },
                             ],
                            },
                            Variable {
                             identifier: "introSpace",
                             position: (248, 34),
                            },
                           ],
                           position: (248, 32),
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (248, 47),
                           },
                           arguments: [
                            Variable {
                             identifier: "introSpace",
                             position: (248, 64),
                            },
                            FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "lib",
                               position: (248, 76),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "init",
                                 position: (248, 80),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              Variable {
                               identifier: "newlineSplits",
                               position: (248, 85),
                              },
                             ],
                            },
                           ],
                          },
                         ],
                         position: (248, 45),
                        },
                        Variable {
                         identifier: "outroSpace",
                         position: (248, 102),
                        },
                       ],
                       position: (248, 100),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "''",
                         position: (248, 116),
                        },
                       ],
                      },
                     ],
                     position: (248, 113),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "multilineResult'",
                       position: (250, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        BinaryOperation {
                         operator: Addition,
                         operands: [
                          String {
                           parts: [
                            Raw {
                             content: "''",
                             position: (250, 29),
                            },
                           ],
                          },
                          Variable {
                           identifier: "introSpace",
                           position: (250, 35),
                          },
                         ],
                         position: (250, 33),
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "concatStringsSep",
                          position: (250, 48),
                         },
                         arguments: [
                          Variable {
                           identifier: "introSpace",
                           position: (250, 65),
                          },
                          Variable {
                           identifier: "newlineSplits",
                           position: (250, 76),
                          },
                         ],
                        },
                       ],
                       position: (250, 46),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "''",
                         position: (250, 93),
                        },
                       ],
                      },
                     ],
                     position: (250, 90),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "singlelineResult",
                       position: (252, 9),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        String {
                         parts: [
                          Raw {
                           content: "\"",
                           position: (252, 29),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: PropertyAccess {
                          expression: Variable {
                           identifier: "libStr",
                           position: (252, 35),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "escape",
                             position: (252, 42),
                            },
                           ],
                          },
                          default: None,
                         },
                         arguments: [
                          List {
                           elements: [
                            String {
                             parts: [
                              Raw {
                               content: "\"",
                               position: (252, 52),
                              },
                             ],
                            },
                           ],
                           position: (252, 49),
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (252, 59),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\\n",
                               position: (252, 77),
                              },
                             ],
                            },
                            Variable {
                             identifier: "newlineSplits",
                             position: (252, 82),
                            },
                           ],
                          },
                         ],
                        },
                       ],
                       position: (252, 33),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "\"",
                         position: (252, 100),
                        },
                       ],
                      },
                     ],
                     position: (252, 97),
                    },
                   ),
                  ],
                  target: IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     Variable {
                      identifier: "multiline",
                      position: (253, 13),
                     },
                     BinaryOperation {
                      operator: GreaterThan,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "length",
                         position: (253, 26),
                        },
                        arguments: [
                         Variable {
                          identifier: "newlineSplits",
                          position: (253, 33),
                         },
                        ],
                       },
                       Int {
                        value: 1,
                        position: (253, 49),
                       },
                      ],
                      position: (253, 47),
                     },
                    ],
                    position: (253, 23),
                   },
                   then: IfThenElse {
                    predicate: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (254, 12),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "last",
                           position: (254, 16),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "newlineSplits",
                         position: (254, 21),
                        },
                       ],
                      },
                      String {
                       parts: [],
                      },
                     ],
                     position: (254, 35),
                    },
                    then: Variable {
                     identifier: "multilineResult",
                     position: (254, 46),
                    },
                    else_: Variable {
                     identifier: "multilineResult'",
                     position: (254, 67),
                    },
                    position: (254, 9),
                   },
                   else_: Variable {
                    identifier: "singlelineResult",
                    position: (255, 12),
                   },
                   position: (253, 10),
                  },
                  position: (244, 7),
                 },
                 else_: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    Variable {
                     identifier: "true",
                     position: (256, 13),
                    },
                    Variable {
                     identifier: "v",
                     position: (256, 24),
                    },
                   ],
                   position: (256, 19),
                  },
                  then: String {
                   parts: [
                    Raw {
                     content: "true",
                     position: (256, 32),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     Variable {
                      identifier: "false",
                      position: (257, 13),
                     },
                     Variable {
                      identifier: "v",
                      position: (257, 24),
                     },
                    ],
                    position: (257, 19),
                   },
                   then: String {
                    parts: [
                     Raw {
                      content: "false",
                      position: (257, 32),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      Variable {
                       identifier: "null",
                       position: (258, 13),
                      },
                      Variable {
                       identifier: "v",
                       position: (258, 24),
                      },
                     ],
                     position: (258, 19),
                    },
                    then: String {
                     parts: [
                      Raw {
                       content: "null",
                       position: (258, 32),
                      },
                     ],
                    },
                    else_: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "isPath",
                       position: (259, 13),
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (259, 24),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "toString",
                       position: (259, 31),
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (259, 40),
                       },
                      ],
                     },
                     else_: IfThenElse {
                      predicate: FunctionApplication {
                       function: Variable {
                        identifier: "isList",
                        position: (260, 13),
                       },
                       arguments: [
                        Variable {
                         identifier: "v",
                         position: (260, 24),
                        },
                       ],
                      },
                      then: IfThenElse {
                       predicate: BinaryOperation {
                        operator: EqualTo,
                        operands: [
                         Variable {
                          identifier: "v",
                          position: (261, 10),
                         },
                         List {
                          elements: [],
                          position: (261, 15),
                         },
                        ],
                        position: (261, 12),
                       },
                       then: String {
                        parts: [
                         Raw {
                          content: "[ ]",
                          position: (261, 24),
                         },
                        ],
                       },
                       else_: BinaryOperation {
                        operator: Addition,
                        operands: [
                         BinaryOperation {
                          operator: Addition,
                          operands: [
                           BinaryOperation {
                            operator: Addition,
                            operands: [
                             BinaryOperation {
                              operator: Addition,
                              operands: [
                               String {
                                parts: [
                                 Raw {
                                  content: "[",
                                  position: (262, 13),
                                 },
                                ],
                               },
                               Variable {
                                identifier: "introSpace",
                                position: (262, 18),
                               },
                              ],
                              position: (262, 16),
                             },
                             FunctionApplication {
                              function: PropertyAccess {
                               expression: Variable {
                                identifier: "libStr",
                                position: (263, 11),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "concatMapStringsSep",
                                  position: (263, 18),
                                 },
                                ],
                               },
                               default: None,
                              },
                              arguments: [
                               Variable {
                                identifier: "introSpace",
                                position: (263, 38),
                               },
                               FunctionApplication {
                                function: Variable {
                                 identifier: "go",
                                 position: (263, 50),
                                },
                                arguments: [
                                 BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   Variable {
                                    identifier: "indent",
                                    position: (263, 54),
                                   },
                                   String {
                                    parts: [
                                     Raw {
                                      content: "  ",
                                      position: (263, 64),
                                     },
                                    ],
                                   },
                                  ],
                                  position: (263, 61),
                                 },
                                ],
                               },
                               Variable {
                                identifier: "v",
                                position: (263, 70),
                               },
                              ],
                             },
                            ],
                            position: (263, 9),
                           },
                           Variable {
                            identifier: "outroSpace",
                            position: (264, 11),
                           },
                          ],
                          position: (264, 9),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "]",
                            position: (264, 25),
                           },
                          ],
                         },
                        ],
                        position: (264, 22),
                       },
                       position: (261, 7),
                      },
                      else_: IfThenElse {
                       predicate: FunctionApplication {
                        function: Variable {
                         identifier: "isFunction",
                         position: (265, 13),
                        },
                        arguments: [
                         Variable {
                          identifier: "v",
                          position: (265, 24),
                         },
                        ],
                       },
                       then: LetIn {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "fna",
                             position: (266, 11),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "lib",
                             position: (266, 17),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "functionArgs",
                               position: (266, 21),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            Variable {
                             identifier: "v",
                             position: (266, 34),
                            },
                           ],
                          },
                         ),
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "showFnas",
                             position: (267, 11),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "concatStringsSep",
                            position: (267, 22),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: ", ",
                               position: (267, 40),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "libAttr",
                               position: (267, 45),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "mapAttrsToList",
                                 position: (267, 53),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              Function {
                               argument: Some(
                                "name",
                               ),
                               arguments: FunctionArguments {
                                arguments: [],
                                ellipsis: false,
                               },
                               definition: Function {
                                argument: Some(
                                 "hasDefVal",
                                ),
                                arguments: FunctionArguments {
                                 arguments: [],
                                 ellipsis: false,
                                },
                                definition: IfThenElse {
                                 predicate: Variable {
                                  identifier: "hasDefVal",
                                  position: (268, 45),
                                 },
                                 then: BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   Variable {
                                    identifier: "name",
                                    position: (268, 60),
                                   },
                                   String {
                                    parts: [
                                     Raw {
                                      content: "?",
                                      position: (268, 68),
                                     },
                                    ],
                                   },
                                  ],
                                  position: (268, 65),
                                 },
                                 else_: Variable {
                                  identifier: "name",
                                  position: (268, 76),
                                 },
                                 position: (268, 42),
                                },
                                position: (268, 31),
                               },
                               position: (268, 25),
                              },
                              Variable {
                               identifier: "fna",
                               position: (269, 24),
                              },
                             ],
                            },
                           ],
                          },
                         ),
                        ],
                        target: IfThenElse {
                         predicate: BinaryOperation {
                          operator: EqualTo,
                          operands: [
                           Variable {
                            identifier: "fna",
                            position: (270, 13),
                           },
                           Map {
                            bindings: [],
                            recursive: false,
                            position: (270, 20),
                           },
                          ],
                          position: (270, 17),
                         },
                         then: String {
                          parts: [
                           Raw {
                            content: "<function>",
                            position: (270, 32),
                           },
                          ],
                         },
                         else_: String {
                          parts: [
                           Raw {
                            content: "<function, args: {",
                            position: (271, 32),
                           },
                           Expression {
                            expression: Variable {
                             identifier: "showFnas",
                             position: (271, 52),
                            },
                           },
                           Raw {
                            content: "}>",
                            position: (271, 61),
                           },
                          ],
                         },
                         position: (270, 10),
                        },
                        position: (266, 7),
                       },
                       else_: IfThenElse {
                        predicate: FunctionApplication {
                         function: Variable {
                          identifier: "isAttrs",
                          position: (272, 13),
                         },
                         arguments: [
                          Variable {
                           identifier: "v",
                           position: (272, 24),
                          },
                         ],
                        },
                        then: IfThenElse {
                         predicate: BinaryOperation {
                          operator: LogicalAnd,
                          operands: [
                           BinaryOperation {
                            operator: EqualTo,
                            operands: [
                             FunctionApplication {
                              function: Variable {
                               identifier: "attrNames",
                               position: (274, 10),
                              },
                              arguments: [
                               Variable {
                                identifier: "v",
                                position: (274, 20),
                               },
                              ],
                             },
                             List {
                              elements: [
                               String {
                                parts: [
                                 Raw {
                                  content: "__pretty",
                                  position: (274, 28),
                                 },
                                ],
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "val",
                                  position: (274, 39),
                                 },
                                ],
                               },
                              ],
                              position: (274, 25),
                             },
                            ],
                            position: (274, 22),
                           },
                           Variable {
                            identifier: "allowPrettyValues",
                            position: (274, 49),
                           },
                          ],
                          position: (274, 46),
                         },
                         then: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "v",
                            position: (275, 15),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "__pretty",
                              position: (275, 17),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "v",
                             position: (275, 26),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "val",
                               position: (275, 28),
                              },
                             ],
                            },
                            default: None,
                           },
                          ],
                         },
                         else_: IfThenElse {
                          predicate: BinaryOperation {
                           operator: EqualTo,
                           operands: [
                            Variable {
                             identifier: "v",
                             position: (276, 15),
                            },
                            Map {
                             bindings: [],
                             recursive: false,
                             position: (276, 20),
                            },
                           ],
                           position: (276, 17),
                          },
                          then: String {
                           parts: [
                            Raw {
                             content: "{ }",
                             position: (276, 29),
                            },
                           ],
                          },
                          else_: IfThenElse {
                           predicate: BinaryOperation {
                            operator: LogicalAnd,
                            operands: [
                             HasProperty {
                              expression: Variable {
                               identifier: "v",
                               position: (277, 15),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (277, 19),
                                },
                               ],
                              },
                              position: (277, 17),
                             },
                             BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "v",
                                 position: (277, 27),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "type",
                                   position: (277, 29),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "derivation",
                                  position: (277, 38),
                                 },
                                ],
                               },
                              ],
                              position: (277, 34),
                             },
                            ],
                            position: (277, 24),
                           },
                           then: String {
                            parts: [
                             Raw {
                              content: "<derivation ",
                              position: (278, 10),
                             },
                             Expression {
                              expression: PropertyAccess {
                               expression: Variable {
                                identifier: "v",
                                position: (278, 24),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "drvPath",
                                  position: (278, 26),
                                 },
                                ],
                               },
                               default: Some(
                                String {
                                 parts: [
                                  Raw {
                                   content: "???",
                                   position: (278, 38),
                                  },
                                 ],
                                },
                               ),
                              },
                             },
                             Raw {
                              content: ">",
                              position: (278, 43),
                             },
                            ],
                           },
                           else_: BinaryOperation {
                            operator: Addition,
                            operands: [
                             BinaryOperation {
                              operator: Addition,
                              operands: [
                               BinaryOperation {
                                operator: Addition,
                                operands: [
                                 BinaryOperation {
                                  operator: Addition,
                                  operands: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "{",
                                      position: (279, 13),
                                     },
                                    ],
                                   },
                                   Variable {
                                    identifier: "introSpace",
                                    position: (279, 18),
                                   },
                                  ],
                                  position: (279, 16),
                                 },
                                 FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "libStr",
                                    position: (280, 13),
                                   },
                                   attribute_path: AttributePath {
                                    attributes: [
                                     Raw {
                                      content: "concatStringsSep",
                                      position: (280, 20),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   Variable {
                                    identifier: "introSpace",
                                    position: (280, 37),
                                   },
                                   FunctionApplication {
                                    function: PropertyAccess {
                                     expression: Variable {
                                      identifier: "libAttr",
                                      position: (280, 49),
                                     },
                                     attribute_path: AttributePath {
                                      attributes: [
                                       Raw {
                                        content: "mapAttrsToList",
                                        position: (280, 57),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                    arguments: [
                                     Function {
                                      argument: Some(
                                       "name",
                                      ),
                                      arguments: FunctionArguments {
                                       arguments: [],
                                       ellipsis: false,
                                      },
                                      definition: Function {
                                       argument: Some(
                                        "value",
                                       ),
                                       arguments: FunctionArguments {
                                        arguments: [],
                                        ellipsis: false,
                                       },
                                       definition: String {
                                        parts: [
                                         Expression {
                                          expression: FunctionApplication {
                                           function: PropertyAccess {
                                            expression: Variable {
                                             identifier: "libStr",
                                             position: (282, 20),
                                            },
                                            attribute_path: AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "escapeNixIdentifier",
                                               position: (282, 27),
                                              },
                                             ],
                                            },
                                            default: None,
                                           },
                                           arguments: [
                                            Variable {
                                             identifier: "name",
                                             position: (282, 47),
                                            },
                                           ],
                                          },
                                         },
                                         Raw {
                                          content: " = ",
                                          position: (282, 52),
                                         },
                                         Expression {
                                          expression: FunctionApplication {
                                           function: Variable {
                                            identifier: "go",
                                            position: (282, 57),
                                           },
                                           arguments: [
                                            BinaryOperation {
                                             operator: Addition,
                                             operands: [
                                              Variable {
                                               identifier: "indent",
                                               position: (282, 61),
                                              },
                                              String {
                                               parts: [
                                                Raw {
                                                 content: "  ",
                                                 position: (282, 71),
                                                },
                                               ],
                                              },
                                             ],
                                             position: (282, 68),
                                            },
                                            Variable {
                                             identifier: "value",
                                             position: (282, 76),
                                            },
                                           ],
                                          },
                                         },
                                         Raw {
                                          content: ";",
                                          position: (282, 82),
                                         },
                                        ],
                                       },
                                       position: (281, 22),
                                      },
                                      position: (281, 16),
                                     },
                                     Variable {
                                      identifier: "v",
                                      position: (282, 86),
                                     },
                                    ],
                                   },
                                  ],
                                 },
                                ],
                                position: (280, 11),
                               },
                               Variable {
                                identifier: "outroSpace",
                                position: (283, 11),
                               },
                              ],
                              position: (283, 9),
                             },
                             String {
                              parts: [
                               Raw {
                                content: "}",
                                position: (283, 25),
                               },
                              ],
                             },
                            ],
                            position: (283, 22),
                           },
                           position: (277, 12),
                          },
                          position: (276, 12),
                         },
                         position: (274, 7),
                        },
                        else_: FunctionApplication {
                         function: Variable {
                          identifier: "abort",
                          position: (284, 10),
                         },
                         arguments: [
                          String {
                           parts: [
                            Raw {
                             content: "generators.toPretty: should never happen (v = ",
                             position: (284, 17),
                            },
                            Expression {
                             expression: Variable {
                              identifier: "v",
                              position: (284, 65),
                             },
                            },
                            Raw {
                             content: ")",
                             position: (284, 67),
                            },
                           ],
                          },
                         ],
                        },
                        position: (272, 10),
                       },
                       position: (265, 10),
                      },
                      position: (260, 10),
                     },
                     position: (259, 10),
                    },
                    position: (258, 10),
                   },
                   position: (257, 10),
                  },
                  position: (256, 10),
                 },
                 position: (243, 10),
                },
                position: (242, 10),
               },
               position: (241, 8),
              },
              position: (238, 5),
             },
             position: (237, 21),
            },
            position: (237, 18),
           },
           position: (237, 10),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "go",
          position: (285, 6),
         },
         arguments: [
          String {
           parts: [],
          },
         ],
        },
        position: (236, 5),
       },
       position: (228, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toPlist",
         position: (288, 3),
        },
       ],
      },
      Function {
       argument: None,
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "isFloat",
              position: (289, 5),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (289, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "isFloat",
               position: (289, 24),
              },
             ],
            },
            default: Some(
             Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Variable {
               identifier: "false",
               position: (289, 39),
              },
              position: (289, 36),
             },
            ),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "expr",
              position: (290, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: With {
              expression: Variable {
               identifier: "builtins",
               position: (290, 26),
              },
              target: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "x",
                  position: (291, 10),
                 },
                 Variable {
                  identifier: "null",
                  position: (291, 15),
                 },
                ],
                position: (291, 12),
               },
               then: String {
                parts: [],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isBool",
                  position: (292, 10),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (292, 17),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "bool",
                  position: (292, 26),
                 },
                 arguments: [
                  Variable {
                   identifier: "ind",
                   position: (292, 31),
                  },
                  Variable {
                   identifier: "x",
                   position: (292, 35),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isInt",
                   position: (293, 10),
                  },
                  arguments: [
                   Variable {
                    identifier: "x",
                    position: (293, 16),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "int",
                   position: (293, 26),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (293, 30),
                   },
                   Variable {
                    identifier: "x",
                    position: (293, 34),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isString",
                    position: (294, 10),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (294, 19),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "str",
                    position: (294, 26),
                   },
                   arguments: [
                    Variable {
                     identifier: "ind",
                     position: (294, 30),
                    },
                    Variable {
                     identifier: "x",
                     position: (294, 34),
                    },
                   ],
                  },
                  else_: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isList",
                     position: (295, 10),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (295, 17),
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "list",
                     position: (295, 26),
                    },
                    arguments: [
                     Variable {
                      identifier: "ind",
                      position: (295, 31),
                     },
                     Variable {
                      identifier: "x",
                      position: (295, 35),
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: FunctionApplication {
                     function: Variable {
                      identifier: "isAttrs",
                      position: (296, 10),
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (296, 18),
                      },
                     ],
                    },
                    then: FunctionApplication {
                     function: Variable {
                      identifier: "attrs",
                      position: (296, 26),
                     },
                     arguments: [
                      Variable {
                       identifier: "ind",
                       position: (296, 32),
                      },
                      Variable {
                       identifier: "x",
                       position: (296, 36),
                      },
                     ],
                    },
                    else_: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "isFloat",
                       position: (297, 10),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (297, 18),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "float",
                       position: (297, 26),
                      },
                      arguments: [
                       Variable {
                        identifier: "ind",
                        position: (297, 32),
                       },
                       Variable {
                        identifier: "x",
                        position: (297, 36),
                       },
                      ],
                     },
                     else_: FunctionApplication {
                      function: Variable {
                       identifier: "abort",
                       position: (298, 7),
                      },
                      arguments: [
                       String {
                        parts: [
                         Raw {
                          content: "generators.toPlist: should never happen (v = ",
                          position: (298, 14),
                         },
                         Expression {
                          expression: Variable {
                           identifier: "v",
                           position: (298, 61),
                          },
                         },
                         Raw {
                          content: ")",
                          position: (298, 63),
                         },
                        ],
                       },
                      ],
                     },
                     position: (297, 7),
                    },
                    position: (296, 7),
                   },
                   position: (295, 7),
                  },
                  position: (294, 7),
                 },
                 position: (293, 7),
                },
                position: (292, 7),
               },
               position: (291, 7),
              },
              position: (290, 21),
             },
             position: (290, 17),
            },
            position: (290, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "literal",
              position: (300, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: Addition,
              operands: [
               Variable {
                identifier: "ind",
                position: (300, 23),
               },
               Variable {
                identifier: "x",
                position: (300, 29),
               },
              ],
              position: (300, 27),
             },
             position: (300, 20),
            },
            position: (300, 15),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "bool",
              position: (302, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (302, 20),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (302, 28),
               },
               IfThenElse {
                predicate: Variable {
                 identifier: "x",
                 position: (302, 37),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "<true/>",
                   position: (302, 45),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "<false/>",
                   position: (302, 60),
                  },
                 ],
                },
                position: (302, 34),
               },
              ],
             },
             position: (302, 17),
            },
            position: (302, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "int",
              position: (303, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (303, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (303, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<integer>",
                  position: (303, 32),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (303, 43),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (303, 52),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "</integer>",
                  position: (303, 54),
                 },
                ],
               },
              ],
             },
             position: (303, 16),
            },
            position: (303, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "str",
              position: (304, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (304, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (304, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<string>",
                  position: (304, 32),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "x",
                   position: (304, 42),
                  },
                 },
                 Raw {
                  content: "</string>",
                  position: (304, 44),
                 },
                ],
               },
              ],
             },
             position: (304, 16),
            },
            position: (304, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "key",
              position: (305, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (305, 19),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (305, 27),
               },
               String {
                parts: [
                 Raw {
                  content: "<key>",
                  position: (305, 32),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "x",
                   position: (305, 39),
                  },
                 },
                 Raw {
                  content: "</key>",
                  position: (305, 41),
                 },
                ],
               },
              ],
             },
             position: (305, 16),
            },
            position: (305, 11),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "float",
              position: (306, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "literal",
               position: (306, 21),
              },
              arguments: [
               Variable {
                identifier: "ind",
                position: (306, 29),
               },
               String {
                parts: [
                 Raw {
                  content: "<real>",
                  position: (306, 34),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (306, 42),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (306, 51),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "</real>",
                  position: (306, 53),
                 },
                ],
               },
              ],
             },
             position: (306, 18),
            },
            position: (306, 13),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "indent",
              position: (308, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "expr",
              position: (308, 19),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "\t",
                 position: (308, 25),
                },
                Expression {
                 expression: Variable {
                  identifier: "ind",
                  position: (308, 29),
                 },
                },
               ],
              },
             ],
            },
            position: (308, 14),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "item",
              position: (310, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "libStr",
               position: (310, 17),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "concatMapStringsSep",
                 position: (310, 24),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "\n",
                 position: (310, 45),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "indent",
                position: (310, 50),
               },
               arguments: [
                Variable {
                 identifier: "ind",
                 position: (310, 57),
                },
               ],
              },
             ],
            },
            position: (310, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "list",
              position: (312, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (312, 20),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "concatStringsSep",
                  position: (312, 27),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                  position: (312, 45),
                 },
                ],
               },
               List {
                elements: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (313, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (313, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "<array>",
                      position: (313, 21),
                     },
                    ],
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "item",
                   position: (314, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (314, 13),
                   },
                   Variable {
                    identifier: "x",
                    position: (314, 17),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (315, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (315, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "</array>",
                      position: (315, 21),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (312, 49),
               },
              ],
             },
             position: (312, 17),
            },
            position: (312, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attrs",
              position: (318, 5),
             },
            ],
           },
           Function {
            argument: Some(
             "ind",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "libStr",
                position: (318, 21),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "concatStringsSep",
                  position: (318, 28),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                  position: (318, 46),
                 },
                ],
               },
               List {
                elements: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (319, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (319, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "<dict>",
                      position: (319, 21),
                     },
                    ],
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "attr",
                   position: (320, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (320, 13),
                   },
                   Variable {
                    identifier: "x",
                    position: (320, 17),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literal",
                   position: (321, 8),
                  },
                  arguments: [
                   Variable {
                    identifier: "ind",
                    position: (321, 16),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "</dict>",
                      position: (321, 21),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (318, 50),
               },
              ],
             },
             position: (318, 18),
            },
            position: (318, 13),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attr",
              position: (324, 5),
             },
            ],
           },
           LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "attrFilter",
                 position: (324, 16),
                },
               ],
              },
              Function {
               argument: Some(
                "name",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "value",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "name",
                     position: (324, 42),
                    },
                    String {
                     parts: [
                      Raw {
                       content: "_module",
                       position: (324, 51),
                      },
                     ],
                    },
                   ],
                   position: (324, 47),
                  },
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "value",
                     position: (324, 63),
                    },
                    Variable {
                     identifier: "null",
                     position: (324, 72),
                    },
                   ],
                   position: (324, 69),
                  },
                 ],
                 position: (324, 60),
                },
                position: (324, 35),
               },
               position: (324, 29),
              },
             ),
            ],
            target: Function {
             argument: Some(
              "ind",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "libStr",
                 position: (325, 16),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "concatStringsSep",
                   position: (325, 23),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "\n",
                   position: (325, 41),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (325, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "flatten",
                     position: (325, 50),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (325, 59),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "mapAttrsToList",
                       position: (325, 63),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Function {
                     argument: Some(
                      "name",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: Function {
                      argument: Some(
                       "value",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (326, 21),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "optional",
                           position: (326, 25),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "attrFilter",
                          position: (326, 35),
                         },
                         arguments: [
                          Variable {
                           identifier: "name",
                           position: (326, 46),
                          },
                          Variable {
                           identifier: "value",
                           position: (326, 51),
                          },
                         ],
                        },
                        List {
                         elements: [
                          FunctionApplication {
                           function: Variable {
                            identifier: "key",
                            position: (327, 8),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\t",
                               position: (327, 13),
                              },
                              Expression {
                               expression: Variable {
                                identifier: "ind",
                                position: (327, 17),
                               },
                              },
                             ],
                            },
                            Variable {
                             identifier: "name",
                             position: (327, 23),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "expr",
                            position: (328, 8),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "\t",
                               position: (328, 14),
                              },
                              Expression {
                               expression: Variable {
                                identifier: "ind",
                                position: (328, 18),
                               },
                              },
                             ],
                            },
                            Variable {
                             identifier: "value",
                             position: (328, 24),
                            },
                           ],
                          },
                         ],
                         position: (326, 58),
                        },
                       ],
                      },
                      position: (326, 14),
                     },
                     position: (326, 8),
                    },
                    Variable {
                     identifier: "x",
                     position: (329, 8),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
              position: (325, 13),
             },
             position: (325, 8),
            },
            position: (324, 12),
           },
          ),
         ],
         target: String {
          parts: [
           Raw {
            content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n",
            position: (331, 8),
           },
           Expression {
            expression: FunctionApplication {
             function: Variable {
              identifier: "expr",
              position: (334, 3),
             },
             arguments: [
              String {
               parts: [],
              },
              Variable {
               identifier: "v",
               position: (334, 11),
              },
             ],
            },
           },
           Raw {
            content: "\n</plist>",
            position: (334, 13),
           },
          ],
         },
         position: (288, 20),
        },
        position: (288, 17),
       },
       position: (288, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toDhall",
         position: (341, 3),
        },
       ],
      },
      Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: With {
         expression: Variable {
          identifier: "builtins",
          position: (342, 10),
         },
         target: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "concatItems",
               position: (343, 9),
              },
             ],
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (343, 23),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "strings",
                 position: (343, 27),
                },
                Raw {
                 content: "concatStringsSep",
                 position: (343, 35),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: ", ",
                 position: (343, 53),
                },
               ],
              },
             ],
            },
           ),
          ],
          target: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isAttrs",
             position: (344, 11),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (344, 19),
             },
            ],
           },
           then: String {
            parts: [
             Raw {
              content: "{ ",
              position: (345, 8),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "concatItems",
                position: (346, 9),
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (346, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "attrsets",
                     position: (346, 26),
                    },
                    Raw {
                     content: "mapAttrsToList",
                     position: (346, 35),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "key",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Function {
                    argument: Some(
                     "value",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: String {
                     parts: [
                      Expression {
                       expression: Variable {
                        identifier: "key",
                        position: (347, 27),
                       },
                      },
                      Raw {
                       content: " = ",
                       position: (347, 31),
                      },
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "toDhall",
                         position: (347, 36),
                        },
                        arguments: [
                         Variable {
                          identifier: "args",
                          position: (347, 44),
                         },
                         Variable {
                          identifier: "value",
                          position: (347, 49),
                         },
                        ],
                       },
                      },
                     ],
                    },
                    position: (347, 17),
                   },
                   position: (347, 12),
                  },
                  Variable {
                   identifier: "v",
                   position: (347, 58),
                  },
                 ],
                },
               ],
              },
             },
             Raw {
              content: " }",
              position: (348, 8),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "isList",
              position: (349, 13),
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (349, 20),
              },
             ],
            },
            then: String {
             parts: [
              Raw {
               content: "[ ",
               position: (350, 8),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatItems",
                 position: (350, 12),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (350, 25),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "toDhall",
                     position: (350, 30),
                    },
                    arguments: [
                     Variable {
                      identifier: "args",
                      position: (350, 38),
                     },
                    ],
                   },
                   Variable {
                    identifier: "v",
                    position: (350, 44),
                   },
                  ],
                 },
                ],
               },
              },
              Raw {
               content: " ]",
               position: (350, 47),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isInt",
               position: (351, 13),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (351, 19),
               },
              ],
             },
             then: String {
              parts: [
               Expression {
                expression: IfThenElse {
                 predicate: BinaryOperation {
                  operator: LessThan,
                  operands: [
                   Variable {
                    identifier: "v",
                    position: (352, 13),
                   },
                   Int {
                    value: 0,
                    position: (352, 17),
                   },
                  ],
                  position: (352, 15),
                 },
                 then: String {
                  parts: [],
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: "+",
                    position: (352, 33),
                   },
                  ],
                 },
                 position: (352, 10),
                },
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "toString",
                  position: (352, 38),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (352, 47),
                  },
                 ],
                },
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "isBool",
                position: (353, 13),
               },
               arguments: [
                Variable {
                 identifier: "v",
                 position: (353, 20),
                },
               ],
              },
              then: IfThenElse {
               predicate: Variable {
                identifier: "v",
                position: (354, 11),
               },
               then: String {
                parts: [
                 Raw {
                  content: "True",
                  position: (354, 19),
                 },
                ],
               },
               else_: String {
                parts: [
                 Raw {
                  content: "False",
                  position: (354, 31),
                 },
                ],
               },
               position: (354, 8),
              },
              else_: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isFunction",
                 position: (355, 13),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (355, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "abort",
                 position: (356, 7),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "generators.toDhall: cannot convert a function to Dhall",
                    position: (356, 14),
                   },
                  ],
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isNull",
                  position: (357, 13),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (357, 20),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "abort",
                  position: (358, 7),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "generators.toDhall: cannot convert a null to Dhall",
                     position: (358, 14),
                    },
                   ],
                  },
                 ],
                },
                else_: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (360, 7),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "toJSON",
                     position: (360, 16),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (360, 23),
                  },
                 ],
                },
                position: (357, 10),
               },
               position: (355, 10),
              },
              position: (353, 10),
             },
             position: (351, 10),
            },
            position: (349, 10),
           },
           position: (344, 8),
          },
          position: (343, 5),
         },
         position: (342, 5),
        },
        position: (341, 23),
       },
       position: (341, 13),
      },
     ),
    ],
    recursive: true,
    position: (25, 1),
   },
   position: (18, 1),
  },
  position: (17, 1),
 },
 position: (16, 1),
}