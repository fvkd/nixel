---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "options",
    default: None,
   },
   DestructuredArgument {
    identifier: "transformOptions",
    default: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (22, 22),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "id",
         position: (22, 26),
        },
       ],
      },
      default: None,
     },
    ),
   },
   DestructuredArgument {
    identifier: "revision",
    default: Some(
     String {
      parts: [],
      position: (23, 14),
     },
    ),
   },
   DestructuredArgument {
    identifier: "baseOptionsJSON",
    default: Some(
     Variable {
      identifier: "null",
      position: (27, 21),
     },
    ),
   },
   DestructuredArgument {
    identifier: "warningsAreErrors",
    default: Some(
     Variable {
      identifier: "true",
      position: (30, 23),
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "substSpecial",
       position: (41, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "x",
     },
     definition: IfThenElse {
      predicate: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (42, 8),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "isDerivation",
           position: (42, 12),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Variable {
         identifier: "x",
         position: (42, 25),
        },
       ],
      },
      then: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "_type",
            position: (42, 34),
           },
          ],
         },
         to: String {
          parts: [
           Raw {
            content: "derivation",
            position: (42, 43),
           },
          ],
          position: (42, 42),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "name",
            position: (42, 56),
           },
          ],
         },
         to: PropertyAccess {
          expression: Variable {
           identifier: "x",
           position: (42, 63),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (42, 65),
            },
           ],
          },
          default: None,
         },
        },
       ],
       recursive: false,
       position: (42, 32),
      },
      else_: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (43, 13),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "isAttrs",
            position: (43, 22),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "x",
          position: (43, 30),
         },
        ],
       },
       then: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (43, 37),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "mapAttrs",
            position: (43, 41),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "name",
           },
           definition: Variable {
            identifier: "substSpecial",
            position: (43, 57),
           },
           position: (43, 51),
          },
          position: (43, 50),
         },
         Variable {
          identifier: "x",
          position: (43, 71),
         },
        ],
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (44, 13),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "isList",
             position: (44, 22),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (44, 29),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (44, 36),
         },
         arguments: [
          Variable {
           identifier: "substSpecial",
           position: (44, 40),
          },
          Variable {
           identifier: "x",
           position: (44, 53),
          },
         ],
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (45, 13),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "isFunction",
              position: (45, 17),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (45, 28),
           },
          ],
         },
         then: String {
          parts: [
           Raw {
            content: "<function>",
            position: (45, 36),
           },
          ],
          position: (45, 35),
         },
         else_: Variable {
          identifier: "x",
          position: (46, 10),
         },
         position: (45, 10),
        },
        position: (44, 10),
       },
       position: (43, 10),
      },
      position: (42, 5),
     },
     position: (41, 18),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "optionsList",
       position: (48, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (48, 17),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "flip",
         position: (48, 21),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Variable {
       identifier: "map",
       position: (48, 26),
      },
      Variable {
       identifier: "optionsListVisible",
       position: (48, 30),
      },
      Parentheses {
       expression: Function {
        argument: Simple {
         identifier: "opt",
        },
        definition: BinaryOperation {
         operator: Update,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "transformOptions",
            position: (49, 10),
           },
           arguments: [
            Variable {
             identifier: "opt",
             position: (49, 27),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (50, 8),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "optionalAttrs",
                 position: (50, 12),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Parentheses {
               expression: HasProperty {
                expression: Variable {
                 identifier: "opt",
                 position: (50, 27),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "example",
                   position: (50, 33),
                  },
                 ],
                },
                position: (50, 31),
               },
               position: (50, 26),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "example",
                    position: (50, 44),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "substSpecial",
                   position: (50, 54),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "opt",
                     position: (50, 67),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "example",
                       position: (50, 71),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
               ],
               recursive: false,
               position: (50, 42),
              },
             ],
            },
            BinaryOperation {
             operator: Update,
             operands: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (51, 8),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "optionalAttrs",
                   position: (51, 12),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Parentheses {
                 expression: HasProperty {
                  expression: Variable {
                   identifier: "opt",
                   position: (51, 27),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "default",
                     position: (51, 33),
                    },
                   ],
                  },
                  position: (51, 31),
                 },
                 position: (51, 26),
                },
                Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "default",
                      position: (51, 44),
                     },
                    ],
                   },
                   to: FunctionApplication {
                    function: Variable {
                     identifier: "substSpecial",
                     position: (51, 54),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "opt",
                       position: (51, 67),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "default",
                         position: (51, 71),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  },
                 ],
                 recursive: false,
                 position: (51, 42),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (52, 8),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "optionalAttrs",
                     position: (52, 12),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Parentheses {
                   expression: HasProperty {
                    expression: Variable {
                     identifier: "opt",
                     position: (52, 27),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "type",
                       position: (52, 33),
                      },
                     ],
                    },
                    position: (52, 31),
                   },
                   position: (52, 26),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "type",
                        position: (52, 41),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: Variable {
                       identifier: "substSpecial",
                       position: (52, 48),
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "opt",
                         position: (52, 61),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "type",
                           position: (52, 65),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    },
                   ],
                   recursive: false,
                   position: (52, 39),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (53, 8),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "optionalAttrs",
                     position: (53, 12),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Parentheses {
                   expression: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     HasProperty {
                      expression: Variable {
                       identifier: "opt",
                       position: (53, 27),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "relatedPackages",
                         position: (53, 33),
                        },
                       ],
                      },
                      position: (53, 31),
                     },
                     BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "opt",
                         position: (53, 52),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "relatedPackages",
                           position: (53, 56),
                          },
                         ],
                        },
                        default: None,
                       },
                       List {
                        elements: [],
                        position: (53, 75),
                       },
                      ],
                      position: (53, 72),
                     },
                    ],
                    position: (53, 49),
                   },
                   position: (53, 26),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "relatedPackages",
                        position: (53, 81),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: Variable {
                       identifier: "genRelatedPackages",
                       position: (53, 99),
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "opt",
                         position: (53, 118),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "relatedPackages",
                           position: (53, 122),
                          },
                         ],
                        },
                        default: None,
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "opt",
                         position: (53, 138),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "name",
                           position: (53, 142),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    },
                   ],
                   recursive: false,
                   position: (53, 79),
                  },
                 ],
                },
               ],
               position: (53, 5),
              },
             ],
             position: (52, 5),
            },
           ],
           position: (51, 5),
          },
         ],
         position: (50, 5),
        },
        position: (49, 5),
       },
       position: (49, 4),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "genRelatedPackages",
       position: (70, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "packages",
     },
     definition: Function {
      argument: Simple {
       identifier: "optName",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "unpack",
            position: (72, 7),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "p",
          },
          definition: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (72, 22),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "isString",
                position: (72, 26),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "p",
              position: (72, 35),
             },
            ],
           },
           then: Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "name",
                 position: (72, 44),
                },
               ],
              },
              to: Variable {
               identifier: "p",
               position: (72, 51),
              },
             },
            ],
            recursive: false,
            position: (72, 42),
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (73, 27),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "isList",
                 position: (73, 31),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "p",
               position: (73, 38),
              },
             ],
            },
            then: Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "path",
                  position: (73, 47),
                 },
                ],
               },
               to: Variable {
                identifier: "p",
                position: (73, 54),
               },
              },
             ],
             recursive: false,
             position: (73, 45),
            },
            else_: Variable {
             identifier: "p",
             position: (74, 24),
            },
            position: (73, 24),
           },
           position: (72, 19),
          },
          position: (72, 16),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "describe",
            position: (75, 7),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "args",
          },
          definition: LetIn {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "title",
                position: (77, 11),
               },
              ],
             },
             to: PropertyAccess {
              expression: Variable {
               identifier: "args",
               position: (77, 19),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "title",
                 position: (77, 24),
                },
               ],
              },
              default: Some(
               Variable {
                identifier: "null",
                position: (77, 33),
               },
              ),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "name",
                position: (78, 11),
               },
              ],
             },
             to: PropertyAccess {
              expression: Variable {
               identifier: "args",
               position: (78, 18),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "name",
                 position: (78, 23),
                },
               ],
              },
              default: Some(
               Parentheses {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (78, 32),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "concatStringsSep",
                     position: (78, 36),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: ".",
                     position: (78, 54),
                    },
                   ],
                   position: (78, 53),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "args",
                    position: (78, 57),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "path",
                      position: (78, 62),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
                position: (78, 31),
               },
              ),
             },
            },
           ],
           target: String {
            parts: [
             Raw {
              content: "<listitem>\n  <para>\n    <link xlink:href=\"https://search.nixos.org/packages?show=",
              position: (80, 1),
             },
             Interpolation {
              expression: Variable {
               identifier: "name",
               position: (82, 74),
              },
             },
             Raw {
              content: "&amp;sort=relevance&amp;query=",
              position: (82, 79),
             },
             Interpolation {
              expression: Variable {
               identifier: "name",
               position: (82, 111),
              },
             },
             Raw {
              content: "\">\n      <literal>",
              position: (82, 116),
             },
             Interpolation {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (83, 28),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "optionalString",
                   position: (83, 32),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Parentheses {
                 expression: BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   Variable {
                    identifier: "title",
                    position: (83, 48),
                   },
                   Variable {
                    identifier: "null",
                    position: (83, 57),
                   },
                  ],
                  position: (83, 54),
                 },
                 position: (83, 47),
                },
                String {
                 parts: [
                  Interpolation {
                   expression: Variable {
                    identifier: "title",
                    position: (83, 66),
                   },
                  },
                  Raw {
                   content: " aka ",
                   position: (83, 72),
                  },
                 ],
                 position: (83, 63),
                },
               ],
              },
             },
             Raw {
              content: "pkgs.",
              position: (83, 79),
             },
             Interpolation {
              expression: Variable {
               identifier: "name",
               position: (83, 86),
              },
             },
             Raw {
              content: "</literal>\n    </link>\n  </para>\n  ",
              position: (83, 91),
             },
             Interpolation {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (86, 15),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "optionalString",
                   position: (86, 19),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Parentheses {
                 expression: HasProperty {
                  expression: Variable {
                   identifier: "args",
                   position: (86, 35),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "comment",
                     position: (86, 42),
                    },
                   ],
                  },
                  position: (86, 40),
                 },
                 position: (86, 34),
                },
                String {
                 parts: [
                  Raw {
                   content: "<para>",
                   position: (86, 52),
                  },
                  Interpolation {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "args",
                     position: (86, 60),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "comment",
                       position: (86, 65),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "</para>",
                   position: (86, 73),
                  },
                 ],
                 position: (86, 51),
                },
               ],
              },
             },
             Raw {
              content: "\n</listitem>\n",
              position: (86, 82),
             },
            ],
            position: (79, 12),
           },
           position: (76, 9),
          },
          position: (75, 18),
         },
        },
       ],
       target: String {
        parts: [
         Raw {
          content: "<itemizedlist>",
          position: (89, 9),
         },
         Interpolation {
          expression: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (89, 25),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "concatStringsSep",
               position: (89, 29),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (89, 47),
              },
             ],
             position: (89, 46),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (89, 52),
              },
              arguments: [
               Parentheses {
                expression: Function {
                 argument: Simple {
                  identifier: "p",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "describe",
                   position: (89, 60),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "unpack",
                      position: (89, 70),
                     },
                     arguments: [
                      Variable {
                       identifier: "p",
                       position: (89, 77),
                      },
                     ],
                    },
                    position: (89, 69),
                   },
                  ],
                 },
                 position: (89, 57),
                },
                position: (89, 56),
               },
               Variable {
                identifier: "packages",
                position: (89, 81),
               },
              ],
             },
             position: (89, 51),
            },
           ],
          },
         },
         Raw {
          content: "</itemizedlist>",
          position: (89, 91),
         },
        ],
        position: (89, 8),
       },
       position: (71, 5),
      },
      position: (70, 34),
     },
     position: (70, 24),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "optionsListVisible",
       position: (92, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (92, 24),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "filter",
         position: (92, 28),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Parentheses {
       expression: Function {
        argument: Simple {
         identifier: "opt",
        },
        definition: BinaryOperation {
         operator: LogicalAnd,
         operands: [
          PropertyAccess {
           expression: Variable {
            identifier: "opt",
            position: (92, 41),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "visible",
              position: (92, 45),
             },
            ],
           },
           default: None,
          },
          UnaryOperation {
           operator: Not,
           operand: PropertyAccess {
            expression: Variable {
             identifier: "opt",
             position: (92, 57),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "internal",
               position: (92, 61),
              },
             ],
            },
            default: None,
           },
           position: (92, 56),
          },
         ],
         position: (92, 53),
        },
        position: (92, 36),
       },
       position: (92, 35),
      },
      Parentheses {
       expression: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (92, 72),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "optionAttrSetToDocList",
            position: (92, 76),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "options",
          position: (92, 99),
         },
        ],
       },
       position: (92, 71),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "optionsNix",
       position: (94, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (94, 16),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "listToAttrs",
         position: (94, 25),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Parentheses {
       expression: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (94, 38),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "o",
           },
           definition: Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "name",
                 position: (94, 48),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "o",
                position: (94, 55),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (94, 57),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "value",
                 position: (94, 63),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "removeAttrs",
                position: (94, 71),
               },
               arguments: [
                Variable {
                 identifier: "o",
                 position: (94, 83),
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "name",
                     position: (94, 87),
                    },
                   ],
                   position: (94, 86),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "visible",
                     position: (94, 94),
                    },
                   ],
                   position: (94, 93),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "internal",
                     position: (94, 104),
                    },
                   ],
                   position: (94, 103),
                  },
                 ],
                 position: (94, 85),
                },
               ],
              },
             },
            ],
            recursive: false,
            position: (94, 46),
           },
           position: (94, 43),
          },
          position: (94, 42),
         },
         Variable {
          identifier: "optionsList",
          position: (94, 119),
         },
        ],
       },
       position: (94, 37),
      },
     ],
    },
   },
  ],
  target: Map {
   bindings: [
    Inherit {
     from: None,
     attributes: [
      Raw {
       content: "optionsNix",
       position: (97, 11),
      },
     ],
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionsAsciiDoc",
        position: (99, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (99, 21),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "runCommand",
          position: (99, 26),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "options.adoc",
          position: (99, 38),
         },
        ],
        position: (99, 37),
       },
       Map {
        bindings: [],
        recursive: false,
        position: (99, 52),
       },
       String {
        parts: [
         Raw {
          content: "",
          position: (100, 1),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (100, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "python3Minimal",
              position: (100, 12),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/python ",
          position: (100, 27),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./generateAsciiDoc.py",
             position: (100, 41),
            },
           ],
           position: (100, 41),
          },
         },
         Raw {
          content: " \\\n  < ",
          position: (100, 63),
         },
         Interpolation {
          expression: Variable {
           identifier: "optionsJSON",
           position: (101, 11),
          },
         },
         Raw {
          content: "/share/doc/nixos/options.json \\\n  > $out\n",
          position: (101, 23),
         },
        ],
        position: (99, 55),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionsCommonMark",
        position: (105, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (105, 23),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "runCommand",
          position: (105, 28),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "options.md",
          position: (105, 40),
         },
        ],
        position: (105, 39),
       },
       Map {
        bindings: [],
        recursive: false,
        position: (105, 52),
       },
       String {
        parts: [
         Raw {
          content: "",
          position: (106, 1),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (106, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "python3Minimal",
              position: (106, 12),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/python ",
          position: (106, 27),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./generateCommonMark.py",
             position: (106, 41),
            },
           ],
           position: (106, 41),
          },
         },
         Raw {
          content: " \\\n  < ",
          position: (106, 65),
         },
         Interpolation {
          expression: Variable {
           identifier: "optionsJSON",
           position: (107, 11),
          },
         },
         Raw {
          content: "/share/doc/nixos/options.json \\\n  > $out\n",
          position: (107, 23),
         },
        ],
        position: (105, 55),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionsJSON",
        position: (111, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (111, 17),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "runCommand",
          position: (111, 22),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "options.json",
          position: (111, 34),
         },
        ],
        position: (111, 33),
       },
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "meta",
             position: (112, 7),
            },
            Raw {
             content: "description",
             position: (112, 12),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "List of NixOS options in JSON format",
             position: (112, 27),
            },
           ],
           position: (112, 26),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "buildInputs",
             position: (113, 7),
            },
           ],
          },
          to: List {
           elements: [
            PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (113, 23),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "brotli",
                position: (113, 28),
               },
              ],
             },
             default: None,
            },
           ],
           position: (113, 21),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "options",
             position: (114, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (114, 17),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "toFile",
               position: (114, 26),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "options.json",
               position: (114, 34),
              },
             ],
             position: (114, 33),
            },
            Parentheses {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (115, 10),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "unsafeDiscardStringContext",
                  position: (115, 19),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Parentheses {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (115, 47),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "toJSON",
                     position: (115, 56),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "optionsNix",
                   position: (115, 63),
                  },
                 ],
                },
                position: (115, 46),
               },
              ],
             },
             position: (115, 9),
            },
           ],
          },
         },
        ],
        recursive: false,
        position: (112, 5),
       },
       String {
        parts: [
         Raw {
          content: "# Export list of options in different format.\ndst=$out/share/doc/nixos\nmkdir -p $dst\n\n",
          position: (118, 1),
         },
         Interpolation {
          expression: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "baseOptionsJSON",
              position: (123, 12),
             },
             Variable {
              identifier: "null",
              position: (123, 31),
             },
            ],
            position: (123, 28),
           },
           then: String {
            parts: [
             Raw {
              content: "cp $options $dst/options.json",
              position: (124, 17),
             },
            ],
            position: (124, 16),
           },
           else_: String {
            parts: [
             Raw {
              content: "",
              position: (126, 1),
             },
             Interpolation {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (126, 15),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "python3Minimal",
                  position: (126, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/bin/python ",
              position: (126, 35),
             },
             Interpolation {
              expression: Path {
               parts: [
                Raw {
                 content: "./mergeJSON.py",
                 position: (126, 49),
                },
               ],
               position: (126, 49),
              },
             },
             Raw {
              content: " \\\n  ",
              position: (126, 64),
             },
             Interpolation {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (127, 17),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "optionalString",
                   position: (127, 21),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "warningsAreErrors",
                 position: (127, 36),
                },
                String {
                 parts: [
                  Raw {
                   content: "--warnings-are-errors",
                   position: (127, 55),
                  },
                 ],
                 position: (127, 54),
                },
               ],
              },
             },
             Raw {
              content: " \\\n  ",
              position: (127, 78),
             },
             Interpolation {
              expression: Variable {
               identifier: "baseOptionsJSON",
               position: (128, 17),
              },
             },
             Raw {
              content: " $options \\\n  > $dst/options.json\n",
              position: (128, 33),
             },
            ],
            position: (125, 16),
           },
           position: (123, 9),
          },
         },
         Raw {
          content: "\n\nbrotli -9 < $dst/options.json > $dst/options.json.br\n\nmkdir -p $out/nix-support\necho \"file json $dst/options.json\" >> $out/nix-support/hydra-build-products\necho \"file json-br $dst/options.json.br\" >> $out/nix-support/hydra-build-products\n",
          position: (131, 8),
         },
        ],
        position: (117, 5),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionsXML",
        position: (143, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (143, 16),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "runCommand",
          position: (143, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "options.xml",
          position: (143, 33),
         },
        ],
        position: (143, 32),
       },
       Map {
        bindings: [],
        recursive: false,
        position: (143, 46),
       },
       String {
        parts: [
         Raw {
          content: "export NIX_STORE_DIR=$TMPDIR/store\nexport NIX_STATE_DIR=$TMPDIR/state\n",
          position: (144, 1),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (146, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "nix",
              position: (146, 12),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/nix-instantiate \\\n  --eval --xml --strict ",
          position: (146, 16),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./optionsJSONtoXML.nix",
             position: (147, 31),
            },
           ],
           position: (147, 31),
          },
         },
         Raw {
          content: " \\\n  --argstr file ",
          position: (147, 54),
         },
         Interpolation {
          expression: Variable {
           identifier: "optionsJSON",
           position: (148, 23),
          },
         },
         Raw {
          content: "/share/doc/nixos/options.json \\\n  > \"$out\"\n",
          position: (148, 35),
         },
        ],
        position: (143, 49),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionsDocBook",
        position: (152, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (152, 20),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "runCommand",
          position: (152, 25),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "options-docbook.xml",
          position: (152, 37),
         },
        ],
        position: (152, 36),
       },
       Map {
        bindings: [],
        recursive: false,
        position: (152, 58),
       },
       String {
        parts: [
         Raw {
          content: "optionsXML=",
          position: (153, 1),
         },
         Interpolation {
          expression: Variable {
           identifier: "optionsXML",
           position: (153, 18),
          },
         },
         Raw {
          content: "\nif grep /nixpkgs/nixos/modules $optionsXML; then\n  echo \"The manual appears to depend on the location of Nixpkgs, which is bad\"\n  echo \"since this prevents sharing via the NixOS channel.  This is typically\"\n  echo \"caused by an option default that refers to a relative path (see above\"\n  echo \"for hints about the offending path).\"\n  exit 1\nfi\n\n",
          position: (153, 29),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (162, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "python3Minimal",
              position: (162, 12),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/python ",
          position: (162, 27),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./sortXML.py",
             position: (162, 41),
            },
           ],
           position: (162, 41),
          },
         },
         Raw {
          content: " $optionsXML sorted.xml\n",
          position: (162, 54),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (163, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "libxslt",
              position: (163, 12),
             },
             Raw {
              content: "bin",
              position: (163, 20),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/xsltproc \\\n  --stringparam revision ",
          position: (163, 24),
         },
         Raw {
          content: "'",
          position: (164, 30),
         },
         Interpolation {
          expression: Variable {
           identifier: "revision",
           position: (164, 33),
          },
         },
         Raw {
          content: "' \\\n  -o intermediate.xml ",
          position: (164, 42),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./options-to-docbook.xsl",
             position: (165, 29),
            },
           ],
           position: (165, 29),
          },
         },
         Raw {
          content: " sorted.xml\n",
          position: (165, 54),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (166, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "libxslt",
              position: (166, 12),
             },
             Raw {
              content: "bin",
              position: (166, 20),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/xsltproc \\\n  -o \"$out\" ",
          position: (166, 24),
         },
         Interpolation {
          expression: Path {
           parts: [
            Raw {
             content: "./postprocess-option-descriptions.xsl",
             position: (167, 19),
            },
           ],
           position: (167, 19),
          },
         },
         Raw {
          content: " intermediate.xml\n",
          position: (167, 57),
         },
        ],
        position: (152, 61),
       },
      ],
     },
    },
   ],
   recursive: true,
   position: (96, 4),
  },
  position: (33, 1),
 },
 position: (19, 1),
}