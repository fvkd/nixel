---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "logrotate",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "pathOpts",
        position: (11, 3),
       },
      ],
     },
     to: Function {
      argument: Destructured {
       identifier: None,
       arguments: [
        DestructuredArgument {
         identifier: "name",
         default: None,
        },
       ],
       ellipsis: true,
      },
      definition: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "options",
            position: (12, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (13, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (13, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (14, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (14, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (14, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (15, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (15, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (16, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Whether to enable log rotation for this path. This can be used to explicitly disable\nlogging that has been configured by NixOS.\n",
                    position: (17, 1),
                   },
                  ],
                  position: (16, 23),
                 },
                },
               ],
               recursive: false,
               position: (13, 25),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "name",
               position: (22, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (22, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (23, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (23, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (23, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "internal",
                    position: (24, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (24, 20),
                 },
                },
               ],
               recursive: false,
               position: (22, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "path",
               position: (27, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (27, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (28, 9),
                   },
                  ],
                 },
                 to: With {
                  expression: Variable {
                   identifier: "types",
                   position: (28, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (28, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (28, 35),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "listOf",
                       position: (28, 40),
                      },
                      arguments: [
                       Variable {
                        identifier: "str",
                        position: (28, 47),
                       },
                      ],
                     },
                     position: (28, 39),
                    },
                   ],
                  },
                  position: (28, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (29, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "name",
                  position: (29, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (30, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "attribute name",
                    position: (30, 24),
                   },
                  ],
                  position: (30, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (31, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The path to log files to be rotated.\nSpaces are allowed and normal shell quoting rules apply,\nwith ', \", and \\ characters supported.\n",
                    position: (32, 1),
                   },
                  ],
                  position: (31, 23),
                 },
                },
               ],
               recursive: false,
               position: (27, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "user",
               position: (38, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (38, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (39, 9),
                   },
                  ],
                 },
                 to: With {
                  expression: Variable {
                   identifier: "types",
                   position: (39, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (39, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (39, 35),
                    },
                   ],
                  },
                  position: (39, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (40, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "null",
                  position: (40, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (41, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The user account to use for rotation.\n",
                    position: (42, 1),
                   },
                  ],
                  position: (41, 23),
                 },
                },
               ],
               recursive: false,
               position: (38, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "group",
               position: (46, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (46, 15),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (47, 9),
                   },
                  ],
                 },
                 to: With {
                  expression: Variable {
                   identifier: "types",
                   position: (47, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (47, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (47, 35),
                    },
                   ],
                  },
                  position: (47, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (48, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "null",
                  position: (48, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (49, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The group to use for rotation.\n",
                    position: (50, 1),
                   },
                  ],
                  position: (49, 23),
                 },
                },
               ],
               recursive: false,
               position: (46, 24),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "frequency",
               position: (54, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (54, 19),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (55, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (55, 16),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "enum",
                      position: (55, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "hourly",
                        position: (55, 30),
                       },
                      ],
                      position: (55, 29),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "daily",
                        position: (55, 39),
                       },
                      ],
                      position: (55, 38),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "weekly",
                        position: (55, 47),
                       },
                      ],
                      position: (55, 46),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "monthly",
                        position: (55, 56),
                       },
                      ],
                      position: (55, 55),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "yearly",
                        position: (55, 66),
                       },
                      ],
                      position: (55, 65),
                     },
                    ],
                    position: (55, 27),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (56, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "daily",
                    position: (56, 20),
                   },
                  ],
                  position: (56, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (57, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "How often to rotate the logs.\n",
                    position: (58, 1),
                   },
                  ],
                  position: (57, 23),
                 },
                },
               ],
               recursive: false,
               position: (54, 28),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "keep",
               position: (62, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (62, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (63, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (63, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "int",
                     position: (63, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (64, 9),
                   },
                  ],
                 },
                 to: Int {
                  value: 20,
                  position: (64, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (65, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "How many rotations to keep.\n",
                    position: (66, 1),
                   },
                  ],
                  position: (65, 23),
                 },
                },
               ],
               recursive: false,
               position: (62, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "extraConfig",
               position: (70, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (70, 21),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (71, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (71, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (71, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (72, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (72, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (73, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Extra logrotate config options for this path. Refer to\n<link xlink:href=\"https://linux.die.net/man/8/logrotate\"/> for details.\n",
                    position: (74, 1),
                   },
                  ],
                  position: (73, 23),
                 },
                },
               ],
               recursive: false,
               position: (70, 30),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "priority",
               position: (79, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (79, 18),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (80, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (80, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "int",
                     position: (80, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (81, 9),
                   },
                  ],
                 },
                 to: Int {
                  value: 1000,
                  position: (81, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (82, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Order of this logrotate block in relation to the others. The semantics are\nthe same as with `lib.mkOrder`. Smaller values have a greater priority.\n",
                    position: (83, 1),
                   },
                  ],
                  position: (82, 23),
                 },
                },
               ],
               recursive: false,
               position: (79, 27),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (12, 15),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "config",
            position: (89, 5),
           },
           Raw {
            content: "name",
            position: (89, 12),
           },
          ],
         },
         to: Variable {
          identifier: "name",
          position: (89, 19),
         },
        },
       ],
       recursive: false,
       position: (11, 29),
      },
      position: (11, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "generateLine",
        position: (92, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "n",
      },
      definition: Function {
       argument: Simple {
        identifier: "v",
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: LogicalOr,
         operands: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (93, 8),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "elem",
               position: (93, 17),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "n",
             position: (93, 22),
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "files",
                 position: (93, 27),
                },
               ],
               position: (93, 26),
              },
              String {
               parts: [
                Raw {
                 content: "priority",
                 position: (93, 35),
                },
               ],
               position: (93, 34),
              },
              String {
               parts: [
                Raw {
                 content: "enable",
                 position: (93, 46),
                },
               ],
               position: (93, 45),
              },
              String {
               parts: [
                Raw {
                 content: "global",
                 position: (93, 55),
                },
               ],
               position: (93, 54),
              },
             ],
             position: (93, 24),
            },
           ],
          },
          BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "v",
             position: (93, 68),
            },
            Variable {
             identifier: "null",
             position: (93, 73),
            },
           ],
           position: (93, 70),
          },
         ],
         position: (93, 65),
        },
        then: Variable {
         identifier: "null",
         position: (93, 83),
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (94, 13),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "elem",
              position: (94, 22),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "n",
            position: (94, 27),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "extraConfig",
                position: (94, 32),
               },
              ],
              position: (94, 31),
             },
             String {
              parts: [
               Raw {
                content: "frequency",
                position: (94, 46),
               },
              ],
              position: (94, 45),
             },
            ],
            position: (94, 29),
           },
          ],
         },
         then: String {
          parts: [
           Expression {
            expression: Variable {
             identifier: "v",
             position: (94, 67),
            },
           },
           Raw {
            content: "\n",
            position: (94, 69),
           },
          ],
          position: (94, 64),
         },
         else_: IfThenElse {
          predicate: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (95, 13),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "elem",
               position: (95, 22),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "n",
             position: (95, 27),
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "firstaction",
                 position: (95, 32),
                },
               ],
               position: (95, 31),
              },
              String {
               parts: [
                Raw {
                 content: "lastaction",
                 position: (95, 46),
                },
               ],
               position: (95, 45),
              },
              String {
               parts: [
                Raw {
                 content: "prerotate",
                 position: (95, 59),
                },
               ],
               position: (95, 58),
              },
              String {
               parts: [
                Raw {
                 content: "postrotate",
                 position: (95, 71),
                },
               ],
               position: (95, 70),
              },
              String {
               parts: [
                Raw {
                 content: "preremove",
                 position: (95, 84),
                },
               ],
               position: (95, 83),
              },
             ],
             position: (95, 29),
            },
           ],
          },
          then: String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "n",
              position: (96, 18),
             },
            },
            Raw {
             content: "\n    ",
             position: (96, 20),
            },
            Expression {
             expression: Variable {
              identifier: "v",
              position: (96, 28),
             },
            },
            Raw {
             content: "\n  endscript\n",
             position: (96, 30),
            },
           ],
           position: (96, 15),
          },
          else_: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isInt",
             position: (97, 13),
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (97, 19),
             },
            ],
           },
           then: String {
            parts: [
             Expression {
              expression: Variable {
               identifier: "n",
               position: (97, 29),
              },
             },
             Raw {
              content: " ",
              position: (97, 31),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (97, 34),
               },
               arguments: [
                Variable {
                 identifier: "v",
                 position: (97, 43),
                },
               ],
              },
             },
             Raw {
              content: "\n",
              position: (97, 45),
             },
            ],
            position: (97, 26),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "v",
               position: (98, 13),
              },
              Variable {
               identifier: "true",
               position: (98, 18),
              },
             ],
             position: (98, 15),
            },
            then: String {
             parts: [
              Expression {
               expression: Variable {
                identifier: "n",
                position: (98, 31),
               },
              },
              Raw {
               content: "\n",
               position: (98, 33),
              },
             ],
             position: (98, 28),
            },
            else_: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               Variable {
                identifier: "v",
                position: (99, 13),
               },
               Variable {
                identifier: "false",
                position: (99, 18),
               },
              ],
              position: (99, 15),
             },
             then: String {
              parts: [
               Raw {
                content: "no",
                position: (99, 30),
               },
               Expression {
                expression: Variable {
                 identifier: "n",
                 position: (99, 34),
                },
               },
               Raw {
                content: "\n",
                position: (99, 36),
               },
              ],
              position: (99, 29),
             },
             else_: String {
              parts: [
               Expression {
                expression: Variable {
                 identifier: "n",
                 position: (100, 13),
                },
               },
               Raw {
                content: " ",
                position: (100, 15),
               },
               Expression {
                expression: Variable {
                 identifier: "v",
                 position: (100, 18),
                },
               },
               Raw {
                content: "\n",
                position: (100, 20),
               },
              ],
              position: (100, 10),
             },
             position: (99, 10),
            },
            position: (98, 10),
           },
           position: (97, 10),
          },
          position: (95, 10),
         },
         position: (94, 10),
        },
        position: (93, 5),
       },
       position: (92, 21),
      },
      position: (92, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "generateSection",
        position: (101, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "indent",
      },
      definition: Function {
       argument: Simple {
        identifier: "settings",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "concatStringsSep",
         position: (101, 39),
        },
        arguments: [
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "fixedWidthString",
            position: (101, 57),
           },
           arguments: [
            Variable {
             identifier: "indent",
             position: (101, 74),
            },
            String {
             parts: [
              Raw {
               content: " ",
               position: (101, 82),
              },
             ],
             position: (101, 81),
            },
            String {
             parts: [],
             position: (101, 85),
            },
           ],
          },
          position: (101, 56),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "filter",
            position: (102, 5),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "x",
              },
              definition: BinaryOperation {
               operator: NotEqualTo,
               operands: [
                Variable {
                 identifier: "x",
                 position: (102, 16),
                },
                Variable {
                 identifier: "null",
                 position: (102, 21),
                },
               ],
               position: (102, 18),
              },
              position: (102, 13),
             },
             position: (102, 12),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "mapAttrsToList",
               position: (102, 28),
              },
              arguments: [
               Variable {
                identifier: "generateLine",
                position: (102, 43),
               },
               Variable {
                identifier: "settings",
                position: (102, 56),
               },
              ],
             },
             position: (102, 27),
            },
           ],
          },
          position: (101, 89),
         },
        ],
       },
       position: (101, 29),
      },
      position: (101, 21),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mkConf",
        position: (106, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "settings",
      },
      definition: IfThenElse {
       predicate: PropertyAccess {
        expression: Variable {
         identifier: "settings",
         position: (107, 8),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "global",
           position: (107, 17),
          },
         ],
        },
        default: Some(
         Variable {
          identifier: "false",
          position: (107, 27),
         },
        ),
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "generateSection",
         position: (107, 38),
        },
        arguments: [
         Int {
          value: 0,
          position: (107, 54),
         },
         Variable {
          identifier: "settings",
          position: (107, 56),
         },
        ],
       },
       else_: String {
        parts: [
         Raw {
          content: "",
          position: (109, 1),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "concatMapStringsSep",
            position: (109, 9),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (109, 30),
              },
             ],
             position: (109, 29),
            },
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "files",
              },
              definition: String {
               parts: [
                Raw {
                 content: "\"",
                 position: (109, 44),
                },
                Expression {
                 expression: Variable {
                  identifier: "files",
                  position: (109, 47),
                 },
                },
                Raw {
                 content: "\"",
                 position: (109, 53),
                },
               ],
               position: (109, 42),
              },
              position: (109, 35),
             },
             position: (109, 34),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "toList",
               position: (109, 59),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "settings",
                 position: (109, 66),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "files",
                   position: (109, 75),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             position: (109, 58),
            },
           ],
          },
         },
         Raw {
          content: " {\n ",
          position: (109, 82),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "generateSection",
            position: (110, 11),
           },
           arguments: [
            Int {
             value: 2,
             position: (110, 27),
            },
            Variable {
             identifier: "settings",
             position: (110, 29),
            },
           ],
          },
         },
         Raw {
          content: "}\n",
          position: (110, 38),
         },
        ],
        position: (108, 10),
       },
       position: (107, 5),
      },
      position: (106, 12),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapPathOptToSetting",
        position: (114, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "n",
      },
      definition: Function {
       argument: Simple {
        identifier: "v",
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "n",
           position: (115, 8),
          },
          String {
           parts: [
            Raw {
             content: "keep",
             position: (115, 14),
            },
           ],
           position: (115, 13),
          },
         ],
         position: (115, 10),
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "nameValuePair",
          position: (115, 25),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "rotate",
             position: (115, 40),
            },
           ],
           position: (115, 39),
          },
          Variable {
           identifier: "v",
           position: (115, 48),
          },
         ],
        },
        else_: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "n",
            position: (116, 13),
           },
           String {
            parts: [
             Raw {
              content: "path",
              position: (116, 19),
             },
            ],
            position: (116, 18),
           },
          ],
          position: (116, 15),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "nameValuePair",
           position: (116, 30),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "files",
              position: (116, 45),
             },
            ],
            position: (116, 44),
           },
           Variable {
            identifier: "v",
            position: (116, 52),
           },
          ],
         },
         else_: FunctionApplication {
          function: Variable {
           identifier: "nameValuePair",
           position: (117, 10),
          },
          arguments: [
           Variable {
            identifier: "n",
            position: (117, 24),
           },
           Variable {
            identifier: "v",
            position: (117, 26),
           },
          ],
         },
         position: (116, 10),
        },
        position: (115, 5),
       },
       position: (114, 28),
      },
      position: (114, 25),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapPathsToSettings",
        position: (119, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "path",
      },
      definition: Function {
       argument: Simple {
        identifier: "pathOpts",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "nameValuePair",
         position: (120, 5),
        },
        arguments: [
         Variable {
          identifier: "path",
          position: (120, 19),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "filterAttrs",
            position: (121, 7),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "n",
              },
              definition: Function {
               argument: Simple {
                identifier: "v",
               },
               definition: BinaryOperation {
                operator: LogicalAnd,
                operands: [
                 UnaryOperation {
                  operator: Not,
                  operand: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (121, 28),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "elem",
                       position: (121, 37),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "n",
                     position: (121, 42),
                    },
                    List {
                     elements: [
                      String {
                       parts: [
                        Raw {
                         content: "user",
                         position: (121, 47),
                        },
                       ],
                       position: (121, 46),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "group",
                         position: (121, 54),
                        },
                       ],
                       position: (121, 53),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "name",
                         position: (121, 62),
                        },
                       ],
                       position: (121, 61),
                      },
                     ],
                     position: (121, 44),
                    },
                   ],
                  },
                  position: (121, 26),
                 },
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   Variable {
                    identifier: "v",
                    position: (121, 73),
                   },
                   String {
                    parts: [],
                    position: (121, 78),
                   },
                  ],
                  position: (121, 75),
                 },
                ],
                position: (121, 70),
               },
               position: (121, 23),
              },
              position: (121, 20),
             },
             position: (121, 19),
            },
            Parentheses {
             expression: BinaryOperation {
              operator: Update,
              operands: [
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "mapAttrs'",
                  position: (122, 10),
                 },
                 arguments: [
                  Variable {
                   identifier: "mapPathOptToSetting",
                   position: (122, 20),
                  },
                  Variable {
                   identifier: "pathOpts",
                   position: (122, 40),
                  },
                 ],
                },
                position: (122, 9),
               },
               Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "su",
                     position: (124, 11),
                    },
                   ],
                  },
                  to: IfThenElse {
                   predicate: BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "pathOpts",
                       position: (125, 16),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "user",
                         position: (125, 25),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "null",
                      position: (125, 33),
                     },
                    ],
                    position: (125, 30),
                   },
                   then: String {
                    parts: [
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "pathOpts",
                        position: (126, 21),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "user",
                          position: (126, 30),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: " ",
                      position: (126, 35),
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "pathOpts",
                        position: (126, 38),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "group",
                          position: (126, 47),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                    ],
                    position: (126, 18),
                   },
                   else_: Variable {
                    identifier: "null",
                    position: (127, 18),
                   },
                   position: (125, 13),
                  },
                 },
                ],
                recursive: false,
                position: (123, 9),
               },
              ],
              position: (122, 50),
             },
             position: (121, 82),
            },
           ],
          },
          position: (120, 24),
         },
        ],
       },
       position: (119, 30),
      },
      position: (119, 24),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "settings",
        position: (132, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "sortProperties",
       position: (132, 14),
      },
      arguments: [
       Parentheses {
        expression: FunctionApplication {
         function: Variable {
          identifier: "attrValues",
          position: (132, 30),
         },
         arguments: [
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "filterAttrs",
             position: (132, 42),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "_",
               },
               definition: Function {
                argument: Simple {
                 identifier: "settings",
                },
                definition: PropertyAccess {
                 expression: Variable {
                  identifier: "settings",
                  position: (132, 68),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "enable",
                    position: (132, 77),
                   },
                  ],
                 },
                 default: None,
                },
                position: (132, 58),
               },
               position: (132, 55),
              },
              position: (132, 54),
             },
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "foldAttrs",
                position: (133, 5),
               },
               arguments: [
                Variable {
                 identifier: "recursiveUpdate",
                 position: (133, 15),
                },
                Map {
                 bindings: [],
                 recursive: false,
                 position: (133, 31),
                },
                List {
                 elements: [
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "header",
                        position: (135, 9),
                       },
                      ],
                     },
                     to: Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "enable",
                           position: (136, 11),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "true",
                         position: (136, 20),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "missingok",
                           position: (137, 11),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "true",
                         position: (137, 23),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "notifempty",
                           position: (138, 11),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "true",
                         position: (138, 24),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "frequency",
                           position: (139, 11),
                          },
                         ],
                        },
                        to: String {
                         parts: [
                          Raw {
                           content: "weekly",
                           position: (139, 24),
                          },
                         ],
                         position: (139, 23),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "rotate",
                           position: (140, 11),
                          },
                         ],
                        },
                        to: Int {
                         value: 4,
                         position: (140, 20),
                        },
                       },
                      ],
                      recursive: false,
                      position: (135, 18),
                     },
                    },
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "extraConfig",
                        position: (143, 9),
                       },
                      ],
                     },
                     to: Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "enable",
                           position: (144, 11),
                          },
                         ],
                        },
                        to: Parentheses {
                         expression: BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "cfg",
                             position: (144, 21),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "extraConfig",
                               position: (144, 25),
                              },
                             ],
                            },
                            default: None,
                           },
                           String {
                            parts: [],
                            position: (144, 40),
                           },
                          ],
                          position: (144, 37),
                         },
                         position: (144, 20),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "global",
                           position: (145, 11),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "true",
                         position: (145, 20),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "extraConfig",
                           position: (146, 11),
                          },
                         ],
                        },
                        to: PropertyAccess {
                         expression: Variable {
                          identifier: "cfg",
                          position: (146, 25),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "extraConfig",
                            position: (146, 29),
                           },
                          ],
                         },
                         default: None,
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "priority",
                           position: (147, 11),
                          },
                         ],
                        },
                        to: Int {
                         value: 101,
                         position: (147, 22),
                        },
                       },
                      ],
                      recursive: false,
                      position: (143, 23),
                     },
                    },
                   ],
                   recursive: false,
                   position: (134, 7),
                  },
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "mapAttrs'",
                     position: (150, 8),
                    },
                    arguments: [
                     Variable {
                      identifier: "mapPathsToSettings",
                      position: (150, 18),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (150, 37),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "paths",
                         position: (150, 41),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (150, 7),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (151, 7),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "settings",
                      position: (151, 11),
                     },
                    ],
                   },
                   default: None,
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "header",
                        position: (152, 9),
                       },
                      ],
                     },
                     to: Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "global",
                           position: (152, 20),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "true",
                         position: (152, 29),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "priority",
                           position: (152, 35),
                          },
                         ],
                        },
                        to: Int {
                         value: 100,
                         position: (152, 46),
                        },
                       },
                      ],
                      recursive: false,
                      position: (152, 18),
                     },
                    },
                   ],
                   recursive: false,
                   position: (152, 7),
                  },
                 ],
                 position: (133, 35),
                },
               ],
              },
              position: (132, 85),
             },
            ],
           },
           position: (132, 41),
          },
         ],
        },
        position: (132, 29),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "configFile",
        position: (155, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (155, 16),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "writeTextFile",
          position: (155, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (156, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "logrotate.conf",
             position: (156, 13),
            },
           ],
           position: (156, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "text",
             position: (157, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "concatStringsSep",
            position: (157, 12),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (157, 30),
              },
             ],
             position: (157, 29),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (158, 7),
              },
              arguments: [
               Variable {
                identifier: "mkConf",
                position: (158, 11),
               },
               Variable {
                identifier: "settings",
                position: (158, 18),
               },
              ],
             },
             position: (157, 34),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "checkPhase",
             position: (160, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (160, 18),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (160, 33),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "checkConfig",
                position: (160, 37),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "# logrotate --debug also checks that users specified in config\n# file exist, but we only have sandboxed users here so brown these\n# out. according to man page that means su, create and createolddir.\n# files required to exist also won't be present, so missingok is forced.\nuser=$(",
               position: (161, 1),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (165, 16),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "coreutils",
                   position: (165, 21),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "/bin/id -un)\ngroup=$(",
               position: (165, 31),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (166, 17),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "coreutils",
                   position: (166, 22),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "/bin/id -gn)\nsed -e \"s/\\bsu\\s.*/su $user $group/\" \\\n    -e \"s/\\b\\(create\\s\\+[0-9]*\\s*\\|createolddir\\s\\+[0-9]*\\s\\+\\).*/\\1$user $group/\" \\\n    -e \"1imissingok\" -e \"s/\\bnomissingok\\b//\" \\\n    $out > /tmp/logrotate.conf\n# Since this makes for very verbose builds only show real error.\n# There is no way to control log level, but logrotate hardcodes\n# 'error:' at common log level, so we can use grep, taking care\n# to keep error codes\nset -o pipefail\nif ! ",
               position: (166, 32),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (176, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "logrotate",
                   position: (176, 19),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "/sbin/logrotate --debug /tmp/logrotate.conf 2>&1 \\\n    | ( ! grep \"error:\" ) > /tmp/logrotate-error; then\n        echo \"Logrotate configuration check failed.\"\n        echo \"The failing configuration (after adjustments to pass tests in sandbox) was:\"\n        printf \"%s\\n\" \"-------\"\n        cat /tmp/logrotate.conf\n        printf \"%s\\n\" \"-------\"\n        echo \"The error reported by logrotate was as follow:\"\n        printf \"%s\\n\" \"-------\"\n        cat /tmp/logrotate-error\n        printf \"%s\\n\" \"-------\"\n        echo \"You can disable this check with services.logrotate.checkConfig = false,\"\n        echo \"but if you think it should work please report this failure along with\"\n        echo \"the config file being tested!\"\n        false\nfi\n",
               position: (176, 29),
              },
             ],
             position: (160, 49),
            },
           ],
          },
         },
        ],
        recursive: false,
        position: (155, 35),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mailOption",
        position: (195, 3),
       },
      ],
     },
     to: IfThenElse {
      predicate: FunctionApplication {
       function: Variable {
        identifier: "foldr",
        position: (196, 8),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "n",
          },
          definition: Function {
           argument: Simple {
            identifier: "a",
           },
           definition: BinaryOperation {
            operator: LogicalOr,
            operands: [
             Variable {
              identifier: "a",
              position: (196, 21),
             },
             HasProperty {
              expression: Variable {
               identifier: "n",
               position: (196, 26),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "mail",
                 position: (196, 30),
                },
               ],
              },
              position: (196, 28),
             },
            ],
            position: (196, 23),
           },
           position: (196, 18),
          },
          position: (196, 15),
         },
         position: (196, 14),
        },
        Variable {
         identifier: "false",
         position: (196, 36),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "attrValues",
           position: (196, 43),
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (196, 54),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "settings",
               position: (196, 58),
              },
             ],
            },
            default: None,
           },
          ],
         },
         position: (196, 42),
        },
       ],
      },
      then: String {
       parts: [
        Raw {
         content: "--mail=",
         position: (197, 11),
        },
        Expression {
         expression: PropertyAccess {
          expression: Variable {
           identifier: "pkgs",
           position: (197, 20),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "mailutils",
             position: (197, 25),
            },
           ],
          },
          default: None,
         },
        },
        Raw {
         content: "/bin/mail",
         position: (197, 35),
        },
       ],
       position: (197, 10),
      },
      else_: String {
       parts: [],
       position: (198, 10),
      },
      position: (196, 5),
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "imports",
         position: (201, 3),
        },
       ],
      },
      to: List {
       elements: [
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (202, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (202, 31),
               },
              ],
              position: (202, 30),
             },
             String {
              parts: [
               Raw {
                content: "logrotate",
                position: (202, 42),
               },
              ],
              position: (202, 41),
             },
             String {
              parts: [
               Raw {
                content: "config",
                position: (202, 54),
               },
              ],
              position: (202, 53),
             },
            ],
            position: (202, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (202, 67),
               },
              ],
              position: (202, 66),
             },
             String {
              parts: [
               Raw {
                content: "logrotate",
                position: (202, 78),
               },
              ],
              position: (202, 77),
             },
             String {
              parts: [
               Raw {
                content: "extraConfig",
                position: (202, 90),
               },
              ],
              position: (202, 89),
             },
            ],
            position: (202, 64),
           },
          ],
         },
         position: (202, 5),
        },
       ],
       position: (201, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (205, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "services",
            position: (206, 5),
           },
           Raw {
            content: "logrotate",
            position: (206, 14),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (207, 7),
              },
             ],
            },
            to: BinaryOperation {
             operator: Update,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "mkEnableOption",
                position: (207, 16),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "the logrotate systemd service",
                   position: (207, 32),
                  },
                 ],
                 position: (207, 31),
                },
               ],
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (208, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "foldr",
                   position: (208, 19),
                  },
                  arguments: [
                   Parentheses {
                    expression: Function {
                     argument: Simple {
                      identifier: "n",
                     },
                     definition: Function {
                      argument: Simple {
                       identifier: "a",
                      },
                      definition: BinaryOperation {
                       operator: LogicalOr,
                       operands: [
                        Variable {
                         identifier: "a",
                         position: (208, 32),
                        },
                        PropertyAccess {
                         expression: Variable {
                          identifier: "n",
                          position: (208, 37),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "enable",
                            position: (208, 39),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                       position: (208, 34),
                      },
                      position: (208, 29),
                     },
                     position: (208, 26),
                    },
                    position: (208, 25),
                   },
                   Variable {
                    identifier: "false",
                    position: (208, 47),
                   },
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "attrValues",
                      position: (208, 54),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (208, 65),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "settings",
                          position: (208, 69),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                    position: (208, 53),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (209, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (209, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "cfg.settings != {}",
                      position: (209, 42),
                     },
                    ],
                    position: (209, 41),
                   },
                  ],
                 },
                },
               ],
               recursive: false,
               position: (207, 66),
              },
             ],
             position: (207, 63),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "settings",
               position: (212, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (212, 18),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (213, 9),
                   },
                  ],
                 },
                 to: Map {
                  bindings: [],
                  recursive: false,
                  position: (213, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (214, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "logrotate freeform settings: each attribute here will define its own section,\nordered by priority, which can either define files to rotate with their settings\nor settings common to all further files settings.\nRefer to <link xlink:href=\"https://linux.die.net/man/8/logrotate\"/> for details.\n",
                    position: (215, 1),
                   },
                  ],
                  position: (214, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (220, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (220, 16),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "attrsOf",
                      position: (220, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (220, 31),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "submodule",
                         position: (220, 37),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Parentheses {
                       expression: Function {
                        argument: Destructured {
                         identifier: None,
                         arguments: [
                          DestructuredArgument {
                           identifier: "name",
                           default: None,
                          },
                         ],
                         ellipsis: true,
                        },
                        definition: Map {
                         bindings: [
                          Binding {
                           from: AttributePath {
                            parts: [
                             Raw {
                              content: "freeformType",
                              position: (221, 11),
                             },
                            ],
                           },
                           to: With {
                            expression: Variable {
                             identifier: "types",
                             position: (221, 31),
                            },
                            target: FunctionApplication {
                             function: Variable {
                              identifier: "attrsOf",
                              position: (221, 38),
                             },
                             arguments: [
                              Parentheses {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "nullOr",
                                 position: (221, 47),
                                },
                                arguments: [
                                 Parentheses {
                                  expression: FunctionApplication {
                                   function: Variable {
                                    identifier: "oneOf",
                                    position: (221, 55),
                                   },
                                   arguments: [
                                    List {
                                     elements: [
                                      Variable {
                                       identifier: "int",
                                       position: (221, 63),
                                      },
                                      Variable {
                                       identifier: "bool",
                                       position: (221, 67),
                                      },
                                      Variable {
                                       identifier: "str",
                                       position: (221, 72),
                                      },
                                     ],
                                     position: (221, 61),
                                    },
                                   ],
                                  },
                                  position: (221, 54),
                                 },
                                ],
                               },
                               position: (221, 46),
                              },
                             ],
                            },
                            position: (221, 26),
                           },
                          },
                          Binding {
                           from: AttributePath {
                            parts: [
                             Raw {
                              content: "options",
                              position: (223, 11),
                             },
                            ],
                           },
                           to: Map {
                            bindings: [
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "enable",
                                 position: (224, 13),
                                },
                               ],
                              },
                              to: BinaryOperation {
                               operator: Update,
                               operands: [
                                FunctionApplication {
                                 function: Variable {
                                  identifier: "mkEnableOption",
                                  position: (224, 22),
                                 },
                                 arguments: [
                                  String {
                                   parts: [
                                    Raw {
                                     content: "setting individual kill switch",
                                     position: (224, 38),
                                    },
                                   ],
                                   position: (224, 37),
                                  },
                                 ],
                                },
                                Map {
                                 bindings: [
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "default",
                                      position: (225, 15),
                                     },
                                    ],
                                   },
                                   to: Variable {
                                    identifier: "true",
                                    position: (225, 25),
                                   },
                                  },
                                 ],
                                 recursive: false,
                                 position: (224, 73),
                                },
                               ],
                               position: (224, 70),
                              },
                             },
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "global",
                                 position: (228, 13),
                                },
                               ],
                              },
                              to: FunctionApplication {
                               function: Variable {
                                identifier: "mkOption",
                                position: (228, 22),
                               },
                               arguments: [
                                Map {
                                 bindings: [
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "type",
                                      position: (229, 15),
                                     },
                                    ],
                                   },
                                   to: PropertyAccess {
                                    expression: Variable {
                                     identifier: "types",
                                     position: (229, 22),
                                    },
                                    attribute_path: AttributePath {
                                     parts: [
                                      Raw {
                                       content: "bool",
                                       position: (229, 28),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "default",
                                      position: (230, 15),
                                     },
                                    ],
                                   },
                                   to: Variable {
                                    identifier: "false",
                                    position: (230, 25),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "description",
                                      position: (231, 15),
                                     },
                                    ],
                                   },
                                   to: String {
                                    parts: [
                                     Raw {
                                      content: "Whether this setting is a global option or not: set to have these\nsettings apply to all files settings with a higher priority.\n",
                                      position: (232, 1),
                                     },
                                    ],
                                    position: (231, 29),
                                   },
                                  },
                                 ],
                                 recursive: false,
                                 position: (228, 31),
                                },
                               ],
                              },
                             },
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "files",
                                 position: (236, 13),
                                },
                               ],
                              },
                              to: FunctionApplication {
                               function: Variable {
                                identifier: "mkOption",
                                position: (236, 21),
                               },
                               arguments: [
                                Map {
                                 bindings: [
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "type",
                                      position: (237, 15),
                                     },
                                    ],
                                   },
                                   to: With {
                                    expression: Variable {
                                     identifier: "types",
                                     position: (237, 27),
                                    },
                                    target: FunctionApplication {
                                     function: Variable {
                                      identifier: "either",
                                      position: (237, 34),
                                     },
                                     arguments: [
                                      Variable {
                                       identifier: "str",
                                       position: (237, 41),
                                      },
                                      Parentheses {
                                       expression: FunctionApplication {
                                        function: Variable {
                                         identifier: "listOf",
                                         position: (237, 46),
                                        },
                                        arguments: [
                                         Variable {
                                          identifier: "str",
                                          position: (237, 53),
                                         },
                                        ],
                                       },
                                       position: (237, 45),
                                      },
                                     ],
                                    },
                                    position: (237, 22),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "default",
                                      position: (238, 15),
                                     },
                                    ],
                                   },
                                   to: Variable {
                                    identifier: "name",
                                    position: (238, 25),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "defaultText",
                                      position: (239, 15),
                                     },
                                    ],
                                   },
                                   to: String {
                                    parts: [
                                     Raw {
                                      content: "The attrset name if not specified\n",
                                      position: (240, 1),
                                     },
                                    ],
                                    position: (239, 29),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "description",
                                      position: (242, 15),
                                     },
                                    ],
                                   },
                                   to: String {
                                    parts: [
                                     Raw {
                                      content: "Single or list of files for which rules are defined.\nThe files are quoted with double-quotes in logrotate configuration,\nso globs and spaces are supported.\nNote this setting is ignored if globals is true.\n",
                                      position: (243, 1),
                                     },
                                    ],
                                    position: (242, 29),
                                   },
                                  },
                                 ],
                                 recursive: false,
                                 position: (236, 30),
                                },
                               ],
                              },
                             },
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "frequency",
                                 position: (250, 13),
                                },
                               ],
                              },
                              to: FunctionApplication {
                               function: Variable {
                                identifier: "mkOption",
                                position: (250, 25),
                               },
                               arguments: [
                                Map {
                                 bindings: [
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "type",
                                      position: (251, 15),
                                     },
                                    ],
                                   },
                                   to: FunctionApplication {
                                    function: PropertyAccess {
                                     expression: Variable {
                                      identifier: "types",
                                      position: (251, 22),
                                     },
                                     attribute_path: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "nullOr",
                                        position: (251, 28),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                    arguments: [
                                     PropertyAccess {
                                      expression: Variable {
                                       identifier: "types",
                                       position: (251, 35),
                                      },
                                      attribute_path: AttributePath {
                                       parts: [
                                        Raw {
                                         content: "str",
                                         position: (251, 41),
                                        },
                                       ],
                                      },
                                      default: None,
                                     },
                                    ],
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "default",
                                      position: (252, 15),
                                     },
                                    ],
                                   },
                                   to: Variable {
                                    identifier: "null",
                                    position: (252, 25),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "description",
                                      position: (253, 15),
                                     },
                                    ],
                                   },
                                   to: String {
                                    parts: [
                                     Raw {
                                      content: "How often to rotate the logs. Defaults to previously set global setting,\nwhich itself defauts to weekly.\n",
                                      position: (254, 1),
                                     },
                                    ],
                                    position: (253, 29),
                                   },
                                  },
                                 ],
                                 recursive: false,
                                 position: (250, 34),
                                },
                               ],
                              },
                             },
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "priority",
                                 position: (259, 13),
                                },
                               ],
                              },
                              to: FunctionApplication {
                               function: Variable {
                                identifier: "mkOption",
                                position: (259, 24),
                               },
                               arguments: [
                                Map {
                                 bindings: [
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "type",
                                      position: (260, 15),
                                     },
                                    ],
                                   },
                                   to: PropertyAccess {
                                    expression: Variable {
                                     identifier: "types",
                                     position: (260, 22),
                                    },
                                    attribute_path: AttributePath {
                                     parts: [
                                      Raw {
                                       content: "int",
                                       position: (260, 28),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "default",
                                      position: (261, 15),
                                     },
                                    ],
                                   },
                                   to: Int {
                                    value: 1000,
                                    position: (261, 25),
                                   },
                                  },
                                  Binding {
                                   from: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "description",
                                      position: (262, 15),
                                     },
                                    ],
                                   },
                                   to: String {
                                    parts: [
                                     Raw {
                                      content: "Order of this logrotate block in relation to the others. The semantics are\nthe same as with `lib.mkOrder`. Smaller values are inserted first.\n",
                                      position: (263, 1),
                                     },
                                    ],
                                    position: (262, 29),
                                   },
                                  },
                                 ],
                                 recursive: false,
                                 position: (259, 33),
                                },
                               ],
                              },
                             },
                            ],
                            recursive: false,
                            position: (223, 21),
                           },
                          },
                         ],
                         recursive: false,
                         position: (220, 63),
                        },
                        position: (220, 48),
                       },
                       position: (220, 47),
                      },
                     ],
                    },
                    position: (220, 30),
                   },
                  ],
                 },
                },
               ],
               recursive: false,
               position: (212, 27),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "configFile",
               position: (272, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (272, 20),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (273, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (273, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (273, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (274, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "configFile",
                  position: (274, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (275, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "A configuration file automatically generated by NixOS.\n",
                    position: (276, 1),
                   },
                  ],
                  position: (275, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (278, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Override the configuration file used by MySQL. By default,\nNixOS generates one automatically from <xref linkend=\"opt-services.logrotate.settings\"/>.\n",
                    position: (279, 1),
                   },
                  ],
                  position: (278, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "example",
                    position: (282, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (282, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.writeText \"logrotate.conf\" ",
                      position: (283, 1),
                     },
                     Raw {
                      content: "''",
                      position: (283, 43),
                     },
                     Raw {
                      content: "\n  missingok\n  \"/var/log/*.log\" {\n    rotate 4\n    weekly\n  }\n",
                      position: (283, 46),
                     },
                     Raw {
                      content: "''",
                      position: (289, 11),
                     },
                     Raw {
                      content: ";\n",
                      position: (289, 14),
                     },
                    ],
                    position: (282, 37),
                   },
                  ],
                 },
                },
               ],
               recursive: false,
               position: (272, 29),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "checkConfig",
               position: (293, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (293, 21),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (294, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (294, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (294, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (295, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (295, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (296, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Whether the config should be checked at build time.\n\nSome options are not checkable at build time because of the build sandbox:\nfor example, the test does not know about existing files and system users are\nnot known.\nThese limitations mean we must adjust the file for tests (missingok is forced\nand users are replaced by dummy users), so tests are complemented by a\nlogrotate-checkconf service that is enabled by default.\nThis extra check can be disabled by disabling it at the systemd level with the\n<option>services.systemd.services.logrotate-checkconf.enable</option> option.\n\nConversely there are still things that might make this check fail incorrectly\n(e.g. a file path where we don't have access to intermediate directories):\nin this case you can disable the failing check with this option.\n",
                    position: (297, 1),
                   },
                  ],
                  position: (296, 23),
                 },
                },
               ],
               recursive: false,
               position: (293, 30),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "paths",
               position: (315, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (315, 15),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (316, 9),
                   },
                  ],
                 },
                 to: With {
                  expression: Variable {
                   identifier: "types",
                   position: (316, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (316, 28),
                   },
                   arguments: [
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "submodule",
                       position: (316, 37),
                      },
                      arguments: [
                       Variable {
                        identifier: "pathOpts",
                        position: (316, 47),
                       },
                      ],
                     },
                     position: (316, 36),
                    },
                   ],
                  },
                  position: (316, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (317, 9),
                   },
                  ],
                 },
                 to: Map {
                  bindings: [],
                  recursive: false,
                  position: (317, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (318, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Attribute set of paths to rotate. The order each block appears in the generated configuration file\ncan be controlled by the <link linkend=\"opt-services.logrotate.paths._name_.priority\">priority</link> option\nusing the same semantics as `lib.mkOrder`. Smaller values have a greater priority.\nThis setting has been deprecated in favor of <link linkend=\"opt-services.logrotate.settings\">logrotate settings</link>.\n",
                    position: (319, 1),
                   },
                  ],
                  position: (318, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "example",
                    position: (324, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (324, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  httpd = {\n    path = \"/var/log/httpd/*.log\";\n    user = config.services.httpd.user;\n    group = config.services.httpd.group;\n    keep = 7;\n  };\n\n  myapp = {\n    path = \"/var/log/myapp/*.log\";\n    user = \"myuser\";\n    group = \"mygroup\";\n    frequency = \"weekly\";\n    keep = 5;\n    priority = 1;\n  };\n}\n",
                      position: (325, 1),
                     },
                    ],
                    position: (324, 37),
                   },
                  ],
                 },
                },
               ],
               recursive: false,
               position: (315, 24),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "extraConfig",
               position: (345, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (345, 21),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (346, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (346, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (347, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (347, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (347, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (348, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Extra contents to append to the logrotate configuration file. Refer to\n<link xlink:href=\"https://linux.die.net/man/8/logrotate\"/> for details.\nThis setting has been deprecated in favor of\n<link linkend=\"opt-services.logrotate.settings\">logrotate settings</link>.\n",
                    position: (349, 1),
                   },
                  ],
                  position: (348, 23),
                 },
                },
               ],
               recursive: false,
               position: (345, 30),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (206, 26),
         },
        },
       ],
       recursive: false,
       position: (205, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (358, 3),
        },
       ],
      },
      to: FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (358, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (358, 17),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (358, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "assertions",
              position: (359, 5),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (360, 7),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "name",
               },
               definition: Function {
                argument: Simple {
                 identifier: "pathOpts",
                },
                definition: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "assertion",
                      position: (363, 13),
                     },
                    ],
                   },
                   to: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     Parentheses {
                      expression: BinaryOperation {
                       operator: NotEqualTo,
                       operands: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "pathOpts",
                          position: (363, 26),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "user",
                            position: (363, 35),
                           },
                          ],
                         },
                         default: None,
                        },
                        Variable {
                         identifier: "null",
                         position: (363, 43),
                        },
                       ],
                       position: (363, 40),
                      },
                      position: (363, 25),
                     },
                     Parentheses {
                      expression: BinaryOperation {
                       operator: NotEqualTo,
                       operands: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "pathOpts",
                          position: (363, 53),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "group",
                            position: (363, 62),
                           },
                          ],
                         },
                         default: None,
                        },
                        Variable {
                         identifier: "null",
                         position: (363, 71),
                        },
                       ],
                       position: (363, 68),
                      },
                      position: (363, 52),
                     },
                    ],
                    position: (363, 49),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "message",
                      position: (364, 13),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "If either of `services.logrotate.paths.",
                      position: (365, 1),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "name",
                       position: (365, 56),
                      },
                     },
                     Raw {
                      content: ".user` or `services.logrotate.paths.",
                      position: (365, 61),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "name",
                       position: (365, 99),
                      },
                     },
                     Raw {
                      content: ".group` are specified then *both* must be specified.\n",
                      position: (365, 104),
                     },
                    ],
                    position: (364, 23),
                   },
                  },
                 ],
                 recursive: false,
                 position: (362, 11),
                },
                position: (361, 16),
               },
               position: (361, 10),
              },
              position: (361, 9),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (368, 9),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "paths",
                 position: (368, 13),
                },
               ],
              },
              default: None,
             },
            ],
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "warnings",
              position: (370, 5),
             },
            ],
           },
           to: BinaryOperation {
            operator: Concatenation,
            operands: [
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "mapAttrsToList",
                position: (371, 8),
               },
               arguments: [
                Parentheses {
                 expression: Function {
                  argument: Simple {
                   identifier: "name",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "pathOpts",
                   },
                   definition: String {
                    parts: [
                     Raw {
                      content: "Using config.services.logrotate.paths.",
                      position: (373, 1),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "name",
                       position: (373, 51),
                      },
                     },
                     Raw {
                      content: " is deprecated and will become unsupported in a future release.\nPlease use services.logrotate.settings instead.\n",
                      position: (373, 56),
                     },
                    ],
                    position: (372, 26),
                   },
                   position: (372, 16),
                  },
                  position: (372, 10),
                 },
                 position: (372, 9),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (376, 9),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "paths",
                    position: (376, 13),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (371, 7),
             },
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (378, 8),
               },
               arguments: [
                Parentheses {
                 expression: BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (378, 18),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "extraConfig",
                       position: (378, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [],
                    position: (378, 37),
                   },
                  ],
                  position: (378, 34),
                 },
                 position: (378, 17),
                },
                String {
                 parts: [
                  Raw {
                   content: "Using config.services.logrotate.extraConfig is deprecated and will become unsupported in a future release.\nPlease use services.logrotate.settings with globals=true instead.\n",
                   position: (379, 1),
                  },
                 ],
                 position: (378, 41),
                },
               ],
              },
              position: (378, 7),
             },
            ],
            position: (377, 9),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "systemd",
              position: (383, 5),
             },
             Raw {
              content: "services",
              position: (383, 13),
             },
             Raw {
              content: "logrotate",
              position: (383, 22),
             },
            ],
           },
           to: Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (384, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Logrotate Service",
                 position: (384, 22),
                },
               ],
               position: (384, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "startAt",
                 position: (385, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "hourly",
                 position: (385, 18),
                },
               ],
               position: (385, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "serviceConfig",
                 position: (387, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "Restart",
                    position: (388, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "no",
                    position: (388, 20),
                   },
                  ],
                  position: (388, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "User",
                    position: (389, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "root",
                    position: (389, 17),
                   },
                  ],
                  position: (389, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "ExecStart",
                    position: (390, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (390, 24),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "logrotate",
                        position: (390, 29),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/sbin/logrotate ",
                    position: (390, 39),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "mailOption",
                     position: (390, 57),
                    },
                   },
                   Raw {
                    content: " ",
                    position: (390, 68),
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (390, 71),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "configFile",
                        position: (390, 75),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                  position: (390, 21),
                 },
                },
               ],
               recursive: false,
               position: (387, 23),
              },
             },
            ],
            recursive: false,
            position: (383, 34),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "systemd",
              position: (393, 5),
             },
             Raw {
              content: "services",
              position: (393, 13),
             },
             Raw {
              content: "logrotate-checkconf",
              position: (393, 22),
             },
            ],
           },
           to: Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (394, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Logrotate configuration check",
                 position: (394, 22),
                },
               ],
               position: (394, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "wantedBy",
                 position: (395, 7),
                },
               ],
              },
              to: List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                   position: (395, 21),
                  },
                 ],
                 position: (395, 20),
                },
               ],
               position: (395, 18),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "serviceConfig",
                 position: (396, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "Type",
                    position: (397, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "oneshot",
                    position: (397, 17),
                   },
                  ],
                  position: (397, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "RemainAfterExit",
                    position: (398, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (398, 27),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "ExecStart",
                    position: (399, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (399, 24),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "logrotate",
                        position: (399, 29),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/sbin/logrotate --debug ",
                    position: (399, 39),
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (399, 65),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "configFile",
                        position: (399, 69),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                  position: (399, 21),
                 },
                },
               ],
               recursive: false,
               position: (396, 23),
              },
             },
            ],
            recursive: false,
            position: (393, 44),
           },
          },
         ],
         recursive: false,
         position: (358, 28),
        },
       ],
      },
     },
    ],
    recursive: false,
    position: (200, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}