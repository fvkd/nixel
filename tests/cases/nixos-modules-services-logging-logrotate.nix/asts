---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "logrotate",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pathOpts",
        position: (8, 3),
       },
      ],
     },
     Function {
      argument: None,
      arguments: FunctionArguments {
       arguments: [
        FunctionArgument {
         identifier: "name",
         default: None,
        },
       ],
       ellipsis: true,
      },
      definition: Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "options",
            position: (9, 5),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (10, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (10, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (11, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (11, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (11, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (12, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (12, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (13, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to enable log rotation for this path. This can be used to explicitly disable\nlogging that has been configured by NixOS.\n",
                    position: (14, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "name",
               position: (19, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (19, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (20, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (20, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (20, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "internal",
                    position: (21, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (21, 20),
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "path",
               position: (24, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (24, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (25, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (25, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (25, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (25, 35),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "listOf",
                      position: (25, 40),
                     },
                     arguments: [
                      Variable {
                       identifier: "str",
                       position: (25, 47),
                      },
                     ],
                    },
                   ],
                  },
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (26, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (26, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (27, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "attribute name",
                    position: (27, 24),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (28, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The path to log files to be rotated.\nSpaces are allowed and normal shell quoting rules apply,\nwith ', \", and \\ characters supported.\n",
                    position: (29, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "user",
               position: (35, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (35, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (36, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (36, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (36, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (36, 35),
                    },
                   ],
                  },
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (37, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (37, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (38, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The user account to use for rotation.\n",
                    position: (39, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "group",
               position: (43, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (43, 15),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (44, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (44, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (44, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (44, 35),
                    },
                   ],
                  },
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (45, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (45, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (46, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The group to use for rotation.\n",
                    position: (47, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "frequency",
               position: (51, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (51, 19),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (52, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (52, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "enum",
                      position: (52, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "hourly",
                        position: (52, 30),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "daily",
                        position: (52, 39),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "weekly",
                        position: (52, 47),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "monthly",
                        position: (52, 56),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "yearly",
                        position: (52, 66),
                       },
                      ],
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (53, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "daily",
                    position: (53, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (54, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "How often to rotate the logs.\n",
                    position: (55, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "keep",
               position: (59, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (59, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (60, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (60, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "int",
                     position: (60, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (61, 9),
                   },
                  ],
                 },
                 Int {
                  value: 20,
                  position: (61, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (62, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "How many rotations to keep.\n",
                    position: (63, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraConfig",
               position: (67, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (67, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (68, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (68, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (68, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (69, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (70, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Extra logrotate config options for this path. Refer to\n<link xlink:href=\"https://linux.die.net/man/8/logrotate\"/> for details.\n",
                    position: (71, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "priority",
               position: (76, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (76, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (77, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (77, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "int",
                     position: (77, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (78, 9),
                   },
                  ],
                 },
                 Int {
                  value: 1000,
                  position: (78, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (79, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Order of this logrotate block in relation to the others. The semantics are\nthe same as with `lib.mkOrder`. Smaller values have a greater priority.\n",
                    position: (80, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "config",
            position: (86, 5),
           },
           Raw {
            content: "name",
            position: (86, 12),
           },
          ],
         },
         Variable {
          identifier: "name",
          position: (86, 19),
         },
        ),
       ],
       recursive: false,
      },
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkConf",
        position: (89, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pathOpts",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: String {
       parts: [
        Raw {
         content: "# generated by NixOS using the `services.logrotate.paths.",
         position: (90, 1),
        },
        Expression {
         expression: PropertyAccess {
          expression: Variable {
           identifier: "pathOpts",
           position: (90, 64),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (90, 73),
            },
           ],
          },
          default: None,
         },
        },
        Raw {
         content: "` attribute set\n",
         position: (90, 78),
        },
        Expression {
         expression: FunctionApplication {
          function: Variable {
           identifier: "concatMapStringsSep",
           position: (91, 7),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: " ",
              position: (91, 28),
             },
            ],
           },
           Function {
            argument: Some(
             "path",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: String {
             parts: [
              Raw {
               content: "\"",
               position: (91, 40),
              },
              Expression {
               expression: Variable {
                identifier: "path",
                position: (91, 43),
               },
              },
              Raw {
               content: "\"",
               position: (91, 48),
              },
             ],
            },
           },
           FunctionApplication {
            function: Variable {
             identifier: "toList",
             position: (91, 54),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "pathOpts",
               position: (91, 61),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (91, 70),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
         },
        },
        Raw {
         content: " {\n  ",
         position: (91, 76),
        },
        Expression {
         expression: FunctionApplication {
          function: Variable {
           identifier: "optionalString",
           position: (92, 9),
          },
          arguments: [
           BinaryOperation {
            operator: LogicalOr,
            operands: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "pathOpts",
                 position: (92, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "user",
                   position: (92, 34),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (92, 42),
               },
              ],
             },
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "pathOpts",
                 position: (92, 50),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "group",
                   position: (92, 59),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (92, 68),
               },
              ],
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "su ",
              position: (92, 75),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pathOpts",
                position: (92, 80),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "user",
                  position: (92, 89),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: " ",
              position: (92, 94),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pathOpts",
                position: (92, 97),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "group",
                  position: (92, 106),
                 },
                ],
               },
               default: None,
              },
             },
            ],
           },
          ],
         },
        },
        Raw {
         content: "\n  ",
         position: (92, 114),
        },
        Expression {
         expression: PropertyAccess {
          expression: Variable {
           identifier: "pathOpts",
           position: (93, 9),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "frequency",
             position: (93, 18),
            },
           ],
          },
          default: None,
         },
        },
        Raw {
         content: "\n  rotate ",
         position: (93, 28),
        },
        Expression {
         expression: FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (94, 16),
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "pathOpts",
             position: (94, 25),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "keep",
               position: (94, 34),
              },
             ],
            },
            default: None,
           },
          ],
         },
        },
        Raw {
         content: "\n  ",
         position: (94, 39),
        },
        Expression {
         expression: PropertyAccess {
          expression: Variable {
           identifier: "pathOpts",
           position: (95, 9),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "extraConfig",
             position: (95, 18),
            },
           ],
          },
          default: None,
         },
        },
        Raw {
         content: "\n}\n",
         position: (95, 30),
        },
       ],
      },
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "paths",
        position: (99, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "sortProperties",
       position: (99, 11),
      },
      arguments: [
       FunctionApplication {
        function: Variable {
         identifier: "attrValues",
         position: (99, 27),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "filterAttrs",
           position: (99, 39),
          },
          arguments: [
           Function {
            argument: Some(
             "_",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "pathOpts",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: PropertyAccess {
              expression: Variable {
               identifier: "pathOpts",
               position: (99, 65),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "enable",
                 position: (99, 74),
                },
               ],
              },
              default: None,
             },
            },
           },
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (99, 82),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "paths",
               position: (99, 86),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configFile",
        position: (100, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (100, 16),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (100, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "logrotate.conf",
          position: (100, 32),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "concatStringsSep",
         position: (101, 5),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "\n",
            position: (101, 23),
           },
          ],
         },
         BinaryOperation {
          operator: Concatenation,
          operands: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "missingok",
                position: (102, 10),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "notifempty",
                position: (102, 22),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (102, 34),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "extraConfig",
                 position: (102, 38),
                },
               ],
              },
              default: None,
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (102, 56),
            },
            arguments: [
             Variable {
              identifier: "mkConf",
              position: (102, 60),
             },
             Variable {
              identifier: "paths",
              position: (102, 67),
             },
            ],
           },
          ],
         },
        ],
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "imports",
         position: (108, 3),
        },
       ],
      },
      List {
       elements: [
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (109, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (109, 31),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "logrotate",
               position: (109, 42),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "config",
               position: (109, 54),
              },
             ],
            },
           ],
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (109, 67),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "logrotate",
               position: (109, 78),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "extraConfig",
               position: (109, 90),
              },
             ],
            },
           ],
          },
         ],
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (112, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (113, 5),
           },
           Raw {
            content: "logrotate",
            position: (113, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (114, 7),
              },
             ],
            },
            BinaryOperation {
             operator: Update,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "mkEnableOption",
                position: (114, 16),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "the logrotate systemd service",
                   position: (114, 32),
                  },
                 ],
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (115, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "foldr",
                   position: (115, 19),
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "n",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: Function {
                     argument: Some(
                      "a",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: BinaryOperation {
                      operator: LogicalOr,
                      operands: [
                       Variable {
                        identifier: "a",
                        position: (115, 32),
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "n",
                         position: (115, 37),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "enable",
                           position: (115, 39),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    },
                   },
                   Variable {
                    identifier: "false",
                    position: (115, 47),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "attrValues",
                     position: (115, 54),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (115, 65),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "paths",
                         position: (115, 69),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (116, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (116, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "cfg.paths != {}",
                      position: (116, 42),
                     },
                    ],
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "paths",
               position: (119, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (119, 15),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (120, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (120, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (120, 28),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "submodule",
                      position: (120, 37),
                     },
                     arguments: [
                      Variable {
                       identifier: "pathOpts",
                       position: (120, 47),
                      },
                     ],
                    },
                   ],
                  },
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (121, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (122, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Attribute set of paths to rotate. The order each block appears in the generated configuration file\ncan be controlled by the <link linkend=\"opt-services.logrotate.paths._name_.priority\">priority</link> option\nusing the same semantics as `lib.mkOrder`. Smaller values have a greater priority.\n",
                    position: (123, 1),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (127, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (127, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  httpd = {\n    path = \"/var/log/httpd/*.log\";\n    user = config.services.httpd.user;\n    group = config.services.httpd.group;\n    keep = 7;\n  };\n\n  myapp = {\n    path = \"/var/log/myapp/*.log\";\n    user = \"myuser\";\n    group = \"mygroup\";\n    frequency = \"weekly\";\n    keep = 5;\n    priority = 1;\n  };\n}\n",
                      position: (128, 1),
                     },
                    ],
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraConfig",
               position: (148, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (148, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (149, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (150, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (150, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (150, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (151, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Extra contents to append to the logrotate configuration file. Refer to\n<link xlink:href=\"https://linux.die.net/man/8/logrotate\"/> for details.\n",
                    position: (152, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (159, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (159, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (159, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (159, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (160, 5),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (160, 18),
            },
            arguments: [
             Function {
              argument: Some(
               "name",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "pathOpts",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "assertion",
                     position: (161, 9),
                    },
                   ],
                  },
                  BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    BinaryOperation {
                     operator: NotEqualTo,
                     operands: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "pathOpts",
                        position: (161, 22),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "user",
                          position: (161, 31),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "null",
                       position: (161, 39),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: NotEqualTo,
                     operands: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "pathOpts",
                        position: (161, 49),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "group",
                          position: (161, 58),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "null",
                       position: (161, 67),
                      },
                     ],
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "message",
                     position: (162, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "If either of `services.logrotate.paths.",
                     position: (163, 1),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (163, 52),
                     },
                    },
                    Raw {
                     content: ".user` or `services.logrotate.paths.",
                     position: (163, 57),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (163, 95),
                     },
                    },
                    Raw {
                     content: ".group` are specified then *both* must be specified.\n",
                     position: (163, 100),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
               },
              },
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (166, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "paths",
                 position: (166, 11),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (168, 5),
             },
             Raw {
              content: "services",
              position: (168, 13),
             },
             Raw {
              content: "logrotate",
              position: (168, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (169, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Logrotate Service",
                 position: (169, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "startAt",
                 position: (170, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "hourly",
                 position: (170, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (172, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Restart",
                    position: (173, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "no",
                    position: (173, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "User",
                    position: (174, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "root",
                    position: (174, 17),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (175, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (175, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "logrotate",
                        position: (175, 29),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/sbin/logrotate ",
                    position: (175, 39),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "configFile",
                     position: (175, 57),
                    },
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ),
            ],
            recursive: false,
           },
          ),
         ],
         recursive: false,
        },
       ],
      },
     ),
    ],
    recursive: false,
   },
  },
 },
}