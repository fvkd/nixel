---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "meta",
        position: (6, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "maintainers",
           position: (7, 5),
          },
         ],
        },
        List {
         elements: [
          PropertyAccess {
           expression: Variable {
            identifier: "maintainers",
            position: (7, 21),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "joachifm",
              position: (7, 33),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "options",
        position: (10, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "security",
           position: (11, 5),
          },
          Raw {
           content: "lockKernelModules",
           position: (11, 14),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (11, 34),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (12, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (12, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "bool",
                 position: (12, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (13, 7),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (13, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (14, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Disable kernel module loading once the system is fully initialised.\nModule loading is disabled until the next reboot. Problems caused\nby delayed module loading can be fixed by adding the module(s) in\nquestion to <option>boot.kernelModules</option>.\n",
                position: (15, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "config",
        position: (23, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkIf",
       position: (23, 12),
      },
      arguments: [
       PropertyAccess {
        expression: Variable {
         identifier: "config",
         position: (23, 17),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "security",
           position: (23, 24),
          },
          Raw {
           content: "lockKernelModules",
           position: (23, 33),
          },
         ],
        },
        default: None,
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "boot",
             position: (24, 5),
            },
            Raw {
             content: "kernelModules",
             position: (24, 10),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "concatMap",
            position: (24, 26),
           },
           arguments: [
            Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: IfThenElse {
              predicate: BinaryOperation {
               operator: NotEqualTo,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "x",
                  position: (25, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "device",
                    position: (25, 12),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "null",
                 position: (25, 22),
                },
               ],
              },
              then: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "x",
                   position: (27, 14),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "fsType",
                     position: (27, 16),
                    },
                   ],
                  },
                  default: None,
                 },
                 String {
                  parts: [
                   Raw {
                    content: "vfat",
                    position: (27, 27),
                   },
                  ],
                 },
                ],
               },
               then: List {
                elements: [
                 String {
                  parts: [
                   Raw {
                    content: "vfat",
                    position: (28, 21),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "nls-cp437",
                    position: (28, 28),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "nls-iso8859-1",
                    position: (28, 40),
                   },
                  ],
                 },
                ],
               },
               else_: List {
                elements: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "x",
                   position: (29, 20),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "fsType",
                     position: (29, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              else_: List {
               elements: [],
              },
             },
            },
            PropertyAccess {
             expression: Variable {
              identifier: "config",
              position: (30, 18),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "system",
                position: (30, 25),
               },
               Raw {
                content: "build",
                position: (30, 32),
               },
               Raw {
                content: "fileSystems",
                position: (30, 38),
               },
              ],
             },
             default: None,
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "systemd",
             position: (32, 5),
            },
            Raw {
             content: "services",
             position: (32, 13),
            },
            Raw {
             content: "disable-kernel-module-loading",
             position: (32, 22),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (33, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Disable kernel module loading",
                position: (33, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "wants",
                position: (35, 7),
               },
              ],
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "systemd-udevd.service",
                  position: (35, 18),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "wantedBy",
                position: (36, 7),
               },
              ],
             },
             List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (36, 20),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "systemd",
                   position: (36, 27),
                  },
                  Raw {
                   content: "defaultUnit",
                   position: (36, 35),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "after",
                position: (38, 7),
               },
              ],
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "firewall.service",
                  position: (39, 12),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "systemd-modules-load.service",
                  position: (40, 12),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (41, 12),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "systemd",
                   position: (41, 19),
                  },
                  Raw {
                   content: "defaultUnit",
                   position: (41, 27),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "unitConfig",
                position: (44, 7),
               },
               Raw {
                content: "ConditionPathIsReadWrite",
                position: (44, 18),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "/proc/sys/kernel",
                position: (44, 46),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "serviceConfig",
                position: (46, 7),
               },
              ],
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "Type",
                   position: (47, 11),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "oneshot",
                   position: (47, 19),
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "RemainAfterExit",
                   position: (48, 11),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (48, 29),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "TimeoutSec",
                   position: (49, 11),
                  },
                 ],
                },
                Int {
                 value: 180,
                 position: (49, 24),
                },
               ),
              ],
              recursive: false,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "script",
                position: (52, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "",
                position: (53, 1),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (53, 11),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "udev",
                    position: (53, 16),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "/bin/udevadm settle\necho -n 1 >/proc/sys/kernel/modules_disabled\n",
                position: (53, 21),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ),
        ],
        recursive: false,
       },
      ],
     },
    ),
   ],
   recursive: false,
  },
 },
}