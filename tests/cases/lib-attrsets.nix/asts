---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit {
    from: Some(
     Variable {
      identifier: "builtins",
      position: (5, 12),
     },
    ),
    attributes: [
     Raw {
      content: "head",
      position: (5, 22),
     },
     Raw {
      content: "tail",
      position: (5, 27),
     },
     Raw {
      content: "length",
      position: (5, 32),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (6, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "trivial",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "id",
      position: (6, 25),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (7, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "strings",
         position: (7, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "concatStringsSep",
      position: (7, 25),
     },
     Raw {
      content: "concatMapStringsSep",
      position: (7, 42),
     },
     Raw {
      content: "escapeNixIdentifier",
      position: (7, 62),
     },
     Raw {
      content: "sanitizeDerivationName",
      position: (7, 82),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (8, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "lists",
         position: (8, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "foldr",
      position: (8, 23),
     },
     Raw {
      content: "foldl'",
      position: (8, 29),
     },
     Raw {
      content: "concatMap",
      position: (8, 36),
     },
     Raw {
      content: "concatLists",
      position: (8, 46),
     },
     Raw {
      content: "elemAt",
      position: (8, 58),
     },
     Raw {
      content: "all",
      position: (8, 65),
     },
     Raw {
      content: "partition",
      position: (8, 69),
     },
     Raw {
      content: "groupBy",
      position: (8, 79),
     },
     Raw {
      content: "take",
      position: (8, 87),
     },
     Raw {
      content: "foldl",
      position: (8, 92),
     },
    ],
   },
  ],
  target: Map {
   bindings: [
    Inherit {
     from: Some(
      Variable {
       identifier: "builtins",
       position: (12, 12),
      },
     ),
     attributes: [
      Raw {
       content: "attrNames",
       position: (12, 22),
      },
      Raw {
       content: "listToAttrs",
       position: (12, 32),
      },
      Raw {
       content: "hasAttr",
       position: (12, 44),
      },
      Raw {
       content: "isAttrs",
       position: (12, 52),
      },
      Raw {
       content: "getAttr",
       position: (12, 60),
      },
     ],
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "attrByPath",
        position: (24, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrPath",
      },
      definition: Function {
       argument: Simple {
        identifier: "default",
       },
       definition: Function {
        argument: Simple {
         identifier: "e",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "attr",
              position: (25, 9),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "head",
             position: (25, 16),
            },
            arguments: [
             Variable {
              identifier: "attrPath",
              position: (25, 21),
             },
            ],
           },
          },
         ],
         target: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "attrPath",
             position: (27, 10),
            },
            List {
             elements: [],
             position: (27, 22),
            },
           ],
           position: (27, 19),
          },
          then: Variable {
           identifier: "e",
           position: (27, 30),
          },
          else_: IfThenElse {
           predicate: HasProperty {
            expression: Variable {
             identifier: "e",
             position: (28, 15),
            },
            attribute_path: AttributePath {
             parts: [
              Expression {
               expression: Variable {
                identifier: "attr",
                position: (28, 21),
               },
              },
             ],
            },
            position: (28, 17),
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "attrByPath",
             position: (29, 12),
            },
            arguments: [
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "tail",
                position: (29, 24),
               },
               arguments: [
                Variable {
                 identifier: "attrPath",
                 position: (29, 29),
                },
               ],
              },
              position: (29, 23),
             },
             Variable {
              identifier: "default",
              position: (29, 39),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "e",
               position: (29, 47),
              },
              attribute_path: AttributePath {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "attr",
                  position: (29, 51),
                 },
                },
               ],
              },
              default: None,
             },
            ],
           },
           else_: Variable {
            identifier: "default",
            position: (30, 12),
           },
           position: (28, 12),
          },
          position: (27, 7),
         },
         position: (25, 5),
        },
        position: (24, 35),
       },
       position: (24, 26),
      },
      position: (24, 16),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "hasAttrByPath",
        position: (42, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrPath",
      },
      definition: Function {
       argument: Simple {
        identifier: "e",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "attr",
             position: (43, 9),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (43, 16),
           },
           arguments: [
            Variable {
             identifier: "attrPath",
             position: (43, 21),
            },
           ],
          },
         },
        ],
        target: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "attrPath",
            position: (45, 10),
           },
           List {
            elements: [],
            position: (45, 22),
           },
          ],
          position: (45, 19),
         },
         then: Variable {
          identifier: "true",
          position: (45, 30),
         },
         else_: IfThenElse {
          predicate: HasProperty {
           expression: Variable {
            identifier: "e",
            position: (46, 15),
           },
           attribute_path: AttributePath {
            parts: [
             Expression {
              expression: Variable {
               identifier: "attr",
               position: (46, 21),
              },
             },
            ],
           },
           position: (46, 17),
          },
          then: FunctionApplication {
           function: Variable {
            identifier: "hasAttrByPath",
            position: (47, 12),
           },
           arguments: [
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "tail",
               position: (47, 27),
              },
              arguments: [
               Variable {
                identifier: "attrPath",
                position: (47, 32),
               },
              ],
             },
             position: (47, 26),
            },
            PropertyAccess {
             expression: Variable {
              identifier: "e",
              position: (47, 42),
             },
             attribute_path: AttributePath {
              parts: [
               Expression {
                expression: Variable {
                 identifier: "attr",
                 position: (47, 46),
                },
               },
              ],
             },
             default: None,
            },
           ],
          },
          else_: Variable {
           identifier: "false",
           position: (48, 12),
          },
          position: (46, 12),
         },
         position: (45, 7),
        },
        position: (43, 5),
       },
       position: (42, 29),
      },
      position: (42, 19),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "setAttrByPath",
        position: (57, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrPath",
      },
      definition: Function {
       argument: Simple {
        identifier: "value",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "len",
             position: (59, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "length",
            position: (59, 13),
           },
           arguments: [
            Variable {
             identifier: "attrPath",
             position: (59, 20),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "atDepth",
             position: (60, 7),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "n",
           },
           definition: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "n",
               position: (61, 12),
              },
              Variable {
               identifier: "len",
               position: (61, 17),
              },
             ],
             position: (61, 14),
            },
            then: Variable {
             identifier: "value",
             position: (62, 14),
            },
            else_: Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "elemAt",
                    position: (63, 18),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrPath",
                     position: (63, 25),
                    },
                    Variable {
                     identifier: "n",
                     position: (63, 34),
                    },
                   ],
                  },
                 },
                ],
               },
               to: FunctionApplication {
                function: Variable {
                 identifier: "atDepth",
                 position: (63, 39),
                },
                arguments: [
                 Parentheses {
                  expression: BinaryOperation {
                   operator: Addition,
                   operands: [
                    Variable {
                     identifier: "n",
                     position: (63, 48),
                    },
                    Int {
                     value: 1,
                     position: (63, 52),
                    },
                   ],
                   position: (63, 50),
                  },
                  position: (63, 47),
                 },
                ],
               },
              },
             ],
             recursive: false,
             position: (63, 14),
            },
            position: (61, 9),
           },
           position: (60, 17),
          },
         },
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "atDepth",
          position: (64, 8),
         },
         arguments: [
          Int {
           value: 0,
           position: (64, 16),
          },
         ],
        },
        position: (58, 5),
       },
       position: (57, 29),
      },
      position: (57, 19),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getAttrFromPath",
        position: (76, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrPath",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "errorMsg",
            position: (77, 9),
           },
          ],
         },
         to: BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "cannot find attribute `",
                position: (77, 21),
               },
              ],
              position: (77, 20),
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (77, 48),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: ".",
                  position: (77, 66),
                 },
                ],
                position: (77, 65),
               },
               Variable {
                identifier: "attrPath",
                position: (77, 69),
               },
              ],
             },
            ],
            position: (77, 46),
           },
           String {
            parts: [
             Raw {
              content: "'",
              position: (77, 81),
             },
            ],
            position: (77, 80),
           },
          ],
          position: (77, 78),
         },
        },
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "attrByPath",
         position: (78, 8),
        },
        arguments: [
         Variable {
          identifier: "attrPath",
          position: (78, 19),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "abort",
            position: (78, 29),
           },
           arguments: [
            Variable {
             identifier: "errorMsg",
             position: (78, 35),
            },
           ],
          },
          position: (78, 28),
         },
        ],
       },
       position: (77, 5),
      },
      position: (76, 21),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "updateManyAttrsByPath",
        position: (119, 3),
       },
      ],
     },
     to: LetIn {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "go",
           position: (125, 5),
          },
         ],
        },
        to: Function {
         argument: Simple {
          identifier: "prefixLength",
         },
         definition: Function {
          argument: Simple {
           identifier: "hasValue",
          },
          definition: Function {
           argument: Simple {
            identifier: "value",
           },
           definition: Function {
            argument: Simple {
             identifier: "updates",
            },
            definition: LetIn {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "split",
                  position: (129, 9),
                 },
                ],
               },
               to: FunctionApplication {
                function: Variable {
                 identifier: "partition",
                 position: (129, 17),
                },
                arguments: [
                 Parentheses {
                  expression: Function {
                   argument: Simple {
                    identifier: "el",
                   },
                   definition: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "length",
                       position: (129, 32),
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "el",
                         position: (129, 39),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "path",
                           position: (129, 42),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                     Variable {
                      identifier: "prefixLength",
                      position: (129, 50),
                     },
                    ],
                    position: (129, 47),
                   },
                   position: (129, 28),
                  },
                  position: (129, 27),
                 },
                 Variable {
                  identifier: "updates",
                  position: (129, 64),
                 },
                ],
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "nested",
                  position: (132, 9),
                 },
                ],
               },
               to: FunctionApplication {
                function: Variable {
                 identifier: "groupBy",
                 position: (132, 18),
                },
                arguments: [
                 Parentheses {
                  expression: Function {
                   argument: Simple {
                    identifier: "el",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "elemAt",
                     position: (132, 31),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "el",
                       position: (132, 38),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "path",
                         position: (132, 41),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "prefixLength",
                      position: (132, 46),
                     },
                    ],
                   },
                   position: (132, 27),
                  },
                  position: (132, 26),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "split",
                   position: (132, 60),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "wrong",
                     position: (132, 66),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "withNestedMods",
                  position: (135, 9),
                 },
                ],
               },
               to: IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "split",
                    position: (137, 14),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "wrong",
                      position: (137, 20),
                     },
                    ],
                   },
                   default: None,
                  },
                  List {
                   elements: [],
                   position: (137, 29),
                  },
                 ],
                 position: (137, 26),
                },
                then: IfThenElse {
                 predicate: Variable {
                  identifier: "hasValue",
                  position: (138, 16),
                 },
                 then: Variable {
                  identifier: "value",
                  position: (138, 30),
                 },
                 else_: LetIn {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "updatePath",
                       position: (144, 19),
                      },
                     ],
                    },
                    to: PropertyAccess {
                     expression: Parentheses {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "head",
                        position: (144, 33),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "split",
                          position: (144, 38),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "right",
                            position: (144, 44),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                      position: (144, 32),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "path",
                        position: (144, 51),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "throw",
                    position: (145, 15),
                   },
                   arguments: [
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Addition,
                      operands: [
                       BinaryOperation {
                        operator: Addition,
                        operands: [
                         String {
                          parts: [
                           Raw {
                            content: "updateManyAttrsByPath: Path '",
                            position: (146, 18),
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "showAttrPath",
                              position: (146, 49),
                             },
                             arguments: [
                              Variable {
                               identifier: "updatePath",
                               position: (146, 62),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "' does ",
                            position: (146, 73),
                           },
                          ],
                          position: (146, 17),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "not exist in the given value, but the first update to this ",
                            position: (147, 18),
                           },
                          ],
                          position: (147, 17),
                         },
                        ],
                        position: (147, 15),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "path tries to access the existing value.",
                          position: (148, 18),
                         },
                        ],
                        position: (148, 17),
                       },
                      ],
                      position: (148, 15),
                     },
                     position: (146, 15),
                    },
                   ],
                  },
                  position: (144, 15),
                 },
                 position: (138, 13),
                },
                else_: IfThenElse {
                 predicate: UnaryOperation {
                  operator: Not,
                  operand: Variable {
                   identifier: "hasValue",
                   position: (151, 18),
                  },
                  position: (151, 16),
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "mapAttrs",
                   position: (154, 15),
                  },
                  arguments: [
                   Parentheses {
                    expression: Function {
                     argument: Simple {
                      identifier: "name",
                     },
                     definition: FunctionApplication {
                      function: Variable {
                       identifier: "go",
                       position: (154, 31),
                      },
                      arguments: [
                       Parentheses {
                        expression: BinaryOperation {
                         operator: Addition,
                         operands: [
                          Variable {
                           identifier: "prefixLength",
                           position: (154, 35),
                          },
                          Int {
                           value: 1,
                           position: (154, 50),
                          },
                         ],
                         position: (154, 48),
                        },
                        position: (154, 34),
                       },
                       Variable {
                        identifier: "false",
                        position: (154, 53),
                       },
                       Variable {
                        identifier: "null",
                        position: (154, 59),
                       },
                      ],
                     },
                     position: (154, 25),
                    },
                    position: (154, 24),
                   },
                   Variable {
                    identifier: "nested",
                    position: (154, 65),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isAttrs",
                    position: (155, 21),
                   },
                   arguments: [
                    Variable {
                     identifier: "value",
                     position: (155, 29),
                    },
                   ],
                  },
                  then: BinaryOperation {
                   operator: Update,
                   operands: [
                    Variable {
                     identifier: "value",
                     position: (158, 15),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "mapAttrs",
                      position: (159, 15),
                     },
                     arguments: [
                      Parentheses {
                       expression: Function {
                        argument: Simple {
                         identifier: "name",
                        },
                        definition: FunctionApplication {
                         function: Variable {
                          identifier: "go",
                          position: (159, 31),
                         },
                         arguments: [
                          Parentheses {
                           expression: BinaryOperation {
                            operator: Addition,
                            operands: [
                             Variable {
                              identifier: "prefixLength",
                              position: (159, 35),
                             },
                             Int {
                              value: 1,
                              position: (159, 50),
                             },
                            ],
                            position: (159, 48),
                           },
                           position: (159, 34),
                          },
                          Parentheses {
                           expression: HasProperty {
                            expression: Variable {
                             identifier: "value",
                             position: (159, 54),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Expression {
                               expression: Variable {
                                identifier: "name",
                                position: (159, 64),
                               },
                              },
                             ],
                            },
                            position: (159, 60),
                           },
                           position: (159, 53),
                          },
                          PropertyAccess {
                           expression: Variable {
                            identifier: "value",
                            position: (159, 71),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Expression {
                              expression: Variable {
                               identifier: "name",
                               position: (159, 79),
                              },
                             },
                            ],
                           },
                           default: None,
                          },
                         ],
                        },
                        position: (159, 25),
                       },
                       position: (159, 24),
                      },
                      Variable {
                       identifier: "nested",
                       position: (159, 86),
                      },
                     ],
                    },
                   ],
                   position: (158, 21),
                  },
                  else_: LetIn {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "updatePath",
                        position: (163, 19),
                       },
                      ],
                     },
                     to: PropertyAccess {
                      expression: Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "head",
                         position: (163, 33),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "split",
                           position: (163, 38),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "wrong",
                             position: (163, 44),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                       },
                       position: (163, 32),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "path",
                         position: (163, 51),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                   ],
                   target: FunctionApplication {
                    function: Variable {
                     identifier: "throw",
                     position: (164, 15),
                    },
                    arguments: [
                     Parentheses {
                      expression: BinaryOperation {
                       operator: Addition,
                       operands: [
                        BinaryOperation {
                         operator: Addition,
                         operands: [
                          BinaryOperation {
                           operator: Addition,
                           operands: [
                            String {
                             parts: [
                              Raw {
                               content: "updateManyAttrsByPath: Path '",
                               position: (165, 18),
                              },
                              Expression {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "showAttrPath",
                                 position: (165, 49),
                                },
                                arguments: [
                                 Variable {
                                  identifier: "updatePath",
                                  position: (165, 62),
                                 },
                                ],
                               },
                              },
                              Raw {
                               content: "' needs to ",
                               position: (165, 73),
                              },
                             ],
                             position: (165, 17),
                            },
                            String {
                             parts: [
                              Raw {
                               content: "be updated, but path '",
                               position: (166, 18),
                              },
                              Expression {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "showAttrPath",
                                 position: (166, 42),
                                },
                                arguments: [
                                 Parentheses {
                                  expression: FunctionApplication {
                                   function: Variable {
                                    identifier: "take",
                                    position: (166, 56),
                                   },
                                   arguments: [
                                    Variable {
                                     identifier: "prefixLength",
                                     position: (166, 61),
                                    },
                                    Variable {
                                     identifier: "updatePath",
                                     position: (166, 74),
                                    },
                                   ],
                                  },
                                  position: (166, 55),
                                 },
                                ],
                               },
                              },
                              Raw {
                               content: "' ",
                               position: (166, 86),
                              },
                             ],
                             position: (166, 17),
                            },
                           ],
                           position: (166, 15),
                          },
                          String {
                           parts: [
                            Raw {
                             content: "of the given value is not an attribute set, so we can't ",
                             position: (167, 18),
                            },
                           ],
                           position: (167, 17),
                          },
                         ],
                         position: (167, 15),
                        },
                        String {
                         parts: [
                          Raw {
                           content: "update an attribute inside of it.",
                           position: (168, 18),
                          },
                         ],
                         position: (168, 17),
                        },
                       ],
                       position: (168, 15),
                      },
                      position: (165, 15),
                     },
                    ],
                   },
                   position: (163, 15),
                  },
                  position: (155, 18),
                 },
                 position: (151, 13),
                },
                position: (137, 11),
               },
              },
             ],
             target: FunctionApplication {
              function: Variable {
               identifier: "foldl",
               position: (174, 10),
              },
              arguments: [
               Parentheses {
                expression: Function {
                 argument: Simple {
                  identifier: "acc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "el",
                  },
                  definition: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "el",
                     position: (174, 26),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "update",
                       position: (174, 29),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "acc",
                     position: (174, 36),
                    },
                   ],
                  },
                  position: (174, 22),
                 },
                 position: (174, 17),
                },
                position: (174, 16),
               },
               Variable {
                identifier: "withNestedMods",
                position: (174, 41),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "split",
                 position: (174, 56),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "right",
                   position: (174, 62),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             position: (126, 7),
            },
            position: (125, 41),
           },
           position: (125, 34),
          },
          position: (125, 24),
         },
         position: (125, 10),
        },
       },
      ],
      target: Function {
       argument: Simple {
        identifier: "updates",
       },
       definition: Function {
        argument: Simple {
         identifier: "value",
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "go",
          position: (176, 22),
         },
         arguments: [
          Int {
           value: 0,
           position: (176, 25),
          },
          Variable {
           identifier: "true",
           position: (176, 27),
          },
          Variable {
           identifier: "value",
           position: (176, 32),
          },
          Variable {
           identifier: "updates",
           position: (176, 38),
          },
         ],
        },
        position: (176, 15),
       },
       position: (176, 6),
      },
      position: (119, 27),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "attrVals",
        position: (184, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "nameList",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (184, 29),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "x",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "set",
             position: (184, 37),
            },
            attribute_path: AttributePath {
             parts: [
              Expression {
               expression: Variable {
                identifier: "x",
                position: (184, 43),
               },
              },
             ],
            },
            default: None,
           },
           position: (184, 34),
          },
          position: (184, 33),
         },
         Variable {
          identifier: "nameList",
          position: (184, 47),
         },
        ],
       },
       position: (184, 24),
      },
      position: (184, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "attrValues",
        position: (194, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (194, 16),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "attrValues",
         position: (194, 25),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "attrs",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "attrVals",
           position: (194, 47),
          },
          arguments: [
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "attrNames",
              position: (194, 57),
             },
             arguments: [
              Variable {
               identifier: "attrs",
               position: (194, 67),
              },
             ],
            },
            position: (194, 56),
           },
           Variable {
            identifier: "attrs",
            position: (194, 74),
           },
          ],
         },
         position: (194, 40),
        },
        position: (194, 39),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getAttrs",
        position: (204, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "names",
      },
      definition: Function {
       argument: Simple {
        identifier: "attrs",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "genAttrs",
         position: (204, 28),
        },
        arguments: [
         Variable {
          identifier: "names",
          position: (204, 37),
         },
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "name",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "attrs",
             position: (204, 50),
            },
            attribute_path: AttributePath {
             parts: [
              Expression {
               expression: Variable {
                identifier: "name",
                position: (204, 58),
               },
              },
             ],
            },
            default: None,
           },
           position: (204, 44),
          },
          position: (204, 43),
         },
        ],
       },
       position: (204, 21),
      },
      position: (204, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "catAttrs",
        position: (213, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (213, 14),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "catAttrs",
         position: (213, 23),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: Function {
          argument: Simple {
           identifier: "l",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "concatLists",
            position: (214, 15),
           },
           arguments: [
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (214, 28),
              },
              arguments: [
               Parentheses {
                expression: Function {
                 argument: Simple {
                  identifier: "s",
                 },
                 definition: IfThenElse {
                  predicate: HasProperty {
                   expression: Variable {
                    identifier: "s",
                    position: (214, 39),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Expression {
                      expression: Variable {
                       identifier: "attr",
                       position: (214, 45),
                      },
                     },
                    ],
                   },
                   position: (214, 41),
                  },
                  then: List {
                   elements: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "s",
                      position: (214, 57),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Expression {
                        expression: Variable {
                         identifier: "attr",
                         position: (214, 61),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (214, 56),
                  },
                  else_: List {
                   elements: [],
                   position: (214, 73),
                  },
                  position: (214, 36),
                 },
                 position: (214, 33),
                },
                position: (214, 32),
               },
               Variable {
                identifier: "l",
                position: (214, 77),
               },
              ],
             },
             position: (214, 27),
            },
           ],
          },
          position: (214, 12),
         },
         position: (214, 6),
        },
        position: (214, 5),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "filterAttrs",
        position: (224, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (225, 5),
        },
        arguments: [
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "concatMap",
            position: (225, 18),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "name",
              },
              definition: LetIn {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "v",
                    position: (225, 39),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "set",
                   position: (225, 43),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (225, 49),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               target: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "pred",
                  position: (225, 62),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (225, 67),
                  },
                  Variable {
                   identifier: "v",
                   position: (225, 72),
                  },
                 ],
                },
                then: List {
                 elements: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "nameValuePair",
                     position: (225, 81),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (225, 95),
                     },
                     Variable {
                      identifier: "v",
                      position: (225, 100),
                     },
                    ],
                   },
                   position: (225, 80),
                  },
                 ],
                 position: (225, 79),
                },
                else_: List {
                 elements: [],
                 position: (225, 109),
                },
                position: (225, 59),
               },
               position: (225, 35),
              },
              position: (225, 29),
             },
             position: (225, 28),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (225, 114),
              },
              arguments: [
               Variable {
                identifier: "set",
                position: (225, 124),
               },
              ],
             },
             position: (225, 113),
            },
           ],
          },
          position: (225, 17),
         },
        ],
       },
       position: (224, 23),
      },
      position: (224, 17),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "filterAttrsRecursive",
        position: (235, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (236, 5),
        },
        arguments: [
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "concatMap",
            position: (237, 7),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "name",
              },
              definition: LetIn {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "v",
                    position: (238, 13),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "set",
                   position: (238, 17),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (238, 23),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               target: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "pred",
                  position: (239, 12),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (239, 17),
                  },
                  Variable {
                   identifier: "v",
                   position: (239, 22),
                  },
                 ],
                },
                then: List {
                 elements: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "nameValuePair",
                     position: (240, 12),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (240, 26),
                     },
                     Parentheses {
                      expression: IfThenElse {
                       predicate: FunctionApplication {
                        function: Variable {
                         identifier: "isAttrs",
                         position: (241, 16),
                        },
                        arguments: [
                         Variable {
                          identifier: "v",
                          position: (241, 24),
                         },
                        ],
                       },
                       then: FunctionApplication {
                        function: Variable {
                         identifier: "filterAttrsRecursive",
                         position: (241, 31),
                        },
                        arguments: [
                         Variable {
                          identifier: "pred",
                          position: (241, 52),
                         },
                         Variable {
                          identifier: "v",
                          position: (241, 57),
                         },
                        ],
                       },
                       else_: Variable {
                        identifier: "v",
                        position: (242, 18),
                       },
                       position: (241, 13),
                      },
                      position: (240, 31),
                     },
                    ],
                   },
                   position: (240, 11),
                  },
                 ],
                 position: (239, 29),
                },
                else_: List {
                 elements: [],
                 position: (244, 16),
                },
                position: (239, 9),
               },
               position: (238, 9),
              },
              position: (237, 18),
             },
             position: (237, 17),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (245, 10),
              },
              arguments: [
               Variable {
                identifier: "set",
                position: (245, 20),
               },
              ],
             },
             position: (245, 9),
            },
           ],
          },
          position: (236, 17),
         },
        ],
       },
       position: (235, 32),
      },
      position: (235, 26),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "foldAttrs",
        position: (254, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "op",
      },
      definition: Function {
       argument: Simple {
        identifier: "nul",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "foldr",
         position: (255, 5),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "n",
           },
           definition: Function {
            argument: Simple {
             identifier: "a",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "foldr",
              position: (256, 9),
             },
             arguments: [
              Parentheses {
               expression: Function {
                argument: Simple {
                 identifier: "name",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "o",
                 },
                 definition: BinaryOperation {
                  operator: Update,
                  operands: [
                   Variable {
                    identifier: "o",
                    position: (257, 11),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Expression {
                         expression: Variable {
                          identifier: "name",
                          position: (257, 20),
                         },
                        },
                       ],
                      },
                      to: FunctionApplication {
                       function: Variable {
                        identifier: "op",
                        position: (257, 28),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "n",
                          position: (257, 31),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Expression {
                            expression: Variable {
                             identifier: "name",
                             position: (257, 35),
                            },
                           },
                          ],
                         },
                         default: None,
                        },
                        Parentheses {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "a",
                           position: (257, 42),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Expression {
                             expression: Variable {
                              identifier: "name",
                              position: (257, 46),
                             },
                            },
                           ],
                          },
                          default: Some(
                           Variable {
                            identifier: "nul",
                            position: (257, 55),
                           },
                          ),
                         },
                         position: (257, 41),
                        },
                       ],
                      },
                     },
                    ],
                    recursive: false,
                    position: (257, 16),
                   },
                  ],
                  position: (257, 13),
                 },
                 position: (256, 22),
                },
                position: (256, 16),
               },
               position: (256, 15),
              },
              Variable {
               identifier: "a",
               position: (258, 11),
              },
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "attrNames",
                 position: (258, 14),
                },
                arguments: [
                 Variable {
                  identifier: "n",
                  position: (258, 24),
                 },
                ],
               },
               position: (258, 13),
              },
             ],
            },
            position: (255, 15),
           },
           position: (255, 12),
          },
          position: (255, 11),
         },
         Map {
          bindings: [],
          recursive: false,
          position: (259, 7),
         },
        ],
       },
       position: (254, 19),
      },
      position: (254, 15),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "collect",
        position: (278, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "attrs",
       },
       definition: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "pred",
          position: (279, 8),
         },
         arguments: [
          Variable {
           identifier: "attrs",
           position: (279, 13),
          },
         ],
        },
        then: List {
         elements: [
          Variable {
           identifier: "attrs",
           position: (280, 9),
          },
         ],
         position: (280, 7),
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: Variable {
           identifier: "isAttrs",
           position: (281, 13),
          },
          arguments: [
           Variable {
            identifier: "attrs",
            position: (281, 21),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "concatMap",
           position: (282, 7),
          },
          arguments: [
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "collect",
              position: (282, 18),
             },
             arguments: [
              Variable {
               identifier: "pred",
               position: (282, 26),
              },
             ],
            },
            position: (282, 17),
           },
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "attrValues",
              position: (282, 33),
             },
             arguments: [
              Variable {
               identifier: "attrs",
               position: (282, 44),
              },
             ],
            },
            position: (282, 32),
           },
          ],
         },
         else_: List {
          elements: [],
          position: (284, 7),
         },
         position: (281, 10),
        },
        position: (279, 5),
       },
       position: (278, 19),
      },
      position: (278, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cartesianProductOfSets",
        position: (297, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrsOfLists",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "foldl'",
        position: (298, 5),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "listOfAttrs",
          },
          definition: Function {
           argument: Simple {
            identifier: "attrName",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "concatMap",
             position: (299, 7),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "attrs",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "map",
                 position: (300, 9),
                },
                arguments: [
                 Parentheses {
                  expression: Function {
                   argument: Simple {
                    identifier: "listValue",
                   },
                   definition: BinaryOperation {
                    operator: Update,
                    operands: [
                     Variable {
                      identifier: "attrs",
                      position: (300, 25),
                     },
                     Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Expression {
                           expression: Variable {
                            identifier: "attrName",
                            position: (300, 38),
                           },
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "listValue",
                         position: (300, 50),
                        },
                       },
                      ],
                      recursive: false,
                      position: (300, 34),
                     },
                    ],
                    position: (300, 31),
                   },
                   position: (300, 14),
                  },
                  position: (300, 13),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "attrsOfLists",
                   position: (300, 64),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "attrName",
                      position: (300, 79),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               position: (299, 18),
              },
              position: (299, 17),
             },
             Variable {
              identifier: "listOfAttrs",
              position: (301, 9),
             },
            ],
           },
           position: (298, 26),
          },
          position: (298, 13),
         },
         position: (298, 12),
        },
        List {
         elements: [
          Map {
           bindings: [],
           recursive: false,
           position: (302, 8),
          },
         ],
         position: (302, 7),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "attrNames",
           position: (302, 13),
          },
          arguments: [
           Variable {
            identifier: "attrsOfLists",
            position: (302, 23),
           },
          ],
         },
         position: (302, 12),
        },
       ],
      },
      position: (297, 28),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nameValuePair",
        position: (312, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "name",
      },
      definition: Function {
       argument: Simple {
        identifier: "value",
       },
       definition: Map {
        bindings: [
         Inherit {
          from: None,
          attributes: [
           Raw {
            content: "name",
            position: (312, 42),
           },
           Raw {
            content: "value",
            position: (312, 47),
           },
          ],
         },
        ],
        recursive: false,
        position: (312, 32),
       },
       position: (312, 25),
      },
      position: (312, 19),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapAttrs",
        position: (325, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (325, 14),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "mapAttrs",
         position: (325, 23),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "f",
         },
         definition: Function {
          argument: Simple {
           identifier: "set",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "listToAttrs",
            position: (327, 7),
           },
           arguments: [
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (327, 20),
              },
              arguments: [
               Parentheses {
                expression: Function {
                 argument: Simple {
                  identifier: "attr",
                 },
                 definition: Map {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "name",
                       position: (327, 33),
                      },
                     ],
                    },
                    to: Variable {
                     identifier: "attr",
                     position: (327, 40),
                    },
                   },
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "value",
                       position: (327, 46),
                      },
                     ],
                    },
                    to: FunctionApplication {
                     function: Variable {
                      identifier: "f",
                      position: (327, 54),
                     },
                     arguments: [
                      Variable {
                       identifier: "attr",
                       position: (327, 56),
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "set",
                        position: (327, 61),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Expression {
                          expression: Variable {
                           identifier: "attr",
                           position: (327, 67),
                          },
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                   },
                  ],
                  recursive: false,
                  position: (327, 31),
                 },
                 position: (327, 25),
                },
                position: (327, 24),
               },
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrNames",
                  position: (327, 78),
                 },
                 arguments: [
                  Variable {
                   identifier: "set",
                   position: (327, 88),
                  },
                 ],
                },
                position: (327, 77),
               },
              ],
             },
             position: (327, 19),
            },
           ],
          },
          position: (326, 9),
         },
         position: (326, 6),
        },
        position: (326, 5),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapAttrs'",
        position: (339, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (340, 5),
        },
        arguments: [
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (340, 18),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "attr",
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "f",
                position: (340, 29),
               },
               arguments: [
                Variable {
                 identifier: "attr",
                 position: (340, 31),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "set",
                  position: (340, 36),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Expression {
                    expression: Variable {
                     identifier: "attr",
                     position: (340, 42),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (340, 23),
             },
             position: (340, 22),
            },
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (340, 50),
              },
              arguments: [
               Variable {
                identifier: "set",
                position: (340, 60),
               },
              ],
             },
             position: (340, 49),
            },
           ],
          },
          position: (340, 17),
         },
        ],
       },
       position: (339, 18),
      },
      position: (339, 15),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapAttrsToList",
        position: (355, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "attrs",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (356, 5),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "name",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (356, 16),
            },
            arguments: [
             Variable {
              identifier: "name",
              position: (356, 18),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "attrs",
               position: (356, 23),
              },
              attribute_path: AttributePath {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (356, 31),
                 },
                },
               ],
              },
              default: None,
             },
            ],
           },
           position: (356, 10),
          },
          position: (356, 9),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "attrNames",
            position: (356, 39),
           },
           arguments: [
            Variable {
             identifier: "attrs",
             position: (356, 49),
            },
           ],
          },
          position: (356, 38),
         },
        ],
       },
       position: (355, 23),
      },
      position: (355, 20),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapAttrsRecursive",
        position: (372, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "mapAttrsRecursiveCond",
       position: (372, 23),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "as",
         },
         definition: Variable {
          identifier: "true",
          position: (372, 50),
         },
         position: (372, 46),
        },
        position: (372, 45),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mapAttrsRecursiveCond",
        position: (393, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "cond",
      },
      definition: Function {
       argument: Simple {
        identifier: "f",
       },
       definition: Function {
        argument: Simple {
         identifier: "set",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "recurse",
              position: (395, 7),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "path",
            },
            definition: LetIn {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "g",
                  position: (397, 11),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "name",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "value",
                 },
                 definition: IfThenElse {
                  predicate: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "isAttrs",
                      position: (399, 16),
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (399, 24),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "cond",
                      position: (399, 33),
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (399, 38),
                      },
                     ],
                    },
                   ],
                   position: (399, 30),
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "recurse",
                    position: (400, 20),
                   },
                   arguments: [
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       Variable {
                        identifier: "path",
                        position: (400, 29),
                       },
                       List {
                        elements: [
                         Variable {
                          identifier: "name",
                          position: (400, 38),
                         },
                        ],
                        position: (400, 37),
                       },
                      ],
                      position: (400, 34),
                     },
                     position: (400, 28),
                    },
                    Variable {
                     identifier: "value",
                     position: (400, 45),
                    },
                   ],
                  },
                  else_: FunctionApplication {
                   function: Variable {
                    identifier: "f",
                    position: (401, 20),
                   },
                   arguments: [
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       Variable {
                        identifier: "path",
                        position: (401, 23),
                       },
                       List {
                        elements: [
                         Variable {
                          identifier: "name",
                          position: (401, 32),
                         },
                        ],
                        position: (401, 31),
                       },
                      ],
                      position: (401, 28),
                     },
                     position: (401, 22),
                    },
                    Variable {
                     identifier: "value",
                     position: (401, 39),
                    },
                   ],
                  },
                  position: (399, 13),
                 },
                 position: (398, 19),
                },
                position: (398, 13),
               },
              },
             ],
             target: FunctionApplication {
              function: Variable {
               identifier: "mapAttrs",
               position: (402, 12),
              },
              arguments: [
               Variable {
                identifier: "g",
                position: (402, 21),
               },
              ],
             },
             position: (396, 9),
            },
            position: (395, 17),
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "recurse",
           position: (403, 8),
          },
          arguments: [
           List {
            elements: [],
            position: (403, 16),
           },
           Variable {
            identifier: "set",
            position: (403, 19),
           },
          ],
         },
         position: (394, 5),
        },
        position: (393, 36),
       },
       position: (393, 33),
      },
      position: (393, 27),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "genAttrs",
        position: (413, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "names",
      },
      definition: Function {
       argument: Simple {
        identifier: "f",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (414, 5),
        },
        arguments: [
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (414, 18),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "n",
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "nameValuePair",
                position: (414, 26),
               },
               arguments: [
                Variable {
                 identifier: "n",
                 position: (414, 40),
                },
                Parentheses {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "f",
                   position: (414, 43),
                  },
                  arguments: [
                   Variable {
                    identifier: "n",
                    position: (414, 45),
                   },
                  ],
                 },
                 position: (414, 42),
                },
               ],
              },
              position: (414, 23),
             },
             position: (414, 22),
            },
            Variable {
             identifier: "names",
             position: (414, 49),
            },
           ],
          },
          position: (414, 17),
         },
        ],
       },
       position: (413, 21),
      },
      position: (413, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "isDerivation",
        position: (427, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: BinaryOperation {
       operator: EqualTo,
       operands: [
        PropertyAccess {
         expression: Variable {
          identifier: "x",
          position: (427, 21),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "type",
            position: (427, 23),
           },
          ],
         },
         default: Some(
          Variable {
           identifier: "null",
           position: (427, 31),
          },
         ),
        },
        String {
         parts: [
          Raw {
           content: "derivation",
           position: (427, 40),
          },
         ],
         position: (427, 39),
        },
       ],
       position: (427, 36),
      },
      position: (427, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "toDerivation",
        position: (430, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "path",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "path'",
            position: (432, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (432, 15),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "storePath",
              position: (432, 24),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "path",
            position: (432, 34),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "res",
            position: (433, 7),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "type",
               position: (434, 11),
              },
             ],
            },
            to: String {
             parts: [
              Raw {
               content: "derivation",
               position: (434, 19),
              },
             ],
             position: (434, 18),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "name",
               position: (435, 11),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "sanitizeDerivationName",
              position: (435, 18),
             },
             arguments: [
              Parentheses {
               expression: FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (435, 42),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "substring",
                    position: (435, 51),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Int {
                  value: 33,
                  position: (435, 61),
                 },
                 Parentheses {
                  expression: UnaryOperation {
                   operator: Negate,
                   operand: Int {
                    value: 1,
                    position: (435, 66),
                   },
                   position: (435, 65),
                  },
                  position: (435, 64),
                 },
                 Parentheses {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "baseNameOf",
                    position: (435, 70),
                   },
                   arguments: [
                    Variable {
                     identifier: "path'",
                     position: (435, 81),
                    },
                   ],
                  },
                  position: (435, 69),
                 },
                ],
               },
               position: (435, 41),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "outPath",
               position: (436, 11),
              },
             ],
            },
            to: Variable {
             identifier: "path'",
             position: (436, 21),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "outputs",
               position: (437, 11),
              },
             ],
            },
            to: List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "out",
                 position: (437, 24),
                },
               ],
               position: (437, 23),
              },
             ],
             position: (437, 21),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "out",
               position: (438, 11),
              },
             ],
            },
            to: Variable {
             identifier: "res",
             position: (438, 17),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "outputName",
               position: (439, 11),
              },
             ],
            },
            to: String {
             parts: [
              Raw {
               content: "out",
               position: (439, 25),
              },
             ],
             position: (439, 24),
            },
           },
          ],
          recursive: false,
          position: (434, 9),
         },
        },
       ],
       target: Variable {
        identifier: "res",
        position: (441, 8),
       },
       position: (431, 5),
      },
      position: (430, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionalAttrs",
        position: (453, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "cond",
      },
      definition: Function {
       argument: Simple {
        identifier: "as",
       },
       definition: IfThenElse {
        predicate: Variable {
         identifier: "cond",
         position: (453, 32),
        },
        then: Variable {
         identifier: "as",
         position: (453, 42),
        },
        else_: Map {
         bindings: [],
         recursive: false,
         position: (453, 50),
        },
        position: (453, 29),
       },
       position: (453, 25),
      },
      position: (453, 19),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipAttrsWithNames",
        position: (463, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "names",
      },
      definition: Function {
       argument: Simple {
        identifier: "f",
       },
       definition: Function {
        argument: Simple {
         identifier: "sets",
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "listToAttrs",
          position: (464, 5),
         },
         arguments: [
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (464, 18),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "name",
               },
               definition: Map {
                bindings: [
                 Inherit {
                  from: None,
                  attributes: [
                   Raw {
                    content: "name",
                    position: (465, 15),
                   },
                  ],
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "value",
                     position: (466, 7),
                    },
                   ],
                  },
                  to: FunctionApplication {
                   function: Variable {
                    identifier: "f",
                    position: (466, 15),
                   },
                   arguments: [
                    Variable {
                     identifier: "name",
                     position: (466, 17),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "catAttrs",
                       position: (466, 23),
                      },
                      arguments: [
                       Variable {
                        identifier: "name",
                        position: (466, 32),
                       },
                       Variable {
                        identifier: "sets",
                        position: (466, 37),
                       },
                      ],
                     },
                     position: (466, 22),
                    },
                   ],
                  },
                 },
                ],
                recursive: false,
                position: (464, 29),
               },
               position: (464, 23),
              },
              position: (464, 22),
             },
             Variable {
              identifier: "names",
              position: (467, 8),
             },
            ],
           },
           position: (464, 17),
          },
         ],
        },
        position: (463, 33),
       },
       position: (463, 30),
      },
      position: (463, 23),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipAttrsWith",
        position: (478, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (479, 5),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "zipAttrsWith",
         position: (479, 14),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "f",
         },
         definition: Function {
          argument: Simple {
           identifier: "sets",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "zipAttrsWithNames",
            position: (479, 40),
           },
           arguments: [
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "concatMap",
               position: (479, 59),
              },
              arguments: [
               Variable {
                identifier: "attrNames",
                position: (479, 69),
               },
               Variable {
                identifier: "sets",
                position: (479, 79),
               },
              ],
             },
             position: (479, 58),
            },
            Variable {
             identifier: "f",
             position: (479, 85),
            },
            Variable {
             identifier: "sets",
             position: (479, 87),
            },
           ],
          },
          position: (479, 34),
         },
         position: (479, 31),
        },
        position: (479, 30),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipAttrs",
        position: (486, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "zipAttrsWith",
       position: (486, 14),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "name",
         },
         definition: Function {
          argument: Simple {
           identifier: "values",
          },
          definition: Variable {
           identifier: "values",
           position: (486, 42),
          },
          position: (486, 34),
         },
         position: (486, 28),
        },
        position: (486, 27),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "recursiveUpdateUntil",
        position: (516, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "lhs",
       },
       definition: Function {
        argument: Simple {
         identifier: "rhs",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "f",
              position: (517, 9),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "attrPath",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "zipAttrsWith",
              position: (518, 7),
             },
             arguments: [
              Parentheses {
               expression: Function {
                argument: Simple {
                 identifier: "n",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "values",
                 },
                 definition: LetIn {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "here",
                       position: (519, 13),
                      },
                     ],
                    },
                    to: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "attrPath",
                       position: (519, 20),
                      },
                      List {
                       elements: [
                        Variable {
                         identifier: "n",
                         position: (519, 33),
                        },
                       ],
                       position: (519, 32),
                      },
                     ],
                     position: (519, 29),
                    },
                   },
                  ],
                  target: IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "length",
                         position: (520, 12),
                        },
                        arguments: [
                         Variable {
                          identifier: "values",
                          position: (520, 19),
                         },
                        ],
                       },
                       Int {
                        value: 1,
                        position: (520, 29),
                       },
                      ],
                      position: (520, 26),
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "pred",
                       position: (521, 12),
                      },
                      arguments: [
                       Variable {
                        identifier: "here",
                        position: (521, 17),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "elemAt",
                          position: (521, 23),
                         },
                         arguments: [
                          Variable {
                           identifier: "values",
                           position: (521, 30),
                          },
                          Int {
                           value: 1,
                           position: (521, 37),
                          },
                         ],
                        },
                        position: (521, 22),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "head",
                          position: (521, 41),
                         },
                         arguments: [
                          Variable {
                           identifier: "values",
                           position: (521, 46),
                          },
                         ],
                        },
                        position: (521, 40),
                       },
                      ],
                     },
                    ],
                    position: (521, 9),
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "head",
                     position: (522, 11),
                    },
                    arguments: [
                     Variable {
                      identifier: "values",
                      position: (522, 16),
                     },
                    ],
                   },
                   else_: FunctionApplication {
                    function: Variable {
                     identifier: "f",
                     position: (524, 11),
                    },
                    arguments: [
                     Variable {
                      identifier: "here",
                      position: (524, 13),
                     },
                     Variable {
                      identifier: "values",
                      position: (524, 18),
                     },
                    ],
                   },
                   position: (520, 9),
                  },
                  position: (519, 9),
                 },
                 position: (518, 24),
                },
                position: (518, 21),
               },
               position: (518, 20),
              },
             ],
            },
            position: (517, 13),
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (526, 8),
          },
          arguments: [
           List {
            elements: [],
            position: (526, 10),
           },
           List {
            elements: [
             Variable {
              identifier: "rhs",
              position: (526, 14),
             },
             Variable {
              identifier: "lhs",
              position: (526, 18),
             },
            ],
            position: (526, 13),
           },
          ],
         },
         position: (517, 5),
        },
        position: (516, 37),
       },
       position: (516, 32),
      },
      position: (516, 26),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "recursiveUpdate",
        position: (547, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "recursiveUpdateUntil",
       position: (547, 21),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "path",
         },
         definition: Function {
          argument: Simple {
           identifier: "lhs",
          },
          definition: Function {
           argument: Simple {
            identifier: "rhs",
           },
           definition: UnaryOperation {
            operator: Not,
            operand: Parentheses {
             expression: BinaryOperation {
              operator: LogicalAnd,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "isAttrs",
                 position: (547, 61),
                },
                arguments: [
                 Variable {
                  identifier: "lhs",
                  position: (547, 69),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "isAttrs",
                 position: (547, 76),
                },
                arguments: [
                 Variable {
                  identifier: "rhs",
                  position: (547, 84),
                 },
                ],
               },
              ],
              position: (547, 73),
             },
             position: (547, 60),
            },
            position: (547, 59),
           },
           position: (547, 54),
          },
          position: (547, 49),
         },
         position: (547, 43),
        },
        position: (547, 42),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "matchAttrs",
        position: (555, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pattern",
      },
      definition: Function {
       argument: Simple {
        identifier: "attrs",
       },
       definition: Assert {
        expression: FunctionApplication {
         function: Variable {
          identifier: "isAttrs",
          position: (555, 39),
         },
         arguments: [
          Variable {
           identifier: "pattern",
           position: (555, 47),
          },
         ],
        },
        target: FunctionApplication {
         function: Variable {
          identifier: "all",
          position: (556, 5),
         },
         arguments: [
          Variable {
           identifier: "id",
           position: (556, 9),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "attrValues",
             position: (556, 13),
            },
            arguments: [
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "zipAttrsWithNames",
                position: (556, 25),
               },
               arguments: [
                Parentheses {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "attrNames",
                   position: (556, 44),
                  },
                  arguments: [
                   Variable {
                    identifier: "pattern",
                    position: (556, 54),
                   },
                  ],
                 },
                 position: (556, 43),
                },
                Parentheses {
                 expression: Function {
                  argument: Simple {
                   identifier: "n",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "values",
                   },
                   definition: LetIn {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "pat",
                         position: (557, 11),
                        },
                       ],
                      },
                      to: FunctionApplication {
                       function: Variable {
                        identifier: "head",
                        position: (557, 17),
                       },
                       arguments: [
                        Variable {
                         identifier: "values",
                         position: (557, 22),
                        },
                       ],
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "val",
                         position: (557, 30),
                        },
                       ],
                      },
                      to: FunctionApplication {
                       function: Variable {
                        identifier: "elemAt",
                        position: (557, 36),
                       },
                       arguments: [
                        Variable {
                         identifier: "values",
                         position: (557, 43),
                        },
                        Int {
                         value: 1,
                         position: (557, 50),
                        },
                       ],
                      },
                     },
                    ],
                    target: IfThenElse {
                     predicate: BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "length",
                         position: (558, 10),
                        },
                        arguments: [
                         Variable {
                          identifier: "values",
                          position: (558, 17),
                         },
                        ],
                       },
                       Int {
                        value: 1,
                        position: (558, 27),
                       },
                      ],
                      position: (558, 24),
                     },
                     then: Variable {
                      identifier: "false",
                      position: (558, 34),
                     },
                     else_: IfThenElse {
                      predicate: FunctionApplication {
                       function: Variable {
                        identifier: "isAttrs",
                        position: (559, 15),
                       },
                       arguments: [
                        Variable {
                         identifier: "pat",
                         position: (559, 23),
                        },
                       ],
                      },
                      then: BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "isAttrs",
                          position: (559, 32),
                         },
                         arguments: [
                          Variable {
                           identifier: "val",
                           position: (559, 40),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "matchAttrs",
                          position: (559, 47),
                         },
                         arguments: [
                          Variable {
                           identifier: "pat",
                           position: (559, 58),
                          },
                          Variable {
                           identifier: "val",
                           position: (559, 62),
                          },
                         ],
                        },
                       ],
                       position: (559, 44),
                      },
                      else_: BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        Variable {
                         identifier: "pat",
                         position: (560, 12),
                        },
                        Variable {
                         identifier: "val",
                         position: (560, 19),
                        },
                       ],
                       position: (560, 16),
                      },
                      position: (559, 12),
                     },
                     position: (558, 7),
                    },
                    position: (557, 7),
                   },
                   position: (556, 67),
                  },
                  position: (556, 64),
                 },
                 position: (556, 63),
                },
                List {
                 elements: [
                  Variable {
                   identifier: "pattern",
                   position: (561, 8),
                  },
                  Variable {
                   identifier: "attrs",
                   position: (561, 16),
                  },
                 ],
                 position: (561, 7),
                },
               ],
              },
              position: (556, 24),
             },
            ],
           },
           position: (556, 12),
          },
         ],
        },
        position: (555, 32),
       },
       position: (555, 25),
      },
      position: (555, 16),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "overrideExisting",
        position: (574, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "old",
      },
      definition: Function {
       argument: Simple {
        identifier: "new",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "mapAttrs",
         position: (575, 5),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "name",
           },
           definition: Function {
            argument: Simple {
             identifier: "value",
            },
            definition: PropertyAccess {
             expression: Variable {
              identifier: "new",
              position: (575, 28),
             },
             attribute_path: AttributePath {
              parts: [
               Expression {
                expression: Variable {
                 identifier: "name",
                 position: (575, 34),
                },
               },
              ],
             },
             default: Some(
              Variable {
               identifier: "value",
               position: (575, 43),
              },
             ),
            },
            position: (575, 21),
           },
           position: (575, 15),
          },
          position: (575, 14),
         },
         Variable {
          identifier: "old",
          position: (575, 50),
         },
        ],
       },
       position: (574, 27),
      },
      position: (574, 22),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "showAttrPath",
        position: (587, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "path",
      },
      definition: IfThenElse {
       predicate: BinaryOperation {
        operator: EqualTo,
        operands: [
         Variable {
          identifier: "path",
          position: (588, 8),
         },
         List {
          elements: [],
          position: (588, 16),
         },
        ],
        position: (588, 13),
       },
       then: String {
        parts: [
         Raw {
          content: "<root attribute path>",
          position: (588, 25),
         },
        ],
        position: (588, 24),
       },
       else_: FunctionApplication {
        function: Variable {
         identifier: "concatMapStringsSep",
         position: (589, 10),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: ".",
            position: (589, 31),
           },
          ],
          position: (589, 30),
         },
         Variable {
          identifier: "escapeNixIdentifier",
          position: (589, 34),
         },
         Variable {
          identifier: "path",
          position: (589, 54),
         },
        ],
       },
       position: (588, 5),
      },
      position: (587, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getOutput",
        position: (598, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "output",
      },
      definition: Function {
       argument: Simple {
        identifier: "pkg",
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: LogicalOr,
         operands: [
          UnaryOperation {
           operator: Not,
           operand: HasProperty {
            expression: Variable {
             identifier: "pkg",
             position: (599, 10),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "outputSpecified",
               position: (599, 16),
              },
             ],
            },
            position: (599, 14),
           },
           position: (599, 8),
          },
          UnaryOperation {
           operator: Not,
           operand: PropertyAccess {
            expression: Variable {
             identifier: "pkg",
             position: (599, 37),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "outputSpecified",
               position: (599, 41),
              },
             ],
            },
            default: None,
           },
           position: (599, 35),
          },
         ],
         position: (599, 32),
        },
        then: PropertyAccess {
         expression: Variable {
          identifier: "pkg",
          position: (600, 12),
         },
         attribute_path: AttributePath {
          parts: [
           Expression {
            expression: Variable {
             identifier: "output",
             position: (600, 18),
            },
           },
          ],
         },
         default: Some(
          PropertyAccess {
           expression: Variable {
            identifier: "pkg",
            position: (600, 29),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "out",
              position: (600, 33),
             },
            ],
           },
           default: Some(
            Variable {
             identifier: "pkg",
             position: (600, 40),
            },
           ),
          },
         ),
        },
        else_: Variable {
         identifier: "pkg",
         position: (601, 12),
        },
        position: (599, 5),
       },
       position: (598, 23),
      },
      position: (598, 15),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getBin",
        position: (603, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (603, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "bin",
          position: (603, 23),
         },
        ],
        position: (603, 22),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getLib",
        position: (604, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (604, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "lib",
          position: (604, 23),
         },
        ],
        position: (604, 22),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getDev",
        position: (605, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (605, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "dev",
          position: (605, 23),
         },
        ],
        position: (605, 22),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "getMan",
        position: (606, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (606, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "man",
          position: (606, 23),
         },
        ],
        position: (606, 22),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "chooseDevOutputs",
        position: (609, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "drvs",
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (609, 28),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "map",
           position: (609, 37),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Variable {
         identifier: "getDev",
         position: (609, 41),
        },
        Variable {
         identifier: "drvs",
         position: (609, 48),
        },
       ],
      },
      position: (609, 22),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "recurseIntoAttrs",
        position: (617, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrs",
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "attrs",
         position: (618, 12),
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "recurseForDerivations",
              position: (618, 23),
             },
            ],
           },
           to: Variable {
            identifier: "true",
            position: (618, 47),
           },
          },
         ],
         recursive: false,
         position: (618, 21),
        },
       ],
       position: (618, 18),
      },
      position: (618, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "dontRecurseIntoAttrs",
        position: (622, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attrs",
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "attrs",
         position: (623, 12),
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "recurseForDerivations",
              position: (623, 23),
             },
            ],
           },
           to: Variable {
            identifier: "false",
            position: (623, 47),
           },
          },
         ],
         recursive: false,
         position: (623, 21),
        },
       ],
       position: (623, 18),
      },
      position: (623, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipWithNames",
        position: (627, 3),
       },
      ],
     },
     to: Variable {
      identifier: "zipAttrsWithNames",
      position: (627, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zip",
        position: (628, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (628, 9),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "trace",
          position: (628, 18),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "lib.zip is deprecated, use lib.zipAttrsWith instead",
          position: (629, 6),
         },
        ],
        position: (629, 5),
       },
       Variable {
        identifier: "zipAttrsWith",
        position: (629, 59),
       },
      ],
     },
    },
   ],
   recursive: true,
   position: (11, 1),
  },
  position: (4, 1),
 },
 position: (1, 1),
}