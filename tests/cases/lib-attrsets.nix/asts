---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit(
    Some(
     Variable {
      identifier: "builtins",
      position: (5, 12),
     },
    ),
    [
     Raw {
      content: "head",
      position: (5, 22),
     },
     Raw {
      content: "tail",
      position: (5, 27),
     },
     Raw {
      content: "length",
      position: (5, 32),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (6, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "trivial",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "id",
      position: (6, 25),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (7, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (7, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "concatStringsSep",
      position: (7, 25),
     },
     Raw {
      content: "sanitizeDerivationName",
      position: (7, 42),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (8, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "lists",
         position: (8, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "foldr",
      position: (8, 23),
     },
     Raw {
      content: "foldl'",
      position: (8, 29),
     },
     Raw {
      content: "concatMap",
      position: (8, 36),
     },
     Raw {
      content: "concatLists",
      position: (8, 46),
     },
     Raw {
      content: "elemAt",
      position: (8, 58),
     },
     Raw {
      content: "all",
      position: (8, 65),
     },
    ],
   ),
  ],
  target: Map {
   bindings: [
    Inherit(
     Some(
      Variable {
       identifier: "builtins",
       position: (12, 12),
      },
     ),
     [
      Raw {
       content: "attrNames",
       position: (12, 22),
      },
      Raw {
       content: "listToAttrs",
       position: (12, 32),
      },
      Raw {
       content: "hasAttr",
       position: (12, 44),
      },
      Raw {
       content: "isAttrs",
       position: (12, 52),
      },
      Raw {
       content: "getAttr",
       position: (12, 60),
      },
     ],
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "attrByPath",
        position: (24, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrPath",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "default",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "e",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attr",
              position: (25, 9),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "head",
             position: (25, 16),
            },
            arguments: [
             Variable {
              identifier: "attrPath",
              position: (25, 21),
             },
            ],
           },
          ),
         ],
         target: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "attrPath",
             position: (27, 10),
            },
            List {
             elements: [],
            },
           ],
           position: (27, 19),
          },
          then: Variable {
           identifier: "e",
           position: (27, 30),
          },
          else_: IfThenElse {
           predicate: HasProperty {
            expression: Variable {
             identifier: "e",
             position: (28, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Expression {
               expression: Variable {
                identifier: "attr",
                position: (28, 21),
               },
              },
             ],
            },
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "attrByPath",
             position: (29, 12),
            },
            arguments: [
             FunctionApplication {
              function: Variable {
               identifier: "tail",
               position: (29, 24),
              },
              arguments: [
               Variable {
                identifier: "attrPath",
                position: (29, 29),
               },
              ],
             },
             Variable {
              identifier: "default",
              position: (29, 39),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "e",
               position: (29, 47),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "attr",
                  position: (29, 51),
                 },
                },
               ],
              },
              default: None,
             },
            ],
           },
           else_: Variable {
            identifier: "default",
            position: (30, 12),
           },
           position: (28, 12),
          },
          position: (27, 7),
         },
         position: (25, 5),
        },
        position: (24, 35),
       },
       position: (24, 26),
      },
      position: (24, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "hasAttrByPath",
        position: (42, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrPath",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "e",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "attr",
             position: (43, 9),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (43, 16),
           },
           arguments: [
            Variable {
             identifier: "attrPath",
             position: (43, 21),
            },
           ],
          },
         ),
        ],
        target: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "attrPath",
            position: (45, 10),
           },
           List {
            elements: [],
           },
          ],
          position: (45, 19),
         },
         then: Variable {
          identifier: "true",
          position: (45, 30),
         },
         else_: IfThenElse {
          predicate: HasProperty {
           expression: Variable {
            identifier: "e",
            position: (46, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Expression {
              expression: Variable {
               identifier: "attr",
               position: (46, 21),
              },
             },
            ],
           },
          },
          then: FunctionApplication {
           function: Variable {
            identifier: "hasAttrByPath",
            position: (47, 12),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "tail",
              position: (47, 27),
             },
             arguments: [
              Variable {
               identifier: "attrPath",
               position: (47, 32),
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "e",
              position: (47, 42),
             },
             attribute_path: AttributePath {
              attributes: [
               Expression {
                expression: Variable {
                 identifier: "attr",
                 position: (47, 46),
                },
               },
              ],
             },
             default: None,
            },
           ],
          },
          else_: Variable {
           identifier: "false",
           position: (48, 12),
          },
          position: (46, 12),
         },
         position: (45, 7),
        },
        position: (43, 5),
       },
       position: (42, 29),
      },
      position: (42, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "setAttrByPath",
        position: (57, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrPath",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "value",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "len",
             position: (59, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "length",
            position: (59, 13),
           },
           arguments: [
            Variable {
             identifier: "attrPath",
             position: (59, 20),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "atDepth",
             position: (60, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "n",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "n",
               position: (61, 12),
              },
              Variable {
               identifier: "len",
               position: (61, 17),
              },
             ],
             position: (61, 14),
            },
            then: Variable {
             identifier: "value",
             position: (62, 14),
            },
            else_: Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "elemAt",
                    position: (63, 18),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrPath",
                     position: (63, 25),
                    },
                    Variable {
                     identifier: "n",
                     position: (63, 34),
                    },
                   ],
                  },
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "atDepth",
                 position: (63, 39),
                },
                arguments: [
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   Variable {
                    identifier: "n",
                    position: (63, 48),
                   },
                   Int {
                    value: 1,
                    position: (63, 52),
                   },
                  ],
                  position: (63, 50),
                 },
                ],
               },
              ),
             ],
             recursive: false,
            },
            position: (61, 9),
           },
           position: (60, 17),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "atDepth",
          position: (64, 8),
         },
         arguments: [
          Int {
           value: 0,
           position: (64, 16),
          },
         ],
        },
        position: (58, 5),
       },
       position: (57, 29),
      },
      position: (57, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getAttrFromPath",
        position: (76, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrPath",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "errorMsg",
            position: (77, 9),
           },
          ],
         },
         BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "cannot find attribute `",
                position: (77, 21),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (77, 48),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: ".",
                  position: (77, 66),
                 },
                ],
               },
               Variable {
                identifier: "attrPath",
                position: (77, 69),
               },
              ],
             },
            ],
            position: (77, 46),
           },
           String {
            parts: [
             Raw {
              content: "'",
              position: (77, 81),
             },
            ],
           },
          ],
          position: (77, 78),
         },
        ),
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "attrByPath",
         position: (78, 8),
        },
        arguments: [
         Variable {
          identifier: "attrPath",
          position: (78, 19),
         },
         FunctionApplication {
          function: Variable {
           identifier: "abort",
           position: (78, 29),
          },
          arguments: [
           Variable {
            identifier: "errorMsg",
            position: (78, 35),
           },
          ],
         },
        ],
       },
       position: (77, 5),
      },
      position: (76, 21),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "attrVals",
        position: (87, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "nameList",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (87, 29),
        },
        arguments: [
         Function {
          argument: Some(
           "x",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: PropertyAccess {
           expression: Variable {
            identifier: "set",
            position: (87, 37),
           },
           attribute_path: AttributePath {
            attributes: [
             Expression {
              expression: Variable {
               identifier: "x",
               position: (87, 43),
              },
             },
            ],
           },
           default: None,
          },
          position: (87, 34),
         },
         Variable {
          identifier: "nameList",
          position: (87, 47),
         },
        ],
       },
       position: (87, 24),
      },
      position: (87, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "attrValues",
        position: (97, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (97, 16),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrValues",
         position: (97, 25),
        },
       ],
      },
      default: Some(
       Function {
        argument: Some(
         "attrs",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "attrVals",
          position: (97, 47),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "attrNames",
            position: (97, 57),
           },
           arguments: [
            Variable {
             identifier: "attrs",
             position: (97, 67),
            },
           ],
          },
          Variable {
           identifier: "attrs",
           position: (97, 74),
          },
         ],
        },
        position: (97, 40),
       },
      ),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getAttrs",
        position: (107, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "names",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "genAttrs",
         position: (107, 28),
        },
        arguments: [
         Variable {
          identifier: "names",
          position: (107, 37),
         },
         Function {
          argument: Some(
           "name",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: PropertyAccess {
           expression: Variable {
            identifier: "attrs",
            position: (107, 50),
           },
           attribute_path: AttributePath {
            attributes: [
             Expression {
              expression: Variable {
               identifier: "name",
               position: (107, 58),
              },
             },
            ],
           },
           default: None,
          },
          position: (107, 44),
         },
        ],
       },
       position: (107, 21),
      },
      position: (107, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "catAttrs",
        position: (116, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (116, 14),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "catAttrs",
         position: (116, 23),
        },
       ],
      },
      default: Some(
       Function {
        argument: Some(
         "attr",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "l",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "concatLists",
           position: (117, 15),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (117, 28),
            },
            arguments: [
             Function {
              argument: Some(
               "s",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: IfThenElse {
               predicate: HasProperty {
                expression: Variable {
                 identifier: "s",
                 position: (117, 39),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "attr",
                    position: (117, 45),
                   },
                  },
                 ],
                },
               },
               then: List {
                elements: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "s",
                   position: (117, 57),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Expression {
                     expression: Variable {
                      identifier: "attr",
                      position: (117, 61),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               else_: List {
                elements: [],
               },
               position: (117, 36),
              },
              position: (117, 33),
             },
             Variable {
              identifier: "l",
              position: (117, 77),
             },
            ],
           },
          ],
         },
         position: (117, 12),
        },
        position: (117, 6),
       },
      ),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "filterAttrs",
        position: (127, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (128, 5),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "concatMap",
           position: (128, 18),
          },
          arguments: [
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "v",
                  position: (128, 39),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "set",
                 position: (128, 43),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "name",
                    position: (128, 49),
                   },
                  },
                 ],
                },
                default: None,
               },
              ),
             ],
             target: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "pred",
                position: (128, 62),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (128, 67),
                },
                Variable {
                 identifier: "v",
                 position: (128, 72),
                },
               ],
              },
              then: List {
               elements: [
                FunctionApplication {
                 function: Variable {
                  identifier: "nameValuePair",
                  position: (128, 81),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (128, 95),
                  },
                  Variable {
                   identifier: "v",
                   position: (128, 100),
                  },
                 ],
                },
               ],
              },
              else_: List {
               elements: [],
              },
              position: (128, 59),
             },
             position: (128, 35),
            },
            position: (128, 29),
           },
           FunctionApplication {
            function: Variable {
             identifier: "attrNames",
             position: (128, 114),
            },
            arguments: [
             Variable {
              identifier: "set",
              position: (128, 124),
             },
            ],
           },
          ],
         },
        ],
       },
       position: (127, 23),
      },
      position: (127, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "filterAttrsRecursive",
        position: (138, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (139, 5),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "concatMap",
           position: (140, 7),
          },
          arguments: [
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "v",
                  position: (141, 13),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "set",
                 position: (141, 17),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "name",
                    position: (141, 23),
                   },
                  },
                 ],
                },
                default: None,
               },
              ),
             ],
             target: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "pred",
                position: (142, 12),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (142, 17),
                },
                Variable {
                 identifier: "v",
                 position: (142, 22),
                },
               ],
              },
              then: List {
               elements: [
                FunctionApplication {
                 function: Variable {
                  identifier: "nameValuePair",
                  position: (143, 12),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (143, 26),
                  },
                  IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isAttrs",
                     position: (144, 16),
                    },
                    arguments: [
                     Variable {
                      identifier: "v",
                      position: (144, 24),
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "filterAttrsRecursive",
                     position: (144, 31),
                    },
                    arguments: [
                     Variable {
                      identifier: "pred",
                      position: (144, 52),
                     },
                     Variable {
                      identifier: "v",
                      position: (144, 57),
                     },
                    ],
                   },
                   else_: Variable {
                    identifier: "v",
                    position: (145, 18),
                   },
                   position: (144, 13),
                  },
                 ],
                },
               ],
              },
              else_: List {
               elements: [],
              },
              position: (142, 9),
             },
             position: (141, 9),
            },
            position: (140, 18),
           },
           FunctionApplication {
            function: Variable {
             identifier: "attrNames",
             position: (148, 10),
            },
            arguments: [
             Variable {
              identifier: "set",
              position: (148, 20),
             },
            ],
           },
          ],
         },
        ],
       },
       position: (138, 32),
      },
      position: (138, 26),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "foldAttrs",
        position: (157, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "op",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "nul",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "foldr",
         position: (158, 5),
        },
        arguments: [
         Function {
          argument: Some(
           "n",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "a",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (159, 9),
            },
            arguments: [
             Function {
              argument: Some(
               "name",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "o",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: BinaryOperation {
                operator: Update,
                operands: [
                 Variable {
                  identifier: "o",
                  position: (160, 11),
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Expression {
                       expression: Variable {
                        identifier: "name",
                        position: (160, 20),
                       },
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "op",
                      position: (160, 28),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "n",
                        position: (160, 31),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Expression {
                          expression: Variable {
                           identifier: "name",
                           position: (160, 35),
                          },
                         },
                        ],
                       },
                       default: None,
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "a",
                        position: (160, 42),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Expression {
                          expression: Variable {
                           identifier: "name",
                           position: (160, 46),
                          },
                         },
                        ],
                       },
                       default: Some(
                        Variable {
                         identifier: "nul",
                         position: (160, 55),
                        },
                       ),
                      },
                     ],
                    },
                   ),
                  ],
                  recursive: false,
                 },
                ],
                position: (160, 13),
               },
               position: (159, 22),
              },
              position: (159, 16),
             },
             Variable {
              identifier: "a",
              position: (161, 11),
             },
             FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (161, 14),
              },
              arguments: [
               Variable {
                identifier: "n",
                position: (161, 24),
               },
              ],
             },
            ],
           },
           position: (158, 15),
          },
          position: (158, 12),
         },
         Map {
          bindings: [],
          recursive: false,
         },
        ],
       },
       position: (157, 19),
      },
      position: (157, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "collect",
        position: (181, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "pred",
          position: (182, 8),
         },
         arguments: [
          Variable {
           identifier: "attrs",
           position: (182, 13),
          },
         ],
        },
        then: List {
         elements: [
          Variable {
           identifier: "attrs",
           position: (183, 9),
          },
         ],
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: Variable {
           identifier: "isAttrs",
           position: (184, 13),
          },
          arguments: [
           Variable {
            identifier: "attrs",
            position: (184, 21),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "concatMap",
           position: (185, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "collect",
             position: (185, 18),
            },
            arguments: [
             Variable {
              identifier: "pred",
              position: (185, 26),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "attrValues",
             position: (185, 33),
            },
            arguments: [
             Variable {
              identifier: "attrs",
              position: (185, 44),
             },
            ],
           },
          ],
         },
         else_: List {
          elements: [],
         },
         position: (184, 10),
        },
        position: (182, 5),
       },
       position: (181, 19),
      },
      position: (181, 13),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cartesianProductOfSets",
        position: (200, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrsOfLists",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "foldl'",
        position: (201, 5),
       },
       arguments: [
        Function {
         argument: Some(
          "listOfAttrs",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "attrName",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "concatMap",
            position: (202, 7),
           },
           arguments: [
            Function {
             argument: Some(
              "attrs",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (203, 9),
              },
              arguments: [
               Function {
                argument: Some(
                 "listValue",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: BinaryOperation {
                 operator: Update,
                 operands: [
                  Variable {
                   identifier: "attrs",
                   position: (203, 25),
                  },
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "attrName",
                         position: (203, 38),
                        },
                       },
                      ],
                     },
                     Variable {
                      identifier: "listValue",
                      position: (203, 50),
                     },
                    ),
                   ],
                   recursive: false,
                  },
                 ],
                 position: (203, 31),
                },
                position: (203, 14),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "attrsOfLists",
                 position: (203, 64),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "attrName",
                    position: (203, 79),
                   },
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             position: (202, 18),
            },
            Variable {
             identifier: "listOfAttrs",
             position: (204, 9),
            },
           ],
          },
          position: (201, 26),
         },
         position: (201, 13),
        },
        List {
         elements: [
          Map {
           bindings: [],
           recursive: false,
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "attrNames",
          position: (205, 13),
         },
         arguments: [
          Variable {
           identifier: "attrsOfLists",
           position: (205, 23),
          },
         ],
        },
       ],
      },
      position: (200, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nameValuePair",
        position: (215, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "value",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Map {
        bindings: [
         Inherit(
          None,
          [
           Raw {
            content: "name",
            position: (215, 42),
           },
           Raw {
            content: "value",
            position: (215, 47),
           },
          ],
         ),
        ],
        recursive: false,
       },
       position: (215, 25),
      },
      position: (215, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mapAttrs",
        position: (228, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (228, 14),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "mapAttrs",
         position: (228, 23),
        },
       ],
      },
      default: Some(
       Function {
        argument: Some(
         "f",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "set",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "listToAttrs",
           position: (230, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (230, 20),
            },
            arguments: [
             Function {
              argument: Some(
               "attr",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "name",
                    position: (230, 33),
                   },
                  ],
                 },
                 Variable {
                  identifier: "attr",
                  position: (230, 40),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "value",
                    position: (230, 46),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "f",
                   position: (230, 54),
                  },
                  arguments: [
                   Variable {
                    identifier: "attr",
                    position: (230, 56),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "set",
                     position: (230, 61),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Expression {
                       expression: Variable {
                        identifier: "attr",
                        position: (230, 67),
                       },
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
              position: (230, 25),
             },
             FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (230, 78),
              },
              arguments: [
               Variable {
                identifier: "set",
                position: (230, 88),
               },
              ],
             },
            ],
           },
          ],
         },
         position: (229, 9),
        },
        position: (229, 6),
       },
      ),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mapAttrs'",
        position: (242, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (243, 5),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (243, 18),
          },
          arguments: [
           Function {
            argument: Some(
             "attr",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "f",
              position: (243, 29),
             },
             arguments: [
              Variable {
               identifier: "attr",
               position: (243, 31),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "set",
                position: (243, 36),
               },
               attribute_path: AttributePath {
                attributes: [
                 Expression {
                  expression: Variable {
                   identifier: "attr",
                   position: (243, 42),
                  },
                 },
                ],
               },
               default: None,
              },
             ],
            },
            position: (243, 23),
           },
           FunctionApplication {
            function: Variable {
             identifier: "attrNames",
             position: (243, 50),
            },
            arguments: [
             Variable {
              identifier: "set",
              position: (243, 60),
             },
            ],
           },
          ],
         },
        ],
       },
       position: (242, 18),
      },
      position: (242, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mapAttrsToList",
        position: (258, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (259, 5),
        },
        arguments: [
         Function {
          argument: Some(
           "name",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (259, 16),
           },
           arguments: [
            Variable {
             identifier: "name",
             position: (259, 18),
            },
            PropertyAccess {
             expression: Variable {
              identifier: "attrs",
              position: (259, 23),
             },
             attribute_path: AttributePath {
              attributes: [
               Expression {
                expression: Variable {
                 identifier: "name",
                 position: (259, 31),
                },
               },
              ],
             },
             default: None,
            },
           ],
          },
          position: (259, 10),
         },
         FunctionApplication {
          function: Variable {
           identifier: "attrNames",
           position: (259, 39),
          },
          arguments: [
           Variable {
            identifier: "attrs",
            position: (259, 49),
           },
          ],
         },
        ],
       },
       position: (258, 23),
      },
      position: (258, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mapAttrsRecursive",
        position: (275, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mapAttrsRecursiveCond",
       position: (275, 23),
      },
      arguments: [
       Function {
        argument: Some(
         "as",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Variable {
         identifier: "true",
         position: (275, 50),
        },
        position: (275, 46),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mapAttrsRecursiveCond",
        position: (296, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "cond",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "set",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "recurse",
              position: (298, 7),
             },
            ],
           },
           Function {
            argument: Some(
             "path",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "g",
                  position: (300, 11),
                 },
                ],
               },
               Function {
                argument: Some(
                 "name",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: Function {
                 argument: Some(
                  "value",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: IfThenElse {
                  predicate: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "isAttrs",
                      position: (302, 16),
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (302, 24),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "cond",
                      position: (302, 33),
                     },
                     arguments: [
                      Variable {
                       identifier: "value",
                       position: (302, 38),
                      },
                     ],
                    },
                   ],
                   position: (302, 30),
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "recurse",
                    position: (303, 20),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "path",
                       position: (303, 29),
                      },
                      List {
                       elements: [
                        Variable {
                         identifier: "name",
                         position: (303, 38),
                        },
                       ],
                      },
                     ],
                     position: (303, 34),
                    },
                    Variable {
                     identifier: "value",
                     position: (303, 45),
                    },
                   ],
                  },
                  else_: FunctionApplication {
                   function: Variable {
                    identifier: "f",
                    position: (304, 20),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "path",
                       position: (304, 23),
                      },
                      List {
                       elements: [
                        Variable {
                         identifier: "name",
                         position: (304, 32),
                        },
                       ],
                      },
                     ],
                     position: (304, 28),
                    },
                    Variable {
                     identifier: "value",
                     position: (304, 39),
                    },
                   ],
                  },
                  position: (302, 13),
                 },
                 position: (301, 19),
                },
                position: (301, 13),
               },
              ),
             ],
             target: FunctionApplication {
              function: Variable {
               identifier: "mapAttrs",
               position: (305, 12),
              },
              arguments: [
               Variable {
                identifier: "g",
                position: (305, 21),
               },
              ],
             },
             position: (299, 9),
            },
            position: (298, 17),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "recurse",
           position: (306, 8),
          },
          arguments: [
           List {
            elements: [],
           },
           Variable {
            identifier: "set",
            position: (306, 19),
           },
          ],
         },
         position: (297, 5),
        },
        position: (296, 36),
       },
       position: (296, 33),
      },
      position: (296, 27),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "genAttrs",
        position: (316, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "names",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "listToAttrs",
         position: (317, 5),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (317, 18),
          },
          arguments: [
           Function {
            argument: Some(
             "n",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "nameValuePair",
              position: (317, 26),
             },
             arguments: [
              Variable {
               identifier: "n",
               position: (317, 40),
              },
              FunctionApplication {
               function: Variable {
                identifier: "f",
                position: (317, 43),
               },
               arguments: [
                Variable {
                 identifier: "n",
                 position: (317, 45),
                },
               ],
              },
             ],
            },
            position: (317, 23),
           },
           Variable {
            identifier: "names",
            position: (317, 49),
           },
          ],
         },
        ],
       },
       position: (316, 21),
      },
      position: (316, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "isDerivation",
        position: (330, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: LogicalAnd,
       operands: [
        BinaryOperation {
         operator: LogicalAnd,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "isAttrs",
            position: (330, 21),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (330, 29),
            },
           ],
          },
          HasProperty {
           expression: Variable {
            identifier: "x",
            position: (330, 34),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "type",
              position: (330, 38),
             },
            ],
           },
          },
         ],
         position: (330, 31),
        },
        BinaryOperation {
         operator: EqualTo,
         operands: [
          PropertyAccess {
           expression: Variable {
            identifier: "x",
            position: (330, 46),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "type",
              position: (330, 48),
             },
            ],
           },
           default: None,
          },
          String {
           parts: [
            Raw {
             content: "derivation",
             position: (330, 57),
            },
           ],
          },
         ],
         position: (330, 53),
        },
       ],
       position: (330, 43),
      },
      position: (330, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "toDerivation",
        position: (333, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "path",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "path'",
            position: (335, 7),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (335, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "storePath",
              position: (335, 24),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "path",
            position: (335, 34),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "res",
            position: (336, 7),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (337, 11),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "derivation",
               position: (337, 19),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "name",
               position: (338, 11),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "sanitizeDerivationName",
              position: (338, 18),
             },
             arguments: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (338, 42),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "substring",
                   position: (338, 51),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Int {
                 value: 33,
                 position: (338, 61),
                },
                UnaryOperation {
                 operator: Negate,
                 operand: Int {
                  value: 1,
                  position: (338, 66),
                 },
                 position: (338, 65),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "baseNameOf",
                  position: (338, 70),
                 },
                 arguments: [
                  Variable {
                   identifier: "path'",
                   position: (338, 81),
                  },
                 ],
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "outPath",
               position: (339, 11),
              },
             ],
            },
            Variable {
             identifier: "path'",
             position: (339, 21),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "outputs",
               position: (340, 11),
              },
             ],
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "out",
                 position: (340, 24),
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "out",
               position: (341, 11),
              },
             ],
            },
            Variable {
             identifier: "res",
             position: (341, 17),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "outputName",
               position: (342, 11),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "out",
               position: (342, 25),
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       target: Variable {
        identifier: "res",
        position: (344, 8),
       },
       position: (334, 5),
      },
      position: (333, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "optionalAttrs",
        position: (356, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "cond",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "as",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: Variable {
         identifier: "cond",
         position: (356, 32),
        },
        then: Variable {
         identifier: "as",
         position: (356, 42),
        },
        else_: Map {
         bindings: [],
         recursive: false,
        },
        position: (356, 29),
       },
       position: (356, 25),
      },
      position: (356, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "zipAttrsWithNames",
        position: (366, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "names",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "sets",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "listToAttrs",
          position: (367, 5),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (367, 18),
           },
           arguments: [
            Function {
             argument: Some(
              "name",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Map {
              bindings: [
               Inherit(
                None,
                [
                 Raw {
                  content: "name",
                  position: (368, 15),
                 },
                ],
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "value",
                   position: (369, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "f",
                  position: (369, 15),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (369, 17),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "catAttrs",
                    position: (369, 23),
                   },
                   arguments: [
                    Variable {
                     identifier: "name",
                     position: (369, 32),
                    },
                    Variable {
                     identifier: "sets",
                     position: (369, 37),
                    },
                   ],
                  },
                 ],
                },
               ),
              ],
              recursive: false,
             },
             position: (367, 23),
            },
            Variable {
             identifier: "names",
             position: (370, 8),
            },
           ],
          },
         ],
        },
        position: (366, 33),
       },
       position: (366, 30),
      },
      position: (366, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "zipAttrsWith",
        position: (381, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (382, 5),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "zipAttrsWith",
         position: (382, 14),
        },
       ],
      },
      default: Some(
       Function {
        argument: Some(
         "f",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "sets",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "zipAttrsWithNames",
           position: (382, 40),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "concatMap",
             position: (382, 59),
            },
            arguments: [
             Variable {
              identifier: "attrNames",
              position: (382, 69),
             },
             Variable {
              identifier: "sets",
              position: (382, 79),
             },
            ],
           },
           Variable {
            identifier: "f",
            position: (382, 85),
           },
           Variable {
            identifier: "sets",
            position: (382, 87),
           },
          ],
         },
         position: (382, 34),
        },
        position: (382, 31),
       },
      ),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "zipAttrs",
        position: (389, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "zipAttrsWith",
       position: (389, 14),
      },
      arguments: [
       Function {
        argument: Some(
         "name",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "values",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Variable {
          identifier: "values",
          position: (389, 42),
         },
         position: (389, 34),
        },
        position: (389, 28),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "recursiveUpdateUntil",
        position: (419, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "lhs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "rhs",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "f",
              position: (420, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "attrPath",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "zipAttrsWith",
              position: (421, 7),
             },
             arguments: [
              Function {
               argument: Some(
                "n",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "values",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "here",
                      position: (422, 13),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: Concatenation,
                    operands: [
                     Variable {
                      identifier: "attrPath",
                      position: (422, 20),
                     },
                     List {
                      elements: [
                       Variable {
                        identifier: "n",
                        position: (422, 33),
                       },
                      ],
                     },
                    ],
                    position: (422, 29),
                   },
                  ),
                 ],
                 target: IfThenElse {
                  predicate: BinaryOperation {
                   operator: LogicalOr,
                   operands: [
                    BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      FunctionApplication {
                       function: Variable {
                        identifier: "length",
                        position: (423, 12),
                       },
                       arguments: [
                        Variable {
                         identifier: "values",
                         position: (423, 19),
                        },
                       ],
                      },
                      Int {
                       value: 1,
                       position: (423, 29),
                      },
                     ],
                     position: (423, 26),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "pred",
                      position: (424, 12),
                     },
                     arguments: [
                      Variable {
                       identifier: "here",
                       position: (424, 17),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "elemAt",
                        position: (424, 23),
                       },
                       arguments: [
                        Variable {
                         identifier: "values",
                         position: (424, 30),
                        },
                        Int {
                         value: 1,
                         position: (424, 37),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "head",
                        position: (424, 41),
                       },
                       arguments: [
                        Variable {
                         identifier: "values",
                         position: (424, 46),
                        },
                       ],
                      },
                     ],
                    },
                   ],
                   position: (424, 9),
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "head",
                    position: (425, 11),
                   },
                   arguments: [
                    Variable {
                     identifier: "values",
                     position: (425, 16),
                    },
                   ],
                  },
                  else_: FunctionApplication {
                   function: Variable {
                    identifier: "f",
                    position: (427, 11),
                   },
                   arguments: [
                    Variable {
                     identifier: "here",
                     position: (427, 13),
                    },
                    Variable {
                     identifier: "values",
                     position: (427, 18),
                    },
                   ],
                  },
                  position: (423, 9),
                 },
                 position: (422, 9),
                },
                position: (421, 24),
               },
               position: (421, 21),
              },
             ],
            },
            position: (420, 13),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (429, 8),
          },
          arguments: [
           List {
            elements: [],
           },
           List {
            elements: [
             Variable {
              identifier: "rhs",
              position: (429, 14),
             },
             Variable {
              identifier: "lhs",
              position: (429, 18),
             },
            ],
           },
          ],
         },
         position: (420, 5),
        },
        position: (419, 37),
       },
       position: (419, 32),
      },
      position: (419, 26),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "recursiveUpdate",
        position: (450, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "recursiveUpdateUntil",
       position: (450, 21),
      },
      arguments: [
       Function {
        argument: Some(
         "path",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "lhs",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "rhs",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: UnaryOperation {
           operator: Not,
           operand: BinaryOperation {
            operator: LogicalAnd,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "isAttrs",
               position: (450, 61),
              },
              arguments: [
               Variable {
                identifier: "lhs",
                position: (450, 69),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "isAttrs",
               position: (450, 76),
              },
              arguments: [
               Variable {
                identifier: "rhs",
                position: (450, 84),
               },
              ],
             },
            ],
            position: (450, 73),
           },
           position: (450, 59),
          },
          position: (450, 54),
         },
         position: (450, 49),
        },
        position: (450, 43),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "matchAttrs",
        position: (458, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pattern",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "attrs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Assert {
        expression: FunctionApplication {
         function: Variable {
          identifier: "isAttrs",
          position: (458, 39),
         },
         arguments: [
          Variable {
           identifier: "pattern",
           position: (458, 47),
          },
         ],
        },
        target: FunctionApplication {
         function: Variable {
          identifier: "all",
          position: (459, 5),
         },
         arguments: [
          Variable {
           identifier: "id",
           position: (459, 9),
          },
          FunctionApplication {
           function: Variable {
            identifier: "attrValues",
            position: (459, 13),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "zipAttrsWithNames",
              position: (459, 25),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "attrNames",
                position: (459, 44),
               },
               arguments: [
                Variable {
                 identifier: "pattern",
                 position: (459, 54),
                },
               ],
              },
              Function {
               argument: Some(
                "n",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "values",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "pat",
                      position: (460, 11),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "head",
                     position: (460, 17),
                    },
                    arguments: [
                     Variable {
                      identifier: "values",
                      position: (460, 22),
                     },
                    ],
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "val",
                      position: (460, 30),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "elemAt",
                     position: (460, 36),
                    },
                    arguments: [
                     Variable {
                      identifier: "values",
                      position: (460, 43),
                     },
                     Int {
                      value: 1,
                      position: (460, 50),
                     },
                    ],
                   },
                  ),
                 ],
                 target: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "length",
                      position: (461, 10),
                     },
                     arguments: [
                      Variable {
                       identifier: "values",
                       position: (461, 17),
                      },
                     ],
                    },
                    Int {
                     value: 1,
                     position: (461, 27),
                    },
                   ],
                   position: (461, 24),
                  },
                  then: Variable {
                   identifier: "false",
                   position: (461, 34),
                  },
                  else_: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "isAttrs",
                     position: (462, 15),
                    },
                    arguments: [
                     Variable {
                      identifier: "pat",
                      position: (462, 23),
                     },
                    ],
                   },
                   then: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "isAttrs",
                       position: (462, 32),
                      },
                      arguments: [
                       Variable {
                        identifier: "val",
                        position: (462, 40),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "matchAttrs",
                       position: (462, 47),
                      },
                      arguments: [
                       Variable {
                        identifier: "pat",
                        position: (462, 58),
                       },
                       Variable {
                        identifier: "val",
                        position: (462, 62),
                       },
                      ],
                     },
                    ],
                    position: (462, 44),
                   },
                   else_: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     Variable {
                      identifier: "pat",
                      position: (463, 12),
                     },
                     Variable {
                      identifier: "val",
                      position: (463, 19),
                     },
                    ],
                    position: (463, 16),
                   },
                   position: (462, 12),
                  },
                  position: (461, 7),
                 },
                 position: (460, 7),
                },
                position: (459, 67),
               },
               position: (459, 64),
              },
              List {
               elements: [
                Variable {
                 identifier: "pattern",
                 position: (464, 8),
                },
                Variable {
                 identifier: "attrs",
                 position: (464, 16),
                },
               ],
              },
             ],
            },
           ],
          },
         ],
        },
        position: (458, 32),
       },
       position: (458, 25),
      },
      position: (458, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "overrideExisting",
        position: (477, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "old",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "new",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "mapAttrs",
         position: (478, 5),
        },
        arguments: [
         Function {
          argument: Some(
           "name",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "value",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "new",
             position: (478, 28),
            },
            attribute_path: AttributePath {
             attributes: [
              Expression {
               expression: Variable {
                identifier: "name",
                position: (478, 34),
               },
              },
             ],
            },
            default: Some(
             Variable {
              identifier: "value",
              position: (478, 43),
             },
            ),
           },
           position: (478, 21),
          },
          position: (478, 15),
         },
         Variable {
          identifier: "old",
          position: (478, 50),
         },
        ],
       },
       position: (477, 27),
      },
      position: (477, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getOutput",
        position: (487, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "output",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "pkg",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: LogicalOr,
         operands: [
          UnaryOperation {
           operator: Not,
           operand: HasProperty {
            expression: Variable {
             identifier: "pkg",
             position: (488, 10),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "outputSpecified",
               position: (488, 16),
              },
             ],
            },
           },
           position: (488, 8),
          },
          UnaryOperation {
           operator: Not,
           operand: PropertyAccess {
            expression: Variable {
             identifier: "pkg",
             position: (488, 37),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "outputSpecified",
               position: (488, 41),
              },
             ],
            },
            default: None,
           },
           position: (488, 35),
          },
         ],
         position: (488, 32),
        },
        then: PropertyAccess {
         expression: Variable {
          identifier: "pkg",
          position: (489, 12),
         },
         attribute_path: AttributePath {
          attributes: [
           Expression {
            expression: Variable {
             identifier: "output",
             position: (489, 18),
            },
           },
          ],
         },
         default: Some(
          PropertyAccess {
           expression: Variable {
            identifier: "pkg",
            position: (489, 29),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "out",
              position: (489, 33),
             },
            ],
           },
           default: Some(
            Variable {
             identifier: "pkg",
             position: (489, 40),
            },
           ),
          },
         ),
        },
        else_: Variable {
         identifier: "pkg",
         position: (490, 12),
        },
        position: (488, 5),
       },
       position: (487, 23),
      },
      position: (487, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getBin",
        position: (492, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (492, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "bin",
          position: (492, 23),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getLib",
        position: (493, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (493, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "lib",
          position: (493, 23),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getDev",
        position: (494, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (494, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "dev",
          position: (494, 23),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getMan",
        position: (495, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "getOutput",
       position: (495, 12),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "man",
          position: (495, 23),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "chooseDevOutputs",
        position: (498, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "drvs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (498, 28),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "map",
           position: (498, 37),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Variable {
         identifier: "getDev",
         position: (498, 41),
        },
        Variable {
         identifier: "drvs",
         position: (498, 48),
        },
       ],
      },
      position: (498, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "recurseIntoAttrs",
        position: (506, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "attrs",
         position: (507, 12),
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "recurseForDerivations",
              position: (507, 23),
             },
            ],
           },
           Variable {
            identifier: "true",
            position: (507, 47),
           },
          ),
         ],
         recursive: false,
        },
       ],
       position: (507, 18),
      },
      position: (507, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "dontRecurseIntoAttrs",
        position: (511, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "attrs",
         position: (512, 12),
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "recurseForDerivations",
              position: (512, 23),
             },
            ],
           },
           Variable {
            identifier: "false",
            position: (512, 47),
           },
          ),
         ],
         recursive: false,
        },
       ],
       position: (512, 18),
      },
      position: (512, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "zipWithNames",
        position: (516, 3),
       },
      ],
     },
     Variable {
      identifier: "zipAttrsWithNames",
      position: (516, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "zip",
        position: (517, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (517, 9),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "trace",
          position: (517, 18),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "lib.zip is deprecated, use lib.zipAttrsWith instead",
          position: (518, 6),
         },
        ],
       },
       Variable {
        identifier: "zipAttrsWith",
        position: (518, 59),
       },
      ],
     },
    ),
   ],
   recursive: true,
  },
  position: (4, 1),
 },
 position: (1, 1),
}