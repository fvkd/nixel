---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "stdenv",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "brscan4",
    default: None,
   },
   DestructuredArgument {
    identifier: "netDevices",
    default: Some(
     List {
      elements: [],
      position: (1, 38),
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "addNetDev",
       position: (24, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "nd",
     },
     definition: String {
      parts: [
       Raw {
        content: "brsaneconfig4 -a \\\nname=\"",
        position: (25, 1),
       },
       Interpolation {
        expression: PropertyAccess {
         expression: Variable {
          identifier: "nd",
          position: (26, 13),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "name",
            position: (26, 16),
           },
          ],
         },
         default: None,
        },
       },
       Raw {
        content: "\" \\\nmodel=\"",
        position: (26, 21),
       },
       Interpolation {
        expression: PropertyAccess {
         expression: Variable {
          identifier: "nd",
          position: (27, 14),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "model",
            position: (27, 17),
           },
          ],
         },
         default: None,
        },
       },
       Raw {
        content: "\" \\\n",
        position: (27, 23),
       },
       Interpolation {
        expression: IfThenElse {
         predicate: Parentheses {
          expression: BinaryOperation {
           operator: LogicalAnd,
           operands: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (28, 11),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "hasAttr",
                 position: (28, 15),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "nodename",
                 position: (28, 24),
                },
               ],
               position: (28, 23),
              },
              Variable {
               identifier: "nd",
               position: (28, 34),
              },
             ],
            },
            BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "nd",
                position: (28, 40),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "nodename",
                  position: (28, 43),
                 },
                ],
               },
               default: None,
              },
              Variable {
               identifier: "null",
               position: (28, 55),
              },
             ],
             position: (28, 52),
            },
           ],
           position: (28, 37),
          },
          position: (28, 10),
         },
         then: String {
          parts: [
           Raw {
            content: "nodename=\"",
            position: (29, 9),
           },
           Interpolation {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "nd",
              position: (29, 21),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "nodename",
                position: (29, 24),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "\"",
            position: (29, 33),
           },
          ],
          position: (29, 7),
         },
         else_: String {
          parts: [
           Raw {
            content: "ip=\"",
            position: (30, 9),
           },
           Interpolation {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "nd",
              position: (30, 15),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "ip",
                position: (30, 18),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "\"",
            position: (30, 21),
           },
          ],
          position: (30, 7),
         },
         position: (28, 7),
        },
       },
      ],
      position: (24, 19),
     },
     position: (24, 15),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "addAllNetDev",
       position: (31, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "xs",
     },
     definition: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "lib",
        position: (31, 22),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "concatStringsSep",
          position: (31, 26),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "\n",
          position: (31, 44),
         },
        ],
        position: (31, 43),
       },
       Parentheses {
        expression: FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (31, 49),
         },
         arguments: [
          Variable {
           identifier: "addNetDev",
           position: (31, 53),
          },
          Variable {
           identifier: "xs",
           position: (31, 63),
          },
         ],
        },
        position: (31, 48),
       },
      ],
     },
     position: (31, 18),
    },
   },
  ],
  target: FunctionApplication {
   function: PropertyAccess {
    expression: Variable {
     identifier: "stdenv",
     position: (34, 1),
    },
    attribute_path: AttributePath {
     parts: [
      Raw {
       content: "mkDerivation",
       position: (34, 8),
      },
     ],
    },
    default: None,
   },
   arguments: [
    Map {
     bindings: [
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "name",
          position: (36, 3),
         },
        ],
       },
       to: String {
        parts: [
         Raw {
          content: "brscan4-etc-files-0.4.3-3",
          position: (36, 11),
         },
        ],
        position: (36, 10),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "src",
          position: (37, 3),
         },
        ],
       },
       to: String {
        parts: [
         Interpolation {
          expression: Variable {
           identifier: "brscan4",
           position: (37, 12),
          },
         },
         Raw {
          content: "/opt/brother/scanner/brscan4",
          position: (37, 20),
         },
        ],
        position: (37, 9),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "nativeBuildInputs",
          position: (39, 3),
         },
        ],
       },
       to: List {
        elements: [
         Variable {
          identifier: "brscan4",
          position: (39, 25),
         },
        ],
        position: (39, 23),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "dontConfigure",
          position: (41, 3),
         },
        ],
       },
       to: Variable {
        identifier: "true",
        position: (41, 19),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "buildPhase",
          position: (43, 3),
         },
        ],
       },
       to: String {
        parts: [
         Raw {
          content: "TARGET_DIR=\"$out/etc/opt/brother/scanner/brscan4\"\nmkdir -p \"$TARGET_DIR\"\ncp -rp \"./models4\" \"$TARGET_DIR\"\ncp -rp \"./Brsane4.ini\" \"$TARGET_DIR\"\ncp -rp \"./brsanenetdevice4.cfg\" \"$TARGET_DIR\"\n\nexport BRSANENETDEVICE4_CFG_FILENAME=\"$TARGET_DIR/brsanenetdevice4.cfg\"\n\nprintf ",
          position: (44, 1),
         },
         Raw {
          content: "'",
          position: (52, 12),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "addAllNetDev",
            position: (52, 15),
           },
           arguments: [
            Variable {
             identifier: "netDevices",
             position: (52, 28),
            },
           ],
          },
         },
         Raw {
          content: "\\n'\n\n",
          position: (52, 39),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "addAllNetDev",
            position: (54, 7),
           },
           arguments: [
            Variable {
             identifier: "netDevices",
             position: (54, 20),
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (54, 31),
         },
        ],
        position: (43, 16),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "dontInstall",
          position: (57, 3),
         },
        ],
       },
       to: Variable {
        identifier: "true",
        position: (57, 17),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "dontStrip",
          position: (58, 3),
         },
        ],
       },
       to: Variable {
        identifier: "true",
        position: (58, 15),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "dontPatchELF",
          position: (59, 3),
         },
        ],
       },
       to: Variable {
        identifier: "true",
        position: (59, 18),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "meta",
          position: (61, 3),
         },
        ],
       },
       to: With {
        expression: Variable {
         identifier: "lib",
         position: (61, 15),
        },
        target: Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "description",
              position: (62, 5),
             },
            ],
           },
           to: String {
            parts: [
             Raw {
              content: "Brother brscan4 sane backend driver etc files",
              position: (62, 20),
             },
            ],
            position: (62, 19),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "homepage",
              position: (63, 5),
             },
            ],
           },
           to: String {
            parts: [
             Raw {
              content: "http://www.brother.com",
              position: (63, 17),
             },
            ],
            position: (63, 16),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "platforms",
              position: (64, 5),
             },
            ],
           },
           to: PropertyAccess {
            expression: Variable {
             identifier: "platforms",
             position: (64, 17),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "linux",
               position: (64, 27),
              },
             ],
            },
            default: None,
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "license",
              position: (65, 5),
             },
            ],
           },
           to: PropertyAccess {
            expression: Variable {
             identifier: "licenses",
             position: (65, 15),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "unfree",
               position: (65, 24),
              },
             ],
            },
            default: None,
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "maintainers",
              position: (66, 5),
             },
            ],
           },
           to: With {
            expression: Variable {
             identifier: "maintainers",
             position: (66, 24),
            },
            target: List {
             elements: [
              Variable {
               identifier: "jraygauthier",
               position: (66, 39),
              },
             ],
             position: (66, 37),
            },
            position: (66, 19),
           },
          },
         ],
         recursive: false,
         position: (61, 20),
        },
        position: (61, 10),
       },
      },
     ],
     recursive: false,
     position: (34, 21),
    },
   ],
  },
  position: (22, 1),
 },
 position: (1, 1),
}