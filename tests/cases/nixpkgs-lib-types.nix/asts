---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit {
    from: Some(
     Variable {
      identifier: "lib",
      position: (6, 12),
     },
    ),
    attributes: [
     Raw {
      content: "elem",
      position: (7, 5),
     },
     Raw {
      content: "flip",
      position: (8, 5),
     },
     Raw {
      content: "functionArgs",
      position: (9, 5),
     },
     Raw {
      content: "isAttrs",
      position: (10, 5),
     },
     Raw {
      content: "isBool",
      position: (11, 5),
     },
     Raw {
      content: "isDerivation",
      position: (12, 5),
     },
     Raw {
      content: "isFloat",
      position: (13, 5),
     },
     Raw {
      content: "isFunction",
      position: (14, 5),
     },
     Raw {
      content: "isInt",
      position: (15, 5),
     },
     Raw {
      content: "isList",
      position: (16, 5),
     },
     Raw {
      content: "isString",
      position: (17, 5),
     },
     Raw {
      content: "isStorePath",
      position: (18, 5),
     },
     Raw {
      content: "setFunctionArgs",
      position: (19, 5),
     },
     Raw {
      content: "toDerivation",
      position: (20, 5),
     },
     Raw {
      content: "toList",
      position: (21, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (23, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "lists",
         position: (23, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "all",
      position: (24, 5),
     },
     Raw {
      content: "concatLists",
      position: (25, 5),
     },
     Raw {
      content: "count",
      position: (26, 5),
     },
     Raw {
      content: "elemAt",
      position: (27, 5),
     },
     Raw {
      content: "filter",
      position: (28, 5),
     },
     Raw {
      content: "foldl'",
      position: (29, 5),
     },
     Raw {
      content: "head",
      position: (30, 5),
     },
     Raw {
      content: "imap1",
      position: (31, 5),
     },
     Raw {
      content: "last",
      position: (32, 5),
     },
     Raw {
      content: "length",
      position: (33, 5),
     },
     Raw {
      content: "tail",
      position: (34, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (36, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "attrsets",
         position: (36, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "attrNames",
      position: (37, 5),
     },
     Raw {
      content: "filterAttrs",
      position: (38, 5),
     },
     Raw {
      content: "hasAttr",
      position: (39, 5),
     },
     Raw {
      content: "mapAttrs",
      position: (40, 5),
     },
     Raw {
      content: "optionalAttrs",
      position: (41, 5),
     },
     Raw {
      content: "zipAttrsWith",
      position: (42, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (44, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (44, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "getFiles",
      position: (45, 5),
     },
     Raw {
      content: "getValues",
      position: (46, 5),
     },
     Raw {
      content: "mergeDefaultOption",
      position: (47, 5),
     },
     Raw {
      content: "mergeEqualOption",
      position: (48, 5),
     },
     Raw {
      content: "mergeOneOption",
      position: (49, 5),
     },
     Raw {
      content: "mergeUniqueOption",
      position: (50, 5),
     },
     Raw {
      content: "showFiles",
      position: (51, 5),
     },
     Raw {
      content: "showOption",
      position: (52, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (54, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "strings",
         position: (54, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "concatMapStringsSep",
      position: (55, 5),
     },
     Raw {
      content: "concatStringsSep",
      position: (56, 5),
     },
     Raw {
      content: "escapeNixString",
      position: (57, 5),
     },
     Raw {
      content: "isCoercibleToString",
      position: (58, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (60, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "trivial",
         position: (60, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "boolToString",
      position: (61, 5),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (64, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "modules",
         position: (64, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "mergeDefinitions",
      position: (65, 5),
     },
     Raw {
      content: "fixupOptionType",
      position: (66, 5),
     },
     Raw {
      content: "mergeOptionDecls",
      position: (67, 5),
     },
    ],
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "outer_types",
       position: (69, 3),
      },
     ],
    },
    to: Map {
     bindings: [
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "isType",
          position: (71, 3),
         },
        ],
       },
       to: Function {
        argument: Simple {
         identifier: "type",
        },
        definition: Function {
         argument: Simple {
          identifier: "x",
         },
         definition: BinaryOperation {
          operator: EqualTo,
          operands: [
           Parentheses {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "x",
              position: (71, 22),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "_type",
                position: (71, 24),
               },
              ],
             },
             default: Some(
              String {
               parts: [],
               position: (71, 33),
              },
             ),
            },
            position: (71, 21),
           },
           Variable {
            identifier: "type",
            position: (71, 40),
           },
          ],
          position: (71, 37),
         },
         position: (71, 18),
        },
        position: (71, 12),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "setType",
          position: (73, 3),
         },
        ],
       },
       to: Function {
        argument: Simple {
         identifier: "typeName",
        },
        definition: Function {
         argument: Simple {
          identifier: "value",
         },
         definition: BinaryOperation {
          operator: Update,
          operands: [
           Variable {
            identifier: "value",
            position: (73, 30),
           },
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "_type",
                 position: (74, 5),
                },
               ],
              },
              to: Variable {
               identifier: "typeName",
               position: (74, 13),
              },
             },
            ],
            recursive: false,
            position: (73, 39),
           },
          ],
          position: (73, 36),
         },
         position: (73, 23),
        },
        position: (73, 13),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "defaultTypeMerge",
          position: (80, 3),
         },
        ],
       },
       to: Function {
        argument: Simple {
         identifier: "f",
        },
        definition: Function {
         argument: Simple {
          identifier: "f'",
         },
         definition: LetIn {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "wrapped",
               position: (81, 9),
              },
             ],
            },
            to: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "f",
               position: (81, 19),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "wrapped",
                 position: (81, 21),
                },
                Raw {
                 content: "typeMerge",
                 position: (81, 29),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "f'",
                position: (81, 39),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "wrapped",
                  position: (81, 42),
                 },
                 Raw {
                  content: "functor",
                  position: (81, 50),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "payload",
               position: (82, 9),
              },
             ],
            },
            to: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "f",
               position: (82, 19),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "binOp",
                 position: (82, 21),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "f",
                position: (82, 27),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "payload",
                  position: (82, 29),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "f'",
                position: (82, 37),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "payload",
                  position: (82, 40),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           },
          ],
          target: IfThenElse {
           predicate: BinaryOperation {
            operator: NotEqualTo,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "f",
               position: (85, 8),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "name",
                 position: (85, 10),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "f'",
               position: (85, 18),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "name",
                 position: (85, 21),
                },
               ],
              },
              default: None,
             },
            ],
            position: (85, 15),
           },
           then: Variable {
            identifier: "null",
            position: (86, 13),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: LogicalAnd,
             operands: [
              Parentheses {
               expression: BinaryOperation {
                operator: LogicalAnd,
                operands: [
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "f",
                     position: (88, 17),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "wrapped",
                       position: (88, 19),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (88, 30),
                   },
                  ],
                  position: (88, 27),
                 },
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "f'",
                     position: (88, 38),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "wrapped",
                       position: (88, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (88, 52),
                   },
                  ],
                  position: (88, 49),
                 },
                ],
                position: (88, 35),
               },
               position: (88, 16),
              },
              Parentheses {
               expression: BinaryOperation {
                operator: LogicalAnd,
                operands: [
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "f",
                     position: (89, 17),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "payload",
                       position: (89, 19),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (89, 30),
                   },
                  ],
                  position: (89, 27),
                 },
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "f'",
                     position: (89, 38),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "payload",
                       position: (89, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (89, 52),
                   },
                  ],
                  position: (89, 49),
                 },
                ],
                position: (89, 35),
               },
               position: (89, 16),
              },
             ],
             position: (89, 13),
            },
            then: PropertyAccess {
             expression: Variable {
              identifier: "f",
              position: (90, 13),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "type",
                position: (90, 15),
               },
              ],
             },
             default: None,
            },
            else_: IfThenElse {
             predicate: BinaryOperation {
              operator: LogicalAnd,
              operands: [
               Parentheses {
                expression: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "f",
                      position: (92, 14),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (92, 16),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "null",
                     position: (92, 27),
                    },
                   ],
                   position: (92, 24),
                  },
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "f'",
                      position: (92, 35),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (92, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "null",
                     position: (92, 49),
                    },
                   ],
                   position: (92, 46),
                  },
                 ],
                 position: (92, 32),
                },
                position: (92, 13),
               },
               Parentheses {
                expression: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  Variable {
                   identifier: "wrapped",
                   position: (92, 59),
                  },
                  Variable {
                   identifier: "null",
                   position: (92, 70),
                  },
                 ],
                 position: (92, 67),
                },
                position: (92, 58),
               },
              ],
              position: (92, 55),
             },
             then: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "f",
                position: (93, 13),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "type",
                  position: (93, 15),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "wrapped",
                position: (93, 20),
               },
              ],
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: LogicalAnd,
               operands: [
                Parentheses {
                 expression: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "f",
                       position: (95, 14),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "payload",
                         position: (95, 16),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "null",
                      position: (95, 27),
                     },
                    ],
                    position: (95, 24),
                   },
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "f'",
                       position: (95, 35),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "payload",
                         position: (95, 38),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "null",
                      position: (95, 49),
                     },
                    ],
                    position: (95, 46),
                   },
                  ],
                  position: (95, 32),
                 },
                 position: (95, 13),
                },
                Parentheses {
                 expression: BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   Variable {
                    identifier: "payload",
                    position: (95, 59),
                   },
                   Variable {
                    identifier: "null",
                    position: (95, 70),
                   },
                  ],
                  position: (95, 67),
                 },
                 position: (95, 58),
                },
               ],
               position: (95, 55),
              },
              then: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "f",
                 position: (96, 13),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "type",
                   position: (96, 15),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "payload",
                 position: (96, 20),
                },
               ],
              },
              else_: Variable {
               identifier: "null",
               position: (97, 10),
              },
              position: (95, 10),
             },
             position: (92, 10),
            },
            position: (88, 10),
           },
           position: (85, 5),
          },
          position: (81, 5),
         },
         position: (80, 25),
        },
        position: (80, 22),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "defaultFunctor",
          position: (100, 3),
         },
        ],
       },
       to: Function {
        argument: Simple {
         identifier: "name",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: None,
           attributes: [
            Raw {
             content: "name",
             position: (101, 13),
            },
           ],
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "type",
              position: (102, 5),
             },
            ],
           },
           to: PropertyAccess {
            expression: Variable {
             identifier: "types",
             position: (102, 15),
            },
            attribute_path: AttributePath {
             parts: [
              Expression {
               expression: Variable {
                identifier: "name",
                position: (102, 23),
               },
              },
             ],
            },
            default: Some(
             Variable {
              identifier: "null",
              position: (102, 32),
             },
            ),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "wrapped",
              position: (103, 5),
             },
            ],
           },
           to: Variable {
            identifier: "null",
            position: (103, 15),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "payload",
              position: (104, 5),
             },
            ],
           },
           to: Variable {
            identifier: "null",
            position: (104, 15),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "binOp",
              position: (105, 5),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "a",
            },
            definition: Function {
             argument: Simple {
              identifier: "b",
             },
             definition: Variable {
              identifier: "null",
              position: (105, 21),
             },
             position: (105, 18),
            },
            position: (105, 15),
           },
          },
         ],
         recursive: false,
         position: (100, 26),
        },
        position: (100, 20),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "isOptionType",
          position: (108, 3),
         },
        ],
       },
       to: FunctionApplication {
        function: Variable {
         identifier: "isType",
         position: (108, 18),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "option-type",
            position: (108, 26),
           },
          ],
          position: (108, 25),
         },
        ],
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "mkOptionType",
          position: (109, 3),
         },
        ],
       },
       to: Function {
        argument: Destructured {
         identifier: None,
         arguments: [
          DestructuredArgument {
           identifier: "nestedTypes",
           default: Some(
            Map {
             bindings: [],
             recursive: false,
             position: (157, 21),
            },
           ),
          },
          DestructuredArgument {
           identifier: "deprecationMessage",
           default: Some(
            Variable {
             identifier: "null",
             position: (153, 28),
            },
           ),
          },
          DestructuredArgument {
           identifier: "functor",
           default: Some(
            FunctionApplication {
             function: Variable {
              identifier: "defaultFunctor",
              position: (150, 17),
             },
             arguments: [
              Variable {
               identifier: "name",
               position: (150, 32),
              },
             ],
            },
           ),
          },
          DestructuredArgument {
           identifier: "typeMerge",
           default: Some(
            FunctionApplication {
             function: Variable {
              identifier: "defaultTypeMerge",
              position: (141, 19),
             },
             arguments: [
              Variable {
               identifier: "functor",
               position: (141, 36),
              },
             ],
            },
           ),
          },
          DestructuredArgument {
           identifier: "substSubModules",
           default: Some(
            Function {
             argument: Simple {
              identifier: "m",
             },
             definition: Variable {
              identifier: "null",
              position: (137, 28),
             },
             position: (137, 25),
            },
           ),
          },
          DestructuredArgument {
           identifier: "getSubModules",
           default: Some(
            Variable {
             identifier: "null",
             position: (134, 23),
            },
           ),
          },
          DestructuredArgument {
           identifier: "getSubOptions",
           default: Some(
            Function {
             argument: Simple {
              identifier: "prefix",
             },
             definition: Map {
              bindings: [],
              recursive: false,
              position: (132, 31),
             },
             position: (132, 23),
            },
           ),
          },
          DestructuredArgument {
           identifier: "emptyValue",
           default: Some(
            Map {
             bindings: [],
             recursive: false,
             position: (129, 20),
            },
           ),
          },
          DestructuredArgument {
           identifier: "merge",
           default: Some(
            Variable {
             identifier: "mergeDefaultOption",
             position: (124, 15),
            },
           ),
          },
          DestructuredArgument {
           identifier: "check",
           default: Some(
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "x",
              },
              definition: Variable {
               identifier: "true",
               position: (117, 19),
              },
              position: (117, 16),
             },
             position: (117, 15),
            },
           ),
          },
          DestructuredArgument {
           identifier: "description",
           default: Some(
            Variable {
             identifier: "null",
             position: (114, 21),
            },
           ),
          },
          DestructuredArgument {
           identifier: "name",
           default: None,
          },
         ],
         ellipsis: false,
        },
        definition: Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "_type",
              position: (159, 7),
             },
            ],
           },
           to: String {
            parts: [
             Raw {
              content: "option-type",
              position: (159, 16),
             },
            ],
            position: (159, 15),
           },
          },
          Inherit {
           from: None,
           attributes: [
            Raw {
             content: "name",
             position: (160, 15),
            },
            Raw {
             content: "check",
             position: (160, 20),
            },
            Raw {
             content: "merge",
             position: (160, 26),
            },
            Raw {
             content: "emptyValue",
             position: (160, 32),
            },
            Raw {
             content: "getSubOptions",
             position: (160, 43),
            },
            Raw {
             content: "getSubModules",
             position: (160, 57),
            },
            Raw {
             content: "substSubModules",
             position: (160, 71),
            },
            Raw {
             content: "typeMerge",
             position: (160, 87),
            },
            Raw {
             content: "functor",
             position: (160, 97),
            },
            Raw {
             content: "deprecationMessage",
             position: (160, 105),
            },
            Raw {
             content: "nestedTypes",
             position: (160, 124),
            },
           ],
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "description",
              position: (161, 7),
             },
            ],
           },
           to: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "description",
               position: (161, 24),
              },
              Variable {
               identifier: "null",
               position: (161, 39),
              },
             ],
             position: (161, 36),
            },
            then: Variable {
             identifier: "name",
             position: (161, 49),
            },
            else_: Variable {
             identifier: "description",
             position: (161, 59),
            },
            position: (161, 21),
           },
          },
         ],
         recursive: false,
         position: (159, 5),
        },
        position: (110, 5),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "types",
          position: (167, 3),
         },
        ],
       },
       to: Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "raw",
             position: (169, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (169, 11),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (170, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "raw",
                  position: (170, 15),
                 },
                ],
                position: (170, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (171, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "raw value",
                  position: (171, 22),
                 },
                ],
                position: (171, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (172, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "value",
                },
                definition: Variable {
                 identifier: "true",
                 position: (172, 22),
                },
                position: (172, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (173, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeOneOption",
                position: (173, 15),
               },
              },
             ],
             recursive: true,
             position: (169, 24),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "anything",
             position: (176, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (176, 16),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (177, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "anything",
                  position: (177, 15),
                 },
                ],
                position: (177, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (178, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "anything",
                  position: (178, 22),
                 },
                ],
                position: (178, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (179, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "value",
                },
                definition: Variable {
                 identifier: "true",
                 position: (179, 22),
                },
                position: (179, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (180, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "loc",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "defs",
                 },
                 definition: LetIn {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "getType",
                       position: (182, 11),
                      },
                     ],
                    },
                    to: Function {
                     argument: Simple {
                      identifier: "value",
                     },
                     definition: IfThenElse {
                      predicate: BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "isAttrs",
                          position: (183, 16),
                         },
                         arguments: [
                          Variable {
                           identifier: "value",
                           position: (183, 24),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "isCoercibleToString",
                          position: (183, 33),
                         },
                         arguments: [
                          Variable {
                           identifier: "value",
                           position: (183, 53),
                          },
                         ],
                        },
                       ],
                       position: (183, 30),
                      },
                      then: String {
                       parts: [
                        Raw {
                         content: "stringCoercibleSet",
                         position: (184, 19),
                        },
                       ],
                       position: (184, 18),
                      },
                      else_: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "builtins",
                         position: (185, 18),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "typeOf",
                           position: (185, 27),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "value",
                         position: (185, 34),
                        },
                       ],
                      },
                      position: (183, 13),
                     },
                     position: (182, 21),
                    },
                   },
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "commonType",
                       position: (189, 11),
                      },
                     ],
                    },
                    to: FunctionApplication {
                     function: Variable {
                      identifier: "foldl'",
                      position: (189, 24),
                     },
                     arguments: [
                      Parentheses {
                       expression: Function {
                        argument: Simple {
                         identifier: "type",
                        },
                        definition: Function {
                         argument: Simple {
                          identifier: "def",
                         },
                         definition: IfThenElse {
                          predicate: BinaryOperation {
                           operator: EqualTo,
                           operands: [
                            FunctionApplication {
                             function: Variable {
                              identifier: "getType",
                              position: (190, 16),
                             },
                             arguments: [
                              PropertyAccess {
                               expression: Variable {
                                identifier: "def",
                                position: (190, 24),
                               },
                               attribute_path: AttributePath {
                                parts: [
                                 Raw {
                                  content: "value",
                                  position: (190, 28),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ],
                            },
                            Variable {
                             identifier: "type",
                             position: (190, 37),
                            },
                           ],
                           position: (190, 34),
                          },
                          then: Variable {
                           identifier: "type",
                           position: (191, 18),
                          },
                          else_: FunctionApplication {
                           function: Variable {
                            identifier: "throw",
                            position: (192, 18),
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "The option `",
                               position: (192, 25),
                              },
                              Expression {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "showOption",
                                 position: (192, 39),
                                },
                                arguments: [
                                 Variable {
                                  identifier: "loc",
                                  position: (192, 50),
                                 },
                                ],
                               },
                              },
                              Raw {
                               content: "' has conflicting option types in ",
                               position: (192, 54),
                              },
                              Expression {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "showFiles",
                                 position: (192, 90),
                                },
                                arguments: [
                                 Parentheses {
                                  expression: FunctionApplication {
                                   function: Variable {
                                    identifier: "getFiles",
                                    position: (192, 101),
                                   },
                                   arguments: [
                                    Variable {
                                     identifier: "defs",
                                     position: (192, 110),
                                    },
                                   ],
                                  },
                                  position: (192, 100),
                                 },
                                ],
                               },
                              },
                             ],
                             position: (192, 24),
                            },
                           ],
                          },
                          position: (190, 13),
                         },
                         position: (189, 38),
                        },
                        position: (189, 32),
                       },
                       position: (189, 31),
                      },
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "getType",
                         position: (193, 14),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Parentheses {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "head",
                             position: (193, 23),
                            },
                            arguments: [
                             Variable {
                              identifier: "defs",
                              position: (193, 28),
                             },
                            ],
                           },
                           position: (193, 22),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "value",
                             position: (193, 34),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                       },
                       position: (193, 13),
                      },
                      Variable {
                       identifier: "defs",
                       position: (193, 41),
                      },
                     ],
                    },
                   },
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "mergeFunction",
                       position: (195, 11),
                      },
                     ],
                    },
                    to: PropertyAccess {
                     expression: Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "set",
                           position: (197, 13),
                          },
                         ],
                        },
                        to: PropertyAccess {
                         expression: Parentheses {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "attrsOf",
                            position: (197, 20),
                           },
                           arguments: [
                            Variable {
                             identifier: "anything",
                             position: (197, 28),
                            },
                           ],
                          },
                          position: (197, 19),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "merge",
                            position: (197, 38),
                           },
                          ],
                         },
                         default: None,
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "list",
                           position: (200, 13),
                          },
                         ],
                        },
                        to: IfThenElse {
                         predicate: BinaryOperation {
                          operator: GreaterThan,
                          operands: [
                           FunctionApplication {
                            function: Variable {
                             identifier: "length",
                             position: (201, 18),
                            },
                            arguments: [
                             Variable {
                              identifier: "defs",
                              position: (201, 25),
                             },
                            ],
                           },
                           Int {
                            value: 1,
                            position: (201, 32),
                           },
                          ],
                          position: (201, 30),
                         },
                         then: FunctionApplication {
                          function: Variable {
                           identifier: "throw",
                           position: (202, 20),
                          },
                          arguments: [
                           String {
                            parts: [
                             Raw {
                              content: "The option `",
                              position: (202, 27),
                             },
                             Expression {
                              expression: FunctionApplication {
                               function: Variable {
                                identifier: "showOption",
                                position: (202, 41),
                               },
                               arguments: [
                                Variable {
                                 identifier: "loc",
                                 position: (202, 52),
                                },
                               ],
                              },
                             },
                             Raw {
                              content: "' has conflicting definitions, in ",
                              position: (202, 56),
                             },
                             Expression {
                              expression: FunctionApplication {
                               function: Variable {
                                identifier: "showFiles",
                                position: (202, 92),
                               },
                               arguments: [
                                Parentheses {
                                 expression: FunctionApplication {
                                  function: Variable {
                                   identifier: "getFiles",
                                   position: (202, 103),
                                  },
                                  arguments: [
                                   Variable {
                                    identifier: "defs",
                                    position: (202, 112),
                                   },
                                  ],
                                 },
                                 position: (202, 102),
                                },
                               ],
                              },
                             },
                             Raw {
                              content: ".",
                              position: (202, 118),
                             },
                            ],
                            position: (202, 26),
                           },
                          ],
                         },
                         else_: PropertyAccess {
                          expression: Parentheses {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "listOf",
                             position: (203, 21),
                            },
                            arguments: [
                             Variable {
                              identifier: "anything",
                              position: (203, 28),
                             },
                            ],
                           },
                           position: (203, 20),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "merge",
                             position: (203, 38),
                            },
                           ],
                          },
                          default: None,
                         },
                         position: (201, 15),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "stringCoercibleSet",
                           position: (205, 13),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "mergeOneOption",
                         position: (205, 34),
                        },
                       },
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "lambda",
                           position: (206, 13),
                          },
                         ],
                        },
                        to: Function {
                         argument: Simple {
                          identifier: "loc",
                         },
                         definition: Function {
                          argument: Simple {
                           identifier: "defs",
                          },
                          definition: Function {
                           argument: Simple {
                            identifier: "arg",
                           },
                           definition: FunctionApplication {
                            function: PropertyAccess {
                             expression: Variable {
                              identifier: "anything",
                              position: (206, 38),
                             },
                             attribute_path: AttributePath {
                              parts: [
                               Raw {
                                content: "merge",
                                position: (206, 47),
                               },
                              ],
                             },
                             default: None,
                            },
                            arguments: [
                             Parentheses {
                              expression: BinaryOperation {
                               operator: Concatenation,
                               operands: [
                                Variable {
                                 identifier: "loc",
                                 position: (207, 16),
                                },
                                List {
                                 elements: [
                                  String {
                                   parts: [
                                    Raw {
                                     content: "<function body>",
                                     position: (207, 26),
                                    },
                                   ],
                                   position: (207, 25),
                                  },
                                 ],
                                 position: (207, 23),
                                },
                               ],
                               position: (207, 20),
                              },
                              position: (207, 15),
                             },
                             Parentheses {
                              expression: FunctionApplication {
                               function: Variable {
                                identifier: "map",
                                position: (208, 16),
                               },
                               arguments: [
                                Parentheses {
                                 expression: Function {
                                  argument: Simple {
                                   identifier: "def",
                                  },
                                  definition: Map {
                                   bindings: [
                                    Binding {
                                     from: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "file",
                                        position: (209, 17),
                                       },
                                      ],
                                     },
                                     to: PropertyAccess {
                                      expression: Variable {
                                       identifier: "def",
                                       position: (209, 24),
                                      },
                                      attribute_path: AttributePath {
                                       parts: [
                                        Raw {
                                         content: "file",
                                         position: (209, 28),
                                        },
                                       ],
                                      },
                                      default: None,
                                     },
                                    },
                                    Binding {
                                     from: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "value",
                                        position: (210, 17),
                                       },
                                      ],
                                     },
                                     to: FunctionApplication {
                                      function: PropertyAccess {
                                       expression: Variable {
                                        identifier: "def",
                                        position: (210, 25),
                                       },
                                       attribute_path: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "value",
                                          position: (210, 29),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                      arguments: [
                                       Variable {
                                        identifier: "arg",
                                        position: (210, 35),
                                       },
                                      ],
                                     },
                                    },
                                   ],
                                   recursive: false,
                                   position: (208, 26),
                                  },
                                  position: (208, 21),
                                 },
                                 position: (208, 20),
                                },
                                Variable {
                                 identifier: "defs",
                                 position: (211, 18),
                                },
                               ],
                              },
                              position: (208, 15),
                             },
                            ],
                           },
                           position: (206, 33),
                          },
                          position: (206, 27),
                         },
                         position: (206, 22),
                        },
                       },
                      ],
                      recursive: false,
                      position: (195, 27),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Expression {
                        expression: Variable {
                         identifier: "commonType",
                         position: (213, 15),
                        },
                       },
                      ],
                     },
                     default: Some(
                      Variable {
                       identifier: "mergeEqualOption",
                       position: (213, 30),
                      },
                     ),
                    },
                   },
                  ],
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "mergeFunction",
                    position: (214, 12),
                   },
                   arguments: [
                    Variable {
                     identifier: "loc",
                     position: (214, 26),
                    },
                    Variable {
                     identifier: "defs",
                     position: (214, 30),
                    },
                   ],
                  },
                  position: (181, 9),
                 },
                 position: (180, 20),
                },
                position: (180, 15),
               },
              },
             ],
             recursive: false,
             position: (176, 29),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "unspecified",
             position: (217, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (217, 19),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (218, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "unspecified",
                  position: (218, 15),
                 },
                ],
                position: (218, 14),
               },
              },
             ],
             recursive: false,
             position: (217, 32),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "bool",
             position: (221, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (221, 12),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (222, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "bool",
                  position: (222, 15),
                 },
                ],
                position: (222, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (223, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "boolean",
                  position: (223, 22),
                 },
                ],
                position: (223, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (224, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "isBool",
                position: (224, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (225, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeEqualOption",
                position: (225, 15),
               },
              },
             ],
             recursive: false,
             position: (221, 25),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "int",
             position: (228, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (228, 11),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (229, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "int",
                  position: (229, 17),
                 },
                ],
                position: (229, 16),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (230, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "signed integer",
                  position: (230, 24),
                 },
                ],
                position: (230, 23),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (231, 9),
                 },
                ],
               },
               to: Variable {
                identifier: "isInt",
                position: (231, 17),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (232, 9),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeEqualOption",
                position: (232, 17),
               },
              },
             ],
             recursive: false,
             position: (228, 24),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "ints",
             position: (236, 5),
            },
           ],
          },
          to: LetIn {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "betweenDesc",
                position: (238, 9),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "lowest",
              },
              definition: Function {
               argument: Simple {
                identifier: "highest",
               },
               definition: String {
                parts: [
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (239, 14),
                   },
                   arguments: [
                    Variable {
                     identifier: "lowest",
                     position: (239, 23),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: " and ",
                  position: (239, 30),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (239, 37),
                   },
                   arguments: [
                    Variable {
                     identifier: "highest",
                     position: (239, 46),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: " (both inclusive)",
                  position: (239, 54),
                 },
                ],
                position: (239, 11),
               },
               position: (238, 31),
              },
              position: (238, 23),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "between",
                position: (240, 9),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "lowest",
              },
              definition: Function {
               argument: Simple {
                identifier: "highest",
               },
               definition: Assert {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (241, 18),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "assertMsg",
                     position: (241, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Parentheses {
                   expression: BinaryOperation {
                    operator: LessThanOrEqualTo,
                    operands: [
                     Variable {
                      identifier: "lowest",
                      position: (241, 33),
                     },
                     Variable {
                      identifier: "highest",
                      position: (241, 43),
                     },
                    ],
                    position: (241, 40),
                   },
                   position: (241, 32),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "ints.between: lowest must be smaller than highest",
                     position: (242, 14),
                    },
                   ],
                   position: (242, 13),
                  },
                 ],
                },
                target: BinaryOperation {
                 operator: Update,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "addCheck",
                    position: (243, 11),
                   },
                   arguments: [
                    Variable {
                     identifier: "int",
                     position: (243, 20),
                    },
                    Parentheses {
                     expression: Function {
                      argument: Simple {
                       identifier: "x",
                      },
                      definition: BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        BinaryOperation {
                         operator: GreaterThanOrEqualTo,
                         operands: [
                          Variable {
                           identifier: "x",
                           position: (243, 28),
                          },
                          Variable {
                           identifier: "lowest",
                           position: (243, 33),
                          },
                         ],
                         position: (243, 30),
                        },
                        BinaryOperation {
                         operator: LessThanOrEqualTo,
                         operands: [
                          Variable {
                           identifier: "x",
                           position: (243, 43),
                          },
                          Variable {
                           identifier: "highest",
                           position: (243, 48),
                          },
                         ],
                         position: (243, 45),
                        },
                       ],
                       position: (243, 40),
                      },
                      position: (243, 25),
                     },
                     position: (243, 24),
                    },
                   ],
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "name",
                        position: (244, 13),
                       },
                      ],
                     },
                     to: String {
                      parts: [
                       Raw {
                        content: "intBetween",
                        position: (244, 21),
                       },
                      ],
                      position: (244, 20),
                     },
                    },
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "description",
                        position: (245, 13),
                       },
                      ],
                     },
                     to: String {
                      parts: [
                       Raw {
                        content: "integer between ",
                        position: (245, 28),
                       },
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "betweenDesc",
                          position: (245, 46),
                         },
                         arguments: [
                          Variable {
                           identifier: "lowest",
                           position: (245, 58),
                          },
                          Variable {
                           identifier: "highest",
                           position: (245, 65),
                          },
                         ],
                        },
                       },
                      ],
                      position: (245, 27),
                     },
                    },
                   ],
                   recursive: false,
                   position: (243, 60),
                  },
                 ],
                 position: (243, 57),
                },
                position: (241, 11),
               },
               position: (240, 27),
              },
              position: (240, 19),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "ign",
                position: (247, 9),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "lowest",
              },
              definition: Function {
               argument: Simple {
                identifier: "highest",
               },
               definition: Function {
                argument: Simple {
                 identifier: "name",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "docStart",
                 },
                 definition: BinaryOperation {
                  operator: Update,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "between",
                     position: (248, 11),
                    },
                    arguments: [
                     Variable {
                      identifier: "lowest",
                      position: (248, 19),
                     },
                     Variable {
                      identifier: "highest",
                      position: (248, 26),
                     },
                    ],
                   },
                   Map {
                    bindings: [
                     Inherit {
                      from: None,
                      attributes: [
                       Raw {
                        content: "name",
                        position: (249, 21),
                       },
                      ],
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "description",
                         position: (250, 13),
                        },
                       ],
                      },
                      to: BinaryOperation {
                       operator: Addition,
                       operands: [
                        Variable {
                         identifier: "docStart",
                         position: (250, 27),
                        },
                        String {
                         parts: [
                          Raw {
                           content: "; between ",
                           position: (250, 39),
                          },
                          Expression {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "betweenDesc",
                             position: (250, 51),
                            },
                            arguments: [
                             Variable {
                              identifier: "lowest",
                              position: (250, 63),
                             },
                             Variable {
                              identifier: "highest",
                              position: (250, 70),
                             },
                            ],
                           },
                          },
                         ],
                         position: (250, 38),
                        },
                       ],
                       position: (250, 36),
                      },
                     },
                    ],
                    recursive: false,
                    position: (248, 37),
                   },
                  ],
                  position: (248, 34),
                 },
                 position: (247, 38),
                },
                position: (247, 32),
               },
               position: (247, 23),
              },
              position: (247, 15),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "unsign",
                position: (252, 9),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "bit",
              },
              definition: Function {
               argument: Simple {
                identifier: "range",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "ign",
                 position: (252, 30),
                },
                arguments: [
                 Int {
                  value: 0,
                  position: (252, 34),
                 },
                 Parentheses {
                  expression: BinaryOperation {
                   operator: Subtraction,
                   operands: [
                    Variable {
                     identifier: "range",
                     position: (252, 37),
                    },
                    Int {
                     value: 1,
                     position: (252, 45),
                    },
                   ],
                   position: (252, 43),
                  },
                  position: (252, 36),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "unsignedInt",
                    position: (253, 12),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (253, 25),
                     },
                     arguments: [
                      Variable {
                       identifier: "bit",
                       position: (253, 34),
                      },
                     ],
                    },
                   },
                  ],
                  position: (253, 11),
                 },
                 String {
                  parts: [
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (253, 43),
                     },
                     arguments: [
                      Variable {
                       identifier: "bit",
                       position: (253, 52),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: " bit unsigned integer",
                    position: (253, 56),
                   },
                  ],
                  position: (253, 40),
                 },
                ],
               },
               position: (252, 23),
              },
              position: (252, 18),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "sign",
                position: (254, 9),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "bit",
              },
              definition: Function {
               argument: Simple {
                identifier: "range",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "ign",
                 position: (254, 28),
                },
                arguments: [
                 Parentheses {
                  expression: BinaryOperation {
                   operator: Subtraction,
                   operands: [
                    Int {
                     value: 0,
                     position: (254, 33),
                    },
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Division,
                      operands: [
                       Variable {
                        identifier: "range",
                        position: (254, 38),
                       },
                       Int {
                        value: 2,
                        position: (254, 46),
                       },
                      ],
                      position: (254, 44),
                     },
                     position: (254, 37),
                    },
                   ],
                   position: (254, 35),
                  },
                  position: (254, 32),
                 },
                 Parentheses {
                  expression: BinaryOperation {
                   operator: Subtraction,
                   operands: [
                    BinaryOperation {
                     operator: Division,
                     operands: [
                      Variable {
                       identifier: "range",
                       position: (254, 51),
                      },
                      Int {
                       value: 2,
                       position: (254, 59),
                      },
                     ],
                     position: (254, 57),
                    },
                    Int {
                     value: 1,
                     position: (254, 63),
                    },
                   ],
                   position: (254, 61),
                  },
                  position: (254, 50),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "signedInt",
                    position: (255, 12),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (255, 23),
                     },
                     arguments: [
                      Variable {
                       identifier: "bit",
                       position: (255, 32),
                      },
                     ],
                    },
                   },
                  ],
                  position: (255, 11),
                 },
                 String {
                  parts: [
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (255, 41),
                     },
                     arguments: [
                      Variable {
                       identifier: "bit",
                       position: (255, 50),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: " bit signed integer",
                    position: (255, 54),
                   },
                  ],
                  position: (255, 38),
                 },
                ],
               },
               position: (254, 21),
              },
              position: (254, 16),
             },
            },
           ],
           target: Map {
            bindings: [
             Inherit {
              from: None,
              attributes: [
               Raw {
                content: "between",
                position: (268, 17),
               },
              ],
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "unsigned",
                 position: (270, 9),
                },
               ],
              },
              to: BinaryOperation {
               operator: Update,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "addCheck",
                  position: (270, 20),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (270, 29),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "int",
                      position: (270, 35),
                     },
                    ],
                   },
                   default: None,
                  },
                  Parentheses {
                   expression: Function {
                    argument: Simple {
                     identifier: "x",
                    },
                    definition: BinaryOperation {
                     operator: GreaterThanOrEqualTo,
                     operands: [
                      Variable {
                       identifier: "x",
                       position: (270, 43),
                      },
                      Int {
                       value: 0,
                       position: (270, 48),
                      },
                     ],
                     position: (270, 45),
                    },
                    position: (270, 40),
                   },
                   position: (270, 39),
                  },
                 ],
                },
                Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "name",
                      position: (271, 11),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "unsignedInt",
                      position: (271, 19),
                     },
                    ],
                    position: (271, 18),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "description",
                      position: (272, 11),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "unsigned integer, meaning >=0",
                      position: (272, 26),
                     },
                    ],
                    position: (272, 25),
                   },
                  },
                 ],
                 recursive: false,
                 position: (270, 54),
                },
               ],
               position: (270, 51),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "positive",
                 position: (274, 9),
                },
               ],
              },
              to: BinaryOperation {
               operator: Update,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "addCheck",
                  position: (274, 20),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (274, 29),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "int",
                      position: (274, 35),
                     },
                    ],
                   },
                   default: None,
                  },
                  Parentheses {
                   expression: Function {
                    argument: Simple {
                     identifier: "x",
                    },
                    definition: BinaryOperation {
                     operator: GreaterThan,
                     operands: [
                      Variable {
                       identifier: "x",
                       position: (274, 43),
                      },
                      Int {
                       value: 0,
                       position: (274, 47),
                      },
                     ],
                     position: (274, 45),
                    },
                    position: (274, 40),
                   },
                   position: (274, 39),
                  },
                 ],
                },
                Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "name",
                      position: (275, 11),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "positiveInt",
                      position: (275, 19),
                     },
                    ],
                    position: (275, 18),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "description",
                      position: (276, 11),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "positive integer, meaning >0",
                      position: (276, 26),
                     },
                    ],
                    position: (276, 25),
                   },
                  },
                 ],
                 recursive: false,
                 position: (274, 53),
                },
               ],
               position: (274, 50),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "u8",
                 position: (278, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "unsign",
                position: (278, 14),
               },
               arguments: [
                Int {
                 value: 8,
                 position: (278, 21),
                },
                Int {
                 value: 256,
                 position: (278, 23),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "u16",
                 position: (279, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "unsign",
                position: (279, 15),
               },
               arguments: [
                Int {
                 value: 16,
                 position: (279, 22),
                },
                Int {
                 value: 65536,
                 position: (279, 25),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "u32",
                 position: (282, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "unsign",
                position: (282, 15),
               },
               arguments: [
                Int {
                 value: 32,
                 position: (282, 22),
                },
                Int {
                 value: 4294967296,
                 position: (282, 25),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "s8",
                 position: (285, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "sign",
                position: (285, 14),
               },
               arguments: [
                Int {
                 value: 8,
                 position: (285, 19),
                },
                Int {
                 value: 256,
                 position: (285, 21),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "s16",
                 position: (286, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "sign",
                position: (286, 15),
               },
               arguments: [
                Int {
                 value: 16,
                 position: (286, 20),
                },
                Int {
                 value: 65536,
                 position: (286, 23),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "s32",
                 position: (287, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "sign",
                position: (287, 15),
               },
               arguments: [
                Int {
                 value: 32,
                 position: (287, 20),
                },
                Int {
                 value: 4294967296,
                 position: (287, 23),
                },
               ],
              },
             },
            ],
            recursive: false,
            position: (257, 10),
           },
           position: (237, 7),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "port",
             position: (291, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "ints",
            position: (291, 12),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "u16",
              position: (291, 17),
             },
            ],
           },
           default: None,
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "float",
             position: (293, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (293, 13),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (294, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "float",
                  position: (294, 17),
                 },
                ],
                position: (294, 16),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (295, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "floating point number",
                  position: (295, 24),
                 },
                ],
                position: (295, 23),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (296, 9),
                 },
                ],
               },
               to: Variable {
                identifier: "isFloat",
                position: (296, 17),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (297, 9),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeEqualOption",
                position: (297, 17),
               },
              },
             ],
             recursive: false,
             position: (293, 26),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "str",
             position: (300, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (300, 11),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (301, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "str",
                  position: (301, 15),
                 },
                ],
                position: (301, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (302, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "string",
                  position: (302, 22),
                 },
                ],
                position: (302, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (303, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "isString",
                position: (303, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (304, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeEqualOption",
                position: (304, 15),
               },
              },
             ],
             recursive: false,
             position: (300, 24),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "nonEmptyStr",
             position: (307, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (307, 19),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (308, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "nonEmptyStr",
                  position: (308, 15),
                 },
                ],
                position: (308, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (309, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "non-empty string",
                  position: (309, 22),
                 },
                ],
                position: (309, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (310, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "x",
                },
                definition: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "str",
                     position: (310, 18),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "check",
                       position: (310, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (310, 28),
                    },
                   ],
                  },
                  BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "builtins",
                       position: (310, 33),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "match",
                         position: (310, 42),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "[ \t\n]*",
                         position: (310, 49),
                        },
                       ],
                       position: (310, 48),
                      },
                      Variable {
                       identifier: "x",
                       position: (310, 59),
                      },
                     ],
                    },
                    Variable {
                     identifier: "null",
                     position: (310, 64),
                    },
                   ],
                   position: (310, 61),
                  },
                 ],
                 position: (310, 30),
                },
                position: (310, 15),
               },
              },
              Inherit {
               from: Some(
                Variable {
                 identifier: "str",
                 position: (311, 16),
                },
               ),
               attributes: [
                Raw {
                 content: "merge",
                 position: (311, 21),
                },
               ],
              },
             ],
             recursive: false,
             position: (307, 32),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "singleLineStr",
             position: (315, 5),
            },
           ],
          },
          to: LetIn {
           bindings: [
            Inherit {
             from: Some(
              FunctionApplication {
               function: Variable {
                identifier: "strMatching",
                position: (317, 18),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "[^\n\r]*\n?",
                   position: (317, 31),
                  },
                 ],
                 position: (317, 30),
                },
               ],
              },
             ),
             attributes: [
              Raw {
               content: "check",
               position: (317, 45),
              },
              Raw {
               content: "merge",
               position: (317, 51),
              },
             ],
            },
           ],
           target: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (319, 7),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (320, 9),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "singleLineStr",
                   position: (320, 17),
                  },
                 ],
                 position: (320, 16),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (321, 9),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "(optionally newline-terminated) single-line string",
                   position: (321, 24),
                  },
                 ],
                 position: (321, 23),
                },
               },
               Inherit {
                from: None,
                attributes: [
                 Raw {
                  content: "check",
                  position: (322, 17),
                 },
                ],
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (323, 9),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (324, 11),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "removeSuffix",
                       position: (324, 15),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "\n",
                       position: (324, 29),
                      },
                     ],
                     position: (324, 28),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "merge",
                       position: (324, 34),
                      },
                      arguments: [
                       Variable {
                        identifier: "loc",
                        position: (324, 40),
                       },
                       Variable {
                        identifier: "defs",
                        position: (324, 44),
                       },
                      ],
                     },
                     position: (324, 33),
                    },
                   ],
                  },
                  position: (323, 22),
                 },
                 position: (323, 17),
                },
               },
              ],
              recursive: false,
              position: (319, 20),
             },
            ],
           },
           position: (316, 7),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "strMatching",
             position: (327, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "pattern",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (327, 28),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (328, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "strMatching ",
                   position: (328, 15),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "escapeNixString",
                     position: (328, 29),
                    },
                    arguments: [
                     Variable {
                      identifier: "pattern",
                      position: (328, 45),
                     },
                    ],
                   },
                  },
                 ],
                 position: (328, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (329, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "string matching the pattern ",
                   position: (329, 22),
                  },
                  Expression {
                   expression: Variable {
                    identifier: "pattern",
                    position: (329, 52),
                   },
                  },
                 ],
                 position: (329, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (330, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "x",
                 },
                 definition: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "str",
                      position: (330, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "check",
                        position: (330, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (330, 28),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (330, 33),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "match",
                          position: (330, 42),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "pattern",
                        position: (330, 48),
                       },
                       Variable {
                        identifier: "x",
                        position: (330, 56),
                       },
                      ],
                     },
                     Variable {
                      identifier: "null",
                      position: (330, 61),
                     },
                    ],
                    position: (330, 58),
                   },
                  ],
                  position: (330, 30),
                 },
                 position: (330, 15),
                },
               },
               Inherit {
                from: Some(
                 Variable {
                  identifier: "str",
                  position: (331, 16),
                 },
                ),
                attributes: [
                 Raw {
                  content: "merge",
                  position: (331, 21),
                 },
                ],
               },
              ],
              recursive: false,
              position: (327, 41),
             },
            ],
           },
           position: (327, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "separatedString",
             position: (336, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "sep",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (336, 28),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (337, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "separatedString",
                   position: (337, 15),
                  },
                 ],
                 position: (337, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (338, 7),
                  },
                 ],
                },
                to: IfThenElse {
                 predicate: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   Variable {
                    identifier: "sep",
                    position: (338, 24),
                   },
                   String {
                    parts: [],
                    position: (338, 31),
                   },
                  ],
                  position: (338, 28),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "Concatenated string",
                    position: (339, 15),
                   },
                  ],
                  position: (339, 14),
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: "strings concatenated with ",
                    position: (340, 15),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "builtins",
                       position: (340, 43),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "toJSON",
                         position: (340, 52),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "sep",
                       position: (340, 59),
                      },
                     ],
                    },
                   },
                  ],
                  position: (340, 14),
                 },
                 position: (338, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (342, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "isString",
                 position: (342, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (343, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "concatStringsSep",
                    position: (343, 26),
                   },
                   arguments: [
                    Variable {
                     identifier: "sep",
                     position: (343, 43),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "getValues",
                       position: (343, 48),
                      },
                      arguments: [
                       Variable {
                        identifier: "defs",
                        position: (343, 58),
                       },
                      ],
                     },
                     position: (343, 47),
                    },
                   ],
                  },
                  position: (343, 20),
                 },
                 position: (343, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (344, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (344, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (344, 33),
                     },
                    ],
                   },
                   position: (344, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "payload",
                        position: (345, 9),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "sep",
                      position: (345, 19),
                     },
                    },
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "binOp",
                        position: (346, 9),
                       },
                      ],
                     },
                     to: Function {
                      argument: Simple {
                       identifier: "sepLhs",
                      },
                      definition: Function {
                       argument: Simple {
                        identifier: "sepRhs",
                       },
                       definition: IfThenElse {
                        predicate: BinaryOperation {
                         operator: EqualTo,
                         operands: [
                          Variable {
                           identifier: "sepLhs",
                           position: (347, 14),
                          },
                          Variable {
                           identifier: "sepRhs",
                           position: (347, 24),
                          },
                         ],
                         position: (347, 21),
                        },
                        then: Variable {
                         identifier: "sepLhs",
                         position: (347, 36),
                        },
                        else_: Variable {
                         identifier: "null",
                         position: (348, 16),
                        },
                        position: (347, 11),
                       },
                       position: (346, 25),
                      },
                      position: (346, 17),
                     },
                    },
                   ],
                   recursive: false,
                   position: (344, 42),
                  },
                 ],
                 position: (344, 39),
                },
               },
              ],
              recursive: true,
              position: (336, 41),
             },
            ],
           },
           position: (336, 23),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "lines",
             position: (352, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "separatedString",
            position: (352, 13),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (352, 30),
              },
             ],
             position: (352, 29),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "commas",
             position: (353, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "separatedString",
            position: (353, 14),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: ",",
               position: (353, 31),
              },
             ],
             position: (353, 30),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "envVar",
             position: (354, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "separatedString",
            position: (354, 14),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: ":",
               position: (354, 31),
              },
             ],
             position: (354, 30),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "string",
             position: (358, 5),
            },
           ],
          },
          to: BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "separatedString",
              position: (358, 14),
             },
             arguments: [
              String {
               parts: [],
               position: (358, 30),
              },
             ],
            },
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (359, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "string",
                  position: (359, 15),
                 },
                ],
                position: (359, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "deprecationMessage",
                  position: (360, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "See https://github.com/NixOS/nixpkgs/pull/66346 for better alternative types.",
                  position: (360, 29),
                 },
                ],
                position: (360, 28),
               },
              },
             ],
             recursive: false,
             position: (358, 36),
            },
           ],
           position: (358, 33),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "attrs",
             position: (363, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (363, 13),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (364, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "attrs",
                  position: (364, 15),
                 },
                ],
                position: (364, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (365, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "attribute set",
                  position: (365, 22),
                 },
                ],
                position: (365, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (366, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "isAttrs",
                position: (366, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (367, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "loc",
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "foldl'",
                  position: (367, 20),
                 },
                 arguments: [
                  Parentheses {
                   expression: Function {
                    argument: Simple {
                     identifier: "res",
                    },
                    definition: Function {
                     argument: Simple {
                      identifier: "def",
                     },
                     definition: BinaryOperation {
                      operator: Update,
                      operands: [
                       Variable {
                        identifier: "res",
                        position: (367, 38),
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "def",
                         position: (367, 45),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "value",
                           position: (367, 49),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                      position: (367, 42),
                     },
                     position: (367, 33),
                    },
                    position: (367, 28),
                   },
                   position: (367, 27),
                  },
                  Map {
                   bindings: [],
                   recursive: false,
                   position: (367, 56),
                  },
                 ],
                },
                position: (367, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "emptyValue",
                  position: (368, 7),
                 },
                ],
               },
               to: Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "value",
                     position: (368, 22),
                    },
                   ],
                  },
                  to: Map {
                   bindings: [],
                   recursive: false,
                   position: (368, 30),
                  },
                 },
                ],
                recursive: false,
                position: (368, 20),
               },
              },
             ],
             recursive: false,
             position: (363, 26),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "package",
             position: (378, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (378, 15),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (379, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "package",
                  position: (379, 15),
                 },
                ],
                position: (379, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (380, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "x",
                },
                definition: BinaryOperation {
                 operator: LogicalOr,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "isDerivation",
                    position: (380, 18),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (380, 31),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "isStorePath",
                    position: (380, 36),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (380, 48),
                    },
                   ],
                  },
                 ],
                 position: (380, 33),
                },
                position: (380, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (381, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "loc",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "defs",
                 },
                 definition: LetIn {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "res",
                       position: (382, 13),
                      },
                     ],
                    },
                    to: FunctionApplication {
                     function: Variable {
                      identifier: "mergeOneOption",
                      position: (382, 19),
                     },
                     arguments: [
                      Variable {
                       identifier: "loc",
                       position: (382, 34),
                      },
                      Variable {
                       identifier: "defs",
                       position: (382, 38),
                      },
                     ],
                    },
                   },
                  ],
                  target: IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (383, 15),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "isPath",
                          position: (383, 24),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "res",
                        position: (383, 31),
                       },
                      ],
                     },
                     Parentheses {
                      expression: BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        FunctionApplication {
                         function: PropertyAccess {
                          expression: Variable {
                           identifier: "builtins",
                           position: (383, 39),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "isString",
                             position: (383, 48),
                            },
                           ],
                          },
                          default: None,
                         },
                         arguments: [
                          Variable {
                           identifier: "res",
                           position: (383, 57),
                          },
                         ],
                        },
                        UnaryOperation {
                         operator: Not,
                         operand: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "builtins",
                            position: (383, 66),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "hasContext",
                              position: (383, 75),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "res",
                            position: (383, 86),
                           },
                          ],
                         },
                         position: (383, 64),
                        },
                       ],
                       position: (383, 61),
                      },
                      position: (383, 38),
                     },
                    ],
                    position: (383, 35),
                   },
                   then: FunctionApplication {
                    function: Variable {
                     identifier: "toDerivation",
                     position: (384, 16),
                    },
                    arguments: [
                     Variable {
                      identifier: "res",
                      position: (384, 29),
                     },
                    ],
                   },
                   else_: Variable {
                    identifier: "res",
                    position: (385, 16),
                   },
                   position: (383, 12),
                  },
                  position: (382, 9),
                 },
                 position: (381, 20),
                },
                position: (381, 15),
               },
              },
             ],
             recursive: false,
             position: (378, 28),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "shellPackage",
             position: (388, 5),
            },
           ],
          },
          to: BinaryOperation {
           operator: Update,
           operands: [
            Variable {
             identifier: "package",
             position: (388, 20),
            },
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (389, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "x",
                },
                definition: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "isDerivation",
                    position: (389, 18),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (389, 31),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "hasAttr",
                    position: (389, 36),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "shellPath",
                       position: (389, 45),
                      },
                     ],
                     position: (389, 44),
                    },
                    Variable {
                     identifier: "x",
                     position: (389, 56),
                    },
                   ],
                  },
                 ],
                 position: (389, 33),
                },
                position: (389, 15),
               },
              },
             ],
             recursive: false,
             position: (388, 31),
            },
           ],
           position: (388, 28),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "path",
             position: (392, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (392, 12),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (393, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "path",
                  position: (393, 15),
                 },
                ],
                position: (393, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (394, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "x",
                },
                definition: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "isCoercibleToString",
                    position: (394, 18),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (394, 38),
                    },
                   ],
                  },
                  BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "builtins",
                       position: (394, 43),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substring",
                         position: (394, 52),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Int {
                       value: 0,
                       position: (394, 62),
                      },
                      Int {
                       value: 1,
                       position: (394, 64),
                      },
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "toString",
                         position: (394, 67),
                        },
                        arguments: [
                         Variable {
                          identifier: "x",
                          position: (394, 76),
                         },
                        ],
                       },
                       position: (394, 66),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "/",
                       position: (394, 83),
                      },
                     ],
                     position: (394, 82),
                    },
                   ],
                   position: (394, 79),
                  },
                 ],
                 position: (394, 40),
                },
                position: (394, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (395, 7),
                 },
                ],
               },
               to: Variable {
                identifier: "mergeEqualOption",
                position: (395, 15),
               },
              },
             ],
             recursive: false,
             position: (392, 25),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "listOf",
             position: (398, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (398, 24),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (399, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "listOf",
                   position: (399, 15),
                  },
                 ],
                 position: (399, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (400, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "list of ",
                   position: (400, 22),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "elemType",
                     position: (400, 32),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (400, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "s",
                   position: (400, 53),
                  },
                 ],
                 position: (400, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (401, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "isList",
                 position: (401, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (402, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "map",
                    position: (403, 9),
                   },
                   arguments: [
                    Parentheses {
                     expression: Function {
                      argument: Simple {
                       identifier: "x",
                      },
                      definition: PropertyAccess {
                       expression: Variable {
                        identifier: "x",
                        position: (403, 17),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "value",
                          position: (403, 19),
                         },
                        ],
                       },
                       default: None,
                      },
                      position: (403, 14),
                     },
                     position: (403, 13),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "filter",
                       position: (403, 27),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "x",
                         },
                         definition: HasProperty {
                          expression: Variable {
                           identifier: "x",
                           position: (403, 38),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "value",
                             position: (403, 42),
                            },
                           ],
                          },
                          position: (403, 40),
                         },
                         position: (403, 35),
                        },
                        position: (403, 34),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "concatLists",
                          position: (403, 50),
                         },
                         arguments: [
                          Parentheses {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "imap1",
                             position: (403, 63),
                            },
                            arguments: [
                             Parentheses {
                              expression: Function {
                               argument: Simple {
                                identifier: "n",
                               },
                               definition: Function {
                                argument: Simple {
                                 identifier: "def",
                                },
                                definition: FunctionApplication {
                                 function: Variable {
                                  identifier: "imap1",
                                  position: (404, 11),
                                 },
                                 arguments: [
                                  Parentheses {
                                   expression: Function {
                                    argument: Simple {
                                     identifier: "m",
                                    },
                                    definition: Function {
                                     argument: Simple {
                                      identifier: "def'",
                                     },
                                     definition: PropertyAccess {
                                      expression: Parentheses {
                                       expression: FunctionApplication {
                                        function: Variable {
                                         identifier: "mergeDefinitions",
                                         position: (405, 14),
                                        },
                                        arguments: [
                                         Parentheses {
                                          expression: BinaryOperation {
                                           operator: Concatenation,
                                           operands: [
                                            Variable {
                                             identifier: "loc",
                                             position: (406, 16),
                                            },
                                            List {
                                             elements: [
                                              String {
                                               parts: [
                                                Raw {
                                                 content: "[definition ",
                                                 position: (406, 25),
                                                },
                                                Expression {
                                                 expression: FunctionApplication {
                                                  function: Variable {
                                                   identifier: "toString",
                                                   position: (406, 39),
                                                  },
                                                  arguments: [
                                                   Variable {
                                                    identifier: "n",
                                                    position: (406, 48),
                                                   },
                                                  ],
                                                 },
                                                },
                                                Raw {
                                                 content: "-entry ",
                                                 position: (406, 50),
                                                },
                                                Expression {
                                                 expression: FunctionApplication {
                                                  function: Variable {
                                                   identifier: "toString",
                                                   position: (406, 59),
                                                  },
                                                  arguments: [
                                                   Variable {
                                                    identifier: "m",
                                                    position: (406, 68),
                                                   },
                                                  ],
                                                 },
                                                },
                                                Raw {
                                                 content: "]",
                                                 position: (406, 70),
                                                },
                                               ],
                                               position: (406, 24),
                                              },
                                             ],
                                             position: (406, 23),
                                            },
                                           ],
                                           position: (406, 20),
                                          },
                                          position: (406, 15),
                                         },
                                         Variable {
                                          identifier: "elemType",
                                          position: (407, 15),
                                         },
                                         List {
                                          elements: [
                                           Map {
                                            bindings: [
                                             Inherit {
                                              from: Some(
                                               Variable {
                                                identifier: "def",
                                                position: (408, 27),
                                               },
                                              ),
                                              attributes: [
                                               Raw {
                                                content: "file",
                                                position: (408, 32),
                                               },
                                              ],
                                             },
                                             Binding {
                                              from: AttributePath {
                                               parts: [
                                                Raw {
                                                 content: "value",
                                                 position: (408, 38),
                                                },
                                               ],
                                              },
                                              to: Variable {
                                               identifier: "def'",
                                               position: (408, 46),
                                              },
                                             },
                                            ],
                                            recursive: false,
                                            position: (408, 16),
                                           },
                                          ],
                                          position: (408, 15),
                                         },
                                        ],
                                       },
                                       position: (405, 13),
                                      },
                                      attribute_path: AttributePath {
                                       parts: [
                                        Raw {
                                         content: "optionalValue",
                                         position: (409, 15),
                                        },
                                       ],
                                      },
                                      default: None,
                                     },
                                     position: (404, 21),
                                    },
                                    position: (404, 18),
                                   },
                                   position: (404, 17),
                                  },
                                  PropertyAccess {
                                   expression: Variable {
                                    identifier: "def",
                                    position: (410, 13),
                                   },
                                   attribute_path: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "value",
                                      position: (410, 17),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                 ],
                                },
                                position: (403, 73),
                               },
                               position: (403, 70),
                              },
                              position: (403, 69),
                             },
                             Variable {
                              identifier: "defs",
                              position: (411, 11),
                             },
                            ],
                           },
                           position: (403, 62),
                          },
                         ],
                        },
                        position: (403, 49),
                       },
                      ],
                     },
                     position: (403, 26),
                    },
                   ],
                  },
                  position: (402, 20),
                 },
                 position: (402, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "emptyValue",
                   position: (412, 7),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (412, 22),
                     },
                    ],
                   },
                   to: List {
                    elements: [],
                    position: (412, 30),
                   },
                  },
                 ],
                 recursive: false,
                 position: (412, 20),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (413, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "prefix",
                 },
                 definition: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "elemType",
                    position: (413, 31),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "getSubOptions",
                      position: (413, 40),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "prefix",
                       position: (413, 55),
                      },
                      List {
                       elements: [
                        String {
                         parts: [
                          Raw {
                           content: "*",
                           position: (413, 67),
                          },
                         ],
                         position: (413, 66),
                        },
                       ],
                       position: (413, 65),
                      },
                     ],
                     position: (413, 62),
                    },
                    position: (413, 54),
                   },
                  ],
                 },
                 position: (413, 23),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (414, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (414, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (414, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (415, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "listOf",
                   position: (415, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (415, 36),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (415, 45),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (415, 61),
                      },
                     ],
                    },
                    position: (415, 35),
                   },
                  ],
                 },
                 position: (415, 25),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (416, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (416, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (416, 33),
                     },
                    ],
                   },
                   position: (416, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (416, 44),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "elemType",
                      position: (416, 54),
                     },
                    },
                   ],
                   recursive: false,
                   position: (416, 42),
                  },
                 ],
                 position: (416, 39),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (417, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (417, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (417, 30),
                },
               },
              ],
              recursive: true,
              position: (398, 37),
             },
            ],
           },
           position: (398, 14),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "nonEmptyListOf",
             position: (420, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: LetIn {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "list",
                 position: (421, 11),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "addCheck",
                position: (421, 18),
               },
               arguments: [
                Parentheses {
                 expression: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (421, 28),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "listOf",
                      position: (421, 34),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "elemType",
                    position: (421, 41),
                   },
                  ],
                 },
                 position: (421, 27),
                },
                Parentheses {
                 expression: Function {
                  argument: Simple {
                   identifier: "l",
                  },
                  definition: BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "l",
                     position: (421, 55),
                    },
                    List {
                     elements: [],
                     position: (421, 60),
                    },
                   ],
                   position: (421, 57),
                  },
                  position: (421, 52),
                 },
                 position: (421, 51),
                },
               ],
              },
             },
            ],
            target: BinaryOperation {
             operator: Update,
             operands: [
              Variable {
               identifier: "list",
               position: (422, 10),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (423, 9),
                   },
                  ],
                 },
                 to: BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "non-empty ",
                      position: (423, 24),
                     },
                    ],
                    position: (423, 23),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "list",
                     position: (423, 38),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (423, 43),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                  position: (423, 36),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "emptyValue",
                    position: (424, 9),
                   },
                  ],
                 },
                 to: Map {
                  bindings: [],
                  recursive: false,
                  position: (424, 22),
                 },
                },
               ],
               recursive: false,
               position: (422, 18),
              },
             ],
             position: (422, 15),
            },
            position: (421, 7),
           },
           position: (420, 22),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "attrsOf",
             position: (427, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (427, 25),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (428, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "attrsOf",
                   position: (428, 15),
                  },
                 ],
                 position: (428, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (429, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "attribute set of ",
                   position: (429, 22),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "elemType",
                     position: (429, 41),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (429, 50),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "s",
                   position: (429, 62),
                  },
                 ],
                 position: (429, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (430, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "isAttrs",
                 position: (430, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (431, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "mapAttrs",
                    position: (432, 9),
                   },
                   arguments: [
                    Parentheses {
                     expression: Function {
                      argument: Simple {
                       identifier: "n",
                      },
                      definition: Function {
                       argument: Simple {
                        identifier: "v",
                       },
                       definition: PropertyAccess {
                        expression: Variable {
                         identifier: "v",
                         position: (432, 25),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "value",
                           position: (432, 27),
                          },
                         ],
                        },
                        default: None,
                       },
                       position: (432, 22),
                      },
                      position: (432, 19),
                     },
                     position: (432, 18),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "filterAttrs",
                       position: (432, 35),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "n",
                         },
                         definition: Function {
                          argument: Simple {
                           identifier: "v",
                          },
                          definition: HasProperty {
                           expression: Variable {
                            identifier: "v",
                            position: (432, 54),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "value",
                              position: (432, 58),
                             },
                            ],
                           },
                           position: (432, 56),
                          },
                          position: (432, 51),
                         },
                         position: (432, 48),
                        },
                        position: (432, 47),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "zipAttrsWith",
                          position: (432, 66),
                         },
                         arguments: [
                          Parentheses {
                           expression: Function {
                            argument: Simple {
                             identifier: "name",
                            },
                            definition: Function {
                             argument: Simple {
                              identifier: "defs",
                             },
                             definition: PropertyAccess {
                              expression: Parentheses {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "mergeDefinitions",
                                 position: (433, 14),
                                },
                                arguments: [
                                 Parentheses {
                                  expression: BinaryOperation {
                                   operator: Concatenation,
                                   operands: [
                                    Variable {
                                     identifier: "loc",
                                     position: (433, 32),
                                    },
                                    List {
                                     elements: [
                                      Variable {
                                       identifier: "name",
                                       position: (433, 40),
                                      },
                                     ],
                                     position: (433, 39),
                                    },
                                   ],
                                   position: (433, 36),
                                  },
                                  position: (433, 31),
                                 },
                                 Variable {
                                  identifier: "elemType",
                                  position: (433, 47),
                                 },
                                 Variable {
                                  identifier: "defs",
                                  position: (433, 56),
                                 },
                                ],
                               },
                               position: (433, 13),
                              },
                              attribute_path: AttributePath {
                               parts: [
                                Raw {
                                 content: "optionalValue",
                                 position: (433, 62),
                                },
                               ],
                              },
                              default: None,
                             },
                             position: (432, 86),
                            },
                            position: (432, 80),
                           },
                           position: (432, 79),
                          },
                          Parentheses {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "map",
                             position: (436, 12),
                            },
                            arguments: [
                             Parentheses {
                              expression: Function {
                               argument: Simple {
                                identifier: "def",
                               },
                               definition: FunctionApplication {
                                function: Variable {
                                 identifier: "mapAttrs",
                                 position: (436, 22),
                                },
                                arguments: [
                                 Parentheses {
                                  expression: Function {
                                   argument: Simple {
                                    identifier: "n",
                                   },
                                   definition: Function {
                                    argument: Simple {
                                     identifier: "v",
                                    },
                                    definition: Map {
                                     bindings: [
                                      Inherit {
                                       from: Some(
                                        Variable {
                                         identifier: "def",
                                         position: (436, 49),
                                        },
                                       ),
                                       attributes: [
                                        Raw {
                                         content: "file",
                                         position: (436, 54),
                                        },
                                       ],
                                      },
                                      Binding {
                                       from: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "value",
                                          position: (436, 60),
                                         },
                                        ],
                                       },
                                       to: Variable {
                                        identifier: "v",
                                        position: (436, 68),
                                       },
                                      },
                                     ],
                                     recursive: false,
                                     position: (436, 38),
                                    },
                                    position: (436, 35),
                                   },
                                   position: (436, 32),
                                  },
                                  position: (436, 31),
                                 },
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "def",
                                   position: (436, 74),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "value",
                                     position: (436, 78),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                ],
                               },
                               position: (436, 17),
                              },
                              position: (436, 16),
                             },
                             Variable {
                              identifier: "defs",
                              position: (436, 85),
                             },
                            ],
                           },
                           position: (436, 11),
                          },
                         ],
                        },
                        position: (432, 65),
                       },
                      ],
                     },
                     position: (432, 34),
                    },
                   ],
                  },
                  position: (431, 20),
                 },
                 position: (431, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "emptyValue",
                   position: (437, 7),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (437, 22),
                     },
                    ],
                   },
                   to: Map {
                    bindings: [],
                    recursive: false,
                    position: (437, 30),
                   },
                  },
                 ],
                 recursive: false,
                 position: (437, 20),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (438, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "prefix",
                 },
                 definition: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "elemType",
                    position: (438, 31),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "getSubOptions",
                      position: (438, 40),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "prefix",
                       position: (438, 55),
                      },
                      List {
                       elements: [
                        String {
                         parts: [
                          Raw {
                           content: "<name>",
                           position: (438, 67),
                          },
                         ],
                         position: (438, 66),
                        },
                       ],
                       position: (438, 65),
                      },
                     ],
                     position: (438, 62),
                    },
                    position: (438, 54),
                   },
                  ],
                 },
                 position: (438, 23),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (439, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (439, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (439, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (440, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "attrsOf",
                   position: (440, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (440, 37),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (440, 46),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (440, 62),
                      },
                     ],
                    },
                    position: (440, 36),
                   },
                  ],
                 },
                 position: (440, 25),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (441, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (441, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (441, 33),
                     },
                    ],
                   },
                   position: (441, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (441, 44),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "elemType",
                      position: (441, 54),
                     },
                    },
                   ],
                   recursive: false,
                   position: (441, 42),
                  },
                 ],
                 position: (441, 39),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (442, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (442, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (442, 30),
                },
               },
              ],
              recursive: true,
              position: (427, 38),
             },
            ],
           },
           position: (427, 15),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "lazyAttrsOf",
             position: (450, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (450, 29),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (451, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "lazyAttrsOf",
                   position: (451, 15),
                  },
                 ],
                 position: (451, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (452, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "lazy attribute set of ",
                   position: (452, 22),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "elemType",
                     position: (452, 46),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (452, 55),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "s",
                   position: (452, 67),
                  },
                 ],
                 position: (452, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (453, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "isAttrs",
                 position: (453, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (454, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "zipAttrsWith",
                    position: (455, 9),
                   },
                   arguments: [
                    Parentheses {
                     expression: Function {
                      argument: Simple {
                       identifier: "name",
                      },
                      definition: Function {
                       argument: Simple {
                        identifier: "defs",
                       },
                       definition: LetIn {
                        bindings: [
                         Binding {
                          from: AttributePath {
                           parts: [
                            Raw {
                             content: "merged",
                             position: (456, 15),
                            },
                           ],
                          },
                          to: FunctionApplication {
                           function: Variable {
                            identifier: "mergeDefinitions",
                            position: (456, 24),
                           },
                           arguments: [
                            Parentheses {
                             expression: BinaryOperation {
                              operator: Concatenation,
                              operands: [
                               Variable {
                                identifier: "loc",
                                position: (456, 42),
                               },
                               List {
                                elements: [
                                 Variable {
                                  identifier: "name",
                                  position: (456, 50),
                                 },
                                ],
                                position: (456, 49),
                               },
                              ],
                              position: (456, 46),
                             },
                             position: (456, 41),
                            },
                            Variable {
                             identifier: "elemType",
                             position: (456, 57),
                            },
                            Variable {
                             identifier: "defs",
                             position: (456, 66),
                            },
                           ],
                          },
                         },
                        ],
                        target: PropertyAccess {
                         expression: Variable {
                          identifier: "merged",
                          position: (458, 14),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "optionalValue",
                            position: (458, 21),
                           },
                           Raw {
                            content: "value",
                            position: (458, 35),
                           },
                          ],
                         },
                         default: Some(
                          PropertyAccess {
                           expression: Variable {
                            identifier: "elemType",
                            position: (458, 44),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "emptyValue",
                              position: (458, 53),
                             },
                             Raw {
                              content: "value",
                              position: (458, 64),
                             },
                            ],
                           },
                           default: Some(
                            PropertyAccess {
                             expression: Variable {
                              identifier: "merged",
                              position: (458, 73),
                             },
                             attribute_path: AttributePath {
                              parts: [
                               Raw {
                                content: "mergedValue",
                                position: (458, 80),
                               },
                              ],
                             },
                             default: None,
                            },
                           ),
                          },
                         ),
                        },
                        position: (456, 11),
                       },
                       position: (455, 29),
                      },
                      position: (455, 23),
                     },
                     position: (455, 22),
                    },
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "map",
                       position: (461, 10),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "def",
                         },
                         definition: FunctionApplication {
                          function: Variable {
                           identifier: "mapAttrs",
                           position: (461, 20),
                          },
                          arguments: [
                           Parentheses {
                            expression: Function {
                             argument: Simple {
                              identifier: "n",
                             },
                             definition: Function {
                              argument: Simple {
                               identifier: "v",
                              },
                              definition: Map {
                               bindings: [
                                Inherit {
                                 from: Some(
                                  Variable {
                                   identifier: "def",
                                   position: (461, 47),
                                  },
                                 ),
                                 attributes: [
                                  Raw {
                                   content: "file",
                                   position: (461, 52),
                                  },
                                 ],
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "value",
                                    position: (461, 58),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "v",
                                  position: (461, 66),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (461, 36),
                              },
                              position: (461, 33),
                             },
                             position: (461, 30),
                            },
                            position: (461, 29),
                           },
                           PropertyAccess {
                            expression: Variable {
                             identifier: "def",
                             position: (461, 72),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "value",
                               position: (461, 76),
                              },
                             ],
                            },
                            default: None,
                           },
                          ],
                         },
                         position: (461, 15),
                        },
                        position: (461, 14),
                       },
                       Variable {
                        identifier: "defs",
                        position: (461, 83),
                       },
                      ],
                     },
                     position: (461, 9),
                    },
                   ],
                  },
                  position: (454, 20),
                 },
                 position: (454, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "emptyValue",
                   position: (462, 7),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (462, 22),
                     },
                    ],
                   },
                   to: Map {
                    bindings: [],
                    recursive: false,
                    position: (462, 30),
                   },
                  },
                 ],
                 recursive: false,
                 position: (462, 20),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (463, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "prefix",
                 },
                 definition: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "elemType",
                    position: (463, 31),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "getSubOptions",
                      position: (463, 40),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "prefix",
                       position: (463, 55),
                      },
                      List {
                       elements: [
                        String {
                         parts: [
                          Raw {
                           content: "<name>",
                           position: (463, 67),
                          },
                         ],
                         position: (463, 66),
                        },
                       ],
                       position: (463, 65),
                      },
                     ],
                     position: (463, 62),
                    },
                    position: (463, 54),
                   },
                  ],
                 },
                 position: (463, 23),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (464, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (464, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (464, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (465, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "lazyAttrsOf",
                   position: (465, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (465, 41),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (465, 50),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (465, 66),
                      },
                     ],
                    },
                    position: (465, 40),
                   },
                  ],
                 },
                 position: (465, 25),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (466, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (466, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (466, 33),
                     },
                    ],
                   },
                   position: (466, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (466, 44),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "elemType",
                      position: (466, 54),
                     },
                    },
                   ],
                   recursive: false,
                   position: (466, 42),
                  },
                 ],
                 position: (466, 39),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (467, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (467, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (467, 30),
                },
               },
              ],
              recursive: true,
              position: (450, 42),
             },
            ],
           },
           position: (450, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "loaOf",
             position: (471, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: BinaryOperation {
            operator: Update,
            operands: [
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (471, 23),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "attrsOf",
                  position: (471, 29),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "elemType",
                position: (471, 37),
               },
              ],
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (472, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "loaOf",
                   position: (472, 15),
                  },
                 ],
                 position: (472, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "deprecationMessage",
                   position: (473, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Addition,
                 operands: [
                  BinaryOperation {
                   operator: Addition,
                   operands: [
                    String {
                     parts: [
                      Raw {
                       content: "Mixing lists with attribute values is no longer",
                       position: (473, 29),
                      },
                     ],
                     position: (473, 28),
                    },
                    String {
                     parts: [
                      Raw {
                       content: " possible; please use `types.attrsOf` instead. See",
                       position: (474, 12),
                      },
                     ],
                     position: (474, 11),
                    },
                   ],
                   position: (474, 9),
                  },
                  String {
                   parts: [
                    Raw {
                     content: " https://github.com/NixOS/nixpkgs/issues/1800 for the motivation.",
                     position: (475, 12),
                    },
                   ],
                   position: (475, 11),
                  },
                 ],
                 position: (475, 9),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (476, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (476, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (476, 30),
                },
               },
              ],
              recursive: false,
              position: (471, 49),
             },
            ],
            position: (471, 46),
           },
           position: (471, 13),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "uniq",
             position: (480, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (480, 22),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (481, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "uniq",
                   position: (481, 15),
                  },
                 ],
                 position: (481, 14),
                },
               },
               Inherit {
                from: Some(
                 Variable {
                  identifier: "elemType",
                  position: (482, 16),
                 },
                ),
                attributes: [
                 Raw {
                  content: "description",
                  position: (482, 26),
                 },
                 Raw {
                  content: "check",
                  position: (482, 38),
                 },
                ],
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (483, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "mergeOneOption",
                 position: (483, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "emptyValue",
                   position: (484, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (484, 20),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "emptyValue",
                    position: (484, 29),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (485, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (485, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubOptions",
                    position: (485, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (486, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (486, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (486, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (487, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "uniq",
                   position: (487, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (487, 34),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (487, 43),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (487, 59),
                      },
                     ],
                    },
                    position: (487, 33),
                   },
                  ],
                 },
                 position: (487, 25),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (488, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (488, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (488, 33),
                     },
                    ],
                   },
                   position: (488, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (488, 44),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "elemType",
                      position: (488, 54),
                     },
                    },
                   ],
                   recursive: false,
                   position: (488, 42),
                  },
                 ],
                 position: (488, 39),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (489, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (489, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (489, 30),
                },
               },
              ],
              recursive: true,
              position: (480, 35),
             },
            ],
           },
           position: (480, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "unique",
             position: (492, 5),
            },
           ],
          },
          to: Function {
           argument: Destructured {
            identifier: None,
            arguments: [
             DestructuredArgument {
              identifier: "message",
              default: None,
             },
            ],
            ellipsis: false,
           },
           definition: Function {
            argument: Simple {
             identifier: "type",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "mkOptionType",
              position: (492, 33),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "name",
                    position: (493, 7),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "unique",
                    position: (493, 15),
                   },
                  ],
                  position: (493, 14),
                 },
                },
                Inherit {
                 from: Some(
                  Variable {
                   identifier: "type",
                   position: (494, 16),
                  },
                 ),
                 attributes: [
                  Raw {
                   content: "description",
                   position: (494, 22),
                  },
                  Raw {
                   content: "check",
                   position: (494, 34),
                  },
                 ],
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "merge",
                    position: (495, 7),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "mergeUniqueOption",
                   position: (495, 15),
                  },
                  arguments: [
                   Map {
                    bindings: [
                     Inherit {
                      from: None,
                      attributes: [
                       Raw {
                        content: "message",
                        position: (495, 43),
                       },
                      ],
                     },
                    ],
                    recursive: false,
                    position: (495, 33),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "emptyValue",
                    position: (496, 7),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "type",
                   position: (496, 20),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "emptyValue",
                     position: (496, 25),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubOptions",
                    position: (497, 7),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "type",
                   position: (497, 23),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "getSubOptions",
                     position: (497, 28),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (498, 7),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "type",
                   position: (498, 23),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "getSubModules",
                     position: (498, 28),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "substSubModules",
                    position: (499, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "m",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "uniq",
                    position: (499, 28),
                   },
                   arguments: [
                    Parentheses {
                     expression: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "type",
                        position: (499, 34),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "substSubModules",
                          position: (499, 39),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "m",
                        position: (499, 55),
                       },
                      ],
                     },
                     position: (499, 33),
                    },
                   ],
                  },
                  position: (499, 25),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "functor",
                    position: (500, 7),
                   },
                  ],
                 },
                 to: BinaryOperation {
                  operator: Update,
                  operands: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "defaultFunctor",
                      position: (500, 18),
                     },
                     arguments: [
                      Variable {
                       identifier: "name",
                       position: (500, 33),
                      },
                     ],
                    },
                    position: (500, 17),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "wrapped",
                         position: (500, 44),
                        },
                       ],
                      },
                      to: Variable {
                       identifier: "type",
                       position: (500, 54),
                      },
                     },
                    ],
                    recursive: false,
                    position: (500, 42),
                   },
                  ],
                  position: (500, 39),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "nestedTypes",
                    position: (501, 7),
                   },
                   Raw {
                    content: "elemType",
                    position: (501, 19),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "type",
                  position: (501, 30),
                 },
                },
               ],
               recursive: true,
               position: (492, 46),
              },
             ],
            },
            position: (492, 27),
           },
           position: (492, 14),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "nullOr",
             position: (505, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (505, 24),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (506, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "nullOr",
                   position: (506, 15),
                  },
                 ],
                 position: (506, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (507, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "null or ",
                   position: (507, 22),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "elemType",
                     position: (507, 32),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (507, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                 ],
                 position: (507, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (508, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "x",
                 },
                 definition: BinaryOperation {
                  operator: LogicalOr,
                  operands: [
                   BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     Variable {
                      identifier: "x",
                      position: (508, 18),
                     },
                     Variable {
                      identifier: "null",
                      position: (508, 23),
                     },
                    ],
                    position: (508, 20),
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "elemType",
                      position: (508, 31),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "check",
                        position: (508, 40),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (508, 46),
                     },
                    ],
                   },
                  ],
                  position: (508, 28),
                 },
                 position: (508, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (509, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: LetIn {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "nrNulls",
                        position: (510, 13),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: Variable {
                       identifier: "count",
                       position: (510, 23),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "def",
                         },
                         definition: BinaryOperation {
                          operator: EqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "def",
                             position: (510, 35),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "value",
                               position: (510, 39),
                              },
                             ],
                            },
                            default: None,
                           },
                           Variable {
                            identifier: "null",
                            position: (510, 48),
                           },
                          ],
                          position: (510, 45),
                         },
                         position: (510, 30),
                        },
                        position: (510, 29),
                       },
                       Variable {
                        identifier: "defs",
                        position: (510, 54),
                       },
                      ],
                     },
                    },
                   ],
                   target: IfThenElse {
                    predicate: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      Variable {
                       identifier: "nrNulls",
                       position: (511, 12),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "length",
                        position: (511, 23),
                       },
                       arguments: [
                        Variable {
                         identifier: "defs",
                         position: (511, 30),
                        },
                       ],
                      },
                     ],
                     position: (511, 20),
                    },
                    then: Variable {
                     identifier: "null",
                     position: (511, 40),
                    },
                    else_: IfThenElse {
                     predicate: BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       Variable {
                        identifier: "nrNulls",
                        position: (512, 17),
                       },
                       Int {
                        value: 0,
                        position: (512, 28),
                       },
                      ],
                      position: (512, 25),
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "throw",
                       position: (513, 11),
                      },
                      arguments: [
                       String {
                        parts: [
                         Raw {
                          content: "The option `",
                          position: (513, 18),
                         },
                         Expression {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "showOption",
                            position: (513, 32),
                           },
                           arguments: [
                            Variable {
                             identifier: "loc",
                             position: (513, 43),
                            },
                           ],
                          },
                         },
                         Raw {
                          content: "` is defined both null and not null, in ",
                          position: (513, 47),
                         },
                         Expression {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "showFiles",
                            position: (513, 89),
                           },
                           arguments: [
                            Parentheses {
                             expression: FunctionApplication {
                              function: Variable {
                               identifier: "getFiles",
                               position: (513, 100),
                              },
                              arguments: [
                               Variable {
                                identifier: "defs",
                                position: (513, 109),
                               },
                              ],
                             },
                             position: (513, 99),
                            },
                           ],
                          },
                         },
                         Raw {
                          content: ".",
                          position: (513, 115),
                         },
                        ],
                        position: (513, 17),
                       },
                      ],
                     },
                     else_: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "elemType",
                        position: (514, 14),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "merge",
                          position: (514, 23),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "loc",
                        position: (514, 29),
                       },
                       Variable {
                        identifier: "defs",
                        position: (514, 33),
                       },
                      ],
                     },
                     position: (512, 14),
                    },
                    position: (511, 9),
                   },
                   position: (510, 9),
                  },
                  position: (509, 20),
                 },
                 position: (509, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "emptyValue",
                   position: (515, 7),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (515, 22),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "null",
                    position: (515, 30),
                   },
                  },
                 ],
                 recursive: false,
                 position: (515, 20),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (516, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (516, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubOptions",
                    position: (516, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (517, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (517, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (517, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (518, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "nullOr",
                   position: (518, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (518, 36),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (518, 45),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (518, 61),
                      },
                     ],
                    },
                    position: (518, 35),
                   },
                  ],
                 },
                 position: (518, 25),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "functor",
                   position: (519, 7),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: Update,
                 operands: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (519, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (519, 33),
                     },
                    ],
                   },
                   position: (519, 17),
                  },
                  Map {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "wrapped",
                        position: (519, 44),
                       },
                      ],
                     },
                     to: Variable {
                      identifier: "elemType",
                      position: (519, 54),
                     },
                    },
                   ],
                   recursive: false,
                   position: (519, 42),
                  },
                 ],
                 position: (519, 39),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "nestedTypes",
                   position: (520, 7),
                  },
                  Raw {
                   content: "elemType",
                   position: (520, 19),
                  },
                 ],
                },
                to: Variable {
                 identifier: "elemType",
                 position: (520, 30),
                },
               },
              ],
              recursive: true,
              position: (505, 37),
             },
            ],
           },
           position: (505, 14),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "functionTo",
             position: (523, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkOptionType",
             position: (523, 28),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "name",
                   position: (524, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "functionTo",
                   position: (524, 15),
                  },
                 ],
                 position: (524, 14),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (525, 7),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "function that evaluates to a(n) ",
                   position: (525, 22),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "elemType",
                     position: (525, 56),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (525, 65),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                 ],
                 position: (525, 21),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "check",
                   position: (526, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "isFunction",
                 position: (526, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "merge",
                   position: (527, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "loc",
                 },
                 definition: Function {
                  argument: Simple {
                   identifier: "defs",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "fnArgs",
                   },
                   definition: PropertyAccess {
                    expression: Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "mergeDefinitions",
                       position: (528, 18),
                      },
                      arguments: [
                       Parentheses {
                        expression: BinaryOperation {
                         operator: Concatenation,
                         operands: [
                          Variable {
                           identifier: "loc",
                           position: (528, 36),
                          },
                          List {
                           elements: [
                            String {
                             parts: [
                              Raw {
                               content: "[function body]",
                               position: (528, 46),
                              },
                             ],
                             position: (528, 45),
                            },
                           ],
                           position: (528, 43),
                          },
                         ],
                         position: (528, 40),
                        },
                        position: (528, 35),
                       },
                       Variable {
                        identifier: "elemType",
                        position: (528, 66),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "map",
                          position: (528, 76),
                         },
                         arguments: [
                          Parentheses {
                           expression: Function {
                            argument: Simple {
                             identifier: "fn",
                            },
                            definition: Map {
                             bindings: [
                              Inherit {
                               from: Some(
                                Variable {
                                 identifier: "fn",
                                 position: (528, 96),
                                },
                               ),
                               attributes: [
                                Raw {
                                 content: "file",
                                 position: (528, 100),
                                },
                               ],
                              },
                              Binding {
                               from: AttributePath {
                                parts: [
                                 Raw {
                                  content: "value",
                                  position: (528, 106),
                                 },
                                ],
                               },
                               to: FunctionApplication {
                                function: PropertyAccess {
                                 expression: Variable {
                                  identifier: "fn",
                                  position: (528, 114),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "value",
                                    position: (528, 117),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                arguments: [
                                 Variable {
                                  identifier: "fnArgs",
                                  position: (528, 123),
                                 },
                                ],
                               },
                              },
                             ],
                             recursive: false,
                             position: (528, 85),
                            },
                            position: (528, 81),
                           },
                           position: (528, 80),
                          },
                          Variable {
                           identifier: "defs",
                           position: (528, 134),
                          },
                         ],
                        },
                        position: (528, 75),
                       },
                      ],
                     },
                     position: (528, 17),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "mergedValue",
                       position: (528, 141),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (528, 9),
                  },
                  position: (527, 20),
                 },
                 position: (527, 15),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubOptions",
                   position: (529, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (529, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubOptions",
                    position: (529, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "getSubModules",
                   position: (530, 7),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "elemType",
                  position: (530, 23),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (530, 32),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "substSubModules",
                   position: (531, 7),
                  },
                 ],
                },
                to: Function {
                 argument: Simple {
                  identifier: "m",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "functionTo",
                   position: (531, 28),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (531, 40),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "substSubModules",
                         position: (531, 49),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "m",
                       position: (531, 65),
                      },
                     ],
                    },
                    position: (531, 39),
                   },
                  ],
                 },
                 position: (531, 25),
                },
               },
              ],
              recursive: false,
              position: (523, 41),
             },
            ],
           },
           position: (523, 18),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "submodule",
             position: (535, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "modules",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "submoduleWith",
             position: (535, 26),
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "shorthandOnlyDefinesConfig",
                   position: (536, 7),
                  },
                 ],
                },
                to: Variable {
                 identifier: "true",
                 position: (536, 36),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "modules",
                   position: (537, 7),
                  },
                 ],
                },
                to: FunctionApplication {
                 function: Variable {
                  identifier: "toList",
                  position: (537, 17),
                 },
                 arguments: [
                  Variable {
                   identifier: "modules",
                   position: (537, 24),
                  },
                 ],
                },
               },
              ],
              recursive: false,
              position: (535, 40),
             },
            ],
           },
           position: (535, 17),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "optionType",
             position: (541, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (541, 18),
           },
           arguments: [
            Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "name",
                  position: (542, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "optionType",
                  position: (542, 15),
                 },
                ],
                position: (542, 14),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (543, 7),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "optionType",
                  position: (543, 22),
                 },
                ],
                position: (543, 21),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "check",
                  position: (544, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "value",
                },
                definition: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "value",
                    position: (544, 22),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "_type",
                      position: (544, 28),
                     },
                    ],
                   },
                   default: Some(
                    Variable {
                     identifier: "null",
                     position: (544, 37),
                    },
                   ),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "option-type",
                     position: (544, 46),
                    },
                   ],
                   position: (544, 45),
                  },
                 ],
                 position: (544, 42),
                },
                position: (544, 15),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "merge",
                  position: (545, 7),
                 },
                ],
               },
               to: Function {
                argument: Simple {
                 identifier: "loc",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "defs",
                 },
                 definition: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "length",
                      position: (546, 12),
                     },
                     arguments: [
                      Variable {
                       identifier: "defs",
                       position: (546, 19),
                      },
                     ],
                    },
                    Int {
                     value: 1,
                     position: (546, 27),
                    },
                   ],
                   position: (546, 24),
                  },
                  then: PropertyAccess {
                   expression: Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "head",
                      position: (547, 15),
                     },
                     arguments: [
                      Variable {
                       identifier: "defs",
                       position: (547, 20),
                      },
                     ],
                    },
                    position: (547, 14),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "value",
                      position: (547, 26),
                     },
                    ],
                   },
                   default: None,
                  },
                  else_: LetIn {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "optionModules",
                        position: (551, 11),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: Variable {
                       identifier: "map",
                       position: (551, 27),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Destructured {
                          identifier: None,
                          arguments: [
                           DestructuredArgument {
                            identifier: "file",
                            default: None,
                           },
                           DestructuredArgument {
                            identifier: "value",
                            default: None,
                           },
                          ],
                          ellipsis: false,
                         },
                         definition: Map {
                          bindings: [
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "_file",
                               position: (553, 15),
                              },
                             ],
                            },
                            to: Variable {
                             identifier: "file",
                             position: (553, 23),
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "options",
                               position: (556, 15),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "lib",
                               position: (556, 25),
                              },
                              attribute_path: AttributePath {
                               parts: [
                                Raw {
                                 content: "mkOption",
                                 position: (556, 29),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (557, 17),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "value",
                                  position: (557, 24),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (556, 38),
                              },
                             ],
                            },
                           },
                          ],
                          recursive: false,
                          position: (552, 13),
                         },
                         position: (551, 32),
                        },
                        position: (551, 31),
                       },
                       Variable {
                        identifier: "defs",
                        position: (560, 13),
                       },
                      ],
                     },
                    },
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "mergedOption",
                        position: (563, 11),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: Variable {
                       identifier: "fixupOptionType",
                       position: (563, 26),
                      },
                      arguments: [
                       Variable {
                        identifier: "loc",
                        position: (563, 42),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "mergeOptionDecls",
                          position: (563, 47),
                         },
                         arguments: [
                          Variable {
                           identifier: "loc",
                           position: (563, 64),
                          },
                          Variable {
                           identifier: "optionModules",
                           position: (563, 68),
                          },
                         ],
                        },
                        position: (563, 46),
                       },
                      ],
                     },
                    },
                   ],
                   target: PropertyAccess {
                    expression: Variable {
                     identifier: "mergedOption",
                     position: (564, 12),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "type",
                       position: (564, 25),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (548, 14),
                  },
                  position: (546, 9),
                 },
                 position: (545, 20),
                },
                position: (545, 15),
               },
              },
             ],
             recursive: false,
             position: (541, 31),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "submoduleWith",
             position: (567, 5),
            },
           ],
          },
          to: Function {
           argument: Destructured {
            identifier: RightAt(
             "attrs",
            ),
            arguments: [
             DestructuredArgument {
              identifier: "shorthandOnlyDefinesConfig",
              default: Some(
               Variable {
                identifier: "false",
                position: (570, 38),
               },
              ),
             },
             DestructuredArgument {
              identifier: "specialArgs",
              default: Some(
               Map {
                bindings: [],
                recursive: false,
                position: (569, 23),
               },
              ),
             },
             DestructuredArgument {
              identifier: "modules",
              default: None,
             },
            ],
            ellipsis: false,
           },
           definition: LetIn {
            bindings: [
             Inherit {
              from: Some(
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (573, 18),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "modules",
                   position: (573, 22),
                  },
                 ],
                },
                default: None,
               },
              ),
              attributes: [
               Raw {
                content: "evalModules",
                position: (573, 31),
               },
              ],
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "shorthandToModule",
                 position: (575, 9),
                },
               ],
              },
              to: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "shorthandOnlyDefinesConfig",
                  position: (575, 32),
                 },
                 Variable {
                  identifier: "false",
                  position: (575, 62),
                 },
                ],
                position: (575, 59),
               },
               then: Function {
                argument: Simple {
                 identifier: "value",
                },
                definition: Variable {
                 identifier: "value",
                 position: (576, 23),
                },
                position: (576, 16),
               },
               else_: Function {
                argument: Simple {
                 identifier: "value",
                },
                definition: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "config",
                      position: (577, 25),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "value",
                    position: (577, 34),
                   },
                  },
                 ],
                 recursive: false,
                 position: (577, 23),
                },
                position: (577, 16),
               },
               position: (575, 29),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "allModules",
                 position: (579, 9),
                },
               ],
              },
              to: Function {
               argument: Simple {
                identifier: "defs",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "imap1",
                 position: (579, 28),
                },
                arguments: [
                 Parentheses {
                  expression: Function {
                   argument: Simple {
                    identifier: "n",
                   },
                   definition: Function {
                    argument: Destructured {
                     identifier: None,
                     arguments: [
                      DestructuredArgument {
                       identifier: "file",
                       default: None,
                      },
                      DestructuredArgument {
                       identifier: "value",
                       default: None,
                      },
                     ],
                     ellipsis: false,
                    },
                    definition: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "isFunction",
                       position: (580, 14),
                      },
                      arguments: [
                       Variable {
                        identifier: "value",
                        position: (580, 25),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "setFunctionArgs",
                       position: (581, 16),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "args",
                         },
                         definition: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "lib",
                            position: (582, 24),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "modules",
                              position: (582, 28),
                             },
                             Raw {
                              content: "unifyModuleSyntax",
                              position: (582, 36),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "file",
                            position: (582, 54),
                           },
                           String {
                            parts: [
                             Expression {
                              expression: FunctionApplication {
                               function: Variable {
                                identifier: "toString",
                                position: (582, 62),
                               },
                               arguments: [
                                Variable {
                                 identifier: "file",
                                 position: (582, 71),
                                },
                               ],
                              },
                             },
                             Raw {
                              content: "-",
                              position: (582, 76),
                             },
                             Expression {
                              expression: FunctionApplication {
                               function: Variable {
                                identifier: "toString",
                                position: (582, 79),
                               },
                               arguments: [
                                Variable {
                                 identifier: "n",
                                 position: (582, 88),
                                },
                               ],
                              },
                             },
                            ],
                            position: (582, 59),
                           },
                           Parentheses {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "value",
                              position: (582, 93),
                             },
                             arguments: [
                              Variable {
                               identifier: "args",
                               position: (582, 99),
                              },
                             ],
                            },
                            position: (582, 92),
                           },
                          ],
                         },
                         position: (582, 18),
                        },
                        position: (582, 17),
                       },
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "functionArgs",
                          position: (583, 18),
                         },
                         arguments: [
                          Variable {
                           identifier: "value",
                           position: (583, 31),
                          },
                         ],
                        },
                        position: (583, 17),
                       },
                      ],
                     },
                     else_: IfThenElse {
                      predicate: FunctionApplication {
                       function: Variable {
                        identifier: "isAttrs",
                        position: (584, 19),
                       },
                       arguments: [
                        Variable {
                         identifier: "value",
                         position: (584, 27),
                        },
                       ],
                      },
                      then: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (586, 13),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "modules",
                           position: (586, 17),
                          },
                          Raw {
                           content: "unifyModuleSyntax",
                           position: (586, 25),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "file",
                         position: (586, 43),
                        },
                        String {
                         parts: [
                          Expression {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "toString",
                             position: (586, 51),
                            },
                            arguments: [
                             Variable {
                              identifier: "file",
                              position: (586, 60),
                             },
                            ],
                           },
                          },
                          Raw {
                           content: "-",
                           position: (586, 65),
                          },
                          Expression {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "toString",
                             position: (586, 68),
                            },
                            arguments: [
                             Variable {
                              identifier: "n",
                              position: (586, 77),
                             },
                            ],
                           },
                          },
                         ],
                         position: (586, 48),
                        },
                        Parentheses {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "shorthandToModule",
                           position: (586, 82),
                          },
                          arguments: [
                           Variable {
                            identifier: "value",
                            position: (586, 100),
                           },
                          ],
                         },
                         position: (586, 81),
                        },
                       ],
                      },
                      else_: Variable {
                       identifier: "value",
                       position: (587, 16),
                      },
                      position: (584, 16),
                     },
                     position: (580, 11),
                    },
                    position: (579, 38),
                   },
                   position: (579, 35),
                  },
                  position: (579, 34),
                 },
                 Variable {
                  identifier: "defs",
                  position: (588, 11),
                 },
                ],
               },
               position: (579, 22),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "base",
                 position: (590, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "evalModules",
                position: (590, 16),
               },
               arguments: [
                Map {
                 bindings: [
                  Inherit {
                   from: None,
                   attributes: [
                    Raw {
                     content: "specialArgs",
                     position: (591, 19),
                    },
                   ],
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "modules",
                      position: (592, 11),
                     },
                    ],
                   },
                   to: BinaryOperation {
                    operator: Concatenation,
                    operands: [
                     List {
                      elements: [
                       Map {
                        bindings: [
                         Binding {
                          from: AttributePath {
                           parts: [
                            Raw {
                             content: "_module",
                             position: (608, 13),
                            },
                            Raw {
                             content: "args",
                             position: (608, 21),
                            },
                            Raw {
                             content: "name",
                             position: (608, 26),
                            },
                           ],
                          },
                          to: FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "lib",
                             position: (608, 33),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "mkOptionDefault",
                               position: (608, 37),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            String {
                             parts: [
                              Raw {
                               content: "‹name›",
                               position: (608, 54),
                              },
                             ],
                             position: (608, 53),
                            },
                           ],
                          },
                         },
                        ],
                        recursive: false,
                        position: (592, 22),
                       },
                      ],
                      position: (592, 21),
                     },
                     Variable {
                      identifier: "modules",
                      position: (609, 17),
                     },
                    ],
                    position: (609, 14),
                   },
                  },
                 ],
                 recursive: false,
                 position: (590, 28),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "freeformType",
                 position: (612, 9),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "base",
                position: (612, 24),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "_module",
                  position: (612, 29),
                 },
                 Raw {
                  content: "freeformType",
                  position: (612, 37),
                 },
                ],
               },
               default: None,
              },
             },
            ],
            target: FunctionApplication {
             function: Variable {
              identifier: "mkOptionType",
              position: (615, 7),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "name",
                    position: (616, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "submodule",
                    position: (616, 17),
                   },
                  ],
                  position: (616, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (617, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "freeformType",
                   position: (617, 23),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "description",
                     position: (617, 36),
                    },
                   ],
                  },
                  default: Some(
                   Variable {
                    identifier: "name",
                    position: (617, 51),
                   },
                  ),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "check",
                    position: (618, 9),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "x",
                  },
                  definition: BinaryOperation {
                   operator: LogicalOr,
                   operands: [
                    BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      FunctionApplication {
                       function: Variable {
                        identifier: "isAttrs",
                        position: (618, 20),
                       },
                       arguments: [
                        Variable {
                         identifier: "x",
                         position: (618, 28),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "isFunction",
                        position: (618, 33),
                       },
                       arguments: [
                        Variable {
                         identifier: "x",
                         position: (618, 44),
                        },
                       ],
                      },
                     ],
                     position: (618, 30),
                    },
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "path",
                       position: (618, 49),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "check",
                         position: (618, 54),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (618, 60),
                      },
                     ],
                    },
                   ],
                   position: (618, 46),
                  },
                  position: (618, 17),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "merge",
                    position: (619, 9),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "loc",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "defs",
                   },
                   definition: PropertyAccess {
                    expression: Parentheses {
                     expression: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "base",
                        position: (620, 12),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "extendModules",
                          position: (620, 17),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Map {
                        bindings: [
                         Binding {
                          from: AttributePath {
                           parts: [
                            Raw {
                             content: "modules",
                             position: (621, 13),
                            },
                           ],
                          },
                          to: BinaryOperation {
                           operator: Concatenation,
                           operands: [
                            List {
                             elements: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "_module",
                                    position: (621, 27),
                                   },
                                   Raw {
                                    content: "args",
                                    position: (621, 35),
                                   },
                                   Raw {
                                    content: "name",
                                    position: (621, 40),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: Variable {
                                   identifier: "last",
                                   position: (621, 47),
                                  },
                                  arguments: [
                                   Variable {
                                    identifier: "loc",
                                    position: (621, 52),
                                   },
                                  ],
                                 },
                                },
                               ],
                               recursive: false,
                               position: (621, 25),
                              },
                             ],
                             position: (621, 23),
                            },
                            FunctionApplication {
                             function: Variable {
                              identifier: "allModules",
                              position: (621, 64),
                             },
                             arguments: [
                              Variable {
                               identifier: "defs",
                               position: (621, 75),
                              },
                             ],
                            },
                           ],
                           position: (621, 61),
                          },
                         },
                         Binding {
                          from: AttributePath {
                           parts: [
                            Raw {
                             content: "prefix",
                             position: (622, 13),
                            },
                           ],
                          },
                          to: Variable {
                           identifier: "loc",
                           position: (622, 22),
                          },
                         },
                        ],
                        recursive: false,
                        position: (620, 31),
                       },
                      ],
                     },
                     position: (620, 11),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "config",
                       position: (623, 14),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (619, 22),
                  },
                  position: (619, 17),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "emptyValue",
                    position: (624, 9),
                   },
                  ],
                 },
                 to: Map {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "value",
                       position: (624, 24),
                      },
                     ],
                    },
                    to: Map {
                     bindings: [],
                     recursive: false,
                     position: (624, 32),
                    },
                   },
                  ],
                  recursive: false,
                  position: (624, 22),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubOptions",
                    position: (625, 9),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "prefix",
                  },
                  definition: BinaryOperation {
                   operator: Update,
                   operands: [
                    PropertyAccess {
                     expression: Parentheses {
                      expression: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "base",
                         position: (625, 34),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "extendModules",
                           position: (625, 39),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Map {
                         bindings: [
                          Inherit {
                           from: None,
                           attributes: [
                            Raw {
                             content: "prefix",
                             position: (626, 21),
                            },
                           ],
                          },
                         ],
                         recursive: false,
                         position: (626, 11),
                        },
                       ],
                      },
                      position: (625, 33),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "options",
                        position: (626, 32),
                       },
                      ],
                     },
                     default: None,
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "optionalAttrs",
                      position: (626, 43),
                     },
                     arguments: [
                      Parentheses {
                       expression: BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         Variable {
                          identifier: "freeformType",
                          position: (626, 58),
                         },
                         Variable {
                          identifier: "null",
                          position: (626, 74),
                         },
                        ],
                        position: (626, 71),
                       },
                       position: (626, 57),
                      },
                      Map {
                       bindings: [
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "_freeformOptions",
                            position: (630, 13),
                           },
                          ],
                         },
                         to: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "freeformType",
                            position: (630, 32),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "getSubOptions",
                              position: (630, 45),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "prefix",
                            position: (630, 59),
                           },
                          ],
                         },
                        },
                       ],
                       recursive: false,
                       position: (626, 80),
                      },
                     ],
                    },
                   ],
                   position: (626, 40),
                  },
                  position: (625, 25),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "getSubModules",
                    position: (632, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "modules",
                  position: (632, 25),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "substSubModules",
                    position: (633, 9),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "m",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "submoduleWith",
                    position: (633, 30),
                   },
                   arguments: [
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Update,
                      operands: [
                       Variable {
                        identifier: "attrs",
                        position: (633, 45),
                       },
                       Map {
                        bindings: [
                         Binding {
                          from: AttributePath {
                           parts: [
                            Raw {
                             content: "modules",
                             position: (634, 11),
                            },
                           ],
                          },
                          to: Variable {
                           identifier: "m",
                           position: (634, 21),
                          },
                         },
                        ],
                        recursive: false,
                        position: (633, 54),
                       },
                      ],
                      position: (633, 51),
                     },
                     position: (633, 44),
                    },
                   ],
                  },
                  position: (633, 27),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "nestedTypes",
                    position: (636, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (636, 23),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "optionalAttrs",
                      position: (636, 27),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: NotEqualTo,
                     operands: [
                      Variable {
                       identifier: "freeformType",
                       position: (636, 42),
                      },
                      Variable {
                       identifier: "null",
                       position: (636, 58),
                      },
                     ],
                     position: (636, 55),
                    },
                    position: (636, 41),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "freeformType",
                         position: (637, 11),
                        },
                       ],
                      },
                      to: Variable {
                       identifier: "freeformType",
                       position: (637, 26),
                      },
                     },
                    ],
                    recursive: false,
                    position: (636, 64),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "functor",
                    position: (639, 9),
                   },
                  ],
                 },
                 to: BinaryOperation {
                  operator: Update,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "defaultFunctor",
                     position: (639, 19),
                    },
                    arguments: [
                     Variable {
                      identifier: "name",
                      position: (639, 34),
                     },
                    ],
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "type",
                         position: (640, 11),
                        },
                       ],
                      },
                      to: PropertyAccess {
                       expression: Variable {
                        identifier: "types",
                        position: (640, 18),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "submoduleWith",
                          position: (640, 24),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "payload",
                         position: (641, 11),
                        },
                       ],
                      },
                      to: Map {
                       bindings: [
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "modules",
                            position: (642, 13),
                           },
                          ],
                         },
                         to: Variable {
                          identifier: "modules",
                          position: (642, 23),
                         },
                        },
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "specialArgs",
                            position: (643, 13),
                           },
                          ],
                         },
                         to: Variable {
                          identifier: "specialArgs",
                          position: (643, 27),
                         },
                        },
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "shorthandOnlyDefinesConfig",
                            position: (644, 13),
                           },
                          ],
                         },
                         to: Variable {
                          identifier: "shorthandOnlyDefinesConfig",
                          position: (644, 42),
                         },
                        },
                       ],
                       recursive: false,
                       position: (641, 21),
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "binOp",
                         position: (646, 11),
                        },
                       ],
                      },
                      to: Function {
                       argument: Simple {
                        identifier: "lhs",
                       },
                       definition: Function {
                        argument: Simple {
                         identifier: "rhs",
                        },
                        definition: Map {
                         bindings: [
                          Binding {
                           from: AttributePath {
                            parts: [
                             Raw {
                              content: "modules",
                              position: (647, 13),
                             },
                            ],
                           },
                           to: BinaryOperation {
                            operator: Concatenation,
                            operands: [
                             PropertyAccess {
                              expression: Variable {
                               identifier: "lhs",
                               position: (647, 23),
                              },
                              attribute_path: AttributePath {
                               parts: [
                                Raw {
                                 content: "modules",
                                 position: (647, 27),
                                },
                               ],
                              },
                              default: None,
                             },
                             PropertyAccess {
                              expression: Variable {
                               identifier: "rhs",
                               position: (647, 38),
                              },
                              attribute_path: AttributePath {
                               parts: [
                                Raw {
                                 content: "modules",
                                 position: (647, 42),
                                },
                               ],
                              },
                              default: None,
                             },
                            ],
                            position: (647, 35),
                           },
                          },
                          Binding {
                           from: AttributePath {
                            parts: [
                             Raw {
                              content: "specialArgs",
                              position: (648, 13),
                             },
                            ],
                           },
                           to: LetIn {
                            bindings: [
                             Binding {
                              from: AttributePath {
                               parts: [
                                Raw {
                                 content: "intersecting",
                                 position: (649, 19),
                                },
                               ],
                              },
                              to: FunctionApplication {
                               function: PropertyAccess {
                                expression: Variable {
                                 identifier: "builtins",
                                 position: (649, 34),
                                },
                                attribute_path: AttributePath {
                                 parts: [
                                  Raw {
                                   content: "intersectAttrs",
                                   position: (649, 43),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               arguments: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "lhs",
                                  position: (649, 58),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "specialArgs",
                                    position: (649, 62),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "rhs",
                                  position: (649, 74),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "specialArgs",
                                    position: (649, 78),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ],
                              },
                             },
                            ],
                            target: IfThenElse {
                             predicate: BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               Variable {
                                identifier: "intersecting",
                                position: (650, 21),
                               },
                               Map {
                                bindings: [],
                                recursive: false,
                                position: (650, 37),
                               },
                              ],
                              position: (650, 34),
                             },
                             then: BinaryOperation {
                              operator: Update,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "lhs",
                                 position: (651, 20),
                                },
                                attribute_path: AttributePath {
                                 parts: [
                                  Raw {
                                   content: "specialArgs",
                                   position: (651, 24),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "rhs",
                                 position: (651, 39),
                                },
                                attribute_path: AttributePath {
                                 parts: [
                                  Raw {
                                   content: "specialArgs",
                                   position: (651, 43),
                                  },
                                 ],
                                },
                                default: None,
                               },
                              ],
                              position: (651, 36),
                             },
                             else_: FunctionApplication {
                              function: Variable {
                               identifier: "throw",
                               position: (652, 20),
                              },
                              arguments: [
                               String {
                                parts: [
                                 Raw {
                                  content: "A submoduleWith option is declared multiple times with the same specialArgs \"",
                                  position: (652, 27),
                                 },
                                 Expression {
                                  expression: FunctionApplication {
                                   function: Variable {
                                    identifier: "toString",
                                    position: (652, 107),
                                   },
                                   arguments: [
                                    Parentheses {
                                     expression: FunctionApplication {
                                      function: Variable {
                                       identifier: "attrNames",
                                       position: (652, 117),
                                      },
                                      arguments: [
                                       Variable {
                                        identifier: "intersecting",
                                        position: (652, 127),
                                       },
                                      ],
                                     },
                                     position: (652, 116),
                                    },
                                   ],
                                  },
                                 },
                                 Raw {
                                  content: "\"",
                                  position: (652, 141),
                                 },
                                ],
                                position: (652, 26),
                               },
                              ],
                             },
                             position: (650, 18),
                            },
                            position: (649, 15),
                           },
                          },
                          Binding {
                           from: AttributePath {
                            parts: [
                             Raw {
                              content: "shorthandOnlyDefinesConfig",
                              position: (653, 13),
                             },
                            ],
                           },
                           to: IfThenElse {
                            predicate: BinaryOperation {
                             operator: EqualTo,
                             operands: [
                              PropertyAccess {
                               expression: Variable {
                                identifier: "lhs",
                                position: (654, 18),
                               },
                               attribute_path: AttributePath {
                                parts: [
                                 Raw {
                                  content: "shorthandOnlyDefinesConfig",
                                  position: (654, 22),
                                 },
                                ],
                               },
                               default: None,
                              },
                              Variable {
                               identifier: "null",
                               position: (654, 52),
                              },
                             ],
                             position: (654, 49),
                            },
                            then: PropertyAccess {
                             expression: Variable {
                              identifier: "rhs",
                              position: (655, 20),
                             },
                             attribute_path: AttributePath {
                              parts: [
                               Raw {
                                content: "shorthandOnlyDefinesConfig",
                                position: (655, 24),
                               },
                              ],
                             },
                             default: None,
                            },
                            else_: IfThenElse {
                             predicate: BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "rhs",
                                 position: (656, 23),
                                },
                                attribute_path: AttributePath {
                                 parts: [
                                  Raw {
                                   content: "shorthandOnlyDefinesConfig",
                                   position: (656, 27),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               Variable {
                                identifier: "null",
                                position: (656, 57),
                               },
                              ],
                              position: (656, 54),
                             },
                             then: PropertyAccess {
                              expression: Variable {
                               identifier: "lhs",
                               position: (657, 20),
                              },
                              attribute_path: AttributePath {
                               parts: [
                                Raw {
                                 content: "shorthandOnlyDefinesConfig",
                                 position: (657, 24),
                                },
                               ],
                              },
                              default: None,
                             },
                             else_: IfThenElse {
                              predicate: BinaryOperation {
                               operator: EqualTo,
                               operands: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "lhs",
                                  position: (658, 23),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "shorthandOnlyDefinesConfig",
                                    position: (658, 27),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "rhs",
                                  position: (658, 57),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "shorthandOnlyDefinesConfig",
                                    position: (658, 61),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ],
                               position: (658, 54),
                              },
                              then: PropertyAccess {
                               expression: Variable {
                                identifier: "lhs",
                                position: (659, 20),
                               },
                               attribute_path: AttributePath {
                                parts: [
                                 Raw {
                                  content: "shorthandOnlyDefinesConfig",
                                  position: (659, 24),
                                 },
                                ],
                               },
                               default: None,
                              },
                              else_: FunctionApplication {
                               function: Variable {
                                identifier: "throw",
                                position: (660, 20),
                               },
                               arguments: [
                                String {
                                 parts: [
                                  Raw {
                                   content: "A submoduleWith option is declared multiple times with conflicting shorthandOnlyDefinesConfig values",
                                   position: (660, 27),
                                  },
                                 ],
                                 position: (660, 26),
                                },
                               ],
                              },
                              position: (658, 20),
                             },
                             position: (656, 20),
                            },
                            position: (654, 15),
                           },
                          },
                         ],
                         recursive: false,
                         position: (646, 29),
                        },
                        position: (646, 24),
                       },
                       position: (646, 19),
                      },
                     },
                    ],
                    recursive: false,
                    position: (639, 42),
                   },
                  ],
                  position: (639, 39),
                 },
                },
               ],
               recursive: true,
               position: (615, 20),
              },
             ],
            },
            position: (572, 7),
           },
           position: (568, 7),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "enum",
             position: (666, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "values",
           },
           definition: LetIn {
            bindings: [
             Inherit {
              from: Some(
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (668, 18),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "lists",
                   position: (668, 22),
                  },
                 ],
                },
                default: None,
               },
              ),
              attributes: [
               Raw {
                content: "unique",
                position: (668, 29),
               },
              ],
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "show",
                 position: (669, 9),
                },
               ],
              },
              to: Function {
               argument: Simple {
                identifier: "v",
               },
               definition: IfThenElse {
                predicate: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (670, 19),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "isString",
                     position: (670, 28),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (670, 37),
                  },
                 ],
                },
                then: String {
                 parts: [
                  Raw {
                   content: "\"",
                   position: (670, 46),
                  },
                  Expression {
                   expression: Variable {
                    identifier: "v",
                    position: (670, 49),
                   },
                  },
                  Raw {
                   content: "\"",
                   position: (670, 51),
                  },
                 ],
                 position: (670, 44),
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (671, 19),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "isInt",
                      position: (671, 28),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (671, 34),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (671, 41),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "toString",
                      position: (671, 50),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (671, 59),
                   },
                  ],
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (672, 19),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "isBool",
                       position: (672, 28),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (672, 35),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "boolToString",
                    position: (672, 42),
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (672, 55),
                    },
                   ],
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "<",
                     position: (673, 18),
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (673, 21),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "typeOf",
                          position: (673, 30),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (673, 37),
                       },
                      ],
                     },
                    },
                    Raw {
                     content: ">",
                     position: (673, 39),
                    },
                   ],
                   position: (673, 16),
                  },
                  position: (672, 16),
                 },
                 position: (671, 16),
                },
                position: (670, 16),
               },
               position: (669, 16),
              },
             },
            ],
            target: FunctionApplication {
             function: Variable {
              identifier: "mkOptionType",
              position: (675, 7),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "name",
                    position: (676, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "enum",
                    position: (676, 17),
                   },
                  ],
                  position: (676, 16),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (677, 9),
                   },
                  ],
                 },
                 to: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    Variable {
                     identifier: "values",
                     position: (682, 14),
                    },
                    List {
                     elements: [],
                     position: (682, 24),
                    },
                   ],
                   position: (682, 21),
                  },
                  then: String {
                   parts: [
                    Raw {
                     content: "impossible (empty enum)",
                     position: (683, 14),
                    },
                   ],
                   position: (683, 13),
                  },
                  else_: IfThenElse {
                   predicate: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (684, 19),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "length",
                          position: (684, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "values",
                        position: (684, 35),
                       },
                      ],
                     },
                     Int {
                      value: 1,
                      position: (684, 45),
                     },
                    ],
                    position: (684, 42),
                   },
                   then: String {
                    parts: [
                     Raw {
                      content: "value ",
                      position: (685, 14),
                     },
                     Expression {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "show",
                        position: (685, 22),
                       },
                       arguments: [
                        Parentheses {
                         expression: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "builtins",
                            position: (685, 28),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "head",
                              position: (685, 37),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "values",
                            position: (685, 42),
                           },
                          ],
                         },
                         position: (685, 27),
                        },
                       ],
                      },
                     },
                     Raw {
                      content: " (singular enum)",
                      position: (685, 50),
                     },
                    ],
                    position: (685, 13),
                   },
                   else_: String {
                    parts: [
                     Raw {
                      content: "one of ",
                      position: (687, 14),
                     },
                     Expression {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "concatMapStringsSep",
                        position: (687, 23),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: ", ",
                           position: (687, 44),
                          },
                         ],
                         position: (687, 43),
                        },
                        Variable {
                         identifier: "show",
                         position: (687, 48),
                        },
                        Variable {
                         identifier: "values",
                         position: (687, 53),
                        },
                       ],
                      },
                     },
                    ],
                    position: (687, 13),
                   },
                   position: (684, 16),
                  },
                  position: (682, 11),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "check",
                    position: (688, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "flip",
                   position: (688, 17),
                  },
                  arguments: [
                   Variable {
                    identifier: "elem",
                    position: (688, 22),
                   },
                   Variable {
                    identifier: "values",
                    position: (688, 27),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "merge",
                    position: (689, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "mergeEqualOption",
                  position: (689, 17),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "functor",
                    position: (690, 9),
                   },
                  ],
                 },
                 to: BinaryOperation {
                  operator: Update,
                  operands: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "defaultFunctor",
                      position: (690, 20),
                     },
                     arguments: [
                      Variable {
                       identifier: "name",
                       position: (690, 35),
                      },
                     ],
                    },
                    position: (690, 19),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "payload",
                         position: (690, 46),
                        },
                       ],
                      },
                      to: Variable {
                       identifier: "values",
                       position: (690, 56),
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "binOp",
                         position: (690, 64),
                        },
                       ],
                      },
                      to: Function {
                       argument: Simple {
                        identifier: "a",
                       },
                       definition: Function {
                        argument: Simple {
                         identifier: "b",
                        },
                        definition: FunctionApplication {
                         function: Variable {
                          identifier: "unique",
                          position: (690, 78),
                         },
                         arguments: [
                          Parentheses {
                           expression: BinaryOperation {
                            operator: Concatenation,
                            operands: [
                             Variable {
                              identifier: "a",
                              position: (690, 86),
                             },
                             Variable {
                              identifier: "b",
                              position: (690, 91),
                             },
                            ],
                            position: (690, 88),
                           },
                           position: (690, 85),
                          },
                         ],
                        },
                        position: (690, 75),
                       },
                       position: (690, 72),
                      },
                     },
                    ],
                    recursive: false,
                    position: (690, 44),
                   },
                  ],
                  position: (690, 41),
                 },
                },
               ],
               recursive: true,
               position: (675, 20),
              },
             ],
            },
            position: (667, 7),
           },
           position: (666, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "either",
             position: (694, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "t1",
           },
           definition: Function {
            argument: Simple {
             identifier: "t2",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "mkOptionType",
              position: (694, 22),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "name",
                    position: (695, 7),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "either",
                    position: (695, 15),
                   },
                  ],
                  position: (695, 14),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (696, 7),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "t1",
                      position: (696, 24),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "description",
                        position: (696, 27),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: " or ",
                    position: (696, 39),
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "t2",
                      position: (696, 45),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "description",
                        position: (696, 48),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                  position: (696, 21),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "check",
                    position: (697, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "x",
                  },
                  definition: BinaryOperation {
                   operator: LogicalOr,
                   operands: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "t1",
                       position: (697, 18),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "check",
                         position: (697, 21),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (697, 27),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "t2",
                       position: (697, 32),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "check",
                         position: (697, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (697, 41),
                      },
                     ],
                    },
                   ],
                   position: (697, 29),
                  },
                  position: (697, 15),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "merge",
                    position: (698, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "loc",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "defs",
                   },
                   definition: LetIn {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "defList",
                         position: (700, 11),
                        },
                       ],
                      },
                      to: FunctionApplication {
                       function: Variable {
                        identifier: "map",
                        position: (700, 21),
                       },
                       arguments: [
                        Parentheses {
                         expression: Function {
                          argument: Simple {
                           identifier: "d",
                          },
                          definition: PropertyAccess {
                           expression: Variable {
                            identifier: "d",
                            position: (700, 29),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "value",
                              position: (700, 31),
                             },
                            ],
                           },
                           default: None,
                          },
                          position: (700, 26),
                         },
                         position: (700, 25),
                        },
                        Variable {
                         identifier: "defs",
                         position: (700, 38),
                        },
                       ],
                      },
                     },
                    ],
                    target: IfThenElse {
                     predicate: FunctionApplication {
                      function: Variable {
                       identifier: "all",
                       position: (702, 16),
                      },
                      arguments: [
                       Parentheses {
                        expression: Function {
                         argument: Simple {
                          identifier: "x",
                         },
                         definition: FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "t1",
                            position: (702, 24),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "check",
                              position: (702, 27),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "x",
                            position: (702, 33),
                           },
                          ],
                         },
                         position: (702, 21),
                        },
                        position: (702, 20),
                       },
                       Variable {
                        identifier: "defList",
                        position: (702, 36),
                       },
                      ],
                     },
                     then: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "t1",
                        position: (703, 21),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "merge",
                          position: (703, 24),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "loc",
                        position: (703, 30),
                       },
                       Variable {
                        identifier: "defs",
                        position: (703, 34),
                       },
                      ],
                     },
                     else_: IfThenElse {
                      predicate: FunctionApplication {
                       function: Variable {
                        identifier: "all",
                        position: (704, 19),
                       },
                       arguments: [
                        Parentheses {
                         expression: Function {
                          argument: Simple {
                           identifier: "x",
                          },
                          definition: FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "t2",
                             position: (704, 27),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "check",
                               position: (704, 30),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            Variable {
                             identifier: "x",
                             position: (704, 36),
                            },
                           ],
                          },
                          position: (704, 24),
                         },
                         position: (704, 23),
                        },
                        Variable {
                         identifier: "defList",
                         position: (704, 39),
                        },
                       ],
                      },
                      then: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "t2",
                         position: (705, 21),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "merge",
                           position: (705, 24),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "loc",
                         position: (705, 30),
                        },
                        Variable {
                         identifier: "defs",
                         position: (705, 34),
                        },
                       ],
                      },
                      else_: FunctionApplication {
                       function: Variable {
                        identifier: "mergeOneOption",
                        position: (706, 16),
                       },
                       arguments: [
                        Variable {
                         identifier: "loc",
                         position: (706, 31),
                        },
                        Variable {
                         identifier: "defs",
                         position: (706, 35),
                        },
                       ],
                      },
                      position: (704, 16),
                     },
                     position: (702, 11),
                    },
                    position: (699, 9),
                   },
                   position: (698, 20),
                  },
                  position: (698, 15),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "typeMerge",
                    position: (707, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "f'",
                  },
                  definition: LetIn {
                   bindings: [
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "mt1",
                        position: (708, 13),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "t1",
                        position: (708, 19),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "typeMerge",
                          position: (708, 22),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Parentheses {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "elemAt",
                           position: (708, 33),
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "f'",
                             position: (708, 40),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "wrapped",
                               position: (708, 43),
                              },
                             ],
                            },
                            default: None,
                           },
                           Int {
                            value: 0,
                            position: (708, 51),
                           },
                          ],
                         },
                         position: (708, 32),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "functor",
                           position: (708, 54),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    },
                    Binding {
                     from: AttributePath {
                      parts: [
                       Raw {
                        content: "mt2",
                        position: (709, 13),
                       },
                      ],
                     },
                     to: FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "t2",
                        position: (709, 19),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "typeMerge",
                          position: (709, 22),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Parentheses {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "elemAt",
                           position: (709, 33),
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "f'",
                             position: (709, 40),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "wrapped",
                               position: (709, 43),
                              },
                             ],
                            },
                            default: None,
                           },
                           Int {
                            value: 1,
                            position: (709, 51),
                           },
                          ],
                         },
                         position: (709, 32),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "functor",
                           position: (709, 54),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    },
                   ],
                   target: IfThenElse {
                    predicate: BinaryOperation {
                     operator: LogicalAnd,
                     operands: [
                      BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        Parentheses {
                         expression: BinaryOperation {
                          operator: EqualTo,
                          operands: [
                           Variable {
                            identifier: "name",
                            position: (711, 16),
                           },
                           PropertyAccess {
                            expression: Variable {
                             identifier: "f'",
                             position: (711, 24),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "name",
                               position: (711, 27),
                              },
                             ],
                            },
                            default: None,
                           },
                          ],
                          position: (711, 21),
                         },
                         position: (711, 15),
                        },
                        Parentheses {
                         expression: BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           Variable {
                            identifier: "mt1",
                            position: (711, 37),
                           },
                           Variable {
                            identifier: "null",
                            position: (711, 44),
                           },
                          ],
                          position: (711, 41),
                         },
                         position: (711, 36),
                        },
                       ],
                       position: (711, 33),
                      },
                      Parentheses {
                       expression: BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         Variable {
                          identifier: "mt2",
                          position: (711, 54),
                         },
                         Variable {
                          identifier: "null",
                          position: (711, 61),
                         },
                        ],
                        position: (711, 58),
                       },
                       position: (711, 53),
                      },
                     ],
                     position: (711, 50),
                    },
                    then: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "functor",
                       position: (712, 17),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "type",
                         position: (712, 25),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "mt1",
                       position: (712, 30),
                      },
                      Variable {
                       identifier: "mt2",
                       position: (712, 34),
                      },
                     ],
                    },
                    else_: Variable {
                     identifier: "null",
                     position: (713, 17),
                    },
                    position: (711, 12),
                   },
                   position: (708, 9),
                  },
                  position: (707, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "functor",
                    position: (714, 7),
                   },
                  ],
                 },
                 to: BinaryOperation {
                  operator: Update,
                  operands: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "defaultFunctor",
                      position: (714, 18),
                     },
                     arguments: [
                      Variable {
                       identifier: "name",
                       position: (714, 33),
                      },
                     ],
                    },
                    position: (714, 17),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "wrapped",
                         position: (714, 44),
                        },
                       ],
                      },
                      to: List {
                       elements: [
                        Variable {
                         identifier: "t1",
                         position: (714, 56),
                        },
                        Variable {
                         identifier: "t2",
                         position: (714, 59),
                        },
                       ],
                       position: (714, 54),
                      },
                     },
                    ],
                    recursive: false,
                    position: (714, 42),
                   },
                  ],
                  position: (714, 39),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "nestedTypes",
                    position: (715, 7),
                   },
                   Raw {
                    content: "left",
                    position: (715, 19),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "t1",
                  position: (715, 26),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "nestedTypes",
                    position: (716, 7),
                   },
                   Raw {
                    content: "right",
                    position: (716, 19),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "t2",
                  position: (716, 27),
                 },
                },
               ],
               recursive: true,
               position: (694, 35),
              },
             ],
            },
            position: (694, 18),
           },
           position: (694, 14),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "oneOf",
             position: (720, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "ts",
           },
           definition: LetIn {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "head'",
                 position: (722, 9),
                },
               ],
              },
              to: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "ts",
                  position: (722, 20),
                 },
                 List {
                  elements: [],
                  position: (722, 26),
                 },
                ],
                position: (722, 23),
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "throw",
                 position: (722, 34),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "types.oneOf needs to get at least one type in its argument",
                    position: (722, 41),
                   },
                  ],
                  position: (722, 40),
                 },
                ],
               },
               else_: FunctionApplication {
                function: Variable {
                 identifier: "head",
                 position: (722, 106),
                },
                arguments: [
                 Variable {
                  identifier: "ts",
                  position: (722, 111),
                 },
                ],
               },
               position: (722, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "tail'",
                 position: (723, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "tail",
                position: (723, 17),
               },
               arguments: [
                Variable {
                 identifier: "ts",
                 position: (723, 22),
                },
               ],
              },
             },
            ],
            target: FunctionApplication {
             function: Variable {
              identifier: "foldl'",
              position: (724, 10),
             },
             arguments: [
              Variable {
               identifier: "either",
               position: (724, 17),
              },
              Variable {
               identifier: "head'",
               position: (724, 24),
              },
              Variable {
               identifier: "tail'",
               position: (724, 30),
              },
             ],
            },
            position: (721, 7),
           },
           position: (720, 13),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "coercedTo",
             position: (728, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "coercedType",
           },
           definition: Function {
            argument: Simple {
             identifier: "coerceFunc",
            },
            definition: Function {
             argument: Simple {
              identifier: "finalType",
             },
             definition: Assert {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (729, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "assertMsg",
                   position: (729, 18),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Parentheses {
                 expression: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "coercedType",
                     position: (729, 29),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "getSubModules",
                       position: (729, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (729, 58),
                   },
                  ],
                  position: (729, 55),
                 },
                 position: (729, 28),
                },
                String {
                 parts: [
                  Raw {
                   content: "coercedTo: coercedType must not have submodules (it’s a ",
                   position: (730, 10),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "coercedType",
                     position: (731, 11),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "description",
                       position: (731, 23),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: ")",
                   position: (731, 35),
                  },
                 ],
                 position: (730, 9),
                },
               ],
              },
              target: FunctionApplication {
               function: Variable {
                identifier: "mkOptionType",
                position: (732, 7),
               },
               arguments: [
                Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "name",
                      position: (733, 9),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "coercedTo",
                      position: (733, 17),
                     },
                    ],
                    position: (733, 16),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "description",
                      position: (734, 9),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "finalType",
                        position: (734, 26),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "description",
                          position: (734, 36),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: " or ",
                      position: (734, 48),
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "coercedType",
                        position: (734, 54),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "description",
                          position: (734, 66),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: " convertible to it",
                      position: (734, 78),
                     },
                    ],
                    position: (734, 23),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "check",
                      position: (735, 9),
                     },
                    ],
                   },
                   to: Function {
                    argument: Simple {
                     identifier: "x",
                    },
                    definition: BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      Parentheses {
                       expression: BinaryOperation {
                        operator: LogicalAnd,
                        operands: [
                         FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "coercedType",
                            position: (735, 21),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "check",
                              position: (735, 33),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Variable {
                            identifier: "x",
                            position: (735, 39),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "finalType",
                            position: (735, 44),
                           },
                           attribute_path: AttributePath {
                            parts: [
                             Raw {
                              content: "check",
                              position: (735, 54),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           Parentheses {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "coerceFunc",
                              position: (735, 61),
                             },
                             arguments: [
                              Variable {
                               identifier: "x",
                               position: (735, 72),
                              },
                             ],
                            },
                            position: (735, 60),
                           },
                          ],
                         },
                        ],
                        position: (735, 41),
                       },
                       position: (735, 20),
                      },
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "finalType",
                         position: (735, 79),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "check",
                           position: (735, 89),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "x",
                         position: (735, 95),
                        },
                       ],
                      },
                     ],
                     position: (735, 76),
                    },
                    position: (735, 17),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "merge",
                      position: (736, 9),
                     },
                    ],
                   },
                   to: Function {
                    argument: Simple {
                     identifier: "loc",
                    },
                    definition: Function {
                     argument: Simple {
                      identifier: "defs",
                     },
                     definition: LetIn {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "coerceVal",
                           position: (738, 13),
                          },
                         ],
                        },
                        to: Function {
                         argument: Simple {
                          identifier: "val",
                         },
                         definition: IfThenElse {
                          predicate: FunctionApplication {
                           function: PropertyAccess {
                            expression: Variable {
                             identifier: "coercedType",
                             position: (739, 18),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "check",
                               position: (739, 30),
                              },
                             ],
                            },
                            default: None,
                           },
                           arguments: [
                            Variable {
                             identifier: "val",
                             position: (739, 36),
                            },
                           ],
                          },
                          then: FunctionApplication {
                           function: Variable {
                            identifier: "coerceFunc",
                            position: (739, 45),
                           },
                           arguments: [
                            Variable {
                             identifier: "val",
                             position: (739, 56),
                            },
                           ],
                          },
                          else_: Variable {
                           identifier: "val",
                           position: (740, 20),
                          },
                          position: (739, 15),
                         },
                         position: (738, 25),
                        },
                       },
                      ],
                      target: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "finalType",
                         position: (741, 14),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "merge",
                           position: (741, 24),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "loc",
                         position: (741, 30),
                        },
                        Parentheses {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "map",
                           position: (741, 35),
                          },
                          arguments: [
                           Parentheses {
                            expression: Function {
                             argument: Simple {
                              identifier: "def",
                             },
                             definition: BinaryOperation {
                              operator: Update,
                              operands: [
                               Variable {
                                identifier: "def",
                                position: (741, 45),
                               },
                               Map {
                                bindings: [
                                 Binding {
                                  from: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "value",
                                     position: (741, 54),
                                    },
                                   ],
                                  },
                                  to: FunctionApplication {
                                   function: Variable {
                                    identifier: "coerceVal",
                                    position: (741, 62),
                                   },
                                   arguments: [
                                    PropertyAccess {
                                     expression: Variable {
                                      identifier: "def",
                                      position: (741, 72),
                                     },
                                     attribute_path: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "value",
                                        position: (741, 76),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                   ],
                                  },
                                 },
                                ],
                                recursive: false,
                                position: (741, 52),
                               },
                              ],
                              position: (741, 49),
                             },
                             position: (741, 40),
                            },
                            position: (741, 39),
                           },
                           Variable {
                            identifier: "defs",
                            position: (741, 86),
                           },
                          ],
                         },
                         position: (741, 34),
                        },
                       ],
                      },
                      position: (737, 11),
                     },
                     position: (736, 22),
                    },
                    position: (736, 17),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "emptyValue",
                      position: (742, 9),
                     },
                    ],
                   },
                   to: PropertyAccess {
                    expression: Variable {
                     identifier: "finalType",
                     position: (742, 22),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "emptyValue",
                       position: (742, 32),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "getSubOptions",
                      position: (743, 9),
                     },
                    ],
                   },
                   to: PropertyAccess {
                    expression: Variable {
                     identifier: "finalType",
                     position: (743, 25),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "getSubOptions",
                       position: (743, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "getSubModules",
                      position: (744, 9),
                     },
                    ],
                   },
                   to: PropertyAccess {
                    expression: Variable {
                     identifier: "finalType",
                     position: (744, 25),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "getSubModules",
                       position: (744, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "substSubModules",
                      position: (745, 9),
                     },
                    ],
                   },
                   to: Function {
                    argument: Simple {
                     identifier: "m",
                    },
                    definition: FunctionApplication {
                     function: Variable {
                      identifier: "coercedTo",
                      position: (745, 30),
                     },
                     arguments: [
                      Variable {
                       identifier: "coercedType",
                       position: (745, 40),
                      },
                      Variable {
                       identifier: "coerceFunc",
                       position: (745, 52),
                      },
                      Parentheses {
                       expression: FunctionApplication {
                        function: PropertyAccess {
                         expression: Variable {
                          identifier: "finalType",
                          position: (745, 64),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "substSubModules",
                            position: (745, 74),
                           },
                          ],
                         },
                         default: None,
                        },
                        arguments: [
                         Variable {
                          identifier: "m",
                          position: (745, 90),
                         },
                        ],
                       },
                       position: (745, 63),
                      },
                     ],
                    },
                    position: (745, 27),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "typeMerge",
                      position: (746, 9),
                     },
                    ],
                   },
                   to: Function {
                    argument: Simple {
                     identifier: "t1",
                    },
                    definition: Function {
                     argument: Simple {
                      identifier: "t2",
                     },
                     definition: Variable {
                      identifier: "null",
                      position: (746, 29),
                     },
                     position: (746, 25),
                    },
                    position: (746, 21),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "functor",
                      position: (747, 9),
                     },
                    ],
                   },
                   to: BinaryOperation {
                    operator: Update,
                    operands: [
                     Parentheses {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "defaultFunctor",
                        position: (747, 20),
                       },
                       arguments: [
                        Variable {
                         identifier: "name",
                         position: (747, 35),
                        },
                       ],
                      },
                      position: (747, 19),
                     },
                     Map {
                      bindings: [
                       Binding {
                        from: AttributePath {
                         parts: [
                          Raw {
                           content: "wrapped",
                           position: (747, 46),
                          },
                         ],
                        },
                        to: Variable {
                         identifier: "finalType",
                         position: (747, 56),
                        },
                       },
                      ],
                      recursive: false,
                      position: (747, 44),
                     },
                    ],
                    position: (747, 41),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "nestedTypes",
                      position: (748, 9),
                     },
                     Raw {
                      content: "coercedType",
                      position: (748, 21),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "coercedType",
                    position: (748, 35),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "nestedTypes",
                      position: (749, 9),
                     },
                     Raw {
                      content: "finalType",
                      position: (749, 21),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "finalType",
                    position: (749, 33),
                   },
                  },
                 ],
                 recursive: true,
                 position: (732, 20),
                },
               ],
              },
              position: (729, 7),
             },
             position: (728, 42),
            },
            position: (728, 30),
           },
           position: (728, 17),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "addCheck",
             position: (753, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "elemType",
           },
           definition: Function {
            argument: Simple {
             identifier: "check",
            },
            definition: BinaryOperation {
             operator: Update,
             operands: [
              Variable {
               identifier: "elemType",
               position: (753, 33),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "check",
                    position: (753, 47),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "x",
                  },
                  definition: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "elemType",
                       position: (753, 58),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "check",
                         position: (753, 67),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (753, 73),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "check",
                      position: (753, 78),
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (753, 84),
                      },
                     ],
                    },
                   ],
                   position: (753, 75),
                  },
                  position: (753, 55),
                 },
                },
               ],
               recursive: false,
               position: (753, 45),
              },
             ],
             position: (753, 42),
            },
            position: (753, 26),
           },
           position: (753, 16),
          },
         },
        ],
        recursive: true,
        position: (167, 11),
       },
      },
     ],
     recursive: true,
     position: (70, 1),
    },
   },
  ],
  target: BinaryOperation {
   operator: Update,
   operands: [
    Variable {
     identifier: "outer_types",
     position: (758, 4),
    },
    PropertyAccess {
     expression: Variable {
      identifier: "outer_types",
      position: (758, 19),
     },
     attribute_path: AttributePath {
      parts: [
       Raw {
        content: "types",
        position: (758, 31),
       },
      ],
     },
     default: None,
    },
   ],
   position: (758, 16),
  },
  position: (5, 1),
 },
 position: (3, 1),
}