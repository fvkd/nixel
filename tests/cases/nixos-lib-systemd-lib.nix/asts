---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "systemd",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "lndir",
        position: (7, 3),
       },
      ],
     },
     String {
      parts: [
       Expression {
        expression: PropertyAccess {
         expression: Variable {
          identifier: "pkgs",
          position: (7, 14),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "buildPackages",
            position: (7, 19),
           },
           Raw {
            content: "xorg",
            position: (7, 33),
           },
           Raw {
            content: "lndir",
            position: (7, 38),
           },
          ],
         },
         default: None,
        },
       },
       Raw {
        content: "/bin/lndir",
       },
      ],
      position: (7, 11),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "systemd",
        position: (8, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (8, 13),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "package",
         position: (8, 17),
        },
       ],
      },
      default: None,
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "shellEscape",
         position: (11, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "s",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "replaceChars",
         position: (11, 21),
        },
        arguments: [
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "\\",
             },
            ],
            position: (11, 36),
           },
          ],
          position: (11, 34),
         },
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "\\\\",
             },
            ],
            position: (11, 45),
           },
          ],
          position: (11, 43),
         },
         Variable {
          identifier: "s",
          position: (11, 54),
         },
        ],
       },
       position: (11, 17),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mkPathSafeName",
         position: (13, 3),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (13, 20),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "replaceChars",
           position: (13, 24),
          },
         ],
        },
        default: None,
       },
       arguments: [
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "@",
            },
           ],
           position: (13, 38),
          },
          String {
           parts: [
            Raw {
             content: ":",
            },
           ],
           position: (13, 42),
          },
          String {
           parts: [
            Raw {
             content: "\\",
            },
           ],
           position: (13, 46),
          },
          String {
           parts: [
            Raw {
             content: "[",
            },
           ],
           position: (13, 51),
          },
          String {
           parts: [
            Raw {
             content: "]",
            },
           ],
           position: (13, 55),
          },
         ],
         position: (13, 37),
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "-",
            },
           ],
           position: (13, 61),
          },
          String {
           parts: [
            Raw {
             content: "-",
            },
           ],
           position: (13, 65),
          },
          String {
           parts: [
            Raw {
             content: "-",
            },
           ],
           position: (13, 69),
          },
          String {
           parts: [],
           position: (13, 73),
          },
          String {
           parts: [],
           position: (13, 76),
          },
         ],
         position: (13, 60),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "unitNameType",
         position: (16, 3),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "types",
         position: (16, 18),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "strMatching",
           position: (16, 24),
          },
         ],
        },
        default: None,
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "[a-zA-Z0-9@%:_.\\-]+[.](service|socket|device|mount|automount|swap|target|path|timer|scope|slice)",
          },
         ],
         position: (16, 36),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "makeUnit",
         position: (18, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "unit",
        },
        definition: IfThenElse {
         predicate: PropertyAccess {
          expression: Variable {
           identifier: "unit",
           position: (19, 8),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "enable",
             position: (19, 13),
            },
           ],
          },
          default: None,
         },
         then: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (20, 7),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "runCommand",
              position: (20, 12),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "unit-",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "mkPathSafeName",
                position: (20, 31),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (20, 46),
                },
               ],
              },
             },
            ],
            position: (20, 23),
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "preferLocalBuild",
                 position: (21, 11),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (21, 30),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "allowSubstitutes",
                 position: (22, 11),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (22, 30),
              },
             ),
             Inherit {
              from: Some(
               Variable {
                identifier: "unit",
                position: (23, 20),
               },
              ),
              attributes: [
               Raw {
                content: "text",
                position: (23, 26),
               },
              ],
             },
            ],
            recursive: false,
            position: (21, 9),
           },
           String {
            parts: [
             Raw {
              content: "name=",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "shellEscape",
                position: (26, 18),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (26, 30),
                },
               ],
              },
             },
             Raw {
              content: "\nmkdir -p \"$out/$(dirname \"$name\")\"\necho -n \"$text\" > \"$out/$name\"\n",
             },
            ],
            position: (25, 9),
           },
          ],
         },
         else_: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (31, 7),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "runCommand",
              position: (31, 12),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "unit-",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "mkPathSafeName",
                position: (31, 31),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (31, 46),
                },
               ],
              },
             },
             Raw {
              content: "-disabled",
             },
            ],
            position: (31, 23),
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "preferLocalBuild",
                 position: (32, 11),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (32, 30),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "allowSubstitutes",
                 position: (33, 11),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (33, 30),
              },
             ),
            ],
            recursive: false,
            position: (32, 9),
           },
           String {
            parts: [
             Raw {
              content: "name=",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "shellEscape",
                position: (36, 18),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (36, 30),
                },
               ],
              },
             },
             Raw {
              content: "\nmkdir -p \"$out/$(dirname \"$name\")\"\nln -s /dev/null \"$out/$name\"\n",
             },
            ],
            position: (35, 9),
           },
          ],
         },
         position: (19, 5),
        },
        position: (18, 20),
       },
       position: (18, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "boolValues",
         position: (41, 3),
        },
       ],
      },
      List {
       elements: [
        Variable {
         identifier: "true",
         position: (41, 17),
        },
        Variable {
         identifier: "false",
         position: (41, 22),
        },
        String {
         parts: [
          Raw {
           content: "yes",
          },
         ],
         position: (41, 28),
        },
        String {
         parts: [
          Raw {
           content: "no",
          },
         ],
         position: (41, 34),
        },
       ],
       position: (41, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "digits",
         position: (43, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "map",
        position: (43, 12),
       },
       arguments: [
        Variable {
         identifier: "toString",
         position: (43, 16),
        },
        FunctionApplication {
         function: Variable {
          identifier: "range",
          position: (43, 26),
         },
         arguments: [
          Int {
           value: 0,
           position: (43, 32),
          },
          Int {
           value: 9,
           position: (43, 34),
          },
         ],
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "isByteFormat",
         position: (45, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "s",
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "l",
             position: (47, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "reverseList",
            position: (47, 11),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "stringToCharacters",
              position: (47, 24),
             },
             arguments: [
              Variable {
               identifier: "s",
               position: (47, 43),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "suffix",
             position: (48, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (48, 16),
           },
           arguments: [
            Variable {
             identifier: "l",
             position: (48, 21),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "nums",
             position: (49, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "tail",
            position: (49, 14),
           },
           arguments: [
            Variable {
             identifier: "l",
             position: (49, 19),
            },
           ],
          },
         ),
        ],
        target: BinaryOperation {
         operator: LogicalAnd,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "elem",
            position: (50, 8),
           },
           arguments: [
            Variable {
             identifier: "suffix",
             position: (50, 13),
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "K",
                  },
                 ],
                 position: (50, 22),
                },
                String {
                 parts: [
                  Raw {
                   content: "M",
                  },
                 ],
                 position: (50, 26),
                },
                String {
                 parts: [
                  Raw {
                   content: "G",
                  },
                 ],
                 position: (50, 30),
                },
                String {
                 parts: [
                  Raw {
                   content: "T",
                  },
                 ],
                 position: (50, 34),
                },
               ],
               position: (50, 21),
              },
              Variable {
               identifier: "digits",
               position: (50, 42),
              },
             ],
             position: (50, 39),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "all",
            position: (51, 10),
           },
           arguments: [
            Function {
             argument: Simple {
              identifier: "num",
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "elem",
               position: (51, 20),
              },
              arguments: [
               Variable {
                identifier: "num",
                position: (51, 25),
               },
               Variable {
                identifier: "digits",
                position: (51, 29),
               },
              ],
             },
             position: (51, 15),
            },
            Variable {
             identifier: "nums",
             position: (51, 37),
            },
           ],
          },
         ],
         position: (51, 7),
        },
        position: (46, 5),
       },
       position: (45, 18),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertByteFormat",
         position: (53, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "optional",
           position: (54, 5),
          },
          arguments: [
           BinaryOperation {
            operator: LogicalAnd,
            operands: [
             HasProperty {
              expression: Variable {
               identifier: "attr",
               position: (54, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (54, 24),
                 },
                },
               ],
              },
              position: (54, 20),
             },
             UnaryOperation {
              operator: Not,
              operand: FunctionApplication {
               function: Variable {
                identifier: "isByteFormat",
                position: (54, 35),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "attr",
                  position: (54, 48),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (54, 55),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (54, 33),
             },
            ],
            position: (54, 30),
           },
           String {
            parts: [
             Raw {
              content: "Systemd ",
             },
             Expression {
              expression: Variable {
               identifier: "group",
               position: (55, 18),
              },
             },
             Raw {
              content: " field `",
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (55, 34),
              },
             },
             Raw {
              content: "' must be in byte format [0-9]+[KMGT].",
             },
            ],
            position: (55, 7),
           },
          ],
         },
         position: (53, 35),
        },
        position: (53, 28),
       },
       position: (53, 22),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "hexChars",
         position: (57, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "stringToCharacters",
        position: (57, 14),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "0123456789abcdefABCDEF",
          },
         ],
         position: (57, 33),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "isMacAddress",
         position: (59, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "s",
       },
       definition: BinaryOperation {
        operator: LogicalAnd,
        operands: [
         BinaryOperation {
          operator: EqualTo,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "stringLength",
             position: (59, 21),
            },
            arguments: [
             Variable {
              identifier: "s",
              position: (59, 34),
             },
            ],
           },
           Int {
            value: 17,
            position: (59, 39),
           },
          ],
          position: (59, 36),
         },
         FunctionApplication {
          function: Variable {
           identifier: "flip",
           position: (60, 8),
          },
          arguments: [
           Variable {
            identifier: "all",
            position: (60, 13),
           },
           FunctionApplication {
            function: Variable {
             identifier: "splitString",
             position: (60, 18),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: ":",
               },
              ],
              position: (60, 30),
             },
             Variable {
              identifier: "s",
              position: (60, 34),
             },
            ],
           },
           Function {
            argument: Simple {
             identifier: "bytes",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "all",
              position: (61, 7),
             },
             arguments: [
              Function {
               argument: Simple {
                identifier: "byte",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "elem",
                 position: (61, 18),
                },
                arguments: [
                 Variable {
                  identifier: "byte",
                  position: (61, 23),
                 },
                 Variable {
                  identifier: "hexChars",
                  position: (61, 28),
                 },
                ],
               },
               position: (61, 12),
              },
              FunctionApplication {
               function: Variable {
                identifier: "stringToCharacters",
                position: (61, 39),
               },
               arguments: [
                Variable {
                 identifier: "bytes",
                 position: (61, 58),
                },
               ],
              },
             ],
            },
            position: (60, 38),
           },
          ],
         },
        ],
        position: (60, 5),
       },
       position: (59, 18),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertMacAddress",
         position: (64, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "optional",
           position: (65, 5),
          },
          arguments: [
           BinaryOperation {
            operator: LogicalAnd,
            operands: [
             HasProperty {
              expression: Variable {
               identifier: "attr",
               position: (65, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (65, 24),
                 },
                },
               ],
              },
              position: (65, 20),
             },
             UnaryOperation {
              operator: Not,
              operand: FunctionApplication {
               function: Variable {
                identifier: "isMacAddress",
                position: (65, 35),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "attr",
                  position: (65, 48),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (65, 55),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (65, 33),
             },
            ],
            position: (65, 30),
           },
           String {
            parts: [
             Raw {
              content: "Systemd ",
             },
             Expression {
              expression: Variable {
               identifier: "group",
               position: (66, 18),
              },
             },
             Raw {
              content: " field `",
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (66, 34),
              },
             },
             Raw {
              content: "' must be a valid mac address.",
             },
            ],
            position: (66, 7),
           },
          ],
         },
         position: (64, 35),
        },
        position: (64, 28),
       },
       position: (64, 22),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "isPort",
         position: (68, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "i",
       },
       definition: BinaryOperation {
        operator: LogicalAnd,
        operands: [
         BinaryOperation {
          operator: GreaterThanOrEqualTo,
          operands: [
           Variable {
            identifier: "i",
            position: (68, 15),
           },
           Int {
            value: 0,
            position: (68, 20),
           },
          ],
          position: (68, 17),
         },
         BinaryOperation {
          operator: LessThanOrEqualTo,
          operands: [
           Variable {
            identifier: "i",
            position: (68, 25),
           },
           Int {
            value: 65535,
            position: (68, 30),
           },
          ],
          position: (68, 27),
         },
        ],
        position: (68, 22),
       },
       position: (68, 12),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertPort",
         position: (70, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "optional",
           position: (71, 5),
          },
          arguments: [
           BinaryOperation {
            operator: LogicalAnd,
            operands: [
             HasProperty {
              expression: Variable {
               identifier: "attr",
               position: (71, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (71, 24),
                 },
                },
               ],
              },
              position: (71, 20),
             },
             UnaryOperation {
              operator: Not,
              operand: FunctionApplication {
               function: Variable {
                identifier: "isPort",
                position: (71, 35),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "attr",
                  position: (71, 42),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (71, 49),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (71, 33),
             },
            ],
            position: (71, 30),
           },
           String {
            parts: [
             Raw {
              content: "Error on the systemd ",
             },
             Expression {
              expression: Variable {
               identifier: "group",
               position: (72, 31),
              },
             },
             Raw {
              content: " field `",
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (72, 47),
              },
             },
             Raw {
              content: "': ",
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "attr",
                position: (72, 57),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "name",
                  position: (72, 62),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: " is not a valid port number.",
             },
            ],
            position: (72, 7),
           },
          ],
         },
         position: (70, 29),
        },
        position: (70, 22),
       },
       position: (70, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertValueOneOf",
         position: (74, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "values",
        },
        definition: Function {
         argument: Simple {
          identifier: "group",
         },
         definition: Function {
          argument: Simple {
           identifier: "attr",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "optional",
            position: (75, 5),
           },
           arguments: [
            BinaryOperation {
             operator: LogicalAnd,
             operands: [
              HasProperty {
               expression: Variable {
                identifier: "attr",
                position: (75, 15),
               },
               attribute_path: AttributePath {
                attributes: [
                 Expression {
                  expression: Variable {
                   identifier: "name",
                   position: (75, 24),
                  },
                 },
                ],
               },
               position: (75, 20),
              },
              UnaryOperation {
               operator: Not,
               operand: FunctionApplication {
                function: Variable {
                 identifier: "elem",
                 position: (75, 34),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "attr",
                   position: (75, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (75, 46),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                 Variable {
                  identifier: "values",
                  position: (75, 52),
                 },
                ],
               },
               position: (75, 33),
              },
             ],
             position: (75, 30),
            },
            String {
             parts: [
              Raw {
               content: "Systemd ",
              },
              Expression {
               expression: Variable {
                identifier: "group",
                position: (76, 18),
               },
              },
              Raw {
               content: " field `",
              },
              Expression {
               expression: Variable {
                identifier: "name",
                position: (76, 34),
               },
              },
              Raw {
               content: "' cannot have value `",
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (76, 62),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "attr",
                   position: (76, 71),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (76, 78),
                     },
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: "'.",
              },
             ],
             position: (76, 7),
            },
           ],
          },
          position: (74, 43),
         },
         position: (74, 36),
        },
        position: (74, 28),
       },
       position: (74, 22),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertHasField",
         position: (78, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "optional",
           position: (79, 5),
          },
          arguments: [
           UnaryOperation {
            operator: Not,
            operand: HasProperty {
             expression: Variable {
              identifier: "attr",
              position: (79, 17),
             },
             attribute_path: AttributePath {
              attributes: [
               Expression {
                expression: Variable {
                 identifier: "name",
                 position: (79, 26),
                },
               },
              ],
             },
             position: (79, 22),
            },
            position: (79, 15),
           },
           String {
            parts: [
             Raw {
              content: "Systemd ",
             },
             Expression {
              expression: Variable {
               identifier: "group",
               position: (80, 18),
              },
             },
             Raw {
              content: " field `",
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (80, 34),
              },
             },
             Raw {
              content: "' must exist.",
             },
            ],
            position: (80, 7),
           },
          ],
         },
         position: (78, 33),
        },
        position: (78, 26),
       },
       position: (78, 20),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertRange",
         position: (82, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "min",
        },
        definition: Function {
         argument: Simple {
          identifier: "max",
         },
         definition: Function {
          argument: Simple {
           identifier: "group",
          },
          definition: Function {
           argument: Simple {
            identifier: "attr",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "optional",
             position: (83, 5),
            },
            arguments: [
             BinaryOperation {
              operator: LogicalAnd,
              operands: [
               HasProperty {
                expression: Variable {
                 identifier: "attr",
                 position: (83, 15),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "name",
                    position: (83, 24),
                   },
                  },
                 ],
                },
                position: (83, 20),
               },
               UnaryOperation {
                operator: Not,
                operand: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: LessThanOrEqualTo,
                   operands: [
                    Variable {
                     identifier: "min",
                     position: (83, 35),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "attr",
                      position: (83, 42),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (83, 49),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (83, 39),
                  },
                  BinaryOperation {
                   operator: GreaterThanOrEqualTo,
                   operands: [
                    Variable {
                     identifier: "max",
                     position: (83, 58),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "attr",
                      position: (83, 65),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (83, 72),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (83, 62),
                  },
                 ],
                 position: (83, 55),
                },
                position: (83, 33),
               },
              ],
              position: (83, 30),
             },
             String {
              parts: [
               Raw {
                content: "Systemd ",
               },
               Expression {
                expression: Variable {
                 identifier: "group",
                 position: (84, 18),
                },
               },
               Raw {
                content: " field `",
               },
               Expression {
                expression: Variable {
                 identifier: "name",
                 position: (84, 34),
                },
               },
               Raw {
                content: "' is outside the range [",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "toString",
                  position: (84, 65),
                 },
                 arguments: [
                  Variable {
                   identifier: "min",
                   position: (84, 74),
                  },
                 ],
                },
               },
               Raw {
                content: ",",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "toString",
                  position: (84, 81),
                 },
                 arguments: [
                  Variable {
                   identifier: "max",
                   position: (84, 90),
                  },
                 ],
                },
               },
               Raw {
                content: "]",
               },
              ],
              position: (84, 7),
             },
            ],
           },
           position: (82, 40),
          },
          position: (82, 33),
         },
         position: (82, 28),
        },
        position: (82, 23),
       },
       position: (82, 17),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertMinimum",
         position: (86, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "min",
        },
        definition: Function {
         argument: Simple {
          identifier: "group",
         },
         definition: Function {
          argument: Simple {
           identifier: "attr",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "optional",
            position: (87, 5),
           },
           arguments: [
            BinaryOperation {
             operator: LogicalAnd,
             operands: [
              HasProperty {
               expression: Variable {
                identifier: "attr",
                position: (87, 15),
               },
               attribute_path: AttributePath {
                attributes: [
                 Expression {
                  expression: Variable {
                   identifier: "name",
                   position: (87, 24),
                  },
                 },
                ],
               },
               position: (87, 20),
              },
              BinaryOperation {
               operator: LessThan,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "attr",
                  position: (87, 33),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (87, 40),
                    },
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "min",
                 position: (87, 48),
                },
               ],
               position: (87, 46),
              },
             ],
             position: (87, 30),
            },
            String {
             parts: [
              Raw {
               content: "Systemd ",
              },
              Expression {
               expression: Variable {
                identifier: "group",
                position: (88, 18),
               },
              },
              Raw {
               content: " field `",
              },
              Expression {
               expression: Variable {
                identifier: "name",
                position: (88, 34),
               },
              },
              Raw {
               content: "' must be greater than or equal to ",
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (88, 76),
                },
                arguments: [
                 Variable {
                  identifier: "min",
                  position: (88, 85),
                 },
                ],
               },
              },
             ],
             position: (88, 7),
            },
           ],
          },
          position: (86, 37),
         },
         position: (86, 30),
        },
        position: (86, 25),
       },
       position: (86, 19),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertOnlyFields",
         position: (90, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "fields",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "badFields",
               position: (91, 9),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "filter",
              position: (91, 21),
             },
             arguments: [
              Function {
               argument: Simple {
                identifier: "name",
               },
               definition: UnaryOperation {
                operator: Not,
                operand: FunctionApplication {
                 function: Variable {
                  identifier: "elem",
                  position: (91, 37),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (91, 42),
                  },
                  Variable {
                   identifier: "fields",
                   position: (91, 47),
                  },
                 ],
                },
                position: (91, 35),
               },
               position: (91, 29),
              },
              FunctionApplication {
               function: Variable {
                identifier: "attrNames",
                position: (91, 56),
               },
               arguments: [
                Variable {
                 identifier: "attr",
                 position: (91, 66),
                },
               ],
              },
             ],
            },
           ),
          ],
          target: FunctionApplication {
           function: Variable {
            identifier: "optional",
            position: (92, 5),
           },
           arguments: [
            BinaryOperation {
             operator: NotEqualTo,
             operands: [
              Variable {
               identifier: "badFields",
               position: (92, 15),
              },
              List {
               elements: [],
               position: (92, 28),
              },
             ],
             position: (92, 25),
            },
            String {
             parts: [
              Raw {
               content: "Systemd ",
              },
              Expression {
               expression: Variable {
                identifier: "group",
                position: (93, 18),
               },
              },
              Raw {
               content: " has extra fields [",
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (93, 45),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: " ",
                   },
                  ],
                  position: (93, 62),
                 },
                 Variable {
                  identifier: "badFields",
                  position: (93, 66),
                 },
                ],
               },
              },
              Raw {
               content: "].",
              },
             ],
             position: (93, 7),
            },
           ],
          },
          position: (91, 5),
         },
         position: (90, 37),
        },
        position: (90, 30),
       },
       position: (90, 22),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "assertInt",
         position: (95, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "group",
        },
        definition: Function {
         argument: Simple {
          identifier: "attr",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "optional",
           position: (96, 5),
          },
          arguments: [
           BinaryOperation {
            operator: LogicalAnd,
            operands: [
             HasProperty {
              expression: Variable {
               identifier: "attr",
               position: (96, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (96, 24),
                 },
                },
               ],
              },
              position: (96, 20),
             },
             UnaryOperation {
              operator: Not,
              operand: FunctionApplication {
               function: Variable {
                identifier: "isInt",
                position: (96, 34),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "attr",
                  position: (96, 40),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (96, 47),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (96, 33),
             },
            ],
            position: (96, 30),
           },
           String {
            parts: [
             Raw {
              content: "Systemd ",
             },
             Expression {
              expression: Variable {
               identifier: "group",
               position: (97, 18),
              },
             },
             Raw {
              content: " field `",
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (97, 34),
              },
             },
             Raw {
              content: "' is not an integer",
             },
            ],
            position: (97, 7),
           },
          ],
         },
         position: (95, 28),
        },
        position: (95, 21),
       },
       position: (95, 15),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "checkUnitConfig",
         position: (99, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "group",
       },
       definition: Function {
        argument: Simple {
         identifier: "checks",
        },
        definition: Function {
         argument: Simple {
          identifier: "attrs",
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "defs",
               position: (103, 5),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mapAttrs",
              position: (103, 12),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "const",
                position: (103, 22),
               },
               arguments: [
                Function {
                 argument: Simple {
                  identifier: "v",
                 },
                 definition: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "v",
                      position: (104, 10),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "_type",
                        position: (104, 12),
                       },
                      ],
                     },
                     default: Some(
                      String {
                       parts: [],
                       position: (104, 21),
                      },
                     ),
                    },
                    String {
                     parts: [
                      Raw {
                       content: "override",
                      },
                     ],
                     position: (104, 27),
                    },
                   ],
                   position: (104, 24),
                  },
                  then: PropertyAccess {
                   expression: Variable {
                    identifier: "v",
                    position: (104, 43),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "content",
                      position: (104, 45),
                     },
                    ],
                   },
                   default: None,
                  },
                  else_: IfThenElse {
                   predicate: BinaryOperation {
                    operator: EqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "v",
                       position: (105, 15),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "_type",
                         position: (105, 17),
                        },
                       ],
                      },
                      default: Some(
                       String {
                        parts: [],
                        position: (105, 26),
                       },
                      ),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "if",
                       },
                      ],
                      position: (105, 32),
                     },
                    ],
                    position: (105, 29),
                   },
                   then: PropertyAccess {
                    expression: Variable {
                     identifier: "v",
                     position: (105, 42),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "content",
                       position: (105, 44),
                      },
                     ],
                    },
                    default: None,
                   },
                   else_: Variable {
                    identifier: "v",
                    position: (106, 12),
                   },
                   position: (105, 12),
                  },
                  position: (104, 7),
                 },
                 position: (103, 29),
                },
               ],
              },
              Variable {
               identifier: "attrs",
               position: (107, 8),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "errors",
               position: (108, 5),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "concatMap",
              position: (108, 14),
             },
             arguments: [
              Function {
               argument: Simple {
                identifier: "c",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "c",
                 position: (108, 28),
                },
                arguments: [
                 Variable {
                  identifier: "group",
                  position: (108, 30),
                 },
                 Variable {
                  identifier: "defs",
                  position: (108, 36),
                 },
                ],
               },
               position: (108, 25),
              },
              Variable {
               identifier: "checks",
               position: (108, 42),
              },
             ],
            },
           ),
          ],
          target: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "errors",
              position: (109, 9),
             },
             List {
              elements: [],
              position: (109, 19),
             },
            ],
            position: (109, 16),
           },
           then: Variable {
            identifier: "true",
            position: (109, 27),
           },
           else_: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (110, 11),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "trace",
                position: (110, 20),
               },
              ],
             },
             default: None,
            },
            arguments: [
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (110, 27),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                 },
                ],
                position: (110, 44),
               },
               Variable {
                identifier: "errors",
                position: (110, 49),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (110, 57),
             },
            ],
           },
           position: (109, 6),
          },
          position: (99, 43),
         },
         position: (99, 36),
        },
        position: (99, 28),
       },
       position: (99, 21),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "toOption",
         position: (112, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "x",
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "x",
           position: (113, 8),
          },
          Variable {
           identifier: "true",
           position: (113, 13),
          },
         ],
         position: (113, 10),
        },
        then: String {
         parts: [
          Raw {
           content: "true",
          },
         ],
         position: (113, 23),
        },
        else_: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "x",
            position: (114, 13),
           },
           Variable {
            identifier: "false",
            position: (114, 18),
           },
          ],
          position: (114, 15),
         },
         then: String {
          parts: [
           Raw {
            content: "false",
           },
          ],
          position: (114, 29),
         },
         else_: FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (115, 10),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (115, 19),
           },
          ],
         },
         position: (114, 10),
        },
        position: (113, 5),
       },
       position: (112, 14),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "attrsToSection",
         position: (117, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "as",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "concatStrings",
         position: (118, 5),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "concatLists",
           position: (118, 20),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (118, 33),
            },
            arguments: [
             Function {
              argument: Simple {
               identifier: "name",
              },
              definition: Function {
               argument: Simple {
                identifier: "value",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "map",
                 position: (119, 7),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "x",
                  },
                  definition: String {
                   parts: [
                    Raw {
                     content: "",
                    },
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (120, 13),
                     },
                    },
                    Raw {
                     content: "=",
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "toOption",
                       position: (120, 21),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (120, 30),
                       },
                      ],
                     },
                    },
                    Raw {
                     content: "\n",
                    },
                   ],
                   position: (119, 15),
                  },
                  position: (119, 12),
                 },
                 IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "isList",
                    position: (122, 13),
                   },
                   arguments: [
                    Variable {
                     identifier: "value",
                     position: (122, 20),
                    },
                   ],
                  },
                  then: Variable {
                   identifier: "value",
                   position: (122, 31),
                  },
                  else_: List {
                   elements: [
                    Variable {
                     identifier: "value",
                     position: (122, 43),
                    },
                   ],
                   position: (122, 42),
                  },
                  position: (122, 10),
                 },
                ],
               },
               position: (118, 55),
              },
              position: (118, 49),
             },
             Variable {
              identifier: "as",
              position: (123, 9),
             },
            ],
           },
          ],
         },
        ],
       },
       position: (117, 20),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "generateUnits",
         position: (125, 3),
        },
       ],
      },
      Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "package",
          default: Some(
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (125, 123),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "package",
               position: (125, 127),
              },
             ],
            },
            default: None,
           },
          ),
         },
         DestructuredArgument {
          identifier: "packages",
          default: Some(
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (125, 99),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "packages",
               position: (125, 103),
              },
             ],
            },
            default: None,
           },
          ),
         },
         DestructuredArgument {
          identifier: "upstreamWants",
          default: None,
         },
         DestructuredArgument {
          identifier: "upstreamUnits",
          default: None,
         },
         DestructuredArgument {
          identifier: "units",
          default: None,
         },
         DestructuredArgument {
          identifier: "type",
          default: None,
         },
         DestructuredArgument {
          identifier: "allowCollisions",
          default: Some(
           Variable {
            identifier: "true",
            position: (125, 39),
           },
          ),
         },
        ],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "typeDir",
             position: (127, 7),
            },
           ],
          },
          PropertyAccess {
           expression: Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "system",
                 position: (128, 9),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "system",
                },
               ],
               position: (128, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "initrd",
                 position: (129, 9),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "system",
                },
               ],
               position: (129, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "user",
                 position: (130, 9),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "user",
                },
               ],
               position: (130, 16),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "nspawn",
                 position: (131, 9),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "nspawn",
                },
               ],
               position: (131, 18),
              },
             ),
            ],
            recursive: false,
            position: (127, 18),
           },
           attribute_path: AttributePath {
            attributes: [
             Expression {
              expression: Variable {
               identifier: "type",
               position: (132, 12),
              },
             },
            ],
           },
           default: None,
          },
         ),
        ],
        target: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "pkgs",
           position: (133, 8),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "runCommand",
             position: (133, 13),
            },
           ],
          },
          default: None,
         },
         arguments: [
          String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "type",
              position: (133, 27),
             },
            },
            Raw {
             content: "-units",
            },
           ],
           position: (133, 24),
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "preferLocalBuild",
                position: (134, 9),
               },
              ],
             },
             Variable {
              identifier: "true",
              position: (134, 28),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "allowSubstitutes",
                position: (135, 9),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (135, 28),
             },
            ),
           ],
           recursive: false,
           position: (134, 7),
          },
          String {
           parts: [
            Raw {
             content: "mkdir -p $out\n\n# Copy the upstream systemd units we're interested in.\nfor i in ",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "toString",
               position: (140, 18),
              },
              arguments: [
               Variable {
                identifier: "upstreamUnits",
                position: (140, 27),
               },
              ],
             },
            },
            Raw {
             content: "; do\n  fn=",
            },
            Expression {
             expression: Variable {
              identifier: "package",
              position: (141, 14),
             },
            },
            Raw {
             content: "/example/systemd/",
            },
            Expression {
             expression: Variable {
              identifier: "typeDir",
              position: (141, 41),
             },
            },
            Raw {
             content: "/$i\n  if ! [ -e $fn ]; then echo \"missing $fn\"; false; fi\n  if [ -L $fn ]; then\n    target=\"$(readlink \"$fn\")\"\n    if [ ",
            },
            Raw {
             content: "$",
            },
            Raw {
             content: "{target:0:3} = ../ ]; then\n      ln -s \"$(readlink -f \"$fn\")\" $out/\n    else\n      cp -pd $fn $out/\n    fi\n  else\n    ln -s $fn $out/\n  fi\ndone\n\n# Copy .wants links, but only those that point to units that\n# we're interested in.\nfor i in ",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "toString",
               position: (157, 18),
              },
              arguments: [
               Variable {
                identifier: "upstreamWants",
                position: (157, 27),
               },
              ],
             },
            },
            Raw {
             content: "; do\n  fn=",
            },
            Expression {
             expression: Variable {
              identifier: "package",
              position: (158, 14),
             },
            },
            Raw {
             content: "/example/systemd/",
            },
            Expression {
             expression: Variable {
              identifier: "typeDir",
              position: (158, 41),
             },
            },
            Raw {
             content: "/$i\n  if ! [ -e $fn ]; then echo \"missing $fn\"; false; fi\n  x=$out/$(basename $fn)\n  mkdir $x\n  for i in $fn/*; do\n    y=$x/$(basename $i)\n    cp -pd $i $y\n    if ! [ -e $y ]; then rm $y; fi\n  done\ndone\n\n# Symlink all units provided listed in systemd.packages.\npackages=\"",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "toString",
               position: (170, 19),
              },
              arguments: [
               Variable {
                identifier: "packages",
                position: (170, 28),
               },
              ],
             },
            },
            Raw {
             content: "\"\n\n# Filter duplicate directories\ndeclare -A unique_packages\nfor k in $packages ; do unique_packages[$k]=1 ; done\n\nfor i in ",
            },
            Raw {
             content: "$",
            },
            Raw {
             content: "{!unique_packages[@]}; do\n  for fn in $i/etc/systemd/",
            },
            Expression {
             expression: Variable {
              identifier: "typeDir",
              position: (177, 36),
             },
            },
            Raw {
             content: "/* $i/lib/systemd/",
            },
            Expression {
             expression: Variable {
              identifier: "typeDir",
              position: (177, 64),
             },
            },
            Raw {
             content: "/*; do\n    if ! [[ \"$fn\" =~ .wants$ ]]; then\n      if [[ -d \"$fn\" ]]; then\n        targetDir=\"$out/$(basename \"$fn\")\"\n        mkdir -p \"$targetDir\"\n        ",
            },
            Expression {
             expression: Variable {
              identifier: "lndir",
              position: (182, 17),
             },
            },
            Raw {
             content: " \"$fn\" \"$targetDir\"\n      else\n        ln -s $fn $out/\n      fi\n    fi\n  done\ndone\n\n# Symlink all units defined by systemd.units. If these are also\n# provided by systemd or systemd.packages, then add them as\n# <unit-name>.d/overrides.conf, which makes them extend the\n# upstream unit.\nfor i in ",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "toString",
               position: (194, 18),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (194, 28),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "n",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "v",
                   },
                   definition: PropertyAccess {
                    expression: Variable {
                     identifier: "v",
                     position: (194, 50),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "unit",
                       position: (194, 52),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (194, 47),
                  },
                  position: (194, 44),
                 },
                 Variable {
                  identifier: "units",
                  position: (194, 58),
                 },
                ],
               },
              ],
             },
            },
            Raw {
             content: "; do\n  fn=$(basename $i/*)\n  if [ -e $out/$fn ]; then\n    if [ \"$(readlink -f $i/$fn)\" = /dev/null ]; then\n      ln -sfn /dev/null $out/$fn\n    else\n      ",
            },
            Expression {
             expression: IfThenElse {
              predicate: Variable {
               identifier: "allowCollisions",
               position: (200, 18),
              },
              then: String {
               parts: [
                Raw {
                 content: "mkdir -p $out/$fn.d\nln -s $i/$fn $out/$fn.d/overrides.conf\n",
                },
               ],
               position: (200, 39),
              },
              else_: String {
               parts: [
                Raw {
                 content: "echo \"Found multiple derivations configuring $fn!\"\nexit 1\n",
                },
               ],
               position: (203, 21),
              },
              position: (200, 15),
             },
            },
            Raw {
             content: "\n    fi\n else\n    ln -fs $i/$fn $out/\n  fi\ndone\n\n# Create service aliases from aliases option.\n",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "concatStrings",
               position: (214, 9),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (214, 24),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "name",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "unit",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "concatMapStrings",
                     position: (215, 11),
                    },
                    arguments: [
                     Function {
                      argument: Simple {
                       identifier: "name2",
                      },
                      definition: String {
                       parts: [
                        Raw {
                         content: "ln -sfn ",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name",
                          position: (216, 24),
                         },
                        },
                        Raw {
                         content: "' $out/",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name2",
                          position: (216, 39),
                         },
                        },
                        Raw {
                         content: "'\n",
                        },
                       ],
                       position: (215, 36),
                      },
                      position: (215, 29),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "unit",
                       position: (217, 15),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "aliases",
                         position: (217, 20),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (214, 46),
                  },
                  position: (214, 40),
                 },
                 Variable {
                  identifier: "units",
                  position: (217, 29),
                 },
                ],
               },
              ],
             },
            },
            Raw {
             content: "\n\n# Create .wants and .requires symlinks from the wantedBy and\n# requiredBy options.\n",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "concatStrings",
               position: (221, 9),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (221, 24),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "name",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "unit",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "concatMapStrings",
                     position: (222, 11),
                    },
                    arguments: [
                     Function {
                      argument: Simple {
                       identifier: "name2",
                      },
                      definition: String {
                       parts: [
                        Raw {
                         content: "mkdir -p $out/",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name2",
                          position: (223, 30),
                         },
                        },
                        Raw {
                         content: ".wants'\nln -sfn '../",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name",
                          position: (224, 27),
                         },
                        },
                        Raw {
                         content: "' $out/",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name2",
                          position: (224, 42),
                         },
                        },
                        Raw {
                         content: ".wants'/\n",
                        },
                       ],
                       position: (222, 36),
                      },
                      position: (222, 29),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "unit",
                       position: (225, 15),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "wantedBy",
                         position: (225, 20),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (221, 46),
                  },
                  position: (221, 40),
                 },
                 Variable {
                  identifier: "units",
                  position: (225, 30),
                 },
                ],
               },
              ],
             },
            },
            Raw {
             content: "\n\n",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "concatStrings",
               position: (227, 9),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (227, 24),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "name",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "unit",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "concatMapStrings",
                     position: (228, 11),
                    },
                    arguments: [
                     Function {
                      argument: Simple {
                       identifier: "name2",
                      },
                      definition: String {
                       parts: [
                        Raw {
                         content: "mkdir -p $out/",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name2",
                          position: (229, 30),
                         },
                        },
                        Raw {
                         content: ".requires'\nln -sfn '../",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name",
                          position: (230, 27),
                         },
                        },
                        Raw {
                         content: "' $out/",
                        },
                        Raw {
                         content: "'",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "name2",
                          position: (230, 42),
                         },
                        },
                        Raw {
                         content: ".requires'/\n",
                        },
                       ],
                       position: (228, 36),
                      },
                      position: (228, 29),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "unit",
                       position: (231, 15),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "requiredBy",
                         position: (231, 20),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (227, 46),
                  },
                  position: (227, 40),
                 },
                 Variable {
                  identifier: "units",
                  position: (231, 32),
                 },
                ],
               },
              ],
             },
            },
            Raw {
             content: "\n\n",
            },
            Expression {
             expression: FunctionApplication {
              function: Variable {
               identifier: "optionalString",
               position: (233, 9),
              },
              arguments: [
               BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "type",
                  position: (233, 25),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "system",
                   },
                  ],
                  position: (233, 33),
                 },
                ],
                position: (233, 30),
               },
               String {
                parts: [
                 Raw {
                  content: "# Stupid misc. symlinks.\nln -s ",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (235, 17),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "defaultUnit",
                      position: (235, 21),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: " $out/default.target\nln -s ",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (236, 17),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "ctrlAltDelUnit",
                      position: (236, 21),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: " $out/ctrl-alt-del.target\nln -s rescue.target $out/kbrequest.target\n\nmkdir -p $out/getty.target.wants/\nln -s ../autovt@tty1.service $out/getty.target.wants/\n\nln -s ../remote-fs.target $out/multi-user.target.wants/\n",
                 },
                ],
                position: (233, 43),
               },
              ],
             },
            },
            Raw {
             content: "\n",
            },
           ],
           position: (136, 9),
          },
         ],
        },
        position: (126, 5),
       },
       position: (125, 19),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "makeJobScript",
         position: (246, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "text",
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "scriptName",
              position: (248, 7),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "replaceChars",
             position: (248, 20),
            },
            arguments: [
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "\\",
                 },
                ],
                position: (248, 35),
               },
               String {
                parts: [
                 Raw {
                  content: "@",
                 },
                ],
                position: (248, 40),
               },
              ],
              position: (248, 33),
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "-",
                 },
                ],
                position: (248, 48),
               },
               String {
                parts: [
                 Raw {
                  content: "_",
                 },
                ],
                position: (248, 52),
               },
              ],
              position: (248, 46),
             },
             FunctionApplication {
              function: Variable {
               identifier: "shellEscape",
               position: (248, 59),
              },
              arguments: [
               Variable {
                identifier: "name",
                position: (248, 71),
               },
              ],
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "out",
              position: (249, 7),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (249, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "writeShellScriptBin",
                  position: (249, 19),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "scriptName",
                position: (249, 39),
               },
               String {
                parts: [
                 Raw {
                  content: "set -e\n",
                 },
                 Expression {
                  expression: Variable {
                   identifier: "text",
                   position: (251, 11),
                  },
                 },
                 Raw {
                  content: "\n",
                 },
                ],
                position: (249, 50),
               },
              ],
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "overrideAttrs",
                position: (252, 11),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Function {
              argument: Simple {
               identifier: "_",
              },
              definition: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "name",
                    position: (255, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "unit-script-",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "scriptName",
                     position: (255, 31),
                    },
                   },
                  ],
                  position: (255, 16),
                 },
                ),
               ],
               recursive: false,
               position: (252, 29),
              },
              position: (252, 26),
             },
            ],
           },
          ),
         ],
         target: String {
          parts: [
           Expression {
            expression: Variable {
             identifier: "out",
             position: (257, 11),
            },
           },
           Raw {
            content: "/bin/",
           },
           Expression {
            expression: Variable {
             identifier: "scriptName",
             position: (257, 22),
            },
           },
          ],
          position: (257, 8),
         },
         position: (247, 5),
        },
        position: (246, 25),
       },
       position: (246, 19),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "unitConfig",
         position: (259, 3),
        },
       ],
      },
      Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "options",
          default: None,
         },
         DestructuredArgument {
          identifier: "config",
          default: None,
         },
        ],
        ellipsis: true,
       },
       definition: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "config",
             position: (260, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "unitConfig",
                position: (261, 7),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "optionalAttrs",
                 position: (262, 9),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "config",
                     position: (262, 24),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "requires",
                       position: (262, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                   List {
                    elements: [],
                    position: (262, 43),
                   },
                  ],
                  position: (262, 40),
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "Requires",
                       position: (263, 13),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (263, 24),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (263, 33),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "requires",
                          position: (263, 40),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                   ),
                  ],
                  recursive: false,
                  position: (263, 11),
                 },
                ],
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (264, 12),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "config",
                       position: (264, 27),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "wants",
                         position: (264, 34),
                        },
                       ],
                      },
                      default: None,
                     },
                     List {
                      elements: [],
                      position: (264, 43),
                     },
                    ],
                    position: (264, 40),
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Wants",
                         position: (265, 13),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (265, 21),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "config",
                          position: (265, 30),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "wants",
                            position: (265, 37),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                    position: (265, 11),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Update,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "optionalAttrs",
                     position: (266, 12),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "config",
                         position: (266, 27),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "after",
                           position: (266, 34),
                          },
                         ],
                        },
                        default: None,
                       },
                       List {
                        elements: [],
                        position: (266, 43),
                       },
                      ],
                      position: (266, 40),
                     },
                     Map {
                      bindings: [
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "After",
                           position: (267, 13),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "toString",
                          position: (267, 21),
                         },
                         arguments: [
                          PropertyAccess {
                           expression: Variable {
                            identifier: "config",
                            position: (267, 30),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "after",
                              position: (267, 37),
                             },
                            ],
                           },
                           default: None,
                          },
                         ],
                        },
                       ),
                      ],
                      recursive: false,
                      position: (267, 11),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: Update,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "optionalAttrs",
                       position: (268, 12),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "config",
                           position: (268, 27),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "before",
                             position: (268, 34),
                            },
                           ],
                          },
                          default: None,
                         },
                         List {
                          elements: [],
                          position: (268, 44),
                         },
                        ],
                        position: (268, 41),
                       },
                       Map {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "Before",
                             position: (269, 13),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "toString",
                            position: (269, 22),
                           },
                           arguments: [
                            PropertyAccess {
                             expression: Variable {
                              identifier: "config",
                              position: (269, 31),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "before",
                                position: (269, 38),
                               },
                              ],
                             },
                             default: None,
                            },
                           ],
                          },
                         ),
                        ],
                        recursive: false,
                        position: (269, 11),
                       },
                      ],
                     },
                     BinaryOperation {
                      operator: Update,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "optionalAttrs",
                         position: (270, 12),
                        },
                        arguments: [
                         BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "config",
                             position: (270, 27),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "bindsTo",
                               position: (270, 34),
                              },
                             ],
                            },
                            default: None,
                           },
                           List {
                            elements: [],
                            position: (270, 45),
                           },
                          ],
                          position: (270, 42),
                         },
                         Map {
                          bindings: [
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "BindsTo",
                               position: (271, 13),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: Variable {
                              identifier: "toString",
                              position: (271, 23),
                             },
                             arguments: [
                              PropertyAccess {
                               expression: Variable {
                                identifier: "config",
                                position: (271, 32),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "bindsTo",
                                  position: (271, 39),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ],
                            },
                           ),
                          ],
                          recursive: false,
                          position: (271, 11),
                         },
                        ],
                       },
                       BinaryOperation {
                        operator: Update,
                        operands: [
                         FunctionApplication {
                          function: Variable {
                           identifier: "optionalAttrs",
                           position: (272, 12),
                          },
                          arguments: [
                           BinaryOperation {
                            operator: NotEqualTo,
                            operands: [
                             PropertyAccess {
                              expression: Variable {
                               identifier: "config",
                               position: (272, 27),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "partOf",
                                 position: (272, 34),
                                },
                               ],
                              },
                              default: None,
                             },
                             List {
                              elements: [],
                              position: (272, 44),
                             },
                            ],
                            position: (272, 41),
                           },
                           Map {
                            bindings: [
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "PartOf",
                                 position: (273, 13),
                                },
                               ],
                              },
                              FunctionApplication {
                               function: Variable {
                                identifier: "toString",
                                position: (273, 22),
                               },
                               arguments: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "config",
                                  position: (273, 31),
                                 },
                                 attribute_path: AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "partOf",
                                    position: (273, 38),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ],
                              },
                             ),
                            ],
                            recursive: false,
                            position: (273, 11),
                           },
                          ],
                         },
                         BinaryOperation {
                          operator: Update,
                          operands: [
                           FunctionApplication {
                            function: Variable {
                             identifier: "optionalAttrs",
                             position: (274, 12),
                            },
                            arguments: [
                             BinaryOperation {
                              operator: NotEqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "config",
                                 position: (274, 27),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "conflicts",
                                   position: (274, 34),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               List {
                                elements: [],
                                position: (274, 47),
                               },
                              ],
                              position: (274, 44),
                             },
                             Map {
                              bindings: [
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "Conflicts",
                                   position: (275, 13),
                                  },
                                 ],
                                },
                                FunctionApplication {
                                 function: Variable {
                                  identifier: "toString",
                                  position: (275, 25),
                                 },
                                 arguments: [
                                  PropertyAccess {
                                   expression: Variable {
                                    identifier: "config",
                                    position: (275, 34),
                                   },
                                   attribute_path: AttributePath {
                                    attributes: [
                                     Raw {
                                      content: "conflicts",
                                      position: (275, 41),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                 ],
                                },
                               ),
                              ],
                              recursive: false,
                              position: (275, 11),
                             },
                            ],
                           },
                           BinaryOperation {
                            operator: Update,
                            operands: [
                             FunctionApplication {
                              function: Variable {
                               identifier: "optionalAttrs",
                               position: (276, 12),
                              },
                              arguments: [
                               BinaryOperation {
                                operator: NotEqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "config",
                                   position: (276, 27),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "requisite",
                                     position: (276, 34),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 List {
                                  elements: [],
                                  position: (276, 47),
                                 },
                                ],
                                position: (276, 44),
                               },
                               Map {
                                bindings: [
                                 KeyValue(
                                  AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "Requisite",
                                     position: (277, 13),
                                    },
                                   ],
                                  },
                                  FunctionApplication {
                                   function: Variable {
                                    identifier: "toString",
                                    position: (277, 25),
                                   },
                                   arguments: [
                                    PropertyAccess {
                                     expression: Variable {
                                      identifier: "config",
                                      position: (277, 34),
                                     },
                                     attribute_path: AttributePath {
                                      attributes: [
                                       Raw {
                                        content: "requisite",
                                        position: (277, 41),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                   ],
                                  },
                                 ),
                                ],
                                recursive: false,
                                position: (277, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: Update,
                              operands: [
                               FunctionApplication {
                                function: Variable {
                                 identifier: "optionalAttrs",
                                 position: (278, 12),
                                },
                                arguments: [
                                 BinaryOperation {
                                  operator: LogicalAnd,
                                  operands: [
                                   HasProperty {
                                    expression: Variable {
                                     identifier: "config",
                                     position: (278, 27),
                                    },
                                    attribute_path: AttributePath {
                                     attributes: [
                                      Raw {
                                       content: "restartTriggers",
                                       position: (278, 36),
                                      },
                                     ],
                                    },
                                    position: (278, 34),
                                   },
                                   BinaryOperation {
                                    operator: NotEqualTo,
                                    operands: [
                                     PropertyAccess {
                                      expression: Variable {
                                       identifier: "config",
                                       position: (278, 55),
                                      },
                                      attribute_path: AttributePath {
                                       attributes: [
                                        Raw {
                                         content: "restartTriggers",
                                         position: (278, 62),
                                        },
                                       ],
                                      },
                                      default: None,
                                     },
                                     List {
                                      elements: [],
                                      position: (278, 81),
                                     },
                                    ],
                                    position: (278, 78),
                                   },
                                  ],
                                  position: (278, 52),
                                 },
                                 Map {
                                  bindings: [
                                   KeyValue(
                                    AttributePath {
                                     attributes: [
                                      Raw {
                                       content: "X-Restart-Triggers",
                                       position: (279, 13),
                                      },
                                     ],
                                    },
                                    FunctionApplication {
                                     function: Variable {
                                      identifier: "toString",
                                      position: (279, 34),
                                     },
                                     arguments: [
                                      PropertyAccess {
                                       expression: Variable {
                                        identifier: "config",
                                        position: (279, 43),
                                       },
                                       attribute_path: AttributePath {
                                        attributes: [
                                         Raw {
                                          content: "restartTriggers",
                                          position: (279, 50),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                     ],
                                    },
                                   ),
                                  ],
                                  recursive: false,
                                  position: (279, 11),
                                 },
                                ],
                               },
                               BinaryOperation {
                                operator: Update,
                                operands: [
                                 FunctionApplication {
                                  function: Variable {
                                   identifier: "optionalAttrs",
                                   position: (280, 12),
                                  },
                                  arguments: [
                                   BinaryOperation {
                                    operator: LogicalAnd,
                                    operands: [
                                     HasProperty {
                                      expression: Variable {
                                       identifier: "config",
                                       position: (280, 27),
                                      },
                                      attribute_path: AttributePath {
                                       attributes: [
                                        Raw {
                                         content: "reloadTriggers",
                                         position: (280, 36),
                                        },
                                       ],
                                      },
                                      position: (280, 34),
                                     },
                                     BinaryOperation {
                                      operator: NotEqualTo,
                                      operands: [
                                       PropertyAccess {
                                        expression: Variable {
                                         identifier: "config",
                                         position: (280, 54),
                                        },
                                        attribute_path: AttributePath {
                                         attributes: [
                                          Raw {
                                           content: "reloadTriggers",
                                           position: (280, 61),
                                          },
                                         ],
                                        },
                                        default: None,
                                       },
                                       List {
                                        elements: [],
                                        position: (280, 79),
                                       },
                                      ],
                                      position: (280, 76),
                                     },
                                    ],
                                    position: (280, 51),
                                   },
                                   Map {
                                    bindings: [
                                     KeyValue(
                                      AttributePath {
                                       attributes: [
                                        Raw {
                                         content: "X-Reload-Triggers",
                                         position: (281, 13),
                                        },
                                       ],
                                      },
                                      FunctionApplication {
                                       function: Variable {
                                        identifier: "toString",
                                        position: (281, 33),
                                       },
                                       arguments: [
                                        PropertyAccess {
                                         expression: Variable {
                                          identifier: "config",
                                          position: (281, 42),
                                         },
                                         attribute_path: AttributePath {
                                          attributes: [
                                           Raw {
                                            content: "reloadTriggers",
                                            position: (281, 49),
                                           },
                                          ],
                                         },
                                         default: None,
                                        },
                                       ],
                                      },
                                     ),
                                    ],
                                    recursive: false,
                                    position: (281, 11),
                                   },
                                  ],
                                 },
                                 BinaryOperation {
                                  operator: Update,
                                  operands: [
                                   FunctionApplication {
                                    function: Variable {
                                     identifier: "optionalAttrs",
                                     position: (282, 12),
                                    },
                                    arguments: [
                                     BinaryOperation {
                                      operator: NotEqualTo,
                                      operands: [
                                       PropertyAccess {
                                        expression: Variable {
                                         identifier: "config",
                                         position: (282, 27),
                                        },
                                        attribute_path: AttributePath {
                                         attributes: [
                                          Raw {
                                           content: "description",
                                           position: (282, 34),
                                          },
                                         ],
                                        },
                                        default: None,
                                       },
                                       String {
                                        parts: [],
                                        position: (282, 49),
                                       },
                                      ],
                                      position: (282, 46),
                                     },
                                     Map {
                                      bindings: [
                                       KeyValue(
                                        AttributePath {
                                         attributes: [
                                          Raw {
                                           content: "Description",
                                           position: (283, 11),
                                          },
                                         ],
                                        },
                                        PropertyAccess {
                                         expression: Variable {
                                          identifier: "config",
                                          position: (283, 25),
                                         },
                                         attribute_path: AttributePath {
                                          attributes: [
                                           Raw {
                                            content: "description",
                                            position: (283, 32),
                                           },
                                          ],
                                         },
                                         default: None,
                                        },
                                       ),
                                      ],
                                      recursive: false,
                                      position: (282, 53),
                                     },
                                    ],
                                   },
                                   BinaryOperation {
                                    operator: Update,
                                    operands: [
                                     FunctionApplication {
                                      function: Variable {
                                       identifier: "optionalAttrs",
                                       position: (284, 12),
                                      },
                                      arguments: [
                                       BinaryOperation {
                                        operator: NotEqualTo,
                                        operands: [
                                         PropertyAccess {
                                          expression: Variable {
                                           identifier: "config",
                                           position: (284, 27),
                                          },
                                          attribute_path: AttributePath {
                                           attributes: [
                                            Raw {
                                             content: "documentation",
                                             position: (284, 34),
                                            },
                                           ],
                                          },
                                          default: None,
                                         },
                                         List {
                                          elements: [],
                                          position: (284, 51),
                                         },
                                        ],
                                        position: (284, 48),
                                       },
                                       Map {
                                        bindings: [
                                         KeyValue(
                                          AttributePath {
                                           attributes: [
                                            Raw {
                                             content: "Documentation",
                                             position: (285, 11),
                                            },
                                           ],
                                          },
                                          FunctionApplication {
                                           function: Variable {
                                            identifier: "toString",
                                            position: (285, 27),
                                           },
                                           arguments: [
                                            PropertyAccess {
                                             expression: Variable {
                                              identifier: "config",
                                              position: (285, 36),
                                             },
                                             attribute_path: AttributePath {
                                              attributes: [
                                               Raw {
                                                content: "documentation",
                                                position: (285, 43),
                                               },
                                              ],
                                             },
                                             default: None,
                                            },
                                           ],
                                          },
                                         ),
                                        ],
                                        recursive: false,
                                        position: (284, 55),
                                       },
                                      ],
                                     },
                                     BinaryOperation {
                                      operator: Update,
                                      operands: [
                                       FunctionApplication {
                                        function: Variable {
                                         identifier: "optionalAttrs",
                                         position: (286, 12),
                                        },
                                        arguments: [
                                         BinaryOperation {
                                          operator: NotEqualTo,
                                          operands: [
                                           PropertyAccess {
                                            expression: Variable {
                                             identifier: "config",
                                             position: (286, 27),
                                            },
                                            attribute_path: AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "onFailure",
                                               position: (286, 34),
                                              },
                                             ],
                                            },
                                            default: None,
                                           },
                                           List {
                                            elements: [],
                                            position: (286, 47),
                                           },
                                          ],
                                          position: (286, 44),
                                         },
                                         Map {
                                          bindings: [
                                           KeyValue(
                                            AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "OnFailure",
                                               position: (287, 11),
                                              },
                                             ],
                                            },
                                            FunctionApplication {
                                             function: Variable {
                                              identifier: "toString",
                                              position: (287, 23),
                                             },
                                             arguments: [
                                              PropertyAccess {
                                               expression: Variable {
                                                identifier: "config",
                                                position: (287, 32),
                                               },
                                               attribute_path: AttributePath {
                                                attributes: [
                                                 Raw {
                                                  content: "onFailure",
                                                  position: (287, 39),
                                                 },
                                                ],
                                               },
                                               default: None,
                                              },
                                             ],
                                            },
                                           ),
                                          ],
                                          recursive: false,
                                          position: (286, 51),
                                         },
                                        ],
                                       },
                                       BinaryOperation {
                                        operator: Update,
                                        operands: [
                                         FunctionApplication {
                                          function: Variable {
                                           identifier: "optionalAttrs",
                                           position: (288, 12),
                                          },
                                          arguments: [
                                           PropertyAccess {
                                            expression: Variable {
                                             identifier: "options",
                                             position: (288, 27),
                                            },
                                            attribute_path: AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "startLimitIntervalSec",
                                               position: (288, 35),
                                              },
                                              Raw {
                                               content: "isDefined",
                                               position: (288, 57),
                                              },
                                             ],
                                            },
                                            default: None,
                                           },
                                           Map {
                                            bindings: [
                                             KeyValue(
                                              AttributePath {
                                               attributes: [
                                                Raw {
                                                 content: "StartLimitIntervalSec",
                                                 position: (289, 11),
                                                },
                                               ],
                                              },
                                              FunctionApplication {
                                               function: Variable {
                                                identifier: "toString",
                                                position: (289, 35),
                                               },
                                               arguments: [
                                                PropertyAccess {
                                                 expression: Variable {
                                                  identifier: "config",
                                                  position: (289, 44),
                                                 },
                                                 attribute_path: AttributePath {
                                                  attributes: [
                                                   Raw {
                                                    content: "startLimitIntervalSec",
                                                    position: (289, 51),
                                                   },
                                                  ],
                                                 },
                                                 default: None,
                                                },
                                               ],
                                              },
                                             ),
                                            ],
                                            recursive: false,
                                            position: (288, 68),
                                           },
                                          ],
                                         },
                                         FunctionApplication {
                                          function: Variable {
                                           identifier: "optionalAttrs",
                                           position: (290, 14),
                                          },
                                          arguments: [
                                           PropertyAccess {
                                            expression: Variable {
                                             identifier: "options",
                                             position: (290, 29),
                                            },
                                            attribute_path: AttributePath {
                                             attributes: [
                                              Raw {
                                               content: "startLimitBurst",
                                               position: (290, 37),
                                              },
                                              Raw {
                                               content: "isDefined",
                                               position: (290, 53),
                                              },
                                             ],
                                            },
                                            default: None,
                                           },
                                           Map {
                                            bindings: [
                                             KeyValue(
                                              AttributePath {
                                               attributes: [
                                                Raw {
                                                 content: "StartLimitBurst",
                                                 position: (291, 11),
                                                },
                                               ],
                                              },
                                              FunctionApplication {
                                               function: Variable {
                                                identifier: "toString",
                                                position: (291, 29),
                                               },
                                               arguments: [
                                                PropertyAccess {
                                                 expression: Variable {
                                                  identifier: "config",
                                                  position: (291, 38),
                                                 },
                                                 attribute_path: AttributePath {
                                                  attributes: [
                                                   Raw {
                                                    content: "startLimitBurst",
                                                    position: (291, 45),
                                                   },
                                                  ],
                                                 },
                                                 default: None,
                                                },
                                               ],
                                              },
                                             ),
                                            ],
                                            recursive: false,
                                            position: (290, 64),
                                           },
                                          ],
                                         },
                                        ],
                                        position: (290, 11),
                                       },
                                      ],
                                      position: (288, 9),
                                     },
                                    ],
                                    position: (286, 9),
                                   },
                                  ],
                                  position: (284, 9),
                                 },
                                ],
                                position: (282, 9),
                               },
                              ],
                              position: (280, 9),
                             },
                            ],
                            position: (278, 9),
                           },
                          ],
                          position: (276, 9),
                         },
                        ],
                        position: (274, 9),
                       },
                      ],
                      position: (272, 9),
                     },
                    ],
                    position: (270, 9),
                   },
                  ],
                  position: (268, 9),
                 },
                ],
                position: (266, 9),
               },
              ],
              position: (264, 9),
             },
            ),
           ],
           recursive: false,
           position: (260, 14),
          },
         ),
        ],
        recursive: false,
        position: (259, 42),
       },
       position: (259, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "serviceConfig",
         position: (296, 3),
        },
       ],
      },
      Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "config",
          default: None,
         },
        ],
        ellipsis: true,
       },
       definition: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "config",
             position: (297, 5),
            },
            Raw {
             content: "environment",
             position: (297, 12),
            },
            Raw {
             content: "PATH",
             position: (297, 24),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkIf",
            position: (297, 31),
           },
           arguments: [
            BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (297, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "path",
                  position: (297, 44),
                 },
                ],
               },
               default: None,
              },
              List {
               elements: [],
               position: (297, 52),
              },
             ],
             position: (297, 49),
            },
            String {
             parts: [
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "makeBinPath",
                 position: (297, 59),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (297, 71),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "path",
                     position: (297, 78),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: ":",
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "makeSearchPathOutput",
                 position: (297, 86),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "bin",
                   },
                  ],
                  position: (297, 107),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "sbin",
                   },
                  ],
                  position: (297, 113),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (297, 120),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "path",
                     position: (297, 127),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
             ],
             position: (297, 56),
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (296, 36),
       },
       position: (296, 19),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "stage2ServiceConfig",
         position: (300, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "imports",
            position: (301, 5),
           },
          ],
         },
         List {
          elements: [
           Variable {
            identifier: "serviceConfig",
            position: (301, 17),
           },
          ],
          position: (301, 15),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "config",
            position: (303, 5),
           },
           Raw {
            content: "path",
            position: (303, 12),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkAfter",
           position: (303, 19),
          },
          arguments: [
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (304, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "coreutils",
                 position: (304, 12),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (305, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "findutils",
                 position: (305, 12),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (306, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "gnugrep",
                 position: (306, 12),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (307, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "gnused",
                 position: (307, 12),
                },
               ],
              },
              default: None,
             },
             Variable {
              identifier: "systemd",
              position: (308, 7),
             },
            ],
            position: (303, 27),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (300, 25),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "stage1ServiceConfig",
         position: (312, 3),
        },
       ],
      },
      Variable {
       identifier: "serviceConfig",
       position: (312, 25),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mountConfig",
         position: (314, 3),
        },
       ],
      },
      Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "config",
          default: None,
         },
        ],
        ellipsis: true,
       },
       definition: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "config",
             position: (315, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "mountConfig",
                position: (316, 7),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "What",
                     position: (317, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (317, 18),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "what",
                      position: (317, 25),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "Where",
                     position: (318, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (318, 19),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "where",
                      position: (318, 26),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                ],
                recursive: false,
                position: (317, 9),
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (319, 14),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "config",
                       position: (319, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "type",
                         position: (319, 36),
                        },
                       ],
                      },
                      default: None,
                     },
                     String {
                      parts: [],
                      position: (319, 44),
                     },
                    ],
                    position: (319, 41),
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Type",
                         position: (320, 11),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (320, 18),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "type",
                          position: (320, 25),
                         },
                        ],
                       },
                       default: None,
                      },
                     ),
                    ],
                    recursive: false,
                    position: (319, 48),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (321, 14),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "config",
                       position: (321, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "options",
                         position: (321, 36),
                        },
                       ],
                      },
                      default: None,
                     },
                     String {
                      parts: [],
                      position: (321, 47),
                     },
                    ],
                    position: (321, 44),
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Options",
                         position: (322, 11),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (322, 21),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "options",
                          position: (322, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                     ),
                    ],
                    recursive: false,
                    position: (321, 51),
                   },
                  ],
                 },
                ],
                position: (321, 11),
               },
              ],
              position: (319, 11),
             },
            ),
           ],
           recursive: false,
           position: (315, 14),
          },
         ),
        ],
        recursive: false,
        position: (314, 34),
       },
       position: (314, 17),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "automountConfig",
         position: (327, 3),
        },
       ],
      },
      Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "config",
          default: None,
         },
        ],
        ellipsis: true,
       },
       definition: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "config",
             position: (328, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "automountConfig",
                position: (329, 7),
               },
              ],
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "Where",
                   position: (330, 11),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (330, 19),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "where",
                    position: (330, 26),
                   },
                  ],
                 },
                 default: None,
                },
               ),
              ],
              recursive: false,
              position: (330, 9),
             },
            ),
           ],
           recursive: false,
           position: (328, 14),
          },
         ),
        ],
        recursive: false,
        position: (327, 38),
       },
       position: (327, 21),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "commonUnitText",
         position: (335, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "def",
       },
       definition: String {
        parts: [
         Raw {
          content: "[Unit]\n",
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "attrsToSection",
            position: (337, 9),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "def",
              position: (337, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "unitConfig",
                position: (337, 28),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n",
         },
        ],
        position: (335, 25),
       },
       position: (335, 20),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "targetToUnit",
         position: (340, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (341, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (341, 21),
            },
            Raw {
             content: "wantedBy",
             position: (341, 29),
            },
            Raw {
             content: "requiredBy",
             position: (341, 38),
            },
            Raw {
             content: "enable",
             position: (341, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (342, 7),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "[Unit]\n",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "attrsToSection",
                position: (345, 13),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "def",
                  position: (345, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "unitConfig",
                    position: (345, 32),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: "\n",
             },
            ],
            position: (343, 9),
           },
          ),
         ],
         recursive: false,
         position: (341, 5),
        },
        position: (340, 24),
       },
       position: (340, 18),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "serviceToUnit",
         position: (349, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (350, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (350, 21),
            },
            Raw {
             content: "wantedBy",
             position: (350, 29),
            },
            Raw {
             content: "requiredBy",
             position: (350, 38),
            },
            Raw {
             content: "enable",
             position: (350, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (351, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (351, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (351, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Service]\n",
               },
               Expression {
                expression: LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "env",
                      position: (354, 17),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: Update,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (354, 23),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "globalEnvironment",
                         position: (354, 27),
                        },
                       ],
                      },
                      default: None,
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "def",
                       position: (354, 48),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "environment",
                         position: (354, 52),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                    position: (354, 45),
                   },
                  ),
                 ],
                 target: FunctionApplication {
                  function: Variable {
                   identifier: "concatMapStrings",
                   position: (355, 16),
                  },
                  arguments: [
                   Function {
                    argument: Simple {
                     identifier: "n",
                    },
                    definition: LetIn {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "s",
                          position: (356, 19),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "optionalString",
                         position: (356, 23),
                        },
                        arguments: [
                         BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "env",
                             position: (356, 39),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Expression {
                               expression: Variable {
                                identifier: "n",
                                position: (356, 45),
                               },
                              },
                             ],
                            },
                            default: None,
                           },
                           Variable {
                            identifier: "null",
                            position: (356, 51),
                           },
                          ],
                          position: (356, 48),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Environment=",
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: PropertyAccess {
                              expression: Variable {
                               identifier: "builtins",
                               position: (357, 32),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "toJSON",
                                 position: (357, 41),
                                },
                               ],
                              },
                              default: None,
                             },
                             arguments: [
                              String {
                               parts: [
                                Expression {
                                 expression: Variable {
                                  identifier: "n",
                                  position: (357, 51),
                                 },
                                },
                                Raw {
                                 content: "=",
                                },
                                Expression {
                                 expression: PropertyAccess {
                                  expression: Variable {
                                   identifier: "env",
                                   position: (357, 56),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Expression {
                                     expression: Variable {
                                      identifier: "n",
                                      position: (357, 62),
                                     },
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                               ],
                               position: (357, 48),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "\n",
                           },
                          ],
                          position: (357, 17),
                         },
                        ],
                       },
                      ),
                     ],
                     target: IfThenElse {
                      predicate: BinaryOperation {
                       operator: GreaterThanOrEqualTo,
                       operands: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "stringLength",
                          position: (360, 21),
                         },
                         arguments: [
                          Variable {
                           identifier: "s",
                           position: (360, 34),
                          },
                         ],
                        },
                        Int {
                         value: 1048576,
                         position: (360, 39),
                        },
                       ],
                       position: (360, 36),
                      },
                      then: FunctionApplication {
                       function: Variable {
                        identifier: "throw",
                        position: (360, 52),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "The value of the environment variable ‘",
                          },
                          Expression {
                           expression: Variable {
                            identifier: "n",
                            position: (360, 100),
                           },
                          },
                          Raw {
                           content: "’ in systemd service ‘",
                          },
                          Expression {
                           expression: Variable {
                            identifier: "name",
                            position: (360, 126),
                           },
                          },
                          Raw {
                           content: ".service’ is too long.",
                          },
                         ],
                         position: (360, 58),
                        },
                       ],
                      },
                      else_: Variable {
                       identifier: "s",
                       position: (360, 160),
                      },
                      position: (360, 18),
                     },
                     position: (356, 15),
                    },
                    position: (355, 34),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "attrNames",
                     position: (360, 164),
                    },
                    arguments: [
                     Variable {
                      identifier: "env",
                      position: (360, 174),
                     },
                    ],
                   },
                  ],
                 },
                 position: (354, 13),
                },
               },
               Raw {
                content: "\n",
               },
               Expression {
                expression: IfThenElse {
                 predicate: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   HasProperty {
                    expression: Variable {
                     identifier: "def",
                     position: (361, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "reloadIfChanged",
                       position: (361, 22),
                      },
                     ],
                    },
                    position: (361, 20),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "def",
                     position: (361, 41),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "reloadIfChanged",
                       position: (361, 45),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                  position: (361, 38),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "X-ReloadIfChanged=true\n",
                   },
                  ],
                  position: (361, 66),
                 },
                 else_: IfThenElse {
                  predicate: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    HasProperty {
                     expression: Variable {
                      identifier: "def",
                      position: (363, 23),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "restartIfChanged",
                        position: (363, 29),
                       },
                      ],
                     },
                     position: (363, 27),
                    },
                    UnaryOperation {
                     operator: Not,
                     operand: PropertyAccess {
                      expression: Variable {
                       identifier: "def",
                       position: (363, 50),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "restartIfChanged",
                         position: (363, 54),
                        },
                       ],
                      },
                      default: None,
                     },
                     position: (363, 49),
                    },
                   ],
                   position: (363, 46),
                  },
                  then: String {
                   parts: [
                    Raw {
                     content: "X-RestartIfChanged=false\n",
                    },
                   ],
                   position: (363, 77),
                  },
                  else_: String {
                   parts: [],
                   position: (365, 19),
                  },
                  position: (363, 19),
                 },
                 position: (361, 13),
                },
               },
               Raw {
                content: "\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "optionalString",
                  position: (366, 13),
                 },
                 arguments: [
                  BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    HasProperty {
                     expression: Variable {
                      identifier: "def",
                      position: (366, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "stopIfChanged",
                        position: (366, 35),
                       },
                      ],
                     },
                     position: (366, 33),
                    },
                    UnaryOperation {
                     operator: Not,
                     operand: PropertyAccess {
                      expression: Variable {
                       identifier: "def",
                       position: (366, 53),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "stopIfChanged",
                         position: (366, 57),
                        },
                       ],
                      },
                      default: None,
                     },
                     position: (366, 52),
                    },
                   ],
                   position: (366, 49),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "X-StopIfChanged=false",
                    },
                   ],
                   position: (366, 72),
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (367, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (367, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "serviceConfig",
                      position: (367, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (352, 9),
             },
            ],
            position: (351, 33),
           },
          ),
         ],
         recursive: false,
         position: (350, 5),
        },
        position: (349, 25),
       },
       position: (349, 19),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "socketToUnit",
         position: (371, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (372, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (372, 21),
            },
            Raw {
             content: "wantedBy",
             position: (372, 29),
            },
            Raw {
             content: "requiredBy",
             position: (372, 38),
            },
            Raw {
             content: "enable",
             position: (372, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (373, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (373, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (373, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Socket]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (376, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (376, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "socketConfig",
                      position: (376, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "concatStringsSep",
                  position: (377, 13),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "\n",
                    },
                   ],
                   position: (377, 30),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "map",
                    position: (377, 36),
                   },
                   arguments: [
                    Function {
                     argument: Simple {
                      identifier: "s",
                     },
                     definition: String {
                      parts: [
                       Raw {
                        content: "ListenStream=",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "s",
                         position: (377, 60),
                        },
                       },
                      ],
                      position: (377, 44),
                     },
                     position: (377, 41),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "def",
                      position: (377, 65),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listenStreams",
                        position: (377, 69),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "concatStringsSep",
                  position: (378, 13),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "\n",
                    },
                   ],
                   position: (378, 30),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "map",
                    position: (378, 36),
                   },
                   arguments: [
                    Function {
                     argument: Simple {
                      identifier: "s",
                     },
                     definition: String {
                      parts: [
                       Raw {
                        content: "ListenDatagram=",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "s",
                         position: (378, 62),
                        },
                       },
                      ],
                      position: (378, 44),
                     },
                     position: (378, 41),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "def",
                      position: (378, 67),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listenDatagrams",
                        position: (378, 71),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (374, 9),
             },
            ],
            position: (373, 33),
           },
          ),
         ],
         recursive: false,
         position: (372, 5),
        },
        position: (371, 24),
       },
       position: (371, 18),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "timerToUnit",
         position: (382, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (383, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (383, 21),
            },
            Raw {
             content: "wantedBy",
             position: (383, 29),
            },
            Raw {
             content: "requiredBy",
             position: (383, 38),
            },
            Raw {
             content: "enable",
             position: (383, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (384, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (384, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (384, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Timer]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (387, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (387, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "timerConfig",
                      position: (387, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (385, 9),
             },
            ],
            position: (384, 33),
           },
          ),
         ],
         recursive: false,
         position: (383, 5),
        },
        position: (382, 23),
       },
       position: (382, 17),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "pathToUnit",
         position: (391, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (392, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (392, 21),
            },
            Raw {
             content: "wantedBy",
             position: (392, 29),
            },
            Raw {
             content: "requiredBy",
             position: (392, 38),
            },
            Raw {
             content: "enable",
             position: (392, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (393, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (393, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (393, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Path]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (396, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (396, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "pathConfig",
                      position: (396, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (394, 9),
             },
            ],
            position: (393, 33),
           },
          ),
         ],
         recursive: false,
         position: (392, 5),
        },
        position: (391, 22),
       },
       position: (391, 16),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "mountToUnit",
         position: (400, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (401, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (401, 21),
            },
            Raw {
             content: "wantedBy",
             position: (401, 29),
            },
            Raw {
             content: "requiredBy",
             position: (401, 38),
            },
            Raw {
             content: "enable",
             position: (401, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (402, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (402, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (402, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Mount]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (405, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (405, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "mountConfig",
                      position: (405, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (403, 9),
             },
            ],
            position: (402, 33),
           },
          ),
         ],
         recursive: false,
         position: (401, 5),
        },
        position: (400, 23),
       },
       position: (400, 17),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "automountToUnit",
         position: (409, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (410, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (410, 21),
            },
            Raw {
             content: "wantedBy",
             position: (410, 29),
            },
            Raw {
             content: "requiredBy",
             position: (410, 38),
            },
            Raw {
             content: "enable",
             position: (410, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (411, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (411, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (411, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Automount]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (414, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (414, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "automountConfig",
                      position: (414, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (412, 9),
             },
            ],
            position: (411, 33),
           },
          ),
         ],
         recursive: false,
         position: (410, 5),
        },
        position: (409, 27),
       },
       position: (409, 21),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "sliceToUnit",
         position: (418, 3),
        },
       ],
      },
      Function {
       argument: Simple {
        identifier: "name",
       },
       definition: Function {
        argument: Simple {
         identifier: "def",
        },
        definition: Map {
         bindings: [
          Inherit {
           from: Some(
            Variable {
             identifier: "def",
             position: (419, 16),
            },
           ),
           attributes: [
            Raw {
             content: "aliases",
             position: (419, 21),
            },
            Raw {
             content: "wantedBy",
             position: (419, 29),
            },
            Raw {
             content: "requiredBy",
             position: (419, 38),
            },
            Raw {
             content: "enable",
             position: (419, 49),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (420, 7),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "commonUnitText",
               position: (420, 14),
              },
              arguments: [
               Variable {
                identifier: "def",
                position: (420, 29),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "[Slice]\n",
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "attrsToSection",
                  position: (423, 13),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (423, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "sliceConfig",
                      position: (423, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Raw {
                content: "\n",
               },
              ],
              position: (421, 9),
             },
            ],
            position: (420, 33),
           },
          ),
         ],
         recursive: false,
         position: (419, 5),
        },
        position: (418, 23),
       },
       position: (418, 17),
      },
     ),
    ],
    recursive: true,
    position: (9, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}