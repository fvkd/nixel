---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "apcupsd",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configFile",
        position: (8, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (8, 16),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (8, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "apcupsd.conf",
         },
        ],
        position: (8, 31),
       },
       String {
        parts: [
         Raw {
          content: "## apcupsd.conf v1.1 ##\n# apcupsd complains if the first line is not like above.\n",
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (11, 7),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "configText",
              position: (11, 11),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\nSCRIPTDIR ",
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (12, 17),
           },
           arguments: [
            Variable {
             identifier: "scriptDir",
             position: (12, 26),
            },
           ],
          },
         },
         Raw {
          content: "\n",
         },
        ],
        position: (8, 46),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "eventList",
        position: (16, 3),
       },
      ],
     },
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "annoyme",
         },
        ],
        position: (17, 5),
       },
       String {
        parts: [
         Raw {
          content: "battattach",
         },
        ],
        position: (18, 5),
       },
       String {
        parts: [
         Raw {
          content: "battdetach",
         },
        ],
        position: (19, 5),
       },
       String {
        parts: [
         Raw {
          content: "changeme",
         },
        ],
        position: (20, 5),
       },
       String {
        parts: [
         Raw {
          content: "commfailure",
         },
        ],
        position: (21, 5),
       },
       String {
        parts: [
         Raw {
          content: "commok",
         },
        ],
        position: (22, 5),
       },
       String {
        parts: [
         Raw {
          content: "doreboot",
         },
        ],
        position: (23, 5),
       },
       String {
        parts: [
         Raw {
          content: "doshutdown",
         },
        ],
        position: (24, 5),
       },
       String {
        parts: [
         Raw {
          content: "emergency",
         },
        ],
        position: (25, 5),
       },
       String {
        parts: [
         Raw {
          content: "failing",
         },
        ],
        position: (26, 5),
       },
       String {
        parts: [
         Raw {
          content: "killpower",
         },
        ],
        position: (27, 5),
       },
       String {
        parts: [
         Raw {
          content: "loadlimit",
         },
        ],
        position: (28, 5),
       },
       String {
        parts: [
         Raw {
          content: "mainsback",
         },
        ],
        position: (29, 5),
       },
       String {
        parts: [
         Raw {
          content: "onbattery",
         },
        ],
        position: (30, 5),
       },
       String {
        parts: [
         Raw {
          content: "offbattery",
         },
        ],
        position: (31, 5),
       },
       String {
        parts: [
         Raw {
          content: "powerout",
         },
        ],
        position: (32, 5),
       },
       String {
        parts: [
         Raw {
          content: "remotedown",
         },
        ],
        position: (33, 5),
       },
       String {
        parts: [
         Raw {
          content: "runlimit",
         },
        ],
        position: (34, 5),
       },
       String {
        parts: [
         Raw {
          content: "timeout",
         },
        ],
        position: (35, 5),
       },
       String {
        parts: [
         Raw {
          content: "startselftest",
         },
        ],
        position: (36, 5),
       },
       String {
        parts: [
         Raw {
          content: "endselftest",
         },
        ],
        position: (37, 5),
       },
      ],
      position: (16, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "shellCmdsForEventScript",
        position: (40, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "eventname",
      },
      definition: Function {
       argument: Simple {
        identifier: "commands",
       },
       definition: String {
        parts: [
         Raw {
          content: "echo \"#!",
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (41, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "runtimeShell",
              position: (41, 20),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\" > \"$out/",
         },
         Expression {
          expression: Variable {
           identifier: "eventname",
           position: (41, 45),
          },
         },
         Raw {
          content: "\"\necho ",
         },
         Raw {
          content: "'",
         },
         Expression {
          expression: Variable {
           identifier: "commands",
           position: (42, 13),
          },
         },
         Raw {
          content: "' >> \"$out/",
         },
         Expression {
          expression: Variable {
           identifier: "eventname",
           position: (42, 35),
          },
         },
         Raw {
          content: "\"\nchmod a+x \"$out/",
         },
         Expression {
          expression: Variable {
           identifier: "eventname",
           position: (43, 23),
          },
         },
         Raw {
          content: "\"\n",
         },
        ],
        position: (40, 50),
       },
       position: (40, 40),
      },
      position: (40, 29),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "eventToShellCmds",
        position: (46, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "event",
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (46, 32),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "hasAttr",
            position: (46, 41),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "event",
          position: (46, 49),
         },
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (46, 55),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "hooks",
             position: (46, 59),
            },
           ],
          },
          default: None,
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "shellCmdsForEventScript",
         position: (46, 71),
        },
        arguments: [
         Variable {
          identifier: "event",
          position: (46, 95),
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (46, 102),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "getAttr",
              position: (46, 111),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "event",
            position: (46, 119),
           },
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (46, 125),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "hooks",
               position: (46, 129),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ],
       },
       else_: String {
        parts: [],
        position: (46, 142),
       },
       position: (46, 29),
      },
      position: (46, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "scriptDir",
        position: (48, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (48, 15),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "runCommand",
          position: (48, 20),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "apcupsd-scriptdir",
         },
        ],
        position: (48, 31),
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "preferLocalBuild",
             position: (48, 53),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (48, 72),
          },
         ),
        ],
        recursive: false,
        position: (48, 51),
       },
       BinaryOperation {
        operator: Addition,
        operands: [
         String {
          parts: [
           Raw {
            content: "mkdir \"$out\"\n# Copy SCRIPTDIR from apcupsd package\ncp -r ",
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (51, 13),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "apcupsd",
                position: (51, 18),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "/etc/apcupsd/* \"$out\"/\n# Make the files writeable (nix will unset the write bits afterwards)\nchmod u+w \"$out\"/*\n# Remove the sample event notification scripts, because they don't work\n# anyways (they try to send mail to \"root\" with the \"mail\" command)\n(cd \"$out\" && rm changeme commok commfailure onbattery offbattery)\n# Remove the sample apcupsd.conf file (we're generating our own)\nrm \"$out/apcupsd.conf\"\n# Set the SCRIPTDIR= line in apccontrol to the dir we're creating now\nsed -i -e \"s|^SCRIPTDIR=.*|SCRIPTDIR=$out|\" \"$out/apccontrol\"\n",
           },
          ],
          position: (48, 81),
         },
         FunctionApplication {
          function: Variable {
           identifier: "concatStringsSep",
           position: (61, 10),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
             },
            ],
            position: (61, 27),
           },
           FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (61, 33),
            },
            arguments: [
             Variable {
              identifier: "eventToShellCmds",
              position: (61, 37),
             },
             Variable {
              identifier: "eventList",
              position: (61, 54),
             },
            ],
           },
          ],
         },
        ],
        position: (61, 8),
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (71, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (73, 5),
           },
           Raw {
            content: "apcupsd",
            position: (73, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (75, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (75, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (76, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (76, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (77, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (77, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (77, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (78, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to enable the APC UPS daemon. apcupsd monitors your UPS and\npermits orderly shutdown of your computer in the event of a power\nfailure. User manual: http://www.apcupsd.com/manual/manual.html.\nNote that apcupsd runs as root (to allow shutdown of computer).\nYou can check the status of your UPS with the \"apcaccess\" command.\n",
                   },
                  ],
                  position: (78, 23),
                 },
                ),
               ],
               recursive: false,
               position: (75, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "configText",
               position: (87, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (87, 20),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (88, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "UPSTYPE usb\nNISIP 127.0.0.1\nBATTERYLEVEL 50\nMINUTES 5\n",
                   },
                  ],
                  position: (88, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (94, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (94, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (94, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (95, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Contents of the runtime configuration file, apcupsd.conf. The default\nsettings makes apcupsd autodetect USB UPSes, limit network access to\nlocalhost and shutdown the system when the battery level is below 50\npercent, or when the UPS has calculated that it has 5 minutes or less\nof remaining power-on time. See man apcupsd.conf for details.\n",
                   },
                  ],
                  position: (95, 23),
                 },
                ),
               ],
               recursive: false,
               position: (87, 29),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "hooks",
               position: (104, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (104, 15),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (105, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (105, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (106, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "doshutdown",
                       position: (107, 11),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "# shell commands to notify that the computer is shutting down",
                      },
                     ],
                     position: (107, 24),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (106, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (109, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (109, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "attrsOf",
                      position: (109, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (109, 30),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "lines",
                       position: (109, 36),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (110, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Each attribute in this option names an apcupsd event and the string\nvalue it contains will be executed in a shell, in response to that\nevent (prior to the default action). See \"man apccontrol\" for the\nlist of events and what they represent.\n\nA hook script can stop apccontrol from doing its default action by\nexiting with value 99. Do not do this unless you know what you're\ndoing.\n",
                   },
                  ],
                  position: (110, 23),
                 },
                ),
               ],
               recursive: false,
               position: (104, 24),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (73, 24),
         },
        ),
       ],
       recursive: false,
       position: (71, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (129, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (129, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (129, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (129, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (131, 5),
             },
            ],
           },
           List {
            elements: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "assertion",
                   position: (132, 7),
                  },
                 ],
                },
                LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "hooknames",
                      position: (132, 23),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (132, 35),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "attrNames",
                        position: (132, 44),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (132, 54),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "hooks",
                         position: (132, 58),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                 ],
                 target: FunctionApplication {
                  function: Variable {
                   identifier: "all",
                   position: (132, 68),
                  },
                  arguments: [
                   Function {
                    argument: Simple {
                     identifier: "x",
                    },
                    definition: FunctionApplication {
                     function: Variable {
                      identifier: "elem",
                      position: (132, 76),
                     },
                     arguments: [
                      Variable {
                       identifier: "x",
                       position: (132, 81),
                      },
                      Variable {
                       identifier: "eventList",
                       position: (132, 83),
                      },
                     ],
                    },
                    position: (132, 73),
                   },
                   Variable {
                    identifier: "hooknames",
                    position: (132, 94),
                   },
                  ],
                 },
                 position: (132, 19),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "message",
                   position: (133, 7),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "One (or more) attribute names in services.apcupsd.hooks are invalid.\nCurrent attribute names: ",
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (135, 36),
                    },
                    arguments: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (135, 46),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "attrNames",
                          position: (135, 55),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (135, 65),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "hooks",
                           position: (135, 69),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    ],
                   },
                  },
                  Raw {
                   content: "\nValid attribute names  : ",
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "toString",
                     position: (136, 36),
                    },
                    arguments: [
                     Variable {
                      identifier: "eventList",
                      position: (136, 45),
                     },
                    ],
                   },
                  },
                  Raw {
                   content: "\n",
                  },
                 ],
                 position: (133, 17),
                },
               ),
              ],
              recursive: false,
              position: (131, 20),
             },
            ],
            position: (131, 18),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (141, 5),
             },
             Raw {
              content: "systemPackages",
              position: (141, 17),
             },
            ],
           },
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (141, 36),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "apcupsd",
                 position: (141, 41),
                },
               ],
              },
              default: None,
             },
            ],
            position: (141, 34),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (150, 5),
             },
             Raw {
              content: "services",
              position: (150, 13),
             },
             Raw {
              content: "apcupsd",
              position: (150, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (151, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "APC UPS Daemon",
                },
               ],
               position: (151, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (152, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                  },
                 ],
                 position: (152, 20),
                },
               ],
               position: (152, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "preStart",
                 position: (153, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "mkdir -p /run/apcupsd/",
                },
               ],
               position: (153, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (154, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (155, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (155, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "apcupsd",
                        position: (155, 29),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/bin/apcupsd -b -f ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "configFile",
                     position: (155, 58),
                    },
                   },
                   Raw {
                    content: " -d1",
                   },
                  ],
                  position: (155, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "TimeoutStopSec",
                    position: (162, 9),
                   },
                  ],
                 },
                 Int {
                  value: 5,
                  position: (162, 26),
                 },
                ),
               ],
               recursive: false,
               position: (154, 23),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "unitConfig",
                 position: (164, 7),
                },
                Raw {
                 content: "Documentation",
                 position: (164, 18),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "man:apcupsd(8)",
                },
               ],
               position: (164, 34),
              },
             ),
            ],
            recursive: false,
            position: (150, 32),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (171, 5),
             },
             Raw {
              content: "services",
              position: (171, 13),
             },
             Raw {
              content: "apcupsd-killpower",
              position: (171, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (172, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "APC UPS Kill Power",
                },
               ],
               position: (172, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (173, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "shutdown.target",
                  },
                 ],
                 position: (173, 17),
                },
               ],
               position: (173, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "before",
                 position: (174, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "final.target",
                  },
                 ],
                 position: (174, 18),
                },
               ],
               position: (174, 16),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (175, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "shutdown.target",
                  },
                 ],
                 position: (175, 20),
                },
               ],
               position: (175, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "unitConfig",
                 position: (176, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ConditionPathExists",
                    position: (177, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/run/apcupsd/powerfail",
                   },
                  ],
                  position: (177, 31),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "DefaultDependencies",
                    position: (178, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "no",
                   },
                  ],
                  position: (178, 31),
                 },
                ),
               ],
               recursive: false,
               position: (176, 20),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (180, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Type",
                    position: (181, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "oneshot",
                   },
                  ],
                  position: (181, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (182, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (182, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "apcupsd",
                        position: (182, 29),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/bin/apcupsd --killpower -f ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "configFile",
                     position: (182, 67),
                    },
                   },
                  ],
                  position: (182, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "TimeoutSec",
                    position: (183, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "infinity",
                   },
                  ],
                  position: (183, 22),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StandardOutput",
                    position: (184, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "tty",
                   },
                  ],
                  position: (184, 26),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RemainAfterExit",
                    position: (185, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "yes",
                   },
                  ],
                  position: (185, 27),
                 },
                ),
               ],
               recursive: false,
               position: (180, 23),
              },
             ),
            ],
            recursive: false,
            position: (171, 42),
           },
          ),
         ],
         recursive: false,
         position: (129, 28),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (67, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}