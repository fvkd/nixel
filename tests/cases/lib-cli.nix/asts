---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "toGNUCommandLineShell",
       position: (42, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "options",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (43, 21),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "escapeShellArgs",
           position: (43, 25),
          },
         ],
        },
        default: None,
       },
       arguments: [
        FunctionApplication {
         function: Variable {
          identifier: "toGNUCommandLine",
          position: (43, 42),
         },
         arguments: [
          Variable {
           identifier: "options",
           position: (43, 59),
          },
          Variable {
           identifier: "attrs",
           position: (43, 67),
          },
         ],
        },
       ],
      },
      position: (43, 14),
     },
     position: (43, 5),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "toGNUCommandLine",
       position: (45, 3),
      },
     ],
    },
    Function {
     argument: None,
     arguments: FunctionArguments {
      arguments: [
       FunctionArgument {
        identifier: "mkOption",
        default: Some(
         Function {
          argument: Some(
           "k",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "v",
               position: (70, 16),
              },
              Variable {
               identifier: "null",
               position: (70, 21),
              },
             ],
             position: (70, 18),
            },
            then: List {
             elements: [],
             position: (71, 18),
            },
            else_: List {
             elements: [
              FunctionApplication {
               function: Variable {
                identifier: "mkOptionName",
                position: (72, 21),
               },
               arguments: [
                Variable {
                 identifier: "k",
                 position: (72, 34),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (72, 38),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "generators",
                   position: (72, 42),
                  },
                  Raw {
                   content: "mkValueStringDefault",
                   position: (72, 53),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Map {
                 bindings: [],
                 recursive: false,
                 position: (72, 74),
                },
                Variable {
                 identifier: "v",
                 position: (72, 77),
                },
               ],
              },
             ],
             position: (72, 18),
            },
            position: (70, 13),
           },
           position: (70, 10),
          },
          position: (70, 7),
         },
        ),
       },
       FunctionArgument {
        identifier: "mkList",
        default: Some(
         Function {
          argument: Some(
           "k",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (62, 20),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "concatMap",
                position: (62, 24),
               },
              ],
             },
             default: None,
            },
            arguments: [
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (62, 35),
              },
              arguments: [
               Variable {
                identifier: "k",
                position: (62, 44),
               },
              ],
             },
             Variable {
              identifier: "v",
              position: (62, 47),
             },
            ],
           },
           position: (62, 17),
          },
          position: (62, 14),
         },
        ),
       },
       FunctionArgument {
        identifier: "mkBool",
        default: Some(
         Function {
          argument: Some(
           "k",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (57, 20),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "optional",
                position: (57, 24),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "v",
              position: (57, 33),
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOptionName",
               position: (57, 36),
              },
              arguments: [
               Variable {
                identifier: "k",
                position: (57, 49),
               },
              ],
             },
            ],
           },
           position: (57, 17),
          },
          position: (57, 14),
         },
        ),
       },
       FunctionArgument {
        identifier: "mkOptionName",
        default: Some(
         Function {
          argument: Some(
           "k",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (50, 13),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "stringLength",
                  position: (50, 22),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "k",
                position: (50, 35),
               },
              ],
             },
             Int {
              value: 1,
              position: (50, 40),
             },
            ],
            position: (50, 37),
           },
           then: String {
            parts: [
             Raw {
              content: "-",
             },
             Expression {
              expression: Variable {
               identifier: "k",
               position: (51, 20),
              },
             },
            ],
            position: (51, 16),
           },
           else_: String {
            parts: [
             Raw {
              content: "--",
             },
             Expression {
              expression: Variable {
               identifier: "k",
               position: (52, 21),
              },
             },
            ],
            position: (52, 16),
           },
           position: (50, 10),
          },
          position: (50, 7),
         },
        ),
       },
      ],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "options",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "render",
            position: (76, 9),
           },
          ],
         },
         Function {
          argument: Some(
           "k",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (77, 19),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isBool",
                 position: (77, 28),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (77, 35),
              },
             ],
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "mkBool",
              position: (77, 42),
             },
             arguments: [
              Variable {
               identifier: "k",
               position: (77, 49),
              },
              Variable {
               identifier: "v",
               position: (77, 51),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (78, 19),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "isList",
                  position: (78, 28),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (78, 35),
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "mkList",
               position: (78, 42),
              },
              arguments: [
               Variable {
                identifier: "k",
                position: (78, 49),
               },
               Variable {
                identifier: "v",
                position: (78, 51),
               },
              ],
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (79, 16),
              },
              arguments: [
               Variable {
                identifier: "k",
                position: (79, 25),
               },
               Variable {
                identifier: "v",
                position: (79, 27),
               },
              ],
             },
             position: (78, 16),
            },
            position: (77, 11),
           },
           position: (76, 21),
          },
          position: (76, 18),
         },
        ),
       ],
       target: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (82, 9),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "concatLists",
            position: (82, 18),
           },
          ],
         },
         default: None,
        },
        arguments: [
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (82, 31),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "mapAttrsToList",
              position: (82, 35),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "render",
            position: (82, 50),
           },
           Variable {
            identifier: "options",
            position: (82, 57),
           },
          ],
         },
        ],
       },
       position: (75, 7),
      },
      position: (74, 5),
     },
     position: (45, 22),
    },
   ),
  ],
  recursive: true,
  position: (3, 1),
 },
 position: (1, 1),
}