---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "gitolite",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pubkeyFile",
        position: (8, 3),
       },
      ],
     },
     BinaryOperation {
      operator: Addition,
      operands: [
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "pkgs",
          position: (8, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "writeTextDir",
            position: (8, 22),
           },
          ],
         },
         default: None,
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "gitolite-admin.pub",
            position: (8, 36),
           },
          ],
         },
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (8, 56),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "adminPubkey",
             position: (8, 60),
            },
           ],
          },
          default: None,
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/gitolite-admin.pub",
          position: (8, 76),
         },
        ],
       },
      ],
      position: (8, 73),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "hooks",
        position: (9, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "lib",
        position: (9, 11),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "concatMapStrings",
          position: (9, 15),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Function {
        argument: Some(
         "hook",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: String {
         parts: [
          Expression {
           expression: Variable {
            identifier: "hook",
            position: (9, 42),
           },
          },
          Raw {
           content: " ",
           position: (9, 47),
          },
         ],
        },
        position: (9, 33),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (9, 51),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "commonHooks",
           position: (9, 55),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (12, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (13, 5),
           },
           Raw {
            content: "gitolite",
            position: (13, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (14, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (14, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (15, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (15, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (15, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (16, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (16, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (17, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Enable gitolite management under the\n<literal>gitolite</literal> user. After\nswitching to a configuration with Gitolite enabled, you can\nthen run <literal>git clone\ngitolite@host:gitolite-admin.git</literal> to manage it further.\n",
                    position: (18, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "dataDir",
               position: (26, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (26, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (27, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (27, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (27, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (28, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/var/lib/gitolite",
                    position: (28, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (29, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The gitolite home directory used to store all repositories. If left as the default value\nthis directory will automatically be created before the gitolite server starts, otherwise\nthe sysadmin is responsible for ensuring the directory exists with appropriate ownership\nand permissions.\n",
                    position: (30, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "adminPubkey",
               position: (37, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (37, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (38, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (38, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (38, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (39, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Initial administrative public key for Gitolite. This should\nbe an SSH Public Key. Note that this key will only be used\nonce, upon the first initialization of the Gitolite user.\nThe key string cannot have any line breaks in it.\n",
                    position: (40, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enableGitAnnex",
               position: (47, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (47, 24),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (48, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (48, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (48, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (49, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (49, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (50, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Enable git-annex support. Uses the <literal>extraGitoliteRc</literal> option\nto apply the necessary configuration.\n",
                    position: (51, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "commonHooks",
               position: (56, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (56, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (57, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (57, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (57, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (57, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "path",
                       position: (57, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (58, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (59, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "A list of custom git hooks that get copied to <literal>~/.gitolite/hooks/common</literal>.\n",
                    position: (60, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraGitoliteRc",
               position: (64, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (64, 25),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (65, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (65, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (65, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (66, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (67, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (67, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "",
                      position: (68, 1),
                     },
                     Raw {
                      content: "''",
                      position: (68, 11),
                     },
                     Raw {
                      content: "\n  $RC{UMASK} = 0027;\n  $RC{SITE_INFO} = 'This is our private repository host';\n  push( @{$RC{ENABLE}}, 'Kindergarten' ); # enable the command/feature\n  @{$RC{ENABLE}} = grep { $_ ne 'desc' } @{$RC{ENABLE}}; # disable the command/feature\n",
                      position: (68, 14),
                     },
                     Raw {
                      content: "''",
                      position: (73, 11),
                     },
                     Raw {
                      content: "\n",
                      position: (73, 14),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (75, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Extra configuration to append to the default <literal>~/.gitolite.rc</literal>.\n\nThis should be Perl code that modifies the <literal>%RC</literal>\nconfiguration variable. The default <literal>~/.gitolite.rc</literal>\ncontent is generated by invoking <literal>gitolite print-default-rc</literal>,\nand extra configuration from this option is appended to it. The result\nis placed to Nix store, and the <literal>~/.gitolite.rc</literal> file\nbecomes a symlink to it.\n\nIf you already have a customized (or otherwise changed)\n<literal>~/.gitolite.rc</literal> file, NixOS will refuse to replace\nit with a symlink, and the `gitolite-init` initialization service\nwill fail. In this situation, in order to use this option, you\nwill need to take any customizations you may have in\n<literal>~/.gitolite.rc</literal>, convert them to appropriate Perl\nstatements, add them to this option, and remove the file.\n\nSee also the <literal>enableGitAnnex</literal> option.\n",
                    position: (76, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "user",
               position: (97, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (97, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (98, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (98, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (98, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (99, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "gitolite",
                    position: (99, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (100, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Gitolite user account. This is the username of the gitolite endpoint.\n",
                    position: (101, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "group",
               position: (105, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (105, 15),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (106, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (106, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (106, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (107, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "gitolite",
                    position: (107, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (108, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Primary group of the Gitolite user account.\n",
                    position: (109, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (115, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (115, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (115, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (115, 21),
           },
          ],
         },
         default: None,
        },
        LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "manageGitoliteRc",
              position: (117, 5),
             },
            ],
           },
           BinaryOperation {
            operator: NotEqualTo,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (117, 24),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "extraGitoliteRc",
                 position: (117, 28),
                },
               ],
              },
              default: None,
             },
             String {
              parts: [],
             },
            ],
            position: (117, 44),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "rcDir",
              position: (118, 5),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (118, 13),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "runCommand",
                position: (118, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "gitolite-rc",
                position: (118, 30),
               },
              ],
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "preferLocalBuild",
                   position: (118, 45),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (118, 64),
                },
               ),
              ],
              recursive: false,
             },
             Variable {
              identifier: "rcDirScript",
              position: (118, 72),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "rcDirScript",
              position: (119, 5),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "mkdir \"$out\"\nexport HOME=temp-home\nmkdir -p \"$HOME/.gitolite/logs\" # gitolite can't run without it\n",
                position: (121, 1),
               },
               Raw {
                content: "'",
                position: (124, 9),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (124, 12),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "gitolite",
                    position: (124, 17),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "'/bin/gitolite print-default-rc >>\"$out/gitolite.rc.default\"\ncat <<END >>\"$out/gitolite.rc\"\n# This file is managed by NixOS.\n# Use services.gitolite options to control it.\n\nEND\ncat \"$out/gitolite.rc.default\" >>\"$out/gitolite.rc\"\n",
                position: (124, 26),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "optionalString",
               position: (132, 7),
              },
              arguments: [
               BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (132, 23),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "extraGitoliteRc",
                     position: (132, 27),
                    },
                   ],
                  },
                  default: None,
                 },
                 String {
                  parts: [],
                 },
                ],
                position: (132, 43),
               },
               String {
                parts: [
                 Raw {
                  content: "echo -n ",
                  position: (133, 1),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "escapeShellArg",
                    position: (133, 19),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "\n# Added by NixOS:\n",
                       position: (134, 1),
                      },
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "removeSuffix",
                         position: (136, 13),
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: "\n",
                            position: (136, 27),
                           },
                          ],
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (136, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "extraGitoliteRc",
                             position: (136, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                       },
                      },
                      Raw {
                       content: "\n\n# per perl rules, this should be the last line in such a file:\n1;\n",
                       position: (136, 51),
                      },
                     ],
                    },
                   ],
                  },
                 },
                 Raw {
                  content: " >>\"$out/gitolite.rc\"\n",
                  position: (140, 12),
                 },
                ],
               },
              ],
             },
            ],
            position: (131, 10),
           },
          ),
         ],
         target: Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (143, 5),
              },
              Raw {
               content: "gitolite",
               position: (143, 14),
              },
              Raw {
               content: "extraGitoliteRc",
               position: (143, 23),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "optionalString",
              position: (143, 41),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (143, 56),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "enableGitAnnex",
                  position: (143, 60),
                 },
                ],
               },
               default: None,
              },
              String {
               parts: [
                Raw {
                 content: "# Enable git-annex support:\npush( @{$RC{ENABLE}}, 'git-annex-shell ua');\n",
                 position: (144, 1),
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "users",
               position: (148, 5),
              },
              Raw {
               content: "users",
               position: (148, 11),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (148, 19),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "user",
                   position: (148, 23),
                  },
                 ],
                },
                default: None,
               },
              },
             ],
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (149, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Gitolite user",
                  position: (149, 26),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "home",
                  position: (150, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (150, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "dataDir",
                   position: (150, 29),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "uid",
                  position: (151, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (151, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "ids",
                   position: (151, 32),
                  },
                  Raw {
                   content: "uids",
                   position: (151, 36),
                  },
                  Raw {
                   content: "gitolite",
                   position: (151, 41),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "group",
                  position: (152, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (152, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "group",
                   position: (152, 29),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "useDefaultShell",
                  position: (153, 7),
                 },
                ],
               },
               Variable {
                identifier: "true",
                position: (153, 25),
               },
              ),
             ],
             recursive: false,
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "users",
               position: (155, 5),
              },
              Raw {
               content: "groups",
               position: (155, 11),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (155, 20),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "group",
                   position: (155, 24),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "gid",
               position: (155, 31),
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "config",
              position: (155, 37),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "ids",
                position: (155, 44),
               },
               Raw {
                content: "gids",
                position: (155, 48),
               },
               Raw {
                content: "gitolite",
                position: (155, 53),
               },
              ],
             },
             default: None,
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "systemd",
               position: (157, 5),
              },
              Raw {
               content: "services",
               position: (157, 13),
              },
              Raw {
               content: "gitolite-init",
               position: (157, 22),
              },
             ],
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (158, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Gitolite initialization",
                  position: (158, 22),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "wantedBy",
                  position: (159, 7),
                 },
                ],
               },
               List {
                elements: [
                 String {
                  parts: [
                   Raw {
                    content: "multi-user.target",
                    position: (159, 24),
                   },
                  ],
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "unitConfig",
                  position: (160, 7),
                 },
                 Raw {
                  content: "RequiresMountsFor",
                  position: (160, 18),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (160, 38),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "dataDir",
                   position: (160, 42),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "environment",
                  position: (162, 7),
                 },
                ],
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "GITOLITE_RC",
                     position: (163, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: ".gitolite.rc",
                     position: (163, 24),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "GITOLITE_RC_DEFAULT",
                     position: (164, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Expression {
                     expression: Variable {
                      identifier: "rcDir",
                      position: (164, 34),
                     },
                    },
                    Raw {
                     content: "/gitolite.rc.default",
                     position: (164, 40),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "serviceConfig",
                  position: (167, 7),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "mkMerge",
                 position: (167, 23),
                },
                arguments: [
                 List {
                  elements: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "mkIf",
                     position: (168, 10),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (168, 16),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "dataDir",
                           position: (168, 20),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [
                         Raw {
                          content: "/var/lib/gitolite",
                          position: (168, 32),
                         },
                        ],
                       },
                      ],
                      position: (168, 28),
                     },
                     Map {
                      bindings: [
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "StateDirectory",
                           position: (169, 11),
                          },
                         ],
                        },
                        String {
                         parts: [
                          Raw {
                           content: "gitolite gitolite/.gitolite gitolite/.gitolite/logs",
                           position: (169, 29),
                          },
                         ],
                        },
                       ),
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "StateDirectoryMode",
                           position: (170, 11),
                          },
                         ],
                        },
                        String {
                         parts: [
                          Raw {
                           content: "0750",
                           position: (170, 33),
                          },
                         ],
                        },
                       ),
                      ],
                      recursive: false,
                     },
                    ],
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Type",
                         position: (173, 11),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "oneshot",
                         position: (173, 19),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "User",
                         position: (174, 11),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (174, 18),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "user",
                          position: (174, 22),
                         },
                        ],
                       },
                       default: None,
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Group",
                         position: (175, 11),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (175, 19),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "group",
                          position: (175, 23),
                         },
                        ],
                       },
                       default: None,
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "WorkingDirectory",
                         position: (176, 11),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "~",
                         position: (176, 31),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "RemainAfterExit",
                         position: (177, 11),
                        },
                       ],
                      },
                      Variable {
                       identifier: "true",
                       position: (177, 29),
                      },
                     ),
                    ],
                    recursive: false,
                   },
                  ],
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "path",
                  position: (181, 7),
                 },
                ],
               },
               List {
                elements: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (181, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "gitolite",
                     position: (181, 21),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (181, 30),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "git",
                     position: (181, 35),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (181, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "perl",
                     position: (181, 44),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (181, 49),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bash",
                     position: (181, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (181, 59),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "diffutils",
                     position: (181, 64),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (181, 74),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "programs",
                     position: (181, 81),
                    },
                    Raw {
                     content: "ssh",
                     position: (181, 90),
                    },
                    Raw {
                     content: "package",
                     position: (181, 94),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "script",
                  position: (182, 7),
                 },
                ],
               },
               LetIn {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "rcSetupScriptIfCustomFile",
                     position: (184, 9),
                    },
                   ],
                  },
                  IfThenElse {
                   predicate: Variable {
                    identifier: "manageGitoliteRc",
                    position: (185, 14),
                   },
                   then: String {
                    parts: [
                     Raw {
                      content: "cat <<END\n<3>ERROR: NixOS can't apply declarative configuration\n<3>to your .gitolite.rc file, because it seems to be\n<3>already customized manually.\n<3>See the services.gitolite.extraGitoliteRc option\n<3>in \"man configuration.nix\" for more information.\nEND\n# Not sure if the line below addresses the issue directly or just\n# adds a delay, but without it our error message often doesn't\n# show up in `systemctl status gitolite-init`.\njournalctl --flush\nexit 1\n",
                      position: (186, 1),
                     },
                    ],
                   },
                   else_: String {
                    parts: [
                     Raw {
                      content: ":\n",
                      position: (199, 1),
                     },
                    ],
                   },
                   position: (185, 11),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "rcSetupScriptIfDefaultFileOrStoreSymlink",
                     position: (201, 9),
                    },
                   ],
                  },
                  IfThenElse {
                   predicate: Variable {
                    identifier: "manageGitoliteRc",
                    position: (202, 14),
                   },
                   then: String {
                    parts: [
                     Raw {
                      content: "ln -sf \"",
                      position: (203, 1),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "rcDir",
                       position: (203, 23),
                      },
                     },
                     Raw {
                      content: "/gitolite.rc\" \"$GITOLITE_RC\"\n",
                      position: (203, 29),
                     },
                    ],
                   },
                   else_: String {
                    parts: [
                     Raw {
                      content: "[[ -L \"$GITOLITE_RC\" ]] && rm -f \"$GITOLITE_RC\"\n",
                      position: (205, 1),
                     },
                    ],
                   },
                   position: (202, 11),
                  },
                 ),
                ],
                target: BinaryOperation {
                 operator: Addition,
                 operands: [
                  BinaryOperation {
                   operator: Addition,
                   operands: [
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      BinaryOperation {
                       operator: Addition,
                       operands: [
                        String {
                         parts: [
                          Raw {
                           content: "if ( [[ ! -e \"$GITOLITE_RC\" ]] && [[ ! -L \"$GITOLITE_RC\" ]] ) ||\n   ( [[ -f \"$GITOLITE_RC\" ]] && diff -q \"$GITOLITE_RC\" \"$GITOLITE_RC_DEFAULT\" >/dev/null ) ||\n   ( [[ -L \"$GITOLITE_RC\" ]] && [[ \"$(readlink \"$GITOLITE_RC\")\" =~ ^/nix/store/ ]] )\nthen\n",
                           position: (209, 1),
                          },
                         ],
                        },
                        Variable {
                         identifier: "rcSetupScriptIfDefaultFileOrStoreSymlink",
                         position: (213, 14),
                        },
                       ],
                       position: (213, 12),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "else\n",
                         position: (215, 1),
                        },
                       ],
                      },
                     ],
                     position: (213, 55),
                    },
                    Variable {
                     identifier: "rcSetupScriptIfCustomFile",
                     position: (216, 14),
                    },
                   ],
                   position: (216, 12),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "fi\n\nif [ ! -d repositories ]; then\n  gitolite setup -pk ",
                     position: (218, 1),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "pubkeyFile",
                      position: (221, 34),
                     },
                    },
                    Raw {
                     content: "\nfi\nif [ -n \"",
                     position: (221, 45),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "hooks",
                      position: (223, 22),
                     },
                    },
                    Raw {
                     content: "\" ]; then\n  cp -f ",
                     position: (223, 28),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "hooks",
                      position: (224, 21),
                     },
                    },
                    Raw {
                     content: " .gitolite/hooks/common/\n  chmod +x .gitolite/hooks/common/*\nfi\ngitolite setup # Upgrade if needed\n",
                     position: (224, 27),
                    },
                   ],
                  },
                 ],
                 position: (216, 40),
                },
                position: (183, 7),
               },
              ),
             ],
             recursive: false,
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "environment",
               position: (231, 5),
              },
              Raw {
               content: "systemPackages",
               position: (231, 17),
              },
             ],
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (231, 36),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "gitolite",
                    position: (231, 41),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (231, 50),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "git",
                    position: (231, 55),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (232, 12),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (232, 21),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enableGitAnnex",
                    position: (232, 25),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (232, 40),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "git-annex",
                    position: (232, 45),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ],
             position: (232, 9),
            },
           ),
          ],
          recursive: false,
         },
         position: (116, 3),
        },
       ],
      },
     ),
    ],
    recursive: false,
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}