---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "prometheus",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "workingDir",
        position: (8, 3),
       },
      ],
     },
     BinaryOperation {
      operator: Addition,
      operands: [
       String {
        parts: [
         Raw {
          content: "/var/lib/",
          position: (8, 17),
         },
        ],
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (8, 30),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "stateDir",
           position: (8, 34),
          },
         ],
        },
        default: None,
       },
      ],
      position: (8, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "prometheusYmlOut",
        position: (10, 3),
       },
      ],
     },
     String {
      parts: [
       Expression {
        expression: Variable {
         identifier: "workingDir",
         position: (10, 25),
        },
       },
       Raw {
        content: "/prometheus-substituted.yaml",
        position: (10, 36),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "triggerReload",
        position: (12, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (12, 19),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeShellScriptBin",
          position: (12, 24),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "trigger-reload-prometheus",
          position: (12, 45),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "PATH=\"",
          position: (13, 1),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "makeBinPath",
            position: (13, 13),
           },
           arguments: [
            With {
             expression: Variable {
              identifier: "pkgs",
              position: (13, 31),
             },
             target: List {
              elements: [
               Variable {
                identifier: "systemd",
                position: (13, 39),
               },
              ],
              position: (13, 37),
             },
             position: (13, 26),
            },
           ],
          },
         },
         Raw {
          content: "\"\nif systemctl -q is-active prometheus.service; then\n  systemctl reload prometheus.service\nfi\n",
          position: (13, 50),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "reload",
        position: (19, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (19, 12),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeShellScriptBin",
          position: (19, 17),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "reload-prometheus",
          position: (19, 38),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "PATH=\"",
          position: (20, 1),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "makeBinPath",
            position: (20, 13),
           },
           arguments: [
            With {
             expression: Variable {
              identifier: "pkgs",
              position: (20, 31),
             },
             target: List {
              elements: [
               Variable {
                identifier: "systemd",
                position: (20, 39),
               },
               Variable {
                identifier: "coreutils",
                position: (20, 47),
               },
               Variable {
                identifier: "gnugrep",
                position: (20, 57),
               },
              ],
              position: (20, 37),
             },
             position: (20, 26),
            },
           ],
          },
         },
         Raw {
          content: "\"\ncursor=$(journalctl --show-cursor -n0 | grep -oP \"cursor: \\K.*\")\nkill -HUP $MAINPID\njournalctl -u prometheus.service --after-cursor=\"$cursor\" -f \\\n  | grep -m 1 \"Completed loading of configuration file\" > /dev/null\n",
          position: (20, 68),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promtoolCheck",
        position: (28, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "what",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "name",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "file",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: IfThenElse {
         predicate: PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (29, 8),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "checkConfig",
             position: (29, 12),
            },
           ],
          },
          default: None,
         },
         then: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (30, 7),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "runCommandLocal",
              position: (30, 12),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Expression {
              expression: Variable {
               identifier: "name",
               position: (31, 12),
              },
             },
             Raw {
              content: "-",
              position: (31, 17),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "replaceStrings",
                position: (31, 20),
               },
               arguments: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: " ",
                     position: (31, 37),
                    },
                   ],
                  },
                 ],
                 position: (31, 35),
                },
                List {
                 elements: [
                  String {
                   parts: [],
                  },
                 ],
                 position: (31, 41),
                },
                Variable {
                 identifier: "what",
                 position: (31, 46),
                },
               ],
              },
             },
             Raw {
              content: "-checked",
              position: (31, 51),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "buildInputs",
                 position: (32, 11),
                },
               ],
              },
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (32, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "package",
                    position: (32, 31),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (32, 25),
              },
             ),
            ],
            recursive: false,
            position: (32, 9),
           },
           String {
            parts: [
             Raw {
              content: "ln -s ",
              position: (33, 1),
             },
             Expression {
              expression: Variable {
               identifier: "file",
               position: (33, 17),
              },
             },
             Raw {
              content: " $out\npromtool ",
              position: (33, 22),
             },
             Expression {
              expression: Variable {
               identifier: "what",
               position: (34, 20),
              },
             },
             Raw {
              content: " $out\n",
              position: (34, 25),
             },
            ],
           },
          ],
         },
         else_: Variable {
          identifier: "file",
          position: (35, 15),
         },
         position: (29, 5),
        },
        position: (28, 31),
       },
       position: (28, 25),
      },
      position: (28, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "writePrettyJSON",
        position: (38, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "pkgs",
          position: (39, 5),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "runCommandLocal",
            position: (39, 10),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "name",
          position: (39, 26),
         },
         Map {
          bindings: [],
          recursive: false,
          position: (39, 31),
         },
         String {
          parts: [
           Raw {
            content: "echo ",
            position: (40, 1),
           },
           Raw {
            content: "'",
            position: (40, 12),
           },
           Expression {
            expression: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (40, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "toJSON",
                 position: (40, 24),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (40, 31),
              },
             ],
            },
           },
           Raw {
            content: "' | ",
            position: (40, 33),
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (40, 39),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "jq",
                position: (40, 44),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "/bin/jq . > $out\n",
            position: (40, 47),
           },
          ],
         },
        ],
       },
       position: (38, 27),
      },
      position: (38, 21),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "generatedPrometheusYml",
        position: (43, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "writePrettyJSON",
       position: (43, 28),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "prometheus.yml",
          position: (43, 45),
         },
        ],
       },
       Variable {
        identifier: "promConfig",
        position: (43, 61),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promConfig",
        position: (46, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "global",
           position: (47, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "filterValidPrometheus",
          position: (47, 14),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (47, 36),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "globalConfig",
              position: (47, 40),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "rule_files",
           position: (48, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (48, 18),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "promtoolCheck",
            position: (48, 23),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "check rules",
               position: (48, 38),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "rules",
               position: (48, 52),
              },
             ],
            },
           ],
          },
          BinaryOperation {
           operator: Concatenation,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (48, 61),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "ruleFiles",
                position: (48, 65),
               },
              ],
             },
             default: None,
            },
            List {
             elements: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (49, 8),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "writeText",
                   position: (49, 13),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "prometheus.rules",
                   position: (49, 24),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "concatStringsSep",
                  position: (49, 43),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "\n",
                     position: (49, 61),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (49, 65),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "rules",
                      position: (49, 69),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ],
              },
             ],
             position: (48, 78),
            },
           ],
           position: (48, 75),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "scrape_configs",
           position: (51, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "filterValidPrometheus",
          position: (51, 22),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (51, 44),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "scrapeConfigs",
              position: (51, 48),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "remote_write",
           position: (52, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "filterValidPrometheus",
          position: (52, 20),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (52, 42),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "remoteWrite",
              position: (52, 46),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "remote_read",
           position: (53, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "filterValidPrometheus",
          position: (53, 19),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (53, 41),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "remoteRead",
              position: (53, 45),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "alerting",
           position: (54, 5),
          },
         ],
        },
        Map {
         bindings: [
          Inherit(
           Some(
            Variable {
             identifier: "cfg",
             position: (55, 16),
            },
           ),
           [
            Raw {
             content: "alertmanagers",
             position: (55, 21),
            },
           ],
          ),
         ],
         recursive: false,
         position: (54, 16),
        },
       ),
      ],
      recursive: false,
      position: (46, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "prometheusYml",
        position: (59, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "yml",
           position: (61, 7),
          },
         ],
        },
        IfThenElse {
         predicate: BinaryOperation {
          operator: NotEqualTo,
          operands: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (62, 12),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "configText",
               position: (62, 16),
              },
             ],
            },
            default: None,
           },
           Variable {
            identifier: "null",
            position: (62, 30),
           },
          ],
          position: (62, 27),
         },
         then: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (63, 11),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "writeText",
              position: (63, 16),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "prometheus.yml",
              position: (63, 27),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (63, 43),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "configText",
               position: (63, 47),
              },
             ],
            },
            default: None,
           },
          ],
         },
         else_: Variable {
          identifier: "generatedPrometheusYml",
          position: (64, 14),
         },
         position: (62, 9),
        },
       ),
      ],
      target: FunctionApplication {
       function: Variable {
        identifier: "promtoolCheck",
        position: (66, 5),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "check config",
           position: (66, 20),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "prometheus.yml",
           position: (66, 35),
          },
         ],
        },
        Variable {
         identifier: "yml",
         position: (66, 51),
        },
       ],
      },
      position: (60, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cmdlineArgs",
        position: (68, 3),
       },
      ],
     },
     BinaryOperation {
      operator: Concatenation,
      operands: [
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (68, 17),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "extraFlags",
           position: (68, 21),
          },
         ],
        },
        default: None,
       },
       BinaryOperation {
        operator: Concatenation,
        operands: [
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "--storage.tsdb.path=",
              position: (69, 6),
             },
             Expression {
              expression: Variable {
               identifier: "workingDir",
               position: (69, 28),
              },
             },
             Raw {
              content: "/data/",
              position: (69, 39),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "--config.file=",
              position: (70, 6),
             },
             Expression {
              expression: IfThenElse {
               predicate: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (71, 10),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "enableReload",
                   position: (71, 14),
                  },
                 ],
                },
                default: None,
               },
               then: String {
                parts: [
                 Raw {
                  content: "/etc/prometheus/prometheus.yaml",
                  position: (72, 13),
                 },
                ],
               },
               else_: Variable {
                identifier: "prometheusYml",
                position: (73, 12),
               },
               position: (71, 7),
              },
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "--web.listen-address=",
              position: (75, 6),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (75, 29),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "listenAddress",
                  position: (75, 33),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: ":",
              position: (75, 47),
             },
             Expression {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (75, 50),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "toString",
                   position: (75, 59),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (75, 68),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "port",
                    position: (75, 72),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "--alertmanager.notification-queue-capacity=",
              position: (76, 6),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (76, 51),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (76, 60),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "alertmanagerNotificationQueueCapacity",
                    position: (76, 64),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
            ],
           },
          ],
          position: (68, 35),
         },
         BinaryOperation {
          operator: Concatenation,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "optional",
             position: (77, 8),
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (77, 18),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "webExternalUrl",
                   position: (77, 22),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (77, 40),
               },
              ],
              position: (77, 37),
             },
             String {
              parts: [
               Raw {
                content: "--web.external-url=",
                position: (77, 47),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (77, 68),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "webExternalUrl",
                    position: (77, 72),
                   },
                  ],
                 },
                 default: None,
                },
               },
              ],
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "optional",
             position: (78, 8),
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (78, 18),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "retentionTime",
                   position: (78, 22),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (78, 39),
               },
              ],
              position: (78, 36),
             },
             String {
              parts: [
               Raw {
                content: "--storage.tsdb.retention.time=",
                position: (78, 46),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (78, 78),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "retentionTime",
                    position: (78, 82),
                   },
                  ],
                 },
                 default: None,
                },
               },
              ],
             },
            ],
           },
          ],
          position: (78, 5),
         },
        ],
        position: (77, 5),
       },
      ],
      position: (68, 32),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "filterValidPrometheus",
        position: (80, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "filterAttrsListRecursive",
       position: (80, 27),
      },
      arguments: [
       Function {
        argument: Some(
         "n",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "v",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: UnaryOperation {
          operator: Not,
          operand: BinaryOperation {
           operator: LogicalOr,
           operands: [
            BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "n",
               position: (80, 61),
              },
              String {
               parts: [
                Raw {
                 content: "_module",
                 position: (80, 67),
                },
               ],
              },
             ],
             position: (80, 63),
            },
            BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "v",
               position: (80, 79),
              },
              Variable {
               identifier: "null",
               position: (80, 84),
              },
             ],
             position: (80, 81),
            },
           ],
           position: (80, 76),
          },
          position: (80, 59),
         },
         position: (80, 56),
        },
        position: (80, 53),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "filterAttrsListRecursive",
        position: (81, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "isAttrs",
          position: (82, 8),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (82, 16),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "listToAttrs",
          position: (83, 7),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "concatMap",
            position: (85, 11),
           },
           arguments: [
            Function {
             argument: Some(
              "name",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "v",
                   position: (87, 19),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "x",
                  position: (87, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (87, 27),
                    },
                   },
                  ],
                 },
                 default: None,
                },
               ),
              ],
              target: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "pred",
                 position: (88, 18),
                },
                arguments: [
                 Variable {
                  identifier: "name",
                  position: (88, 23),
                 },
                 Variable {
                  identifier: "v",
                  position: (88, 28),
                 },
                ],
               },
               then: List {
                elements: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "nameValuePair",
                   position: (89, 18),
                  },
                  arguments: [
                   Variable {
                    identifier: "name",
                    position: (89, 32),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "filterAttrsListRecursive",
                     position: (89, 38),
                    },
                    arguments: [
                     Variable {
                      identifier: "pred",
                      position: (89, 63),
                     },
                     Variable {
                      identifier: "v",
                      position: (89, 68),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (88, 35),
               },
               else_: List {
                elements: [],
                position: (90, 22),
               },
               position: (88, 15),
              },
              position: (87, 15),
             },
             position: (86, 14),
            },
            FunctionApplication {
             function: Variable {
              identifier: "attrNames",
              position: (92, 14),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (92, 24),
              },
             ],
            },
           ],
          },
         ],
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: Variable {
           identifier: "isList",
           position: (94, 13),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (94, 20),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (95, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "filterAttrsListRecursive",
             position: (95, 12),
            },
            arguments: [
             Variable {
              identifier: "pred",
              position: (95, 37),
             },
            ],
           },
           Variable {
            identifier: "x",
            position: (95, 43),
           },
          ],
         },
         else_: Variable {
          identifier: "x",
          position: (96, 10),
         },
         position: (94, 10),
        },
        position: (82, 5),
       },
       position: (81, 36),
      },
      position: (81, 30),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkDefOpt",
        position: (102, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "type",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "defaultStr",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "description",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "mkOpt",
          position: (102, 45),
         },
         arguments: [
          Variable {
           identifier: "type",
           position: (102, 51),
          },
          BinaryOperation {
           operator: Addition,
           operands: [
            Variable {
             identifier: "description",
             position: (102, 57),
            },
            String {
             parts: [
              Raw {
               content: "\nDefaults to <literal>",
               position: (103, 1),
              },
              Expression {
               expression: Variable {
                identifier: "defaultStr",
                position: (104, 28),
               },
              },
              Raw {
               content: "</literal> in prometheus\nwhen set to <literal>null</literal>.\n",
               position: (104, 39),
              },
             ],
            },
           ],
           position: (102, 69),
          },
         ],
        },
        position: (102, 32),
       },
       position: (102, 20),
      },
      position: (102, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkOpt",
        position: (108, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "type",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "description",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (108, 30),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (109, 5),
              },
             ],
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (109, 12),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "nullOr",
                 position: (109, 18),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "type",
               position: (109, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "default",
               position: (110, 5),
              },
             ],
            },
            Variable {
             identifier: "null",
             position: (110, 15),
            },
           ),
           Inherit(
            None,
            [
             Raw {
              content: "description",
              position: (111, 13),
             },
            ],
           ),
          ],
          recursive: false,
          position: (108, 39),
         },
        ],
       },
       position: (108, 17),
      },
      position: (108, 11),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkSdConfigModule",
        position: (114, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "extraOptions",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "types",
         position: (114, 36),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "submodule",
           position: (114, 42),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "options",
              position: (115, 5),
             },
            ],
           },
           BinaryOperation {
            operator: Update,
            operands: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "basic_auth",
                   position: (116, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOpt",
                  position: (116, 20),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "promTypes",
                    position: (116, 26),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "basic_auth",
                      position: (116, 36),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Optional HTTP basic authentication information.\n",
                     position: (117, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "authorization",
                   position: (120, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOpt",
                  position: (120, 23),
                 },
                 arguments: [
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (121, 10),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "submodule",
                       position: (121, 16),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "options",
                          position: (122, 11),
                         },
                        ],
                       },
                       Map {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "type",
                             position: (123, 13),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "mkDefOpt",
                            position: (123, 20),
                           },
                           arguments: [
                            PropertyAccess {
                             expression: Variable {
                              identifier: "types",
                              position: (123, 29),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "str",
                                position: (123, 35),
                               },
                              ],
                             },
                             default: None,
                            },
                            String {
                             parts: [
                              Raw {
                               content: "Bearer",
                               position: (123, 40),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Raw {
                               content: "Sets the authentication type.\n",
                               position: (124, 1),
                              },
                             ],
                            },
                           ],
                          },
                         ),
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "credentials",
                             position: (127, 13),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "mkOpt",
                            position: (127, 27),
                           },
                           arguments: [
                            PropertyAccess {
                             expression: Variable {
                              identifier: "types",
                              position: (127, 33),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "str",
                                position: (127, 39),
                               },
                              ],
                             },
                             default: None,
                            },
                            String {
                             parts: [
                              Raw {
                               content: "Sets the credentials. It is mutually exclusive with `credentials_file`.\n",
                               position: (128, 1),
                              },
                             ],
                            },
                           ],
                          },
                         ),
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "credentials_file",
                             position: (131, 13),
                            },
                           ],
                          },
                          FunctionApplication {
                           function: Variable {
                            identifier: "mkOpt",
                            position: (131, 32),
                           },
                           arguments: [
                            PropertyAccess {
                             expression: Variable {
                              identifier: "types",
                              position: (131, 38),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "str",
                                position: (131, 44),
                               },
                              ],
                             },
                             default: None,
                            },
                            String {
                             parts: [
                              Raw {
                               content: "Sets the credentials to the credentials read from the configured file.\nIt is mutually exclusive with `credentials`.\n",
                               position: (132, 1),
                              },
                             ],
                            },
                           ],
                          },
                         ),
                        ],
                        recursive: false,
                        position: (122, 21),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (121, 26),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Optional `Authorization` header configuration.\n",
                     position: (137, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "oauth2",
                   position: (140, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOpt",
                  position: (140, 16),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "promtypes",
                    position: (140, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "oauth2",
                      position: (140, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Optional OAuth 2.0 configuration.\nCannot be used at the same time as basic_auth or authorization.\n",
                     position: (141, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "proxy_url",
                   position: (145, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOpt",
                  position: (145, 19),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (145, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (145, 31),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Optional proxy URL.\n",
                     position: (146, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "follow_redirects",
                   position: (149, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkDefOpt",
                  position: (149, 26),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (149, 35),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "bool",
                      position: (149, 41),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "true",
                     position: (149, 47),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Configure whether HTTP requests follow HTTP 3xx redirects.\n",
                     position: (150, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (153, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOpt",
                  position: (153, 20),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "promTypes",
                    position: (153, 26),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "tls_config",
                      position: (153, 36),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "TLS configuration.\n",
                     position: (154, 1),
                    },
                   ],
                  },
                 ],
                },
               ),
              ],
              recursive: false,
              position: (115, 15),
             },
             Variable {
              identifier: "extraOptions",
              position: (156, 10),
             },
            ],
            position: (156, 7),
           },
          ),
         ],
         recursive: false,
         position: (114, 52),
        },
       ],
      },
      position: (114, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (163, 3),
       },
       Raw {
        content: "globalConfig",
        position: (163, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (163, 28),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (163, 34),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (164, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scrape_interval",
                position: (165, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (165, 25),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (165, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (165, 40),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "1m",
                  position: (165, 45),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "How frequently to scrape targets by default.\n",
                  position: (166, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scrape_timeout",
                position: (169, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (169, 24),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (169, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (169, 39),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "10s",
                  position: (169, 44),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "How long until a scrape request times out.\n",
                  position: (170, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "evaluation_interval",
                position: (173, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (173, 29),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (173, 38),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (173, 44),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "1m",
                  position: (173, 49),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "How frequently to evaluate rules by default.\n",
                  position: (174, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "external_labels",
                position: (177, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (177, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (177, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrsOf",
                    position: (177, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (177, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (177, 52),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The labels to add to any time series or alerts when\ncommunicating with external systems (federation, remote\nstorage, Alertmanager).\n",
                  position: (178, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (164, 15),
          },
         ),
        ],
        recursive: false,
        position: (163, 44),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (185, 3),
       },
       Raw {
        content: "basic_auth",
        position: (185, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (185, 26),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (185, 32),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (186, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "username",
                position: (187, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (187, 18),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (188, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (188, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (188, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (189, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "HTTP username\n",
                     position: (190, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (187, 27),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "password",
                position: (193, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (193, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (193, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (193, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "HTTP password",
                  position: (193, 35),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "password_file",
                position: (194, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (194, 23),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (194, 29),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (194, 35),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "HTTP password file",
                  position: (194, 40),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (186, 15),
          },
         ),
        ],
        recursive: false,
        position: (185, 42),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (198, 3),
       },
       Raw {
        content: "tls_config",
        position: (198, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (198, 26),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (198, 32),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (199, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "ca_file",
                position: (200, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (200, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (200, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (200, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "CA certificate to validate API server certificate with.\n",
                  position: (201, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "cert_file",
                position: (204, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (204, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (204, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (204, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Certificate file for client cert authentication to the server.\n",
                  position: (205, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "key_file",
                position: (208, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (208, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (208, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (208, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Key file for client cert authentication to the server.\n",
                  position: (209, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "server_name",
                position: (212, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (212, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (212, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (212, 33),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "ServerName extension to indicate the name of the server.\nhttp://tools.ietf.org/html/rfc4366#section-3.1\n",
                  position: (213, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "insecure_skip_verify",
                position: (217, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (217, 30),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (217, 36),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (217, 42),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Disable validation of the server certificate.\n",
                  position: (218, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (199, 15),
          },
         ),
        ],
        recursive: false,
        position: (198, 42),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promtypes",
        position: (223, 3),
       },
       Raw {
        content: "oauth2",
        position: (223, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (223, 22),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (223, 28),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (224, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "client_id",
                position: (225, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (225, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (225, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (225, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "OAuth client ID.\n",
                  position: (226, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "client_secret",
                position: (229, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (229, 23),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (229, 29),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (229, 35),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "OAuth client secret.\n",
                  position: (230, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "client_secret_file",
                position: (233, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (233, 28),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (233, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (233, 40),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Read the client secret from a file. It is mutually exclusive with `client_secret`.\n",
                  position: (234, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scopes",
                position: (237, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (237, 16),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (237, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (237, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (237, 36),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (237, 42),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Scopes for the token request.\n",
                  position: (238, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "token_url",
                position: (241, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (241, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (241, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (241, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The URL to fetch the token from.\n",
                  position: (242, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "endpoint_params",
                position: (245, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (245, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (245, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrsOf",
                    position: (245, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (245, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (245, 52),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Optional parameters to append to the token URL.\n",
                  position: (246, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (224, 15),
          },
         ),
        ],
        recursive: false,
        position: (223, 38),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (251, 3),
       },
       Raw {
        content: "scrape_config",
        position: (251, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (251, 29),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (251, 35),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (252, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "authorization",
                position: (253, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (253, 23),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (254, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (254, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "nullOr",
                       position: (254, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (254, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "attrs",
                        position: (254, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "default",
                     position: (255, 9),
                    },
                   ],
                  },
                  Variable {
                   identifier: "null",
                   position: (255, 19),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (256, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Sets the `Authorization` header on every scrape request with the configured credentials.\n",
                     position: (257, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (253, 32),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "job_name",
                position: (260, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (260, 18),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (261, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (261, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (261, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (262, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The job name assigned to scraped metrics by default.\n",
                     position: (263, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (260, 27),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scrape_interval",
                position: (266, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (266, 25),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (266, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (266, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "How frequently to scrape targets from this job. Defaults to the\nglobally configured default.\n",
                  position: (267, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scrape_timeout",
                position: (271, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (271, 24),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (271, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (271, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Per-target timeout when scraping this job. Defaults to the\nglobally configured default.\n",
                  position: (272, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "metrics_path",
                position: (276, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (276, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (276, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (276, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "/metrics",
                  position: (276, 42),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The HTTP resource path on which to fetch metrics from targets.\n",
                  position: (277, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "honor_labels",
                position: (280, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (280, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (280, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (280, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "false",
                  position: (280, 43),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Controls how Prometheus handles conflicts between labels\nthat are already present in scraped data and labels that\nPrometheus would attach server-side (\"job\" and \"instance\"\nlabels, manually configured target labels, and labels\ngenerated by service discovery implementations).\n\nIf honor_labels is set to \"true\", label conflicts are\nresolved by keeping label values from the scraped data and\nignoring the conflicting server-side labels.\n\nIf honor_labels is set to \"false\", label conflicts are\nresolved by renaming conflicting labels in the scraped data\nto \"exported_&lt;original-label&gt;\" (for example\n\"exported_instance\", \"exported_job\") and then attaching\nserver-side labels. This is useful for use cases such as\nfederation, where all labels specified in the target should\nbe preserved.\n",
                  position: (281, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "honor_timestamps",
                position: (300, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (300, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (300, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (300, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "true",
                  position: (300, 47),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "honor_timestamps controls whether Prometheus respects the timestamps present\nin scraped data.\n\nIf honor_timestamps is set to <literal>true</literal>, the timestamps of the metrics exposed\nby the target will be used.\n\nIf honor_timestamps is set to <literal>false</literal>, the timestamps of the metrics exposed\nby the target will be ignored.\n",
                  position: (301, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scheme",
                position: (311, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (311, 16),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (311, 26),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (311, 32),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "http",
                      position: (311, 40),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "https",
                      position: (311, 47),
                     },
                    ],
                   },
                  ],
                  position: (311, 37),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "http",
                  position: (311, 58),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The URL scheme with which to fetch metrics from targets.\n",
                  position: (312, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "params",
                position: (315, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (315, 16),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (315, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrsOf",
                    position: (315, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (315, 38),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (315, 44),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (315, 51),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (315, 57),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Optional HTTP URL parameters.\n",
                  position: (316, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "basic_auth",
                position: (319, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (319, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (319, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "basic_auth",
                   position: (319, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every scrape request with the\nconfigured username and password.\npassword and password_file are mutually exclusive.\n",
                  position: (320, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token",
                position: (325, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (325, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (325, 28),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (325, 34),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every scrape request with\nthe configured bearer token. It is mutually exclusive with\n<option>bearer_token_file</option>.\n",
                  position: (326, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token_file",
                position: (331, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (331, 27),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (331, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (331, 39),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every scrape request with\nthe bearer token read from the configured file. It is mutually\nexclusive with <option>bearer_token</option>.\n",
                  position: (332, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (337, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (337, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (337, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (337, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the scrape request's TLS settings.\n",
                  position: (338, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (341, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (341, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (341, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (341, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional proxy URL.\n",
                  position: (342, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "azure_sd_configs",
                position: (345, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (345, 26),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (345, 33),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (345, 39),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (345, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "azure_sd_config",
                     position: (345, 56),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Azure service discovery configurations.\n",
                  position: (346, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "consul_sd_configs",
                position: (349, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (349, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (349, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (349, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (349, 47),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "consul_sd_config",
                     position: (349, 57),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Consul service discovery configurations.\n",
                  position: (350, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "digitalocean_sd_configs",
                position: (353, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (353, 33),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (353, 40),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (353, 46),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (353, 53),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "digitalocean_sd_config",
                     position: (353, 63),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of DigitalOcean service discovery configurations.\n",
                  position: (354, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "docker_sd_configs",
                position: (357, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (357, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (357, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (357, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (357, 47),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "docker_sd_config",
                     position: (357, 57),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Docker service discovery configurations.\n",
                  position: (358, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "dockerswarm_sd_configs",
                position: (361, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (361, 32),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (361, 39),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (361, 45),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (361, 52),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "dockerswarm_sd_config",
                     position: (361, 62),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Docker Swarm service discovery configurations.\n",
                  position: (362, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "dns_sd_configs",
                position: (365, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (365, 24),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (365, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (365, 37),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (365, 44),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "dns_sd_config",
                     position: (365, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of DNS service discovery configurations.\n",
                  position: (366, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "ec2_sd_configs",
                position: (369, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (369, 24),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (369, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (369, 37),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (369, 44),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "ec2_sd_config",
                     position: (369, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of EC2 service discovery configurations.\n",
                  position: (370, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "eureka_sd_configs",
                position: (373, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (373, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (373, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (373, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (373, 47),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "eureka_sd_config",
                     position: (373, 57),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Eureka service discovery configurations.\n",
                  position: (374, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "file_sd_configs",
                position: (377, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (377, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (377, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (377, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (377, 45),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "file_sd_config",
                     position: (377, 55),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of file service discovery configurations.\n",
                  position: (378, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "gce_sd_configs",
                position: (381, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (381, 24),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (381, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (381, 37),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (381, 44),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "gce_sd_config",
                     position: (381, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Google Compute Engine service discovery configurations.\n\nSee <link\nxlink:href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#gce_sd_config\">the\nrelevant Prometheus configuration docs</link> for more detail.\n",
                  position: (382, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "hetzner_sd_configs",
                position: (389, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (389, 28),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (389, 35),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (389, 41),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (389, 48),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "hetzner_sd_config",
                     position: (389, 58),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Hetzner service discovery configurations.\n",
                  position: (390, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "http_sd_configs",
                position: (393, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (393, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (393, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (393, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (393, 45),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "http_sd_config",
                     position: (393, 55),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of HTTP service discovery configurations.\n",
                  position: (394, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "kubernetes_sd_configs",
                position: (397, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (397, 31),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (397, 38),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (397, 44),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (397, 51),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "kubernetes_sd_config",
                     position: (397, 61),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Kubernetes service discovery configurations.\n",
                  position: (398, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "kuma_sd_configs",
                position: (401, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (401, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (401, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (401, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (401, 45),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "kuma_sd_config",
                     position: (401, 55),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Kuma service discovery configurations.\n",
                  position: (402, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "lightsail_sd_configs",
                position: (405, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (405, 30),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (405, 37),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (405, 43),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (405, 50),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lightsail_sd_config",
                     position: (405, 60),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Lightsail service discovery configurations.\n",
                  position: (406, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "linode_sd_configs",
                position: (409, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (409, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (409, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (409, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (409, 47),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "linode_sd_config",
                     position: (409, 57),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Linode service discovery configurations.\n",
                  position: (410, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "marathon_sd_configs",
                position: (413, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (413, 29),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (413, 36),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (413, 42),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (413, 49),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "marathon_sd_config",
                     position: (413, 59),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Marathon service discovery configurations.\n",
                  position: (414, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "nerve_sd_configs",
                position: (417, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (417, 26),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (417, 33),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (417, 39),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (417, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "nerve_sd_config",
                     position: (417, 56),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of AirBnB's Nerve service discovery configurations.\n",
                  position: (418, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "openstack_sd_configs",
                position: (421, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (421, 30),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (421, 37),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (421, 43),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (421, 50),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "openstack_sd_config",
                     position: (421, 60),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of OpenStack service discovery configurations.\n",
                  position: (422, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "puppetdb_sd_configs",
                position: (425, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (425, 29),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (425, 36),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (425, 42),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (425, 49),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "puppetdb_sd_config",
                     position: (425, 59),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of PuppetDB service discovery configurations.\n",
                  position: (426, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "scaleway_sd_configs",
                position: (429, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (429, 29),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (429, 36),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (429, 42),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (429, 49),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "scaleway_sd_config",
                     position: (429, 59),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Scaleway service discovery configurations.\n",
                  position: (430, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "serverset_sd_configs",
                position: (433, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (433, 30),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (433, 37),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (433, 43),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (433, 50),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "serverset_sd_config",
                     position: (433, 60),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Zookeeper Serverset service discovery configurations.\n",
                  position: (434, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "triton_sd_configs",
                position: (437, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (437, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (437, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (437, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (437, 47),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "triton_sd_config",
                     position: (437, 57),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Triton Serverset service discovery configurations.\n",
                  position: (438, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "uyuni_sd_configs",
                position: (441, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (441, 26),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (441, 33),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (441, 39),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (441, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "uyuni_sd_config",
                     position: (441, 56),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of Uyuni Serverset service discovery configurations.\n",
                  position: (442, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "static_configs",
                position: (445, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (445, 24),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (445, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (445, 37),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (445, 44),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "static_config",
                     position: (445, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of labeled target groups for this job.\n",
                  position: (446, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "relabel_configs",
                position: (449, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (449, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (449, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (449, 38),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (449, 45),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "relabel_config",
                     position: (449, 55),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of relabel configurations.\n",
                  position: (450, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "metric_relabel_configs",
                position: (453, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (453, 32),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (453, 39),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (453, 45),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (453, 52),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "relabel_config",
                     position: (453, 62),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of metric relabel configurations.\n",
                  position: (454, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "body_size_limit",
                position: (457, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (457, 25),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (457, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (457, 40),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (457, 45),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "An uncompressed response body larger than this many bytes will cause the\nscrape to fail. 0 means no limit. Example: 100MB.\nThis is an experimental feature, this behaviour could\nchange or be removed in the future.\n",
                  position: (458, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "sample_limit",
                position: (464, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (464, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (464, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (464, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (464, 42),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Per-scrape limit on number of scraped samples that will be accepted.\nIf more than this number of samples are present after metric relabelling\nthe entire scrape will be treated as failed. 0 means no limit.\n",
                  position: (465, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "label_limit",
                position: (470, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (470, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (470, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (470, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (470, 41),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Per-scrape limit on number of labels that will be accepted for a sample. If\nmore than this number of labels are present post metric-relabeling, the\nentire scrape will be treated as failed. 0 means no limit.\n",
                  position: (471, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "label_name_length_limit",
                position: (476, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (476, 33),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (476, 42),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (476, 48),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (476, 53),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Per-scrape limit on length of labels name that will be accepted for a sample.\nIf a label name is longer than this number post metric-relabeling, the entire\nscrape will be treated as failed. 0 means no limit.\n",
                  position: (477, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "label_value_length_limit",
                position: (482, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (482, 34),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (482, 43),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (482, 49),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (482, 54),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Per-scrape limit on length of labels value that will be accepted for a sample.\nIf a label value is longer than this number post metric-relabeling, the\nentire scrape will be treated as failed. 0 means no limit.\n",
                  position: (483, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "target_limit",
                position: (488, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (488, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (488, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (488, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "0",
                  position: (488, 42),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Per-scrape config limit on number of unique targets that will be\naccepted. If more than this number of targets are present after target\nrelabeling, Prometheus will mark the targets as failed without scraping them.\n0 means no limit. This is an experimental feature, this behaviour could\nchange in the future.\n",
                  position: (489, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (252, 15),
          },
         ),
        ],
        recursive: false,
        position: (251, 45),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (505, 3),
       },
       Raw {
        content: "azure_sd_config",
        position: (505, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (505, 31),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (505, 37),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (506, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "environment",
                position: (507, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (507, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (507, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (507, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "AzurePublicCloud",
                  position: (507, 41),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The Azure environment.\n",
                  position: (508, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "authentication_method",
                position: (511, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (511, 31),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (511, 41),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (511, 47),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "OAuth",
                      position: (511, 55),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "ManagedIdentity",
                      position: (511, 63),
                     },
                    ],
                   },
                  ],
                  position: (511, 52),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "OAuth",
                  position: (511, 84),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The authentication method, either OAuth or ManagedIdentity.\nSee https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\n",
                  position: (512, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "subscription_id",
                position: (516, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (516, 25),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (517, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (517, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (517, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (518, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The subscription ID.\n",
                     position: (519, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (516, 34),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tenant_id",
                position: (523, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (523, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (523, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (523, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional tenant ID. Only required with authentication_method OAuth.\n",
                  position: (524, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "client_id",
                position: (527, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (527, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (527, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (527, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional client ID. Only required with authentication_method OAuth.\n",
                  position: (528, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "client_secret",
                position: (531, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (531, 23),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (531, 29),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (531, 35),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional client secret. Only required with authentication_method OAuth.\n",
                  position: (532, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (535, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (535, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (535, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (535, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "300s",
                  position: (535, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the instance list.\n",
                  position: (536, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (539, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (539, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (539, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (539, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (539, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from. If using the public IP\naddress, this must instead be specified in the relabeling\nrule.\n",
                  position: (540, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (545, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (545, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (545, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (545, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional proxy URL.\n",
                  position: (546, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "follow_redirects",
                position: (549, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (549, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (549, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (549, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "true",
                  position: (549, 47),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Configure whether HTTP requests follow HTTP 3xx redirects.\n",
                  position: (550, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (553, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (553, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (553, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (553, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "TLS configuration.\n",
                  position: (554, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (506, 15),
          },
         ),
        ],
        recursive: false,
        position: (505, 47),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (559, 3),
       },
       Raw {
        content: "consul_sd_config",
        position: (559, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (559, 32),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "server",
             position: (560, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (560, 14),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (560, 23),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (560, 29),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "localhost:8500",
               position: (560, 34),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Consul server to query.\n",
               position: (561, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "token",
             position: (564, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (564, 13),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (564, 19),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (564, 25),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Consul token",
               position: (564, 30),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "datacenter",
             position: (566, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (566, 18),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (566, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (566, 30),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Consul datacenter",
               position: (566, 35),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "scheme",
             position: (568, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (568, 14),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (568, 23),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (568, 29),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "http",
               position: (568, 34),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Consul scheme",
               position: (568, 41),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "username",
             position: (570, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (570, 16),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (570, 22),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (570, 28),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Consul username",
               position: (570, 33),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "password",
             position: (572, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (572, 16),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (572, 22),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (572, 28),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Consul password",
               position: (572, 33),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "tls_config",
             position: (574, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (574, 18),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "promTypes",
              position: (574, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (574, 34),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Configures the Consul request's TLS settings.\n",
               position: (575, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "services",
             position: (578, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (578, 16),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (578, 23),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "listOf",
                 position: (578, 29),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (578, 36),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (578, 42),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "A list of services for which targets are retrieved.\n",
               position: (579, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "tags",
             position: (582, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (582, 12),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (582, 19),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "listOf",
                 position: (582, 25),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (582, 32),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (582, 38),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "An optional list of tags used to filter nodes for a given\nservice. Services must contain all tags in the list.\n",
               position: (583, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "node_meta",
             position: (587, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (587, 17),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (587, 24),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "attrsOf",
                 position: (587, 30),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (587, 38),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (587, 44),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Node metadata used to filter nodes for a given service.\n",
               position: (588, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "tag_separator",
             position: (591, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (591, 21),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (591, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (591, 36),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: ",",
               position: (591, 41),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The string by which Consul tags are joined into the tag label.\n",
               position: (592, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "allow_stale",
             position: (595, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (595, 19),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (595, 25),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "bool",
                position: (595, 31),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Allow stale Consul results\n(see <link xlink:href=\"https://www.consul.io/api/index.html#consistency-modes\"/>).\n\nWill reduce load on Consul.\n",
               position: (596, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (602, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (602, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (602, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (602, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "30s",
               position: (602, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time after which the provided names are refreshed.\n\nOn large setup it might be a good idea to increase this value\nbecause the catalog will change all the time.\n",
               position: (603, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (559, 49),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (610, 3),
       },
       Raw {
        content: "digitalocean_sd_config",
        position: (610, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (610, 38),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "port",
             position: (611, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (611, 12),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (611, 21),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "int",
                position: (611, 27),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "80",
               position: (611, 32),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The port to scrape metrics from.\n",
               position: (612, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (615, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (615, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (615, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (615, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "60s",
               position: (615, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time after which the droplets are refreshed.\n",
               position: (616, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (610, 55),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkDockerSdConfigModule",
        position: (620, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "extraOptions",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "mkSdConfigModule",
        position: (620, 42),
       },
       arguments: [
        BinaryOperation {
         operator: Update,
         operands: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "host",
                position: (621, 5),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (621, 12),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (622, 7),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (622, 14),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (622, 20),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (623, 7),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Address of the Docker daemon.\n",
                     position: (624, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (621, 21),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (628, 5),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (628, 12),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (628, 21),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (628, 27),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (628, 32),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from, when `role` is nodes, and for discovered\ntasks and services that don't have published ports.\n",
                  position: (629, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "filters",
                position: (633, 5),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (633, 15),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (634, 8),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (634, 14),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (634, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "submodule",
                      position: (634, 28),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "options",
                         position: (635, 9),
                        },
                       ],
                      },
                      Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "name",
                            position: (636, 11),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "mkOption",
                           position: (636, 18),
                          },
                          arguments: [
                           Map {
                            bindings: [
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (637, 13),
                                },
                               ],
                              },
                              PropertyAccess {
                               expression: Variable {
                                identifier: "types",
                                position: (637, 20),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "str",
                                  position: (637, 26),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ),
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "description",
                                 position: (638, 13),
                                },
                               ],
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "Name of the filter. The available filters are listed in the upstream documentation:\nServices: <link xlink:href=\"https://docs.docker.com/engine/api/v1.40/#operation/ServiceList\"/>\nTasks: <link xlink:href=\"https://docs.docker.com/engine/api/v1.40/#operation/TaskList\"/>\nNodes: <link xlink:href=\"https://docs.docker.com/engine/api/v1.40/#operation/NodeList\"/>\n",
                                 position: (639, 1),
                                },
                               ],
                              },
                             ),
                            ],
                            recursive: false,
                            position: (636, 27),
                           },
                          ],
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "values",
                            position: (645, 11),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "mkOption",
                           position: (645, 20),
                          },
                          arguments: [
                           Map {
                            bindings: [
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (646, 13),
                                },
                               ],
                              },
                              PropertyAccess {
                               expression: Variable {
                                identifier: "types",
                                position: (646, 20),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "str",
                                  position: (646, 26),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ),
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "description",
                                 position: (647, 13),
                                },
                               ],
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "Value for the filter.\n",
                                 position: (648, 1),
                                },
                               ],
                              },
                             ),
                            ],
                            recursive: false,
                            position: (645, 29),
                           },
                          ],
                         },
                        ),
                       ],
                       recursive: false,
                       position: (635, 19),
                      },
                     ),
                    ],
                    recursive: false,
                    position: (634, 38),
                   },
                  ],
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Optional filters to limit the discovery process to a subset of available resources.\n",
                  position: (653, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (656, 5),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (656, 24),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (656, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (656, 39),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (656, 44),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The time after which the containers are refreshed.\n",
                  position: (657, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (620, 60),
          },
          Variable {
           identifier: "extraOptions",
           position: (659, 8),
          },
         ],
         position: (659, 5),
        },
       ],
      },
      position: (620, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (661, 3),
       },
       Raw {
        content: "docker_sd_config",
        position: (661, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkDockerSdConfigModule",
       position: (661, 32),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "host_networking_host",
             position: (662, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (662, 28),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (662, 37),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (662, 43),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "localhost",
               position: (662, 48),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The host to use if the container is in host networking mode.\n",
               position: (663, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (661, 55),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (667, 3),
       },
       Raw {
        content: "dockerswarm_sd_config",
        position: (667, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkDockerSdConfigModule",
       position: (667, 37),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "role",
             position: (668, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (668, 12),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (669, 7),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (669, 14),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (669, 20),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "services",
                      position: (669, 28),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "tasks",
                      position: (669, 39),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "nodes",
                      position: (669, 47),
                     },
                    ],
                   },
                  ],
                  position: (669, 25),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (670, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Role of the targets to retrieve. Must be `services`, `tasks`, or `nodes`.\n",
                  position: (671, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (668, 21),
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (667, 60),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (676, 3),
       },
       Raw {
        content: "dns_sd_config",
        position: (676, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (676, 29),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (676, 35),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (677, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "names",
                position: (678, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (678, 15),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (679, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (679, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "listOf",
                       position: (679, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (679, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (679, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (680, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "A list of DNS SRV record names to be queried.\n",
                     position: (681, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (678, 24),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (685, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (685, 14),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (685, 24),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (685, 30),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "SRV",
                      position: (685, 38),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "A",
                      position: (685, 44),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "AAAA",
                      position: (685, 48),
                     },
                    ],
                   },
                  ],
                  position: (685, 35),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "SRV",
                  position: (685, 58),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The type of DNS query to perform. One of SRV, A, or AAAA.\n",
                  position: (686, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (689, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (689, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (689, 20),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (689, 26),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The port number used if the query type is not SRV.\n",
                  position: (690, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (693, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (693, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (693, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (693, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "30s",
                  position: (693, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The time after which the provided names are refreshed.\n",
                  position: (694, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (677, 15),
          },
         ),
        ],
        recursive: false,
        position: (676, 45),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (699, 3),
       },
       Raw {
        content: "ec2_sd_config",
        position: (699, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (699, 29),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (699, 35),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (700, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "region",
                position: (701, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (701, 16),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (702, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (702, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (702, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (703, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The AWS Region. If blank, the region from the instance metadata is used.\n",
                     position: (704, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (701, 25),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "endpoint",
                position: (707, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (707, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (707, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (707, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Custom endpoint to be used.\n",
                  position: (708, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "access_key",
                position: (711, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (711, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (711, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (711, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The AWS API key id. If blank, the environment variable\n<literal>AWS_ACCESS_KEY_ID</literal> is used.\n",
                  position: (712, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "secret_key",
                position: (716, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (716, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (716, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (716, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The AWS API key secret. If blank, the environment variable\n <literal>AWS_SECRET_ACCESS_KEY</literal> is used.\n",
                  position: (717, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "profile",
                position: (721, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (721, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (721, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (721, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Named AWS profile used to connect to the API.\n",
                  position: (722, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "role_arn",
                position: (725, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (725, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (725, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (725, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "AWS Role ARN, an alternative to using AWS API keys.\n",
                  position: (726, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (729, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (729, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (729, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (729, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (729, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the instance list.\n",
                  position: (730, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (733, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (733, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (733, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (733, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (733, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from. If using the public IP\naddress, this must instead be specified in the relabeling\nrule.\n",
                  position: (734, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "filters",
                position: (739, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (739, 17),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (740, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (740, 16),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (740, 24),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "submodule",
                      position: (740, 30),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "options",
                         position: (741, 11),
                        },
                       ],
                      },
                      Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "name",
                            position: (742, 13),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "mkOption",
                           position: (742, 20),
                          },
                          arguments: [
                           Map {
                            bindings: [
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (743, 15),
                                },
                               ],
                              },
                              PropertyAccess {
                               expression: Variable {
                                identifier: "types",
                                position: (743, 22),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "str",
                                  position: (743, 28),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ),
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "description",
                                 position: (744, 15),
                                },
                               ],
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "See <link xlink:href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\">this list</link>\nfor the available filters.\n",
                                 position: (745, 1),
                                },
                               ],
                              },
                             ),
                            ],
                            recursive: false,
                            position: (742, 29),
                           },
                          ],
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "values",
                            position: (750, 13),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "mkOption",
                           position: (750, 22),
                          },
                          arguments: [
                           Map {
                            bindings: [
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "type",
                                 position: (751, 15),
                                },
                               ],
                              },
                              FunctionApplication {
                               function: PropertyAccess {
                                expression: Variable {
                                 identifier: "types",
                                 position: (751, 22),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "listOf",
                                   position: (751, 28),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               arguments: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "types",
                                  position: (751, 35),
                                 },
                                 attribute_path: AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "str",
                                    position: (751, 41),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ],
                              },
                             ),
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "default",
                                 position: (752, 15),
                                },
                               ],
                              },
                              List {
                               elements: [],
                               position: (752, 25),
                              },
                             ),
                             KeyValue(
                              AttributePath {
                               attributes: [
                                Raw {
                                 content: "description",
                                 position: (753, 15),
                                },
                               ],
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "Value of the filter.\n",
                                 position: (754, 1),
                                },
                               ],
                              },
                             ),
                            ],
                            recursive: false,
                            position: (750, 31),
                           },
                          ],
                         },
                        ),
                       ],
                       recursive: false,
                       position: (741, 21),
                      },
                     ),
                    ],
                    recursive: false,
                    position: (740, 40),
                   },
                  ],
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Filters can be used optionally to filter the instance list by other criteria.\n",
                  position: (759, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (700, 15),
          },
         ),
        ],
        recursive: false,
        position: (699, 45),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (764, 3),
       },
       Raw {
        content: "eureka_sd_config",
        position: (764, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (764, 32),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "server",
             position: (765, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (765, 14),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (766, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (766, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (766, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (767, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The URL to connect to the Eureka server.\n",
                  position: (768, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (765, 23),
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (764, 49),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (773, 3),
       },
       Raw {
        content: "file_sd_config",
        position: (773, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (773, 30),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (773, 36),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (774, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "files",
                position: (775, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (775, 15),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (776, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (776, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "listOf",
                       position: (776, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (776, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (776, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (777, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Patterns for files from which target groups are extracted. Refer\nto the Prometheus documentation for permitted filename patterns\nand formats.\n",
                     position: (778, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (775, 24),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (784, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (784, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (784, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (784, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "5m",
                  position: (784, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the files.\n",
                  position: (785, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (774, 15),
          },
         ),
        ],
        recursive: false,
        position: (773, 46),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (790, 3),
       },
       Raw {
        content: "gce_sd_config",
        position: (790, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (790, 29),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (790, 35),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (791, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "project",
                position: (794, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (794, 17),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (795, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (795, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (795, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (796, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The GCP Project.\n",
                     position: (797, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (794, 26),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "zone",
                position: (801, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (801, 14),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (802, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (802, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (802, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (803, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The zone of the scrape targets. If you need multiple zones use multiple\ngce_sd_configs.\n",
                     position: (804, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (801, 23),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "filter",
                position: (809, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (809, 16),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (809, 22),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (809, 28),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Filter can be used optionally to filter the instance list by other\ncriteria Syntax of this filter string is described here in the filter\nquery parameter section: <link\nxlink:href=\"https://cloud.google.com/compute/docs/reference/latest/instances/list\"\n/>.\n",
                  position: (810, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (817, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (817, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (817, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (817, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (817, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the cloud instance list.\n",
                  position: (818, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (821, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (821, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (821, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "port",
                   position: (821, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (821, 35),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from. If using the public IP address, this\nmust instead be specified in the relabeling rule.\n",
                  position: (822, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tag_separator",
                position: (826, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (826, 23),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (826, 32),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (826, 38),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: ",",
                  position: (826, 43),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The tag separator used to separate concatenated GCE instance network tags.\n\nSee the GCP documentation on network tags for more information:\n<link xlink:href=\"https://cloud.google.com/vpc/docs/add-remove-network-tags\" />\n",
                  position: (827, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (791, 15),
          },
         ),
        ],
        recursive: false,
        position: (790, 45),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (835, 3),
       },
       Raw {
        content: "hetzner_sd_config",
        position: (835, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (835, 33),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "role",
             position: (836, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (836, 12),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (837, 7),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (837, 14),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (837, 20),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "robot",
                      position: (837, 28),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "hcloud",
                      position: (837, 36),
                     },
                    ],
                   },
                  ],
                  position: (837, 25),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (838, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The Hetzner role of entities that should be discovered.\nOne of <literal>robot</literal> or <literal>hcloud</literal>.\n",
                  position: (839, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (836, 21),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "port",
             position: (844, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (844, 12),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (844, 21),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "int",
                position: (844, 27),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "80",
               position: (844, 32),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The port to scrape metrics from.\n",
               position: (845, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (848, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (848, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (848, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (848, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "60s",
               position: (848, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time after which the servers are refreshed.\n",
               position: (849, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (835, 50),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (853, 3),
       },
       Raw {
        content: "http_sd_config",
        position: (853, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (853, 30),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (853, 36),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (854, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "url",
                position: (855, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (855, 13),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (856, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (856, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (856, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (857, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "URL from which the targets are fetched.\n",
                     position: (858, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (855, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (862, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (862, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (862, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (862, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (862, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-query the endpoint.\n",
                  position: (863, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "basic_auth",
                position: (866, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (866, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (866, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "basic_auth",
                   position: (866, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Authentication information used to authenticate to the API server.\npassword and password_file are mutually exclusive.\n",
                  position: (867, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (871, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (871, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (871, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (871, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional proxy URL.\n",
                  position: (872, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "follow_redirects",
                position: (875, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (875, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (875, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (875, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "true",
                  position: (875, 47),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Configure whether HTTP requests follow HTTP 3xx redirects.\n",
                  position: (876, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (879, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (879, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (879, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (879, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the scrape request's TLS settings.\n",
                  position: (880, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (854, 15),
          },
         ),
        ],
        recursive: false,
        position: (853, 46),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (885, 3),
       },
       Raw {
        content: "kubernetes_sd_config",
        position: (885, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (885, 36),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "api_server",
             position: (886, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (886, 18),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (886, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (886, 30),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "The API server addresses. If left empty, Prometheus is assumed to run inside\nof the cluster and will discover API servers automatically and use the pod's\nCA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.\n",
               position: (887, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "role",
             position: (892, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (892, 12),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (893, 7),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (893, 14),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (893, 20),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "endpoints",
                      position: (893, 28),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "service",
                      position: (893, 40),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "pod",
                      position: (893, 50),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "node",
                      position: (893, 56),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "ingress",
                      position: (893, 63),
                     },
                    ],
                   },
                  ],
                  position: (893, 25),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (894, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The Kubernetes role of entities that should be discovered.\nOne of endpoints, service, pod, node, or ingress.\n",
                  position: (895, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (892, 21),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "kubeconfig_file",
             position: (900, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (900, 23),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (900, 29),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (900, 35),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Optional path to a kubeconfig file.\nNote that api_server and kube_config are mutually exclusive.\n",
               position: (901, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "namespaces",
             position: (905, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (905, 18),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (907, 9),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "submodule",
                 position: (907, 15),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "options",
                    position: (908, 11),
                   },
                  ],
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "names",
                       position: (909, 13),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "mkOpt",
                      position: (909, 21),
                     },
                     arguments: [
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "types",
                         position: (909, 28),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "listOf",
                           position: (909, 34),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "types",
                          position: (909, 41),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "str",
                            position: (909, 47),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "Namespace name.\n",
                         position: (910, 1),
                        },
                       ],
                      },
                     ],
                    },
                   ),
                  ],
                  recursive: false,
                  position: (908, 21),
                 },
                ),
               ],
               recursive: false,
               position: (907, 25),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Optional namespace discovery. If omitted, all namespaces are used.\n",
               position: (915, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "selectors",
             position: (918, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (918, 17),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (920, 9),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "listOf",
                 position: (920, 15),
                },
               ],
              },
              default: None,
             },
             arguments: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (921, 11),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "submodule",
                   position: (921, 17),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "options",
                      position: (922, 13),
                     },
                    ],
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "role",
                         position: (923, 15),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "mkOption",
                        position: (923, 22),
                       },
                       arguments: [
                        Map {
                         bindings: [
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "type",
                              position: (924, 17),
                             },
                            ],
                           },
                           PropertyAccess {
                            expression: Variable {
                             identifier: "types",
                             position: (924, 24),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "str",
                               position: (924, 30),
                              },
                             ],
                            },
                            default: None,
                           },
                          ),
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "description",
                              position: (925, 17),
                             },
                            ],
                           },
                           String {
                            parts: [
                             Raw {
                              content: "Selector role\n",
                              position: (926, 1),
                             },
                            ],
                           },
                          ),
                         ],
                         recursive: false,
                         position: (923, 31),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "label",
                         position: (930, 15),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "mkOpt",
                        position: (930, 23),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "types",
                          position: (930, 29),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "str",
                            position: (930, 35),
                           },
                          ],
                         },
                         default: None,
                        },
                        String {
                         parts: [
                          Raw {
                           content: "Selector label\n",
                           position: (931, 1),
                          },
                         ],
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "field",
                         position: (934, 15),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "mkOpt",
                        position: (934, 23),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "types",
                          position: (934, 29),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "str",
                            position: (934, 35),
                           },
                          ],
                         },
                         default: None,
                        },
                        String {
                         parts: [
                          Raw {
                           content: "Selector field\n",
                           position: (935, 1),
                          },
                         ],
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                    position: (922, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (921, 27),
                },
               ],
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Optional label and field selectors to limit the discovery process to a subset of available resources.\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/\nand https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ to learn more about the possible\nfilters that can be used. Endpoints role supports pod, service and endpoints selectors, other roles\nonly support selectors matching the role itself (e.g. node role can only contain node selectors).\n\nNote: When making decision about using field/label selector make sure that this\nis the best approach - it will prevent Prometheus from reusing single list/watch\nfor all scrape configs. This might result in a bigger load on the Kubernetes API,\nbecause per each selector combination there will be additional LIST/WATCH. On the other hand,\nif you just want to monitor small subset of pods in large cluster it's recommended to use selectors.\nDecision, if selectors should be used or not depends on the particular situation.\n",
               position: (941, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (885, 53),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (956, 3),
       },
       Raw {
        content: "kuma_sd_config",
        position: (956, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (956, 30),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "server",
             position: (957, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (957, 14),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (958, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (958, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (958, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (959, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Address of the Kuma Control Plane's MADS xDS server.\n",
                  position: (960, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (957, 23),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (964, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (964, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (964, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (964, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "30s",
               position: (964, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time to wait between polling update requests.\n",
               position: (965, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "fetch_timeout",
             position: (968, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (968, 21),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (968, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (968, 36),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "2m",
               position: (968, 41),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time after which the monitoring assignments are refreshed.\n",
               position: (969, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (956, 47),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (973, 3),
       },
       Raw {
        content: "lightsail_sd_config",
        position: (973, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (973, 35),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (973, 41),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (974, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "region",
                position: (975, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (975, 16),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (975, 22),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (975, 28),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The AWS region. If blank, the region from the instance metadata is used.\n",
                  position: (976, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "endpoint",
                position: (979, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (979, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (979, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (979, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Custom endpoint to be used.\n",
                  position: (980, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "access_key",
                position: (983, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (983, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (983, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (983, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The AWS API keys. If blank, the environment variable <literal>AWS_ACCESS_KEY_ID</literal> is used.\n",
                  position: (984, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "secret_key",
                position: (987, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (987, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (987, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (987, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "The AWS API keys. If blank, the environment variable <literal>AWS_SECRET_ACCESS_KEY</literal> is used.\n",
                  position: (988, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "profile",
                position: (991, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (991, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (991, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (991, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Named AWS profile used to connect to the API.\n",
                  position: (992, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "role_arn",
                position: (995, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (995, 18),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (995, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (995, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "AWS Role ARN, an alternative to using AWS API keys.\n",
                  position: (996, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (999, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (999, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (999, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (999, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (999, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the instance list.\n",
                  position: (1000, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (1003, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1003, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1003, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (1003, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (1003, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.\n",
                  position: (1004, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (974, 15),
          },
         ),
        ],
        recursive: false,
        position: (973, 51),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1010, 3),
       },
       Raw {
        content: "linode_sd_config",
        position: (1010, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (1010, 32),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "port",
             position: (1011, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1011, 12),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1011, 21),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "int",
                position: (1011, 27),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "80",
               position: (1011, 32),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The port to scrape metrics from.\n",
               position: (1012, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "tag_separator",
             position: (1015, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1015, 21),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1015, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1015, 36),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: ",",
               position: (1015, 41),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The string by which Linode Instance tags are joined into the tag label.\n",
               position: (1016, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (1019, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1019, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1019, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1019, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "60s",
               position: (1019, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The time after which the linode instances are refreshed.\n",
               position: (1020, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (1010, 49),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1024, 3),
       },
       Raw {
        content: "marathon_sd_config",
        position: (1024, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (1024, 34),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "servers",
             position: (1025, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1025, 15),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1026, 7),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1026, 14),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (1026, 20),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1026, 27),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (1026, 33),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1027, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of URLs to be used to contact Marathon servers. You need to provide at least one server URL.\n",
                  position: (1028, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1025, 24),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (1032, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1032, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1032, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1032, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "30s",
               position: (1032, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Polling interval.\n",
               position: (1033, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "auth_token",
             position: (1036, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (1036, 18),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1036, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1036, 30),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Optional authentication information for token-based authentication:\n<link xlink:href=\"https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token\" />\nIt is mutually exclusive with <literal>auth_token_file</literal> and other authentication mechanisms.\n",
               position: (1037, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "auth_token_file",
             position: (1042, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOpt",
            position: (1042, 23),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1042, 29),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1042, 35),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "Optional authentication information for token-based authentication:\n<link xlink:href=\"https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token\" />\nIt is mutually exclusive with <literal>auth_token</literal> and other authentication mechanisms.\n",
               position: (1043, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (1024, 51),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1049, 3),
       },
       Raw {
        content: "nerve_sd_config",
        position: (1049, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1049, 31),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1049, 37),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1050, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "servers",
                position: (1051, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1051, 17),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1052, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1052, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "listOf",
                       position: (1052, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (1052, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (1052, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1053, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The Zookeeper servers.\n",
                     position: (1054, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1051, 26),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "paths",
                position: (1058, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1058, 15),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1059, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1059, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "listOf",
                       position: (1059, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (1059, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (1059, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1060, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Paths can point to a single service, or the root of a tree of services.\n",
                     position: (1061, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1058, 24),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "timeout",
                position: (1065, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1065, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1065, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1065, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "10s",
                  position: (1065, 37),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Timeout value.\n",
                  position: (1066, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1050, 15),
          },
         ),
        ],
        recursive: false,
        position: (1049, 47),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1071, 3),
       },
       Raw {
        content: "openstack_sd_config",
        position: (1071, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1071, 35),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1071, 41),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1072, 5),
            },
           ],
          },
          LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "userDescription",
                position: (1074, 9),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "username is required if using Identity V2 API. Consult with your provider's\ncontrol panel to discover your account's username. In Identity V3, either\nuserid or a combination of username and domain_id or domain_name are needed.\n",
                position: (1075, 1),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "domainDescription",
                position: (1080, 9),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "At most one of domain_id and domain_name must be provided if using username\nwith Identity V3. Otherwise, either are optional.\n",
                position: (1081, 1),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "projectDescription",
                position: (1085, 9),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "The project_id and project_name fields are optional for the Identity V2 API.\nSome providers allow you to specify a project_name instead of the project_id.\nSome require both. Your provider's authentication policies will determine\nhow these fields influence authentication.\n",
                position: (1086, 1),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "applicationDescription",
                position: (1092, 9),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "The application_credential_id or application_credential_name fields are\nrequired if using an application credential to authenticate. Some providers\nallow you to create an application credential to authenticate rather than a\npassword.\n",
                position: (1093, 1),
               },
              ],
             },
            ),
           ],
           target: Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "role",
                 position: (1100, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (1100, 16),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (1101, 11),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1101, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (1101, 24),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (1102, 11),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "The OpenStack role of entities that should be discovered.\n",
                      position: (1103, 1),
                     },
                    ],
                   },
                  ),
                 ],
                 recursive: false,
                 position: (1100, 25),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "region",
                 position: (1107, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (1107, 18),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (1108, 11),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1108, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (1108, 24),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (1109, 11),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "The OpenStack Region.\n",
                      position: (1110, 1),
                     },
                    ],
                   },
                  ),
                 ],
                 recursive: false,
                 position: (1107, 27),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "identity_endpoint",
                 position: (1114, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1114, 29),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1114, 35),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1114, 41),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "identity_endpoint specifies the HTTP endpoint that is required to work with\nthe Identity API of the appropriate version. While it's ultimately needed by\nall of the identity services, it will often be populated by a provider-level\nfunction.\n",
                   position: (1115, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "username",
                 position: (1121, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1121, 20),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1121, 26),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1121, 32),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "userDescription",
                 position: (1121, 36),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "userid",
                 position: (1122, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1122, 18),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1122, 24),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1122, 30),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "userDescription",
                 position: (1122, 34),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "password",
                 position: (1124, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1124, 20),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1124, 26),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1124, 32),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "password for the Identity V2 and V3 APIs. Consult with your provider's\ncontrol panel to discover your account's preferred method of authentication.\n",
                   position: (1125, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "domain_name",
                 position: (1129, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1129, 23),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1129, 29),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1129, 35),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "domainDescription",
                 position: (1129, 39),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "domain_id",
                 position: (1130, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1130, 21),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1130, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1130, 33),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "domainDescription",
                 position: (1130, 37),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "project_name",
                 position: (1132, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1132, 24),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1132, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1132, 36),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "projectDescription",
                 position: (1132, 40),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "project_id",
                 position: (1133, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1133, 22),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1133, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1133, 34),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "projectDescription",
                 position: (1133, 38),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "application_credential_name",
                 position: (1135, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1135, 39),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1135, 45),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1135, 51),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "applicationDescription",
                 position: (1135, 55),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "application_credential_id",
                 position: (1136, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1136, 37),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1136, 43),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1136, 49),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "applicationDescription",
                 position: (1136, 53),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "application_credential_secret",
                 position: (1138, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1138, 41),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1138, 47),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1138, 53),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "The application_credential_secret field is required if using an application\ncredential to authenticate.\n",
                   position: (1139, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "all_tenants",
                 position: (1143, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkDefOpt",
                position: (1143, 23),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1143, 32),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "bool",
                    position: (1143, 38),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "false",
                   position: (1143, 44),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "Whether the service discovery should list all instances for all projects.\nIt is only relevant for the 'instance' role and usually requires admin permissions.\n",
                   position: (1144, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "refresh_interval",
                 position: (1148, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkDefOpt",
                position: (1148, 28),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1148, 37),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1148, 43),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "60s",
                   position: (1148, 48),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "Refresh interval to re-read the instance list.\n",
                   position: (1149, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "port",
                 position: (1152, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkDefOpt",
                position: (1152, 16),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1152, 25),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "int",
                    position: (1152, 31),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "80",
                   position: (1152, 36),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.\n",
                   position: (1153, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "availability",
                 position: (1157, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkDefOpt",
                position: (1157, 24),
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1157, 34),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "enum",
                     position: (1157, 40),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  List {
                   elements: [
                    String {
                     parts: [
                      Raw {
                       content: "public",
                       position: (1157, 48),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "admin",
                       position: (1157, 57),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "internal",
                       position: (1157, 65),
                      },
                     ],
                    },
                   ],
                   position: (1157, 45),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "public",
                   position: (1157, 79),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "The availability of the endpoint to connect to. Must be one of public, admin or internal.\n",
                   position: (1158, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "tls_config",
                 position: (1161, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOpt",
                position: (1161, 22),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "promTypes",
                  position: (1161, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tls_config",
                    position: (1161, 38),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "TLS configuration.\n",
                   position: (1162, 1),
                  },
                 ],
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1099, 7),
           },
           position: (1073, 7),
          },
         ),
        ],
        recursive: false,
        position: (1071, 51),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1167, 3),
       },
       Raw {
        content: "puppetdb_sd_config",
        position: (1167, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (1167, 34),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "url",
             position: (1168, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1168, 11),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1169, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1169, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1169, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1170, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The URL of the PuppetDB root query endpoint.\n",
                  position: (1171, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1168, 20),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "query",
             position: (1175, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1175, 13),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1176, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1176, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1176, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1177, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Puppet Query Language (PQL) query. Only resources are supported.\nhttps://puppet.com/docs/puppetdb/latest/api/query/v4/pql.html\n",
                  position: (1178, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1175, 22),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "include_parameters",
             position: (1183, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1183, 26),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1183, 35),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "bool",
                position: (1183, 41),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "false",
               position: (1183, 47),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Whether to include the parameters as meta labels.\nDue to the differences between parameter types and Prometheus labels,\nsome parameters might not be rendered. The format of the parameters might\nalso change in future releases.\n\nNote: Enabling this exposes parameters in the Prometheus UI and API. Make sure\nthat you don't have secrets exposed as parameters if you enable this.\n",
               position: (1184, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (1193, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1193, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1193, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1193, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "60s",
               position: (1193, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Refresh interval to re-read the resources list.\n",
               position: (1194, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "port",
             position: (1197, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1197, 12),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1197, 21),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "int",
                position: (1197, 27),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "80",
               position: (1197, 32),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The port to scrape metrics from.\n",
               position: (1198, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (1167, 51),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1202, 3),
       },
       Raw {
        content: "scaleway_sd_config",
        position: (1202, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1202, 34),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1202, 40),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1203, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "access_key",
                position: (1204, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1204, 20),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1205, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1205, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1205, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1206, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Access key to use. https://console.scaleway.com/project/credentials\n",
                     position: (1207, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1204, 29),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "secret_key",
                position: (1211, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1211, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1211, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1211, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Secret key to use when listing targets. https://console.scaleway.com/project/credentials\nIt is mutually exclusive with `secret_key_file`.\n",
                  position: (1212, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "secret_key_file",
                position: (1216, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1216, 25),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1216, 31),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1216, 37),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the secret key with the credentials read from the configured file.\nIt is mutually exclusive with `secret_key`.\n",
                  position: (1217, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "project_id",
                position: (1221, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1221, 20),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1222, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1222, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1222, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1223, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Project ID of the targets.\n",
                     position: (1224, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1221, 29),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "role",
                position: (1228, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1228, 14),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1229, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1229, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "enum",
                       position: (1229, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    List {
                     elements: [
                      String {
                       parts: [
                        Raw {
                         content: "instance",
                         position: (1229, 30),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "baremetal",
                         position: (1229, 41),
                        },
                       ],
                      },
                     ],
                     position: (1229, 27),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1230, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Role of the targets to retrieve. Must be `instance` or `baremetal`.\n",
                     position: (1231, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1228, 23),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (1235, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1235, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1235, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (1235, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "80",
                  position: (1235, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to scrape metrics from.\n",
                  position: (1236, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "api_url",
                position: (1239, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1239, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1239, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1239, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "https://api.scaleway.com",
                  position: (1239, 37),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "API URL to use when doing the server listing requests.\n",
                  position: (1240, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "zone",
                position: (1243, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1243, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1243, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1243, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "fr-par-1",
                  position: (1243, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Zone is the availability zone of your targets (e.g. fr-par-1).\n",
                  position: (1244, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "name_filter",
                position: (1247, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1247, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1247, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1247, 33),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Specify a name filter (works as a LIKE) to apply on the server listing request.\n",
                  position: (1248, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tags_filter",
                position: (1251, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1251, 21),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1251, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (1251, 34),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1251, 41),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (1251, 47),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Specify a tag filter (a server needs to have all defined tags to be listed) to apply on the server listing request.\n",
                  position: (1252, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (1255, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1255, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1255, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1255, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (1255, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Refresh interval to re-read the managed targets list.\n",
                  position: (1256, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (1259, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1259, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1259, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1259, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional proxy URL.\n",
                  position: (1260, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "follow_redirects",
                position: (1263, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1263, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1263, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (1263, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "true",
                  position: (1263, 47),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Configure whether HTTP requests follow HTTP 3xx redirects.\n",
                  position: (1264, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (1267, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1267, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1267, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (1267, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "TLS configuration.\n",
                  position: (1268, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1203, 15),
          },
         ),
        ],
        recursive: false,
        position: (1202, 50),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1274, 3),
       },
       Raw {
        content: "serverset_sd_config",
        position: (1274, 13),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "promTypes",
       position: (1274, 35),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "nerve_sd_config",
         position: (1274, 45),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1276, 3),
       },
       Raw {
        content: "triton_sd_config",
        position: (1276, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1276, 32),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1276, 38),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1277, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "account",
                position: (1278, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1278, 17),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1279, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1279, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1279, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1280, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The account to use for discovering new targets.\n",
                     position: (1281, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1278, 26),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "role",
                position: (1285, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1285, 14),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1285, 24),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (1285, 30),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "container",
                      position: (1285, 38),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "cn",
                      position: (1285, 50),
                     },
                    ],
                   },
                  ],
                  position: (1285, 35),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "container",
                  position: (1285, 58),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The type of targets to discover, can be set to:\n- \"container\" to discover virtual machines (SmartOS zones, lx/KVM/bhyve branded zones) running on Triton\n- \"cn\" to discover compute nodes (servers/global zones) making up the Triton infrastructure\n",
                  position: (1286, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "dns_suffix",
                position: (1291, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1291, 20),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1292, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1292, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1292, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1293, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The DNS suffix which should be applied to target.\n",
                     position: (1294, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1291, 29),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "endpoint",
                position: (1298, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1298, 18),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1299, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1299, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1299, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1300, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The Triton discovery endpoint (e.g. <literal>cmon.us-east-3b.triton.zone</literal>). This is\noften the same value as dns_suffix.\n",
                     position: (1301, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1298, 27),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "groups",
                position: (1306, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1306, 16),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1306, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (1306, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1306, 36),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (1306, 42),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "A list of groups for which targets are retrieved, only supported when targeting the <literal>container</literal> role.\nIf omitted all containers owned by the requesting account are scraped.\n",
                  position: (1307, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (1311, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1311, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1311, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (1311, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "9163",
                  position: (1311, 34),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The port to use for discovery and metric scraping.\n",
                  position: (1312, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "refresh_interval",
                position: (1315, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1315, 26),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1315, 35),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1315, 41),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "60s",
                  position: (1315, 46),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The interval which should be used for refreshing targets.\n",
                  position: (1316, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "version",
                position: (1319, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1319, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1319, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (1319, 32),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "1",
                  position: (1319, 37),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The Triton discovery API version.\n",
                  position: (1320, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (1323, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1323, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1323, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (1323, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "TLS configuration.\n",
                  position: (1324, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1277, 15),
          },
         ),
        ],
        recursive: false,
        position: (1276, 48),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1329, 3),
       },
       Raw {
        content: "uyuni_sd_config",
        position: (1329, 13),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkSdConfigModule",
       position: (1329, 31),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "server",
             position: (1330, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1330, 14),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1331, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1331, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1331, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1332, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The URL to connect to the Uyuni server.\n",
                  position: (1333, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1330, 23),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "username",
             position: (1337, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1337, 16),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1338, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1338, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1338, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1339, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Credentials are used to authenticate the requests to Uyuni API.\n",
                  position: (1340, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1337, 25),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "password",
             position: (1344, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkOption",
            position: (1344, 16),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "type",
                  position: (1345, 7),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1345, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1345, 20),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (1346, 7),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Credentials are used to authenticate the requests to Uyuni API.\n",
                  position: (1347, 1),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (1344, 25),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "entitlement",
             position: (1351, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1351, 19),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1351, 28),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1351, 34),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "monitoring_entitled",
               position: (1351, 39),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The entitlement string to filter eligible systems.\n",
               position: (1352, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "separator",
             position: (1355, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1355, 17),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1355, 26),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1355, 32),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: ",",
               position: (1355, 37),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The string by which Uyuni group names are joined into the groups label\n",
               position: (1356, 1),
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "refresh_interval",
             position: (1359, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkDefOpt",
            position: (1359, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (1359, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "str",
                position: (1359, 39),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "60s",
               position: (1359, 44),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Refresh interval to re-read the managed targets list.\n",
               position: (1360, 1),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (1329, 48),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1364, 3),
       },
       Raw {
        content: "static_config",
        position: (1364, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1364, 29),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1364, 35),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1365, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "targets",
                position: (1366, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1366, 17),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1367, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1367, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "listOf",
                       position: (1367, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (1367, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (1367, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1368, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "The targets specified by the target group.\n",
                     position: (1369, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1366, 26),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "labels",
                position: (1372, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1372, 16),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1373, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (1373, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "attrsOf",
                       position: (1373, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (1373, 30),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "str",
                        position: (1373, 36),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "default",
                     position: (1374, 9),
                    },
                   ],
                  },
                  Map {
                   bindings: [],
                   recursive: false,
                   position: (1374, 19),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1375, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "Labels assigned to all metrics scraped from the targets.\n",
                     position: (1376, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1372, 25),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1365, 15),
          },
         ),
        ],
        recursive: false,
        position: (1364, 45),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1386, 3),
       },
       Raw {
        content: "relabel_config",
        position: (1386, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1386, 30),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1386, 36),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1387, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "source_labels",
                position: (1388, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1388, 23),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1388, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (1388, 36),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1388, 43),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (1388, 49),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "The source labels select values from existing labels. Their content\nis concatenated using the configured separator and matched against\nthe configured regular expression.\n",
                  position: (1389, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "separator",
                position: (1394, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1394, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1394, 28),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1394, 34),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: ";",
                  position: (1394, 39),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Separator placed between concatenated source label values.\n",
                  position: (1395, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "target_label",
                position: (1398, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1398, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1398, 28),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1398, 34),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Label to which the resulting value is written in a replace action.\nIt is mandatory for replace actions.\n",
                  position: (1399, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "regex",
                position: (1403, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1403, 15),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1403, 24),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1403, 30),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "(.*)",
                  position: (1403, 35),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Regular expression against which the extracted value is matched.\n",
                  position: (1404, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "modulus",
                position: (1407, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1407, 17),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1407, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "int",
                   position: (1407, 29),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Modulus to take of the hash of the source label values.\n",
                  position: (1408, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "replacement",
                position: (1411, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1411, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1411, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1411, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "$1",
                  position: (1411, 41),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Replacement value against which a regex replace is performed if the\nregular expression matches.\n",
                  position: (1412, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "action",
                position: (1416, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkDefOpt",
               position: (1417, 9),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1417, 19),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enum",
                    position: (1417, 25),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "replace",
                      position: (1417, 33),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "keep",
                      position: (1417, 43),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "drop",
                      position: (1417, 50),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "hashmod",
                      position: (1417, 57),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "labelmap",
                      position: (1417, 67),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "labeldrop",
                      position: (1417, 78),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "labelkeep",
                      position: (1417, 90),
                     },
                    ],
                   },
                  ],
                  position: (1417, 30),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "replace",
                  position: (1417, 105),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Action to perform based on regex matching.\n",
                  position: (1418, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1387, 15),
          },
         ),
        ],
        recursive: false,
        position: (1386, 46),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1427, 3),
       },
       Raw {
        content: "remote_write",
        position: (1427, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1427, 28),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1427, 34),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1428, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "url",
                position: (1429, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1429, 13),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1430, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1430, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1430, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1431, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "ServerName extension to indicate the name of the server.\nhttp://tools.ietf.org/html/rfc4366#section-3.1\n",
                     position: (1432, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1429, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "remote_timeout",
                position: (1436, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1436, 24),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1436, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1436, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Timeout for requests to the remote write endpoint.\n",
                  position: (1437, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "write_relabel_configs",
                position: (1439, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1439, 31),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1439, 38),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "listOf",
                    position: (1439, 44),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "promTypes",
                   position: (1439, 51),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "relabel_config",
                     position: (1439, 61),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "List of remote write relabel configurations.\n",
                  position: (1440, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "name",
                position: (1442, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1442, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1442, 20),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1442, 26),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Name of the remote write config, which if specified must be unique among remote write configs.\nThe name will be used in metrics and logging in place of a generated value to help users distinguish between\nremote write configs.\n",
                  position: (1443, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "basic_auth",
                position: (1447, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1447, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1447, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "basic_auth",
                   position: (1447, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote write request with the\nconfigured username and password.\npassword and password_file are mutually exclusive.\n",
                  position: (1448, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token",
                position: (1452, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1452, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1452, 28),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1452, 34),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote write request with\nthe configured bearer token. It is mutually exclusive with `bearer_token_file`.\n",
                  position: (1453, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token_file",
                position: (1456, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1456, 27),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1456, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1456, 39),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote write request with the bearer token\nread from the configured file. It is mutually exclusive with `bearer_token`.\n",
                  position: (1457, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (1460, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1460, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1460, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (1460, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the remote write request's TLS settings.\n",
                  position: (1461, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (1463, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1463, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1463, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1463, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional Proxy URL.",
                  position: (1463, 36),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "queue_config",
                position: (1464, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1464, 22),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1465, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "submodule",
                    position: (1465, 16),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "options",
                       position: (1466, 11),
                      },
                     ],
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "capacity",
                          position: (1467, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1467, 24),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1467, 30),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "int",
                             position: (1467, 36),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Number of samples to buffer per shard before we block reading of more\nsamples from the WAL. It is recommended to have enough capacity in each\nshard to buffer several requests to keep throughput up while processing\noccasional slow remote requests.\n",
                            position: (1468, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "max_shards",
                          position: (1473, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1473, 26),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1473, 32),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "int",
                             position: (1473, 38),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Maximum number of shards, i.e. amount of concurrency.\n",
                            position: (1474, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "min_shards",
                          position: (1476, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1476, 26),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1476, 32),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "int",
                             position: (1476, 38),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Minimum number of shards, i.e. amount of concurrency.\n",
                            position: (1477, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "max_samples_per_send",
                          position: (1479, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1479, 36),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1479, 42),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "int",
                             position: (1479, 48),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Maximum number of samples per send.\n",
                            position: (1480, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "batch_send_deadline",
                          position: (1482, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1482, 35),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1482, 41),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "str",
                             position: (1482, 47),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Maximum time a sample will wait in buffer.\n",
                            position: (1483, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "min_backoff",
                          position: (1485, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1485, 27),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1485, 33),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "str",
                             position: (1485, 39),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Initial retry delay. Gets doubled for every retry.\n",
                            position: (1486, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "max_backoff",
                          position: (1488, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1488, 27),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1488, 33),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "str",
                             position: (1488, 39),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Maximum retry delay.\n",
                            position: (1489, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                     ],
                     recursive: false,
                     position: (1466, 21),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (1465, 26),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the queue used to write to remote storage.\n",
                  position: (1493, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "metadata_config",
                position: (1495, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1495, 25),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1496, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "submodule",
                    position: (1496, 16),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "options",
                       position: (1497, 11),
                      },
                     ],
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "send",
                          position: (1498, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1498, 20),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1498, 26),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "bool",
                             position: (1498, 32),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Whether metric metadata is sent to remote storage or not.\n",
                            position: (1499, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "send_interval",
                          position: (1501, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mkOpt",
                         position: (1501, 29),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "types",
                           position: (1501, 35),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "str",
                             position: (1501, 41),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "How frequently metric metadata is sent to remote storage.\n",
                            position: (1502, 1),
                           },
                          ],
                         },
                        ],
                       },
                      ),
                     ],
                     recursive: false,
                     position: (1497, 21),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (1496, 26),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the sending of series metadata to remote storage.\nMetadata configuration is subject to change at any point\nor be removed in future releases.\n",
                  position: (1506, 1),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1428, 15),
          },
         ),
        ],
        recursive: false,
        position: (1427, 44),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "promTypes",
        position: (1513, 3),
       },
       Raw {
        content: "remote_read",
        position: (1513, 13),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "types",
        position: (1513, 27),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "submodule",
          position: (1513, 33),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "options",
             position: (1514, 5),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "url",
                position: (1515, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOption",
               position: (1515, 13),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (1516, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (1516, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "str",
                      position: (1516, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (1517, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "ServerName extension to indicate the name of the server.\nhttp://tools.ietf.org/html/rfc4366#section-3.1\n",
                     position: (1518, 1),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (1515, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "name",
                position: (1522, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1522, 14),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1522, 20),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1522, 26),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Name of the remote read config, which if specified must be unique among remote read configs.\nThe name will be used in metrics and logging in place of a generated value to help users distinguish between\nremote read configs.\n",
                  position: (1523, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "required_matchers",
                position: (1527, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1527, 27),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1527, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrsOf",
                    position: (1527, 40),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (1527, 48),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (1527, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "An optional list of equality matchers which have to be\npresent in a selector to query the remote read endpoint.\n",
                  position: (1528, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "remote_timeout",
                position: (1531, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1531, 24),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1531, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1531, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Timeout for requests to the remote read endpoint.\n",
                  position: (1532, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "read_recent",
                position: (1534, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1534, 21),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1534, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "bool",
                   position: (1534, 33),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Whether reads should be made for queries for time ranges that\nthe local storage should have complete data for.\n",
                  position: (1535, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "basic_auth",
                position: (1538, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1538, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1538, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "basic_auth",
                   position: (1538, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote read request with the\nconfigured username and password.\npassword and password_file are mutually exclusive.\n",
                  position: (1539, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token",
                position: (1543, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1543, 22),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1543, 28),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1543, 34),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote read request with\nthe configured bearer token. It is mutually exclusive with `bearer_token_file`.\n",
                  position: (1544, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "bearer_token_file",
                position: (1547, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1547, 27),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1547, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1547, 39),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Sets the `Authorization` header on every remote read request with the bearer token\nread from the configured file. It is mutually exclusive with `bearer_token`.\n",
                  position: (1548, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "tls_config",
                position: (1551, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1551, 20),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "promTypes",
                 position: (1551, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tls_config",
                   position: (1551, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Configures the remote read request's TLS settings.\n",
                  position: (1552, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "proxy_url",
                position: (1554, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOpt",
               position: (1554, 19),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1554, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (1554, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "Optional Proxy URL.",
                  position: (1554, 36),
                 },
                ],
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (1514, 15),
          },
         ),
        ],
        recursive: false,
        position: (1513, 43),
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "imports",
         position: (1561, 3),
        },
       ],
      },
      List {
       elements: [
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (1562, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (1562, 31),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "prometheus2",
               position: (1562, 42),
              },
             ],
            },
           ],
           position: (1562, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (1562, 60),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "prometheus",
               position: (1562, 71),
              },
             ],
            },
           ],
           position: (1562, 57),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (1563, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (1563, 31),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "prometheus",
               position: (1563, 42),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "environmentFile",
               position: (1563, 55),
              },
             ],
            },
           ],
           position: (1563, 28),
          },
          String {
           parts: [
            Raw {
             content: "It has been removed since it was causing issues (https://github.com/NixOS/nixpkgs/issues/126083) and Prometheus now has native support for secret files, i.e. `basic_auth.password_file` and `authorization.credentials_file`.",
             position: (1564, 8),
            },
           ],
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (1565, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "services",
               position: (1565, 31),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "prometheus",
               position: (1565, 42),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "alertmanagerTimeout",
               position: (1565, 55),
              },
             ],
            },
           ],
           position: (1565, 28),
          },
          String {
           parts: [
            Raw {
             content: "Deprecated upstream and no longer had any effect",
             position: (1566, 8),
            },
           ],
          },
         ],
        },
       ],
       position: (1561, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (1569, 3),
        },
        Raw {
         content: "services",
         position: (1569, 11),
        },
        Raw {
         content: "prometheus",
         position: (1569, 20),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (1571, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1571, 14),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1572, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1572, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (1572, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1573, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (1573, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1574, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable the Prometheus monitoring daemon.\n",
                 position: (1575, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1571, 23),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "package",
            position: (1579, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1579, 15),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1580, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1580, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "package",
                  position: (1580, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1581, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (1581, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "prometheus",
                  position: (1581, 22),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (1582, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (1582, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.prometheus",
                   position: (1582, 40),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1583, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The prometheus package that should be used.\n",
                 position: (1584, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1579, 24),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "port",
            position: (1588, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1588, 12),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1589, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1589, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "port",
                  position: (1589, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1590, 7),
                },
               ],
              },
              Int {
               value: 9090,
               position: (1590, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1591, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Port to listen on.\n",
                 position: (1592, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1588, 21),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "listenAddress",
            position: (1596, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1596, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1597, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1597, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (1597, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1598, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "0.0.0.0",
                 position: (1598, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1599, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Address to listen on for the web interface, API, and telemetry.\n",
                 position: (1600, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1596, 30),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "stateDir",
            position: (1604, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1604, 16),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1605, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1605, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (1605, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1606, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "prometheus2",
                 position: (1606, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1607, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Directory below <literal>/var/lib</literal> to store Prometheus metrics data.\nThis directory will be created automatically using systemd's StateDirectory mechanism.\n",
                 position: (1608, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1604, 25),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "extraFlags",
            position: (1613, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1613, 18),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1614, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1614, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1614, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1614, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1614, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1615, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1615, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1616, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Extra commandline options when launching Prometheus.\n",
                 position: (1617, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1613, 27),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "enableReload",
            position: (1621, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1621, 20),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1622, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (1622, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1623, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1623, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (1623, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1624, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Reload prometheus when configuration file changes (instead of restart).\n\nThe following property holds: switching to a configuration\n(<literal>switch-to-configuration</literal>) that changes the prometheus\nconfiguration only finishes successully when prometheus has finished\nloading the new configuration.\n",
                 position: (1625, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1621, 29),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "configText",
            position: (1634, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1634, 18),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1635, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1635, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (1635, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1635, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "lines",
                    position: (1635, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1636, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (1636, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1637, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "If non-null, this option defines the text that is written to\nprometheus.yml. If null, the contents of prometheus.yml is generated\nfrom the structured config options.\n",
                 position: (1638, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1634, 27),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "globalConfig",
            position: (1644, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1644, 20),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1645, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "promTypes",
                position: (1645, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "globalConfig",
                  position: (1645, 24),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1646, 7),
                },
               ],
              },
              Map {
               bindings: [],
               recursive: false,
               position: (1646, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1647, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Parameters that are valid in all  configuration contexts. They\nalso serve as defaults for other configuration sections\n",
                 position: (1648, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1644, 29),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "remoteRead",
            position: (1653, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1653, 18),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1654, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1654, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1654, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "promTypes",
                  position: (1654, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "remote_read",
                    position: (1654, 37),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1655, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1655, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1656, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Parameters of the endpoints to query from.\nSee <link xlink:href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_read\">the official documentation</link> for more information.\n",
                 position: (1657, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1653, 27),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "remoteWrite",
            position: (1662, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1662, 19),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1663, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1663, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1663, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "promTypes",
                  position: (1663, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "remote_write",
                    position: (1663, 37),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1664, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1664, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1665, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Parameters of the endpoints to send samples to.\nSee <link xlink:href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write\">the official documentation</link> for more information.\n",
                 position: (1666, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1662, 28),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "rules",
            position: (1671, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1671, 13),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1672, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1672, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1672, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1672, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1672, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1673, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1673, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1674, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Alerting and/or Recording rules to evaluate at runtime.\n",
                 position: (1675, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1671, 22),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "ruleFiles",
            position: (1679, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1679, 17),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1680, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1680, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1680, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1680, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "path",
                    position: (1680, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1681, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1681, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1682, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Any additional rules files to include in this configuration.\n",
                 position: (1683, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1679, 26),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "scrapeConfigs",
            position: (1687, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1687, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1688, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1688, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1688, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "promTypes",
                  position: (1688, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "scrape_config",
                    position: (1688, 37),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1689, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1689, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1690, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "A list of scrape configurations.\n",
                 position: (1691, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1687, 30),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "alertmanagers",
            position: (1695, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1695, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1696, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1696, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (1696, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1696, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrs",
                    position: (1696, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (1697, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (1697, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "[ {\n  scheme = \"https\";\n  path_prefix = \"/alertmanager\";\n  static_configs = [ {\n    targets = [\n      \"prometheus.domain.tld\"\n    ];\n  } ];\n} ]\n",
                   position: (1698, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1708, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (1708, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1709, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "A list of alertmanagers to send alerts to.\nSee <link xlink:href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config\">the official documentation</link> for more information.\n",
                 position: (1710, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1695, 30),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "alertmanagerNotificationQueueCapacity",
            position: (1715, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1715, 45),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1716, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1716, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "int",
                  position: (1716, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1717, 7),
                },
               ],
              },
              Int {
               value: 10000,
               position: (1717, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1718, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The capacity of the queue for pending alert manager notifications.\n",
                 position: (1719, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1715, 54),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "webExternalUrl",
            position: (1723, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1723, 22),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1724, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1724, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (1724, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1724, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1724, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1725, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (1725, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (1726, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "https://example.com/",
                 position: (1726, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1727, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The URL under which Prometheus is externally reachable (for example,\nif Prometheus is served via a reverse proxy).\n",
                 position: (1728, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1723, 31),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "checkConfig",
            position: (1733, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1733, 19),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1734, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (1734, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (1734, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1735, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (1735, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1736, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Check configuration with <literal>promtool\ncheck</literal>. The call to <literal>promtool</literal> is\nsubject to sandboxing by Nix. When credentials are stored in\nexternal files (<literal>password_file</literal>,\n<literal>bearer_token_file</literal>, etc), they will not be\nvisible to <literal>promtool</literal> and it will report\nerrors, despite a correct configuration.\n",
                 position: (1737, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1733, 28),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "retentionTime",
            position: (1747, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (1747, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (1748, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (1748, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (1748, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (1748, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (1748, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (1749, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (1749, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (1750, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "15d",
                 position: (1750, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1751, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "How long to retain samples in storage.\n",
                 position: (1752, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1747, 30),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (1569, 33),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (1757, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (1757, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (1757, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (1757, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (1758, 5),
             },
            ],
           },
           List {
            elements: [
             LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "legacy",
                   position: (1763, 11),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (1763, 20),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "match",
                     position: (1763, 29),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "(.*\\..*|.*]):([[:digit:]]+)",
                     position: (1763, 36),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (1763, 66),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listenAddress",
                      position: (1763, 70),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
              ],
              target: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (1766, 11),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   Variable {
                    identifier: "legacy",
                    position: (1766, 23),
                   },
                   Variable {
                    identifier: "null",
                    position: (1766, 33),
                   },
                  ],
                  position: (1766, 30),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (1767, 11),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Do not specify the port for Prometheus to listen on in the\nlistenAddress option; use the port option instead:\n  services.prometheus.listenAddress = ",
                    position: (1768, 1),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "builtins",
                       position: (1770, 53),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "elemAt",
                         position: (1770, 62),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "legacy",
                       position: (1770, 69),
                      },
                      Int {
                       value: 0,
                       position: (1770, 76),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: ";\n  services.prometheus.port = ",
                    position: (1770, 78),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "builtins",
                       position: (1771, 44),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "elemAt",
                         position: (1771, 53),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "legacy",
                       position: (1771, 60),
                      },
                      Int {
                       value: 1,
                       position: (1771, 67),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: ";\n",
                    position: (1771, 69),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (1765, 9),
              },
              position: (1760, 9),
             },
            ],
            position: (1758, 18),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (1777, 5),
             },
             Raw {
              content: "groups",
              position: (1777, 11),
             },
             Raw {
              content: "prometheus",
              position: (1777, 18),
             },
             Raw {
              content: "gid",
              position: (1777, 29),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (1777, 35),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "ids",
               position: (1777, 42),
              },
              Raw {
               content: "gids",
               position: (1777, 46),
              },
              Raw {
               content: "prometheus",
               position: (1777, 51),
              },
             ],
            },
            default: None,
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (1778, 5),
             },
             Raw {
              content: "users",
              position: (1778, 11),
             },
             Raw {
              content: "prometheus",
              position: (1778, 17),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (1779, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Prometheus daemon user",
                 position: (1779, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "uid",
                 position: (1780, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (1780, 13),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "ids",
                  position: (1780, 20),
                 },
                 Raw {
                  content: "uids",
                  position: (1780, 24),
                 },
                 Raw {
                  content: "prometheus",
                  position: (1780, 29),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (1781, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "prometheus",
                 position: (1781, 16),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (1778, 30),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (1783, 5),
             },
             Raw {
              content: "etc",
              position: (1783, 17),
             },
             Expression {
              expression: String {
               parts: [
                Raw {
                 content: "prometheus/prometheus.yaml",
                 position: (1783, 22),
                },
               ],
              },
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (1783, 52),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (1783, 57),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "enableReload",
                 position: (1783, 61),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "source",
                   position: (1784, 7),
                  },
                 ],
                },
                Variable {
                 identifier: "prometheusYml",
                 position: (1784, 16),
                },
               ),
              ],
              recursive: false,
              position: (1783, 74),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (1786, 5),
             },
             Raw {
              content: "services",
              position: (1786, 13),
             },
             Raw {
              content: "prometheus",
              position: (1786, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (1787, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                   position: (1787, 21),
                  },
                 ],
                },
               ],
               position: (1787, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (1788, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "network.target",
                   position: (1788, 18),
                  },
                 ],
                },
               ],
               position: (1788, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (1789, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (1790, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (1790, 24),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "package",
                          position: (1790, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/bin/prometheus",
                      position: (1790, 36),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "optionalString",
                     position: (1791, 11),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "length",
                         position: (1791, 27),
                        },
                        arguments: [
                         Variable {
                          identifier: "cmdlineArgs",
                          position: (1791, 34),
                         },
                        ],
                       },
                       Int {
                        value: 0,
                        position: (1791, 49),
                       },
                      ],
                      position: (1791, 46),
                     },
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       String {
                        parts: [
                         Raw {
                          content: " \\\n  ",
                          position: (1791, 54),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "concatStringsSep",
                         position: (1792, 13),
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: " \\\n  ",
                            position: (1792, 31),
                           },
                          ],
                         },
                         Variable {
                          identifier: "cmdlineArgs",
                          position: (1792, 40),
                         },
                        ],
                       },
                      ],
                      position: (1791, 63),
                     },
                    ],
                   },
                  ],
                  position: (1790, 53),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecReload",
                    position: (1793, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkIf",
                   position: (1793, 22),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (1793, 27),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "enableReload",
                       position: (1793, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: "+",
                      position: (1793, 45),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "reload",
                       position: (1793, 48),
                      },
                     },
                     Raw {
                      content: "/bin/reload-prometheus",
                      position: (1793, 55),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "User",
                    position: (1794, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "prometheus",
                    position: (1794, 17),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Restart",
                    position: (1795, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "always",
                    position: (1795, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RuntimeDirectory",
                    position: (1796, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "prometheus",
                    position: (1796, 29),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RuntimeDirectoryMode",
                    position: (1797, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "0700",
                    position: (1797, 33),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "WorkingDirectory",
                    position: (1798, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "workingDir",
                  position: (1798, 28),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectory",
                    position: (1799, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (1799, 26),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "stateDir",
                     position: (1799, 30),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectoryMode",
                    position: (1800, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "0700",
                    position: (1800, 31),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (1789, 23),
              },
             ),
            ],
            recursive: false,
            position: (1786, 35),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (1814, 5),
             },
             Raw {
              content: "services",
              position: (1814, 13),
             },
             Raw {
              content: "prometheus-config-reload",
              position: (1814, 22),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (1814, 49),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (1814, 54),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "enableReload",
                 position: (1814, 58),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "wantedBy",
                   position: (1815, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "prometheus.service",
                     position: (1815, 21),
                    },
                   ],
                  },
                 ],
                 position: (1815, 18),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "after",
                   position: (1816, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "prometheus.service",
                     position: (1816, 18),
                    },
                   ],
                  },
                 ],
                 position: (1816, 15),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "reloadIfChanged",
                   position: (1817, 7),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (1817, 25),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "restartTriggers",
                   position: (1818, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  Variable {
                   identifier: "prometheusYml",
                   position: (1818, 27),
                  },
                 ],
                 position: (1818, 25),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "serviceConfig",
                   position: (1819, 7),
                  },
                 ],
                },
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "Type",
                      position: (1820, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "oneshot",
                      position: (1820, 17),
                     },
                    ],
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "RemainAfterExit",
                      position: (1821, 9),
                     },
                    ],
                   },
                   Variable {
                    identifier: "true",
                    position: (1821, 27),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "TimeoutSec",
                      position: (1822, 9),
                     },
                    ],
                   },
                   Int {
                    value: 60,
                    position: (1822, 22),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "ExecStart",
                      position: (1823, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "pkgs",
                        position: (1823, 24),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "logger",
                          position: (1823, 29),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/bin/logger 'prometheus-config-reload will only reload prometheus when reloaded itself.'",
                      position: (1823, 36),
                     },
                    ],
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "ExecReload",
                      position: (1824, 9),
                     },
                    ],
                   },
                   List {
                    elements: [
                     String {
                      parts: [
                       Expression {
                        expression: Variable {
                         identifier: "triggerReload",
                         position: (1824, 27),
                        },
                       },
                       Raw {
                        content: "/bin/trigger-reload-prometheus",
                        position: (1824, 41),
                       },
                      ],
                     },
                    ],
                    position: (1824, 22),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (1819, 23),
                },
               ),
              ],
              recursive: false,
              position: (1814, 71),
             },
            ],
           },
          ),
         ],
         recursive: false,
         position: (1757, 28),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (1559, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}