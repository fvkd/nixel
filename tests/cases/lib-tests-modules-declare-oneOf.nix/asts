---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "options",
       position: (2, 3),
      },
      Raw {
       content: "value",
       position: (2, 11),
      },
     ],
    },
    FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (2, 19),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "mkOption",
         position: (2, 23),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "type",
            position: (3, 5),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (3, 12),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "types",
              position: (3, 16),
             },
             Raw {
              content: "oneOf",
              position: (3, 22),
             },
            ],
           },
           default: None,
          },
          arguments: [
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (4, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "types",
                 position: (4, 11),
                },
                Raw {
                 content: "int",
                 position: (4, 17),
                },
               ],
              },
              default: None,
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (5, 8),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "types",
                  position: (5, 12),
                 },
                 Raw {
                  content: "listOf",
                  position: (5, 18),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (5, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "types",
                   position: (5, 29),
                  },
                  Raw {
                   content: "int",
                   position: (5, 35),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (6, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "types",
                 position: (6, 11),
                },
                Raw {
                 content: "str",
                 position: (6, 17),
                },
               ],
              },
              default: None,
             },
            ],
            position: (3, 28),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (2, 32),
      },
     ],
    },
   ),
  ],
  recursive: false,
  position: (1, 15),
 },
 position: (1, 1),
}