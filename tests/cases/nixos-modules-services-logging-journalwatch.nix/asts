---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (2, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (5, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (5, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (5, 16),
        },
        Raw {
         content: "journalwatch",
         position: (5, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "user",
        position: (6, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "journalwatch",
        position: (6, 11),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "group",
        position: (8, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "systemd-journal",
        position: (8, 12),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "dataDir",
        position: (9, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "/var/lib/",
        position: (9, 14),
       },
       Expression {
        expression: Variable {
         identifier: "user",
         position: (9, 25),
        },
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "journalwatchConfig",
        position: (11, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (11, 24),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (11, 29),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "config",
          position: (11, 40),
         },
        ],
       },
       BinaryOperation {
        operator: Addition,
        operands: [
         BinaryOperation {
          operator: Addition,
          operands: [
           String {
            parts: [
             Raw {
              content: "# (File Generated by NixOS journalwatch module.)\n[DEFAULT]\nmail_binary = ",
              position: (12, 1),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (14, 21),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mailBinary",
                  position: (14, 25),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "\npriority = ",
              position: (14, 36),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (15, 18),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (15, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "priority",
                    position: (15, 31),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: "\nmail_from = ",
              position: (15, 40),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (16, 19),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mailFrom",
                  position: (16, 23),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "\n",
              position: (16, 32),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "optionalString",
             position: (18, 5),
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (18, 21),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "mailTo",
                   position: (18, 25),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (18, 35),
               },
              ],
              position: (18, 32),
             },
             String {
              parts: [
               Raw {
                content: "mail_to = ",
                position: (19, 1),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (19, 17),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "mailTo",
                    position: (19, 21),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "\n",
                position: (19, 28),
               },
              ],
             },
            ],
           },
          ],
          position: (18, 3),
         },
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (21, 5),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "extraConfig",
             position: (21, 9),
            },
           ],
          },
          default: None,
         },
        ],
        position: (21, 3),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "journalwatchPatterns",
        position: (23, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (23, 26),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (23, 31),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "patterns",
          position: (23, 42),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "# (File Generated by NixOS journalwatch module.)\n\n",
          position: (24, 1),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "mkPatterns",
            position: (26, 7),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (26, 18),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "filterBlocks",
                position: (26, 22),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (26, 35),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkPatterns",
        position: (30, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "filterBlocks",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatStringsSep",
        position: (30, 30),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "\n",
           position: (30, 48),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (30, 53),
         },
         arguments: [
          Function {
           argument: Some(
            "block",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: String {
            parts: [
             Raw {
              content: "",
              position: (31, 1),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "block",
                position: (31, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "match",
                  position: (31, 13),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "\n",
              position: (31, 19),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "block",
                position: (32, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "filters",
                  position: (32, 13),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "\n\n",
              position: (32, 21),
             },
            ],
           },
           position: (30, 58),
          },
          Variable {
           identifier: "filterBlocks",
           position: (34, 7),
          },
         ],
        },
       ],
      },
      position: (30, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "journalwatchConfigDir",
        position: (39, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (39, 27),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "runCommand",
          position: (39, 32),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "journalwatch-config",
          position: (39, 44),
         },
        ],
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "preferLocalBuild",
             position: (40, 7),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (40, 26),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "allowSubstitutes",
             position: (40, 32),
            },
           ],
          },
          Variable {
           identifier: "false",
           position: (40, 51),
          },
         ),
        ],
        recursive: false,
       },
       String {
        parts: [
         Raw {
          content: "mkdir -p $out/journalwatch\nln -sf ",
          position: (42, 1),
         },
         Expression {
          expression: Variable {
           identifier: "journalwatchConfig",
           position: (43, 16),
          },
         },
         Raw {
          content: " $out/journalwatch/config\nln -sf ",
          position: (43, 35),
         },
         Expression {
          expression: Variable {
           identifier: "journalwatchPatterns",
           position: (44, 16),
          },
         },
         Raw {
          content: " $out/journalwatch/patterns\n",
          position: (44, 37),
         },
        ],
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (49, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (50, 5),
           },
           Raw {
            content: "journalwatch",
            position: (50, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (51, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (51, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (52, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (52, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (52, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (53, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (53, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (54, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "If enabled, periodically check the journal with journalwatch and report the results by mail.\n",
                    position: (55, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "priority",
               position: (59, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (59, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (60, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (60, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "int",
                     position: (60, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (61, 9),
                   },
                  ],
                 },
                 Int {
                  value: 6,
                  position: (61, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (62, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Lowest priority of message to be considered.\nA value between 7 (\"debug\"), and 0 (\"emerg\"). Defaults to 6 (\"info\").\nIf you don't care about anything with \"info\" priority, you can reduce\nthis to e.g. 5 (\"notice\") to considerably reduce the amount of\nmessages without needing many <option>filterBlocks</option>.\n",
                    position: (63, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "mailFrom",
               position: (74, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (74, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (75, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (75, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (75, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (76, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "journalwatch@",
                    position: (76, 20),
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "config",
                      position: (76, 35),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "networking",
                        position: (76, 42),
                       },
                       Raw {
                        content: "hostName",
                        position: (76, 53),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (77, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (77, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\"journalwatch@",
                      position: (77, 43),
                     },
                     Raw {
                      content: "$",
                      position: (77, 57),
                     },
                     Raw {
                      content: "{config.networking.hostName}\"",
                      position: (77, 60),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (78, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Mail address to send journalwatch reports from.\n",
                    position: (79, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "mailTo",
               position: (83, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (83, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (84, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (84, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "nullOr",
                      position: (84, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (84, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (84, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (85, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (85, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (86, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Mail address to send journalwatch reports to.\n",
                    position: (87, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "mailBinary",
               position: (91, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (91, 20),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (92, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (92, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "path",
                     position: (92, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (93, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/run/wrappers/bin/sendmail",
                    position: (93, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (94, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Sendmail-compatible binary to be used to send the messages.\n",
                    position: (95, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraConfig",
               position: (99, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (99, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (100, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (100, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (100, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (101, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (102, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Extra lines to be added verbatim to the journalwatch/config configuration file.\nYou can add any commandline argument to the config, without the '--'.\nSee <literal>journalwatch --help</literal> for all arguments and their description.\n",
                    position: (103, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "filterBlocks",
               position: (109, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (109, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (110, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (110, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (110, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (110, 30),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "submodule",
                        position: (110, 36),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Map {
                      bindings: [
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "options",
                           position: (111, 11),
                          },
                         ],
                        },
                        Map {
                         bindings: [
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "match",
                              position: (112, 12),
                             },
                            ],
                           },
                           FunctionApplication {
                            function: Variable {
                             identifier: "mkOption",
                             position: (112, 20),
                            },
                            arguments: [
                             Map {
                              bindings: [
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "type",
                                   position: (113, 15),
                                  },
                                 ],
                                },
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "types",
                                  position: (113, 22),
                                 },
                                 attribute_path: AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "str",
                                    position: (113, 28),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ),
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "example",
                                   position: (114, 15),
                                  },
                                 ],
                                },
                                String {
                                 parts: [
                                  Raw {
                                   content: "SYSLOG_IDENTIFIER = systemd",
                                   position: (114, 26),
                                  },
                                 ],
                                },
                               ),
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "description",
                                   position: (115, 15),
                                  },
                                 ],
                                },
                                String {
                                 parts: [
                                  Raw {
                                   content: "Syntax: <literal>field = value</literal>\nSpecifies the log entry <literal>field</literal> this block should apply to.\nIf the <literal>field</literal> of a message matches this <literal>value</literal>,\nthis patternBlock's <option>filters</option> are applied.\nIf <literal>value</literal> starts and ends with a slash, it is interpreted as\nan extended python regular expression, if not, it's an exact match.\nThe journal fields are explained in systemd.journal-fields(7).\n",
                                   position: (116, 1),
                                  },
                                 ],
                                },
                               ),
                              ],
                              recursive: false,
                             },
                            ],
                           },
                          ),
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "filters",
                              position: (126, 13),
                             },
                            ],
                           },
                           FunctionApplication {
                            function: Variable {
                             identifier: "mkOption",
                             position: (126, 23),
                            },
                            arguments: [
                             Map {
                              bindings: [
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "type",
                                   position: (127, 15),
                                  },
                                 ],
                                },
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "types",
                                  position: (127, 22),
                                 },
                                 attribute_path: AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "str",
                                    position: (127, 28),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                               ),
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "example",
                                   position: (128, 15),
                                  },
                                 ],
                                },
                                String {
                                 parts: [
                                  Raw {
                                   content: "(Stopped|Stopping|Starting|Started) .*\n(Reached target|Stopped target) .*\n",
                                   position: (129, 1),
                                  },
                                 ],
                                },
                               ),
                               KeyValue(
                                AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "description",
                                   position: (132, 15),
                                  },
                                 ],
                                },
                                String {
                                 parts: [
                                  Raw {
                                   content: "The filters to apply on all messages which satisfy <option>match</option>.\nAny of those messages that match any specified filter will be removed from journalwatch's output.\nEach filter is an extended Python regular expression.\nYou can specify multiple filters and separate them by newlines.\nLines starting with '#' are comments. Inline-comments are not permitted.\n",
                                   position: (133, 1),
                                  },
                                 ],
                                },
                               ),
                              ],
                              recursive: false,
                             },
                            ],
                           },
                          ),
                         ],
                         recursive: false,
                        },
                       ),
                      ],
                      recursive: false,
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (143, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "match",
                         position: (146, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "_SYSTEMD_UNIT = systemd-logind.service",
                         position: (146, 22),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "filters",
                         position: (147, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "New session [a-z]?\\d+ of user \\w+\\.\nRemoved session [a-z]?\\d+\\.\n",
                         position: (148, 1),
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "match",
                         position: (154, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "SYSLOG_IDENTIFIER = /(CROND|crond)/",
                         position: (154, 22),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "filters",
                         position: (155, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "pam_unix\\(crond:session\\): session (opened|closed) for user \\w+\n\\(\\w+\\) CMD .*\n",
                         position: (156, 1),
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (164, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "match",
                         position: (166, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "SYSLOG_IDENTIFIER = systemd",
                         position: (166, 22),
                        },
                       ],
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "filters",
                         position: (167, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "(Stopped|Stopping|Starting|Started) .*\n(Created slice|Removed slice) user-\\d*\\.slice\\.\nReceived SIGRTMIN\\+24 from PID .*\n(Reached target|Stopped target) .*\nStartup finished in \\d*ms\\.\n",
                         position: (168, 1),
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (178, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "filterBlocks can be defined to blacklist journal messages which are not errors.\nEach block matches on a log entry field, and the filters in that block then are matched\nagainst all messages with a matching log entry field.\n\nAll messages whose PRIORITY is at least 6 (INFO) are processed by journalwatch.\nIf you don't specify any filterBlocks, PRIORITY is reduced to 5 (NOTICE) by default.\n\nAll regular expressions are extended Python regular expressions, for details\nsee: http://doc.pyschools.com/html/regex.html\n",
                    position: (179, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "interval",
               position: (191, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (191, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (192, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (192, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (192, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (193, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "hourly",
                    position: (193, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (194, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "How often to run journalwatch.\n\nThe format is described in systemd.time(7).\n",
                    position: (195, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "accuracy",
               position: (200, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (200, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (201, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (201, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (201, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (202, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "10min",
                    position: (202, 20),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (203, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The time window around the interval in which the journalwatch run will be scheduled.\n\nThe format is described in systemd.time(7).\n",
                    position: (204, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (212, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (212, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (212, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (212, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (214, 5),
             },
             Raw {
              content: "users",
              position: (214, 11),
             },
             Expression {
              expression: Variable {
               identifier: "user",
               position: (214, 19),
              },
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "isSystemUser",
                 position: (215, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (215, 22),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "home",
                 position: (216, 7),
                },
               ],
              },
              Variable {
               identifier: "dataDir",
               position: (216, 14),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (217, 7),
                },
               ],
              },
              Variable {
               identifier: "group",
               position: (217, 15),
              },
             ),
            ],
            recursive: false,
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (220, 5),
             },
             Raw {
              content: "tmpfiles",
              position: (220, 13),
             },
             Raw {
              content: "rules",
              position: (220, 22),
             },
            ],
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "R ",
                position: (223, 8),
               },
               Expression {
                expression: Variable {
                 identifier: "dataDir",
                 position: (223, 12),
                },
               },
               Raw {
                content: "/config",
                position: (223, 20),
               },
              ],
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (226, 5),
             },
             Raw {
              content: "services",
              position: (226, 13),
             },
             Raw {
              content: "journalwatch",
              position: (226, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "environment",
                 position: (228, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "XDG_DATA_HOME",
                    position: (233, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: Variable {
                     identifier: "dataDir",
                     position: (233, 28),
                    },
                   },
                   Raw {
                    content: "/share",
                    position: (233, 36),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "XDG_CONFIG_HOME",
                    position: (234, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "journalwatchConfigDir",
                  position: (234, 27),
                 },
                ),
               ],
               recursive: false,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (236, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "User",
                    position: (237, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "user",
                  position: (237, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Group",
                    position: (238, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "group",
                  position: (238, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Type",
                    position: (239, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "oneshot",
                    position: (239, 17),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectory",
                    position: (241, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "user",
                  position: (241, 26),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectoryMode",
                    position: (242, 9),
                   },
                  ],
                 },
                 Int {
                  value: 750,
                  position: (242, 30),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (243, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (243, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "python3Packages",
                        position: (243, 29),
                       },
                       Raw {
                        content: "journalwatch",
                        position: (243, 45),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/bin/journalwatch mail",
                    position: (243, 58),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Nice",
                    position: (245, 9),
                   },
                  ],
                 },
                 Int {
                  value: 19,
                  position: (245, 14),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "IOSchedulingPriority",
                    position: (246, 9),
                   },
                  ],
                 },
                 Int {
                  value: 7,
                  position: (246, 30),
                 },
                ),
               ],
               recursive: false,
              },
             ),
            ],
            recursive: false,
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (250, 5),
             },
             Raw {
              content: "timers",
              position: (250, 13),
             },
             Raw {
              content: "journalwatch",
              position: (250, 20),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (251, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Periodic journalwatch run",
                 position: (251, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (252, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "timers.target",
                   position: (252, 21),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "timerConfig",
                 position: (253, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "OnCalendar",
                    position: (254, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (254, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "interval",
                     position: (254, 26),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "AccuracySec",
                    position: (255, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (255, 23),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "accuracy",
                     position: (255, 27),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Persistent",
                    position: (256, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (256, 22),
                 },
                ),
               ],
               recursive: false,
              },
             ),
            ],
            recursive: false,
           },
          ),
         ],
         recursive: false,
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "meta",
         position: (262, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "maintainers",
            position: (263, 5),
           },
          ],
         },
         With {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (263, 24),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "maintainers",
              position: (263, 28),
             },
            ],
           },
           default: None,
          },
          target: List {
           elements: [
            Variable {
             identifier: "florianjacob",
             position: (263, 43),
            },
           ],
          },
          position: (263, 19),
         },
        ),
       ],
       recursive: false,
      },
     ),
    ],
    recursive: false,
   },
   position: (4, 1),
  },
  position: (2, 1),
 },
 position: (1, 1),
}