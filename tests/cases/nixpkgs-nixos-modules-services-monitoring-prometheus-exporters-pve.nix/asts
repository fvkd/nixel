---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "options",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (5, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (5, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (5, 16),
        },
        Raw {
         content: "prometheus",
         position: (5, 25),
        },
        Raw {
         content: "exporters",
         position: (5, 36),
        },
        Raw {
         content: "pve",
         position: (5, 46),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "emptyConfigFile",
        position: (8, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (8, 21),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "writeTextFile",
          position: (8, 26),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (9, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "pve.yml",
             position: (9, 13),
            },
           ],
           position: (9, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "text",
             position: (10, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "default:",
             position: (10, 13),
            },
           ],
           position: (10, 12),
          },
         },
        ],
        recursive: false,
        position: (8, 40),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "computedConfigFile",
        position: (13, 3),
       },
      ],
     },
     to: String {
      parts: [
       Interpolation {
        expression: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (13, 30),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "configFile",
               position: (13, 34),
              },
             ],
            },
            default: None,
           },
           Variable {
            identifier: "null",
            position: (13, 48),
           },
          ],
          position: (13, 45),
         },
         then: Variable {
          identifier: "emptyConfigFile",
          position: (13, 58),
         },
         else_: PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (13, 79),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "configFile",
             position: (13, 83),
            },
           ],
          },
          default: None,
         },
         position: (13, 27),
        },
       },
      ],
      position: (13, 24),
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "port",
         position: (16, 3),
        },
       ],
      },
      to: Int {
       value: 9221,
       position: (16, 10),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "extraOpts",
         position: (17, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "package",
            position: (18, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (18, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (19, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (19, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "package",
                  position: (19, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (20, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (20, 17),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "prometheus-pve-exporter",
                  position: (20, 22),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (21, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (21, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.prometheus-pve-exporter",
                   position: (21, 40),
                  },
                 ],
                 position: (21, 39),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (22, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (22, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.prometheus-pve-exporter",
                   position: (22, 36),
                  },
                 ],
                 position: (22, 35),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (23, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "The package to use for prometheus-pve-exporter\n",
                 position: (24, 1),
                },
               ],
               position: (23, 21),
              },
             },
            ],
            recursive: false,
            position: (18, 24),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environmentFile",
            position: (28, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (28, 23),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (29, 7),
                },
               ],
              },
              to: With {
               expression: Variable {
                identifier: "types",
                position: (29, 19),
               },
               target: FunctionApplication {
                function: Variable {
                 identifier: "nullOr",
                 position: (29, 26),
                },
                arguments: [
                 Variable {
                  identifier: "path",
                  position: (29, 33),
                 },
                ],
               },
               position: (29, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (30, 7),
                },
               ],
              },
              to: Variable {
               identifier: "null",
               position: (30, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (31, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "/etc/prometheus-pve-exporter/pve.env",
                 position: (31, 18),
                },
               ],
               position: (31, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (32, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Path to the service's environment file. This path can either be a computed path in /nix/store or a path in the local filesystem.\n\nThe environment file should NOT be stored in /nix/store as it contains passwords and/or keys in plain text.\n\nEnvironment reference: https://github.com/prometheus-pve/prometheus-pve-exporter#authentication\n",
                 position: (33, 1),
                },
               ],
               position: (32, 21),
              },
             },
            ],
            recursive: false,
            position: (28, 32),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "configFile",
            position: (41, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (41, 18),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (42, 7),
                },
               ],
              },
              to: With {
               expression: Variable {
                identifier: "types",
                position: (42, 19),
               },
               target: FunctionApplication {
                function: Variable {
                 identifier: "nullOr",
                 position: (42, 26),
                },
                arguments: [
                 Variable {
                  identifier: "path",
                  position: (42, 33),
                 },
                ],
               },
               position: (42, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (43, 7),
                },
               ],
              },
              to: Variable {
               identifier: "null",
               position: (43, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (44, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "/etc/prometheus-pve-exporter/pve.yml",
                 position: (44, 18),
                },
               ],
               position: (44, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (45, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Path to the service's config file. This path can either be a computed path in /nix/store or a path in the local filesystem.\n\nThe config file should NOT be stored in /nix/store as it will contain passwords and/or keys in plain text.\n\nIf both configFile and environmentFile are provided, the configFile option will be ignored.\n\nConfiguration reference: https://github.com/prometheus-pve/prometheus-pve-exporter/#authentication\n",
                 position: (46, 1),
                },
               ],
               position: (45, 21),
              },
             },
            ],
            recursive: false,
            position: (41, 27),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "collectors",
            position: (56, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "status",
               position: (57, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (57, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (58, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (58, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (58, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (59, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (59, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (60, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect Node/VM/CT status\n",
                    position: (61, 1),
                   },
                  ],
                  position: (60, 23),
                 },
                },
               ],
               recursive: false,
               position: (57, 25),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "version",
               position: (64, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (64, 17),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (65, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (65, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (65, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (66, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (66, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (67, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect PVE version info\n",
                    position: (68, 1),
                   },
                  ],
                  position: (67, 23),
                 },
                },
               ],
               recursive: false,
               position: (64, 26),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "node",
               position: (71, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (71, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (72, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (72, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (72, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (73, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (73, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (74, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect PVE node info\n",
                    position: (75, 1),
                   },
                  ],
                  position: (74, 23),
                 },
                },
               ],
               recursive: false,
               position: (71, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "cluster",
               position: (78, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (78, 17),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (79, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (79, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (79, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (80, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (80, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (81, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect PVE cluster info\n",
                    position: (82, 1),
                   },
                  ],
                  position: (81, 23),
                 },
                },
               ],
               recursive: false,
               position: (78, 26),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "resources",
               position: (85, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (85, 19),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (86, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (86, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (86, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (87, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (87, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (88, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect PVE resources info\n",
                    position: (89, 1),
                   },
                  ],
                  position: (88, 23),
                 },
                },
               ],
               recursive: false,
               position: (85, 28),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "config",
               position: (92, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (92, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (93, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (93, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (93, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (94, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (94, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (95, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Collect PVE onboot status\n",
                    position: (96, 1),
                   },
                  ],
                  position: (95, 23),
                 },
                },
               ],
               recursive: false,
               position: (92, 25),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (56, 18),
         },
        },
       ],
       recursive: false,
       position: (17, 15),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "serviceOpts",
         position: (101, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "serviceConfig",
            position: (102, 5),
           },
          ],
         },
         to: BinaryOperation {
          operator: Update,
          operands: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "ExecStart",
                 position: (103, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "",
                 position: (104, 1),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (104, 11),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "package",
                     position: (104, 15),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "/bin/pve_exporter \\\n  --",
                 position: (104, 23),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (105, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (105, 22),
                       },
                       Raw {
                        content: "status",
                        position: (105, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (105, 43),
                    },
                   ],
                   position: (105, 40),
                  },
                  then: String {
                   parts: [],
                   position: (105, 53),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (105, 62),
                    },
                   ],
                   position: (105, 61),
                  },
                  position: (105, 15),
                 },
                },
                Raw {
                 content: "collector.status \\\n  --",
                 position: (105, 67),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (106, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (106, 22),
                       },
                       Raw {
                        content: "version",
                        position: (106, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (106, 44),
                    },
                   ],
                   position: (106, 41),
                  },
                  then: String {
                   parts: [],
                   position: (106, 54),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (106, 63),
                    },
                   ],
                   position: (106, 62),
                  },
                  position: (106, 15),
                 },
                },
                Raw {
                 content: "collector.version \\\n  --",
                 position: (106, 68),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (107, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (107, 22),
                       },
                       Raw {
                        content: "node",
                        position: (107, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (107, 41),
                    },
                   ],
                   position: (107, 38),
                  },
                  then: String {
                   parts: [],
                   position: (107, 51),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (107, 60),
                    },
                   ],
                   position: (107, 59),
                  },
                  position: (107, 15),
                 },
                },
                Raw {
                 content: "collector.node \\\n  --",
                 position: (107, 65),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (108, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (108, 22),
                       },
                       Raw {
                        content: "cluster",
                        position: (108, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (108, 44),
                    },
                   ],
                   position: (108, 41),
                  },
                  then: String {
                   parts: [],
                   position: (108, 54),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (108, 63),
                    },
                   ],
                   position: (108, 62),
                  },
                  position: (108, 15),
                 },
                },
                Raw {
                 content: "collector.cluster \\\n  --",
                 position: (108, 68),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (109, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (109, 22),
                       },
                       Raw {
                        content: "resources",
                        position: (109, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (109, 46),
                    },
                   ],
                   position: (109, 43),
                  },
                  then: String {
                   parts: [],
                   position: (109, 56),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (109, 65),
                    },
                   ],
                   position: (109, 64),
                  },
                  position: (109, 15),
                 },
                },
                Raw {
                 content: "collector.resources \\\n  --",
                 position: (109, 70),
                },
                Interpolation {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: EqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (110, 18),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "collectors",
                        position: (110, 22),
                       },
                       Raw {
                        content: "config",
                        position: (110, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "true",
                     position: (110, 43),
                    },
                   ],
                   position: (110, 40),
                  },
                  then: String {
                   parts: [],
                   position: (110, 53),
                  },
                  else_: String {
                   parts: [
                    Raw {
                     content: "no-",
                     position: (110, 62),
                    },
                   ],
                   position: (110, 61),
                  },
                  position: (110, 15),
                 },
                },
                Raw {
                 content: "collector.config \\\n  ",
                 position: (110, 67),
                },
                Interpolation {
                 expression: Variable {
                  identifier: "computedConfigFile",
                  position: (111, 13),
                 },
                },
                Raw {
                 content: " \\\n  ",
                 position: (111, 32),
                },
                Interpolation {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "toString",
                   position: (112, 13),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (112, 22),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "port",
                       position: (112, 26),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: " ",
                 position: (112, 31),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (112, 34),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "listenAddress",
                     position: (112, 38),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "\n",
                 position: (112, 52),
                },
               ],
               position: (103, 19),
              },
             },
            ],
            recursive: false,
            position: (102, 21),
           },
           FunctionApplication {
            function: Variable {
             identifier: "optionalAttrs",
             position: (114, 10),
            },
            arguments: [
             Parentheses {
              expression: BinaryOperation {
               operator: NotEqualTo,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (114, 25),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "environmentFile",
                    position: (114, 29),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "null",
                 position: (114, 48),
                },
               ],
               position: (114, 45),
              },
              position: (114, 24),
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "EnvironmentFile",
                   position: (115, 11),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (115, 29),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "environmentFile",
                    position: (115, 33),
                   },
                  ],
                 },
                 default: None,
                },
               },
              ],
              recursive: false,
              position: (114, 54),
             },
            ],
           },
          ],
          position: (114, 7),
         },
        },
       ],
       recursive: false,
       position: (101, 17),
      },
     },
    ],
    recursive: false,
    position: (15, 1),
   },
   position: (4, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}