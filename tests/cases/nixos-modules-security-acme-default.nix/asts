---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "options",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (2, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (4, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (4, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "security",
         position: (4, 16),
        },
        Raw {
         content: "acme",
         position: (4, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "opt",
        position: (5, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "options",
       position: (5, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "security",
         position: (5, 17),
        },
        Raw {
         content: "acme",
         position: (5, 26),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "user",
        position: (6, 3),
       },
      ],
     },
     IfThenElse {
      predicate: PropertyAccess {
       expression: Variable {
        identifier: "cfg",
        position: (6, 13),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "useRoot",
          position: (6, 17),
         },
        ],
       },
       default: None,
      },
      then: String {
       parts: [
        Raw {
         content: "root",
        },
       ],
       position: (6, 30),
      },
      else_: String {
       parts: [
        Raw {
         content: "acme",
        },
       ],
       position: (6, 42),
      },
      position: (6, 10),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "numCerts",
        position: (9, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "length",
       position: (9, 14),
      },
      arguments: [
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (9, 22),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "attrNames",
            position: (9, 31),
           },
          ],
         },
         default: None,
        },
        arguments: [
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (9, 41),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "certs",
             position: (9, 45),
            },
           ],
          },
          default: None,
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "_24hSecs",
        position: (10, 3),
       },
      ],
     },
     BinaryOperation {
      operator: Multiplication,
      operands: [
       BinaryOperation {
        operator: Multiplication,
        operands: [
         Int {
          value: 60,
          position: (10, 14),
         },
         Int {
          value: 60,
          position: (10, 19),
         },
        ],
        position: (10, 17),
       },
       Int {
        value: 24,
        position: (10, 24),
       },
      ],
      position: (10, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkHash",
        position: (13, 3),
       },
      ],
     },
     With {
      expression: Variable {
       identifier: "builtins",
       position: (13, 17),
      },
      target: Function {
       argument: Simple {
        identifier: "val",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "substring",
         position: (13, 32),
        },
        arguments: [
         Int {
          value: 0,
          position: (13, 42),
         },
         Int {
          value: 20,
          position: (13, 44),
         },
         FunctionApplication {
          function: Variable {
           identifier: "hashString",
           position: (13, 48),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "sha256",
             },
            ],
            position: (13, 59),
           },
           Variable {
            identifier: "val",
            position: (13, 68),
           },
          ],
         },
        ],
       },
       position: (13, 27),
      },
      position: (13, 12),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkAccountHash",
        position: (14, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "acmeServer",
      },
      definition: Function {
       argument: Simple {
        identifier: "data",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "mkHash",
         position: (14, 37),
        },
        arguments: [
         String {
          parts: [
           Expression {
            expression: FunctionApplication {
             function: Variable {
              identifier: "toString",
              position: (14, 47),
             },
             arguments: [
              Variable {
               identifier: "acmeServer",
               position: (14, 56),
              },
             ],
            },
           },
           Raw {
            content: " ",
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "data",
              position: (14, 70),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "keyType",
                position: (14, 75),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: " ",
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "data",
              position: (14, 86),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "email",
                position: (14, 91),
               },
              ],
             },
             default: None,
            },
           },
          ],
          position: (14, 44),
         },
        ],
       },
       position: (14, 31),
      },
      position: (14, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "accountDirRoot",
        position: (15, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "/var/lib/acme/.lego/accounts/",
       },
      ],
      position: (15, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "commonServiceConfig",
        position: (25, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "Type",
           position: (26, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "oneshot",
          },
         ],
         position: (26, 12),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "User",
           position: (27, 5),
          },
         ],
        },
        Variable {
         identifier: "user",
         position: (27, 12),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "Group",
           position: (28, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkDefault",
          position: (28, 13),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "acme",
            },
           ],
           position: (28, 23),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "UMask",
           position: (29, 5),
          },
         ],
        },
        Int {
         value: 22,
         position: (29, 13),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "StateDirectoryMode",
           position: (30, 5),
          },
         ],
        },
        Int {
         value: 750,
         position: (30, 26),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectSystem",
           position: (31, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "strict",
          },
         ],
         position: (31, 21),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ReadWritePaths",
           position: (32, 5),
          },
         ],
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "/var/lib/acme",
            },
           ],
           position: (33, 7),
          },
         ],
         position: (32, 22),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "PrivateTmp",
           position: (35, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (35, 18),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "WorkingDirectory",
           position: (37, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "/tmp",
          },
         ],
         position: (37, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "CapabilityBoundingSet",
           position: (39, 5),
          },
         ],
        },
        List {
         elements: [
          String {
           parts: [],
           position: (39, 31),
          },
         ],
         position: (39, 29),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "DevicePolicy",
           position: (40, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "closed",
          },
         ],
         position: (40, 20),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "LockPersonality",
           position: (41, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (41, 23),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "MemoryDenyWriteExecute",
           position: (42, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (42, 30),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "NoNewPrivileges",
           position: (43, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (43, 23),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "PrivateDevices",
           position: (44, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (44, 22),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectClock",
           position: (45, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (45, 20),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectHome",
           position: (46, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (46, 19),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectHostname",
           position: (47, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (47, 23),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectControlGroups",
           position: (48, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (48, 28),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectKernelLogs",
           position: (49, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (49, 25),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectKernelModules",
           position: (50, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (50, 28),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectKernelTunables",
           position: (51, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (51, 29),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProtectProc",
           position: (52, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "invisible",
          },
         ],
         position: (52, 19),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ProcSubset",
           position: (53, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "pid",
          },
         ],
         position: (53, 18),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "RemoveIPC",
           position: (54, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (54, 17),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "RestrictAddressFamilies",
           position: (55, 5),
          },
         ],
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "AF_INET",
            },
           ],
           position: (56, 7),
          },
          String {
           parts: [
            Raw {
             content: "AF_INET6",
            },
           ],
           position: (57, 7),
          },
         ],
         position: (55, 31),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "RestrictNamespaces",
           position: (59, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (59, 26),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "RestrictRealtime",
           position: (60, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (60, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "RestrictSUIDSGID",
           position: (61, 5),
          },
         ],
        },
        Variable {
         identifier: "true",
         position: (61, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "SystemCallArchitectures",
           position: (62, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "native",
          },
         ],
         position: (62, 31),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "SystemCallFilter",
           position: (63, 5),
          },
         ],
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "@system-service",
            },
           ],
           position: (65, 7),
          },
          String {
           parts: [
            Raw {
             content: "~@privileged @resources",
            },
           ],
           position: (67, 7),
          },
          String {
           parts: [
            Raw {
             content: "@chown",
            },
           ],
           position: (69, 7),
          },
         ],
         position: (63, 24),
        },
       ),
      ],
      recursive: false,
      position: (25, 25),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "selfsignCAService",
        position: (75, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "description",
           position: (76, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "Generate self-signed certificate authority",
          },
         ],
         position: (76, 19),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "path",
           position: (78, 5),
          },
         ],
        },
        With {
         expression: Variable {
          identifier: "pkgs",
          position: (78, 17),
         },
         target: List {
          elements: [
           Variable {
            identifier: "minica",
            position: (78, 25),
           },
          ],
          position: (78, 23),
         },
         position: (78, 12),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "unitConfig",
           position: (80, 5),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "ConditionPathExists",
              position: (81, 7),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "!/var/lib/acme/.minica/key.pem",
             },
            ],
            position: (81, 29),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "StartLimitIntervalSec",
              position: (82, 7),
             },
            ],
           },
           Int {
            value: 0,
            position: (82, 31),
           },
          ),
         ],
         recursive: false,
         position: (80, 18),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "serviceConfig",
           position: (85, 5),
          },
         ],
        },
        BinaryOperation {
         operator: Update,
         operands: [
          Variable {
           identifier: "commonServiceConfig",
           position: (85, 21),
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "StateDirectory",
                position: (86, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "acme/.minica",
               },
              ],
              position: (86, 24),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "BindPaths",
                position: (87, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "/var/lib/acme/.minica:/tmp/ca",
               },
              ],
              position: (87, 19),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "UMask",
                position: (88, 7),
               },
              ],
             },
             Int {
              value: 77,
              position: (88, 15),
             },
            ),
           ],
           recursive: false,
           position: (85, 44),
          },
         ],
         position: (85, 41),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "script",
           position: (92, 5),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "minica \\\n  --ca-key ca/key.pem \\\n  --ca-cert ca/cert.pem \\\n  --domains selfsigned.local\n",
          },
         ],
         position: (92, 14),
        },
       ),
      ],
      recursive: false,
      position: (75, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "userMigrationService",
        position: (103, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "script",
           position: (104, 5),
          },
         ],
        },
        With {
         expression: Variable {
          identifier: "builtins",
          position: (104, 19),
         },
         target: BinaryOperation {
          operator: Addition,
          operands: [
           String {
            parts: [
             Raw {
              content: "chown -R ",
             },
             Expression {
              expression: Variable {
               identifier: "user",
               position: (105, 18),
              },
             },
             Raw {
              content: " .lego/accounts\n",
             },
            ],
            position: (104, 29),
           },
           FunctionApplication {
            function: Variable {
             identifier: "concatStringsSep",
             position: (106, 11),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "\n",
               },
              ],
              position: (106, 28),
             },
             FunctionApplication {
              function: Variable {
               identifier: "mapAttrsToList",
               position: (106, 34),
              },
              arguments: [
               Function {
                argument: Simple {
                 identifier: "cert",
                },
                definition: Function {
                 argument: Simple {
                  identifier: "data",
                 },
                 definition: String {
                  parts: [
                   Raw {
                    content: "for fixpath in ",
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "escapeShellArg",
                      position: (107, 24),
                     },
                     arguments: [
                      Variable {
                       identifier: "cert",
                       position: (107, 39),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: " .lego/",
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "escapeShellArg",
                      position: (107, 53),
                     },
                     arguments: [
                      Variable {
                       identifier: "cert",
                       position: (107, 68),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: "; do\n  if [ -d \"$fixpath\" ]; then\n    chmod -R u=rwX,g=rX,o= \"$fixpath\"\n    chown -R ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "user",
                     position: (110, 22),
                    },
                   },
                   Raw {
                    content: ":",
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "data",
                      position: (110, 30),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "group",
                        position: (110, 35),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: " \"$fixpath\"\n  fi\ndone\n",
                   },
                  ],
                  position: (106, 62),
                 },
                 position: (106, 56),
                },
                position: (106, 50),
               },
               Variable {
                identifier: "certConfigs",
                position: (113, 9),
               },
              ],
             },
            ],
           },
          ],
          position: (106, 8),
         },
         position: (104, 14),
        },
       ),
      ],
      target: Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "description",
            position: (115, 5),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "Fix owner and group of all ACME certificates",
           },
          ],
          position: (115, 19),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "serviceConfig",
            position: (117, 5),
           },
          ],
         },
         BinaryOperation {
          operator: Update,
          operands: [
           Variable {
            identifier: "commonServiceConfig",
            position: (117, 21),
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "RemainAfterExit",
                 position: (119, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (119, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "StateDirectory",
                 position: (122, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "acme",
                  },
                 ],
                 position: (122, 26),
                },
                String {
                 parts: [
                  Raw {
                   content: "acme/.lego",
                  },
                 ],
                 position: (122, 33),
                },
                String {
                 parts: [
                  Raw {
                   content: "acme/.lego/accounts",
                  },
                 ],
                 position: (122, 46),
                },
               ],
               position: (122, 24),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "StateDirectoryMode",
                 position: (123, 7),
                },
               ],
              },
              Int {
               value: 755,
               position: (123, 28),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "WorkingDirectory",
                 position: (124, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "/var/lib/acme",
                },
               ],
               position: (124, 26),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "ExecStart",
                 position: (127, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Addition,
               operands: [
                String {
                 parts: [
                  Raw {
                   content: "+",
                  },
                 ],
                 position: (127, 19),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (127, 26),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "writeShellScript",
                     position: (127, 31),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "acme-fixperms",
                    },
                   ],
                   position: (127, 48),
                  },
                  Variable {
                   identifier: "script",
                   position: (127, 64),
                  },
                 ],
                },
               ],
               position: (127, 23),
              },
             ),
            ],
            recursive: false,
            position: (117, 44),
           },
          ],
          position: (117, 41),
         },
        ),
       ],
       recursive: false,
       position: (114, 6),
      },
      position: (103, 26),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "certToConfig",
        position: (131, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "cert",
      },
      definition: Function {
       argument: Simple {
        identifier: "data",
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "acmeServer",
             position: (132, 5),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "data",
            position: (132, 18),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "server",
              position: (132, 23),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "useDns",
             position: (133, 5),
            },
           ],
          },
          BinaryOperation {
           operator: NotEqualTo,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "data",
              position: (133, 14),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "dnsProvider",
                position: (133, 19),
               },
              ],
             },
             default: None,
            },
            Variable {
             identifier: "null",
             position: (133, 34),
            },
           ],
           position: (133, 31),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "destPath",
             position: (134, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "/var/lib/acme/",
            },
            Expression {
             expression: Variable {
              identifier: "cert",
              position: (134, 33),
             },
            },
           ],
           position: (134, 16),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "selfsignedDeps",
             position: (135, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "optionals",
            position: (135, 22),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (135, 33),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "preliminarySelfsigned",
                position: (135, 37),
               },
              ],
             },
             default: None,
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "acme-selfsigned-",
                },
                Expression {
                 expression: Variable {
                  identifier: "cert",
                  position: (135, 81),
                 },
                },
                Raw {
                 content: ".service",
                },
               ],
               position: (135, 62),
              },
             ],
             position: (135, 60),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "keyName",
             position: (140, 5),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (140, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "replaceStrings",
               position: (140, 24),
              },
             ],
            },
            default: None,
           },
           arguments: [
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "*",
                },
               ],
               position: (140, 40),
              },
             ],
             position: (140, 39),
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "_",
                },
               ],
               position: (140, 46),
              },
             ],
             position: (140, 45),
            },
            PropertyAccess {
             expression: Variable {
              identifier: "data",
              position: (140, 51),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "domain",
                position: (140, 56),
               },
              ],
             },
             default: None,
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "extraDomains",
             position: (144, 5),
            },
           ],
          },
          BinaryOperation {
           operator: Concatenation,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "data",
              position: (144, 20),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "extraDomainNames",
                position: (144, 25),
               },
              ],
             },
             default: None,
            },
            FunctionApplication {
             function: Variable {
              identifier: "optionals",
              position: (145, 7),
             },
             arguments: [
              BinaryOperation {
               operator: NotEqualTo,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (146, 8),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "extraDomains",
                    position: (146, 13),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "_mkMergedOptionModule",
                  },
                 ],
                 position: (146, 29),
                },
               ],
               position: (146, 26),
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (147, 8),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "attrNames",
                   position: (147, 17),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (147, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "extraDomains",
                    position: (147, 32),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ],
            },
           ],
           position: (144, 42),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "hashData",
             position: (152, 5),
            },
           ],
          },
          With {
           expression: Variable {
            identifier: "builtins",
            position: (152, 21),
           },
           target: String {
            parts: [
             Raw {
              content: "",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "concatStringsSep",
                position: (153, 9),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: " ",
                  },
                 ],
                 position: (153, 26),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (153, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "extraLegoFlags",
                    position: (153, 35),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: " -\n",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "concatStringsSep",
                position: (154, 9),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: " ",
                  },
                 ],
                 position: (154, 26),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (154, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "extraLegoRunFlags",
                    position: (154, 35),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: " -\n",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "concatStringsSep",
                position: (155, 9),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: " ",
                  },
                 ],
                 position: (155, 26),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (155, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "extraLegoRenewFlags",
                    position: (155, 35),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: " -\n",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (156, 9),
               },
               arguments: [
                Variable {
                 identifier: "acmeServer",
                 position: (156, 18),
                },
               ],
              },
             },
             Raw {
              content: " ",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (156, 32),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (156, 41),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "dnsProvider",
                    position: (156, 46),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: "\n",
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (157, 9),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "data",
                  position: (157, 18),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "ocspMustStaple",
                    position: (157, 23),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: " ",
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (157, 41),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "keyType",
                  position: (157, 46),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "\n",
             },
            ],
            position: (152, 31),
           },
           position: (152, 16),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "certDir",
             position: (159, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkHash",
            position: (159, 15),
           },
           arguments: [
            Variable {
             identifier: "hashData",
             position: (159, 22),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "domainHash",
             position: (161, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkHash",
            position: (161, 18),
           },
           arguments: [
            String {
             parts: [
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (161, 28),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: " ",
                   },
                  ],
                  position: (161, 45),
                 },
                 Variable {
                  identifier: "extraDomains",
                  position: (161, 49),
                 },
                ],
               },
              },
              Raw {
               content: " ",
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "data",
                 position: (161, 65),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "domain",
                   position: (161, 70),
                  },
                 ],
                },
                default: None,
               },
              },
             ],
             position: (161, 25),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "accountHash",
             position: (162, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkAccountHash",
            position: (162, 20),
           },
           arguments: [
            Variable {
             identifier: "acmeServer",
             position: (162, 34),
            },
            Variable {
             identifier: "data",
             position: (162, 45),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "accountDir",
             position: (163, 5),
            },
           ],
          },
          BinaryOperation {
           operator: Addition,
           operands: [
            Variable {
             identifier: "accountDirRoot",
             position: (163, 18),
            },
            Variable {
             identifier: "accountHash",
             position: (163, 35),
            },
           ],
           position: (163, 33),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "protocolOpts",
             position: (165, 5),
            },
           ],
          },
          IfThenElse {
           predicate: Variable {
            identifier: "useDns",
            position: (165, 23),
           },
           then: BinaryOperation {
            operator: Concatenation,
            operands: [
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "--dns",
                 },
                ],
                position: (166, 9),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "data",
                 position: (166, 17),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "dnsProvider",
                   position: (166, 22),
                  },
                 ],
                },
                default: None,
               },
              ],
              position: (166, 7),
             },
             BinaryOperation {
              operator: Concatenation,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "optionals",
                 position: (167, 10),
                },
                arguments: [
                 UnaryOperation {
                  operator: Not,
                  operand: PropertyAccess {
                   expression: Variable {
                    identifier: "data",
                    position: (167, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "dnsPropagationCheck",
                      position: (167, 27),
                     },
                    ],
                   },
                   default: None,
                  },
                  position: (167, 21),
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "--dns.disable-cp",
                     },
                    ],
                    position: (167, 50),
                   },
                  ],
                  position: (167, 48),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optionals",
                 position: (168, 10),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (168, 21),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "dnsResolver",
                       position: (168, 26),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (168, 41),
                   },
                  ],
                  position: (168, 38),
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "--dns.resolvers",
                     },
                    ],
                    position: (168, 49),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (168, 67),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "dnsResolver",
                       position: (168, 72),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                  position: (168, 47),
                 },
                ],
               },
              ],
              position: (168, 7),
             },
            ],
            position: (167, 7),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (169, 15),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "listenHTTP",
                  position: (169, 20),
                 },
                ],
               },
               default: None,
              },
              Variable {
               identifier: "null",
               position: (169, 34),
              },
             ],
             position: (169, 31),
            },
            then: List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "--http",
                },
               ],
               position: (169, 46),
              },
              String {
               parts: [
                Raw {
                 content: "--http.port",
                },
               ],
               position: (169, 55),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (169, 69),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "listenHTTP",
                  position: (169, 74),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (169, 44),
            },
            else_: List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "--http",
                },
               ],
               position: (170, 12),
              },
              String {
               parts: [
                Raw {
                 content: "--http.webroot",
                },
               ],
               position: (170, 21),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (170, 38),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "webroot",
                  position: (170, 43),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (170, 10),
            },
            position: (169, 12),
           },
           position: (165, 20),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "commonOpts",
             position: (172, 5),
            },
           ],
          },
          BinaryOperation {
           operator: Concatenation,
           operands: [
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "--accept-tos",
                },
               ],
               position: (173, 7),
              },
              String {
               parts: [
                Raw {
                 content: "--path",
                },
               ],
               position: (174, 7),
              },
              String {
               parts: [
                Raw {
                 content: ".",
                },
               ],
               position: (174, 16),
              },
              String {
               parts: [
                Raw {
                 content: "-d",
                },
               ],
               position: (175, 7),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (175, 12),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "domain",
                  position: (175, 17),
                 },
                ],
               },
               default: None,
              },
              String {
               parts: [
                Raw {
                 content: "--email",
                },
               ],
               position: (176, 7),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (176, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "email",
                  position: (176, 22),
                 },
                ],
               },
               default: None,
              },
              String {
               parts: [
                Raw {
                 content: "--key-type",
                },
               ],
               position: (177, 7),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "data",
                position: (177, 20),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "keyType",
                  position: (177, 25),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (172, 18),
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              Variable {
               identifier: "protocolOpts",
               position: (178, 10),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "optionals",
                  position: (179, 10),
                 },
                 arguments: [
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "acmeServer",
                     position: (179, 21),
                    },
                    Variable {
                     identifier: "null",
                     position: (179, 35),
                    },
                   ],
                   position: (179, 32),
                  },
                  List {
                   elements: [
                    String {
                     parts: [
                      Raw {
                       content: "--server",
                      },
                     ],
                     position: (179, 43),
                    },
                    Variable {
                     identifier: "acmeServer",
                     position: (179, 54),
                    },
                   ],
                   position: (179, 41),
                  },
                 ],
                },
                BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "concatMap",
                    position: (180, 10),
                   },
                   arguments: [
                    Function {
                     argument: Simple {
                      identifier: "name",
                     },
                     definition: List {
                      elements: [
                       String {
                        parts: [
                         Raw {
                          content: "-d",
                         },
                        ],
                        position: (180, 29),
                       },
                       Variable {
                        identifier: "name",
                        position: (180, 34),
                       },
                      ],
                      position: (180, 27),
                     },
                     position: (180, 21),
                    },
                    Variable {
                     identifier: "extraDomains",
                     position: (180, 42),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "data",
                    position: (181, 10),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraLegoFlags",
                      position: (181, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (181, 7),
                },
               ],
               position: (180, 7),
              },
             ],
             position: (179, 7),
            },
           ],
           position: (178, 7),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "runOpts",
             position: (185, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "escapeShellArgs",
            position: (185, 15),
           },
           arguments: [
            BinaryOperation {
             operator: Concatenation,
             operands: [
              Variable {
               identifier: "commonOpts",
               position: (186, 7),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "run",
                    },
                   ],
                   position: (187, 12),
                  },
                 ],
                 position: (187, 10),
                },
                BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "optionals",
                    position: (188, 10),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "data",
                      position: (188, 20),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "ocspMustStaple",
                        position: (188, 25),
                       },
                      ],
                     },
                     default: None,
                    },
                    List {
                     elements: [
                      String {
                       parts: [
                        Raw {
                         content: "--must-staple",
                        },
                       ],
                       position: (188, 42),
                      },
                     ],
                     position: (188, 40),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "data",
                    position: (189, 10),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraLegoRunFlags",
                      position: (189, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (189, 7),
                },
               ],
               position: (188, 7),
              },
             ],
             position: (187, 7),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "renewOpts",
             position: (191, 5),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "escapeShellArgs",
            position: (191, 17),
           },
           arguments: [
            BinaryOperation {
             operator: Concatenation,
             operands: [
              Variable {
               identifier: "commonOpts",
               position: (192, 7),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "renew",
                    },
                   ],
                   position: (193, 12),
                  },
                 ],
                 position: (193, 10),
                },
                BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "optionals",
                    position: (194, 10),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "data",
                      position: (194, 20),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "ocspMustStaple",
                        position: (194, 25),
                       },
                      ],
                     },
                     default: None,
                    },
                    List {
                     elements: [
                      String {
                       parts: [
                        Raw {
                         content: "--must-staple",
                        },
                       ],
                       position: (194, 42),
                      },
                     ],
                     position: (194, 40),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "data",
                    position: (195, 10),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraLegoRenewFlags",
                      position: (195, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (195, 7),
                },
               ],
               position: (194, 7),
              },
             ],
             position: (193, 7),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "webroots",
             position: (200, 5),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (201, 7),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "remove",
               position: (201, 11),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "null",
             position: (201, 18),
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (202, 10),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "unique",
                 position: (202, 14),
                },
               ],
              },
              default: None,
             },
             arguments: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (203, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "map",
                   position: (203, 23),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Function {
                 argument: Simple {
                  identifier: "certAttrs",
                 },
                 definition: PropertyAccess {
                  expression: Variable {
                   identifier: "certAttrs",
                   position: (204, 25),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "webroot",
                     position: (204, 35),
                    },
                   ],
                  },
                  default: None,
                 },
                 position: (204, 14),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (205, 14),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "attrValues",
                     position: (205, 18),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (205, 29),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "security",
                      position: (205, 36),
                     },
                     Raw {
                      content: "acme",
                      position: (205, 45),
                     },
                     Raw {
                      content: "certs",
                      position: (205, 50),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ],
              },
             ],
            },
           ],
          },
         ),
        ],
        target: Map {
         bindings: [
          Inherit {
           from: None,
           attributes: [
            Raw {
             content: "accountHash",
             position: (207, 13),
            },
            Raw {
             content: "cert",
             position: (207, 25),
            },
            Raw {
             content: "selfsignedDeps",
             position: (207, 30),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "group",
              position: (209, 5),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "data",
             position: (209, 13),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "group",
               position: (209, 18),
              },
             ],
            },
            default: None,
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "renewTimer",
              position: (211, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (212, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Renew ACME Certificate for ",
                },
                Expression {
                 expression: Variable {
                  identifier: "cert",
                  position: (212, 51),
                 },
                },
               ],
               position: (212, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (213, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "timers.target",
                  },
                 ],
                 position: (213, 20),
                },
               ],
               position: (213, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "timerConfig",
                 position: (214, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "OnCalendar",
                    position: (215, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "data",
                   position: (215, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "renewInterval",
                     position: (215, 27),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Unit",
                    position: (216, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "acme-",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "cert",
                     position: (216, 24),
                    },
                   },
                   Raw {
                    content: ".service",
                   },
                  ],
                  position: (216, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Persistent",
                    position: (217, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "yes",
                   },
                  ],
                  position: (217, 22),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "AccuracySec",
                    position: (225, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "toString",
                      position: (225, 26),
                     },
                     arguments: [
                      BinaryOperation {
                       operator: Division,
                       operands: [
                        Variable {
                         identifier: "_24hSecs",
                         position: (225, 36),
                        },
                        Variable {
                         identifier: "numCerts",
                         position: (225, 47),
                        },
                       ],
                       position: (225, 45),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: "s",
                   },
                  ],
                  position: (225, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RandomizedDelaySec",
                    position: (228, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "24h",
                   },
                  ],
                  position: (228, 30),
                 },
                ),
               ],
               recursive: false,
               position: (214, 21),
              },
             ),
            ],
            recursive: false,
            position: (211, 18),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "selfsignService",
              position: (232, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (233, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Generate self-signed certificate for ",
                },
                Expression {
                 expression: Variable {
                  identifier: "cert",
                  position: (233, 61),
                 },
                },
               ],
               position: (233, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (234, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "acme-selfsigned-ca.service",
                  },
                 ],
                 position: (234, 17),
                },
                String {
                 parts: [
                  Raw {
                   content: "acme-fixperms.service",
                  },
                 ],
                 position: (234, 46),
                },
               ],
               position: (234, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "requires",
                 position: (235, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "acme-selfsigned-ca.service",
                  },
                 ],
                 position: (235, 20),
                },
                String {
                 parts: [
                  Raw {
                   content: "acme-fixperms.service",
                  },
                 ],
                 position: (235, 49),
                },
               ],
               position: (235, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (237, 7),
                },
               ],
              },
              With {
               expression: Variable {
                identifier: "pkgs",
                position: (237, 19),
               },
               target: List {
                elements: [
                 Variable {
                  identifier: "minica",
                  position: (237, 27),
                 },
                ],
                position: (237, 25),
               },
               position: (237, 14),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "unitConfig",
                 position: (239, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ConditionPathExists",
                    position: (240, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "!/var/lib/acme/",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "cert",
                     position: (240, 49),
                    },
                   },
                   Raw {
                    content: "/key.pem",
                   },
                  ],
                  position: (240, 31),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StartLimitIntervalSec",
                    position: (241, 9),
                   },
                  ],
                 },
                 Int {
                  value: 0,
                  position: (241, 33),
                 },
                ),
               ],
               recursive: false,
               position: (239, 20),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (244, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                Variable {
                 identifier: "commonServiceConfig",
                 position: (244, 23),
                },
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "Group",
                      position: (245, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (245, 17),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "group",
                       position: (245, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "UMask",
                      position: (246, 9),
                     },
                    ],
                   },
                   Int {
                    value: 27,
                    position: (246, 17),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "StateDirectory",
                      position: (248, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "acme/",
                     },
                     Expression {
                      expression: Variable {
                       identifier: "cert",
                       position: (248, 34),
                      },
                     },
                    ],
                    position: (248, 26),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "BindPaths",
                      position: (250, 9),
                     },
                    ],
                   },
                   List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "/var/lib/acme/.minica:/tmp/ca",
                       },
                      ],
                      position: (251, 11),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "/var/lib/acme/",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "cert",
                         position: (252, 28),
                        },
                       },
                       Raw {
                        content: ":/tmp/",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "keyName",
                         position: (252, 41),
                        },
                       },
                      ],
                      position: (252, 11),
                     },
                    ],
                    position: (250, 21),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (244, 46),
                },
               ],
               position: (244, 43),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "script",
                 position: (259, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "minica \\\n  --ca-key ca/key.pem \\\n  --ca-cert ca/cert.pem \\\n  --domains ",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "escapeShellArg",
                   position: (263, 23),
                  },
                  arguments: [
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (263, 39),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "concatStringsSep",
                        position: (263, 48),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: ",",
                       },
                      ],
                      position: (263, 65),
                     },
                     BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       List {
                        elements: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "data",
                           position: (263, 72),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "domain",
                             position: (263, 77),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                        position: (263, 70),
                       },
                       Variable {
                        identifier: "extraDomains",
                        position: (263, 89),
                       },
                      ],
                      position: (263, 86),
                     },
                    ],
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n# Create files to match directory layout for real certificates\ncd ",
                },
                Raw {
                 content: "'",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (266, 15),
                 },
                },
                Raw {
                 content: "'\ncp ../ca/cert.pem chain.pem\ncat cert.pem chain.pem > fullchain.pem\ncat key.pem fullchain.pem > full.pem\n\n# Group might change between runs, re-apply it\nchown ",
                },
                Raw {
                 content: "'",
                },
                Expression {
                 expression: Variable {
                  identifier: "user",
                  position: (272, 18),
                 },
                },
                Raw {
                 content: ":",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "data",
                   position: (272, 26),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "group",
                     position: (272, 31),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "' *\n\n# Default permissions make the files unreadable by group + anon\n# Need to be readable by group\nchmod 640 *\n",
                },
               ],
               position: (259, 16),
              },
             ),
            ],
            recursive: false,
            position: (232, 23),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "renewService",
              position: (280, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (281, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Renew ACME certificate for ",
                },
                Expression {
                 expression: Variable {
                  identifier: "cert",
                  position: (281, 51),
                 },
                },
               ],
               position: (281, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (282, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "network.target",
                    },
                   ],
                   position: (282, 17),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "network-online.target",
                    },
                   ],
                   position: (282, 34),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "acme-fixperms.service",
                    },
                   ],
                   position: (282, 58),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "nss-lookup.target",
                    },
                   ],
                   position: (282, 82),
                  },
                 ],
                 position: (282, 15),
                },
                Variable {
                 identifier: "selfsignedDeps",
                 position: (282, 107),
                },
               ],
               position: (282, 104),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wants",
                 position: (283, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "network-online.target",
                    },
                   ],
                   position: (283, 17),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "acme-fixperms.service",
                    },
                   ],
                   position: (283, 41),
                  },
                 ],
                 position: (283, 15),
                },
                Variable {
                 identifier: "selfsignedDeps",
                 position: (283, 70),
                },
               ],
               position: (283, 67),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (286, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "optionals",
                position: (286, 18),
               },
               arguments: [
                UnaryOperation {
                 operator: Not,
                 operand: PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (286, 30),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "boot",
                     position: (286, 37),
                    },
                    Raw {
                     content: "isContainer",
                     position: (286, 42),
                    },
                   ],
                  },
                  default: None,
                 },
                 position: (286, 29),
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "multi-user.target",
                    },
                   ],
                   position: (286, 57),
                  },
                 ],
                 position: (286, 55),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (288, 7),
                },
               ],
              },
              With {
               expression: Variable {
                identifier: "pkgs",
                position: (288, 19),
               },
               target: List {
                elements: [
                 Variable {
                  identifier: "lego",
                  position: (288, 27),
                 },
                 Variable {
                  identifier: "coreutils",
                  position: (288, 32),
                 },
                 Variable {
                  identifier: "diffutils",
                  position: (288, 42),
                 },
                 Variable {
                  identifier: "openssl",
                  position: (288, 52),
                 },
                ],
                position: (288, 25),
               },
               position: (288, 14),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (290, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                Variable {
                 identifier: "commonServiceConfig",
                 position: (290, 23),
                },
                BinaryOperation {
                 operator: Update,
                 operands: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "Group",
                        position: (291, 9),
                       },
                      ],
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "data",
                       position: (291, 17),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "group",
                         position: (291, 22),
                        },
                       ],
                      },
                      default: None,
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "StateDirectory",
                        position: (296, 9),
                       },
                      ],
                     },
                     List {
                      elements: [
                       String {
                        parts: [
                         Raw {
                          content: "acme/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "cert",
                           position: (297, 19),
                          },
                         },
                        ],
                        position: (297, 11),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "acme/.lego/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "cert",
                           position: (298, 25),
                          },
                         },
                        ],
                        position: (298, 11),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "acme/.lego/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "cert",
                           position: (299, 25),
                          },
                         },
                         Raw {
                          content: "/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "certDir",
                           position: (299, 33),
                          },
                         },
                        ],
                        position: (299, 11),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "acme/.lego/accounts/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "accountHash",
                           position: (300, 34),
                          },
                         },
                        ],
                        position: (300, 11),
                       },
                      ],
                      position: (296, 26),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "ReadWritePaths",
                        position: (303, 9),
                       },
                      ],
                     },
                     BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "commonServiceConfig",
                         position: (303, 26),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "ReadWritePaths",
                           position: (303, 46),
                          },
                         ],
                        },
                        default: None,
                       },
                       Variable {
                        identifier: "webroots",
                        position: (303, 64),
                       },
                      ],
                      position: (303, 61),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "BindPaths",
                        position: (306, 9),
                       },
                      ],
                     },
                     List {
                      elements: [
                       String {
                        parts: [
                         Expression {
                          expression: Variable {
                           identifier: "accountDir",
                           position: (307, 14),
                          },
                         },
                         Raw {
                          content: ":/tmp/accounts",
                         },
                        ],
                        position: (307, 11),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "/var/lib/acme/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "cert",
                           position: (308, 28),
                          },
                         },
                         Raw {
                          content: ":/tmp/out",
                         },
                        ],
                        position: (308, 11),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "/var/lib/acme/.lego/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "cert",
                           position: (309, 34),
                          },
                         },
                         Raw {
                          content: "/",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "certDir",
                           position: (309, 42),
                          },
                         },
                         Raw {
                          content: ":/tmp/certificates",
                         },
                        ],
                        position: (309, 11),
                       },
                      ],
                      position: (306, 21),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "EnvironmentFile",
                        position: (313, 9),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "mkIf",
                       position: (313, 27),
                      },
                      arguments: [
                       Variable {
                        identifier: "useDns",
                        position: (313, 32),
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "data",
                         position: (313, 39),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "credentialsFile",
                           position: (313, 44),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "ExecStartPost",
                        position: (316, 9),
                       },
                      ],
                     },
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       String {
                        parts: [
                         Raw {
                          content: "+",
                         },
                        ],
                        position: (316, 25),
                       },
                       FunctionApplication {
                        function: PropertyAccess {
                         expression: Variable {
                          identifier: "pkgs",
                          position: (316, 32),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "writeShellScript",
                            position: (316, 37),
                           },
                          ],
                         },
                         default: None,
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: "acme-postrun",
                           },
                          ],
                          position: (316, 54),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "cd /var/lib/acme/",
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "escapeShellArg",
                              position: (317, 30),
                             },
                             arguments: [
                              Variable {
                               identifier: "cert",
                               position: (317, 45),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "\nif [ -e renewed ]; then\n  rm renewed\n  ",
                           },
                           Expression {
                            expression: PropertyAccess {
                             expression: Variable {
                              identifier: "data",
                              position: (320, 15),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "postRun",
                                position: (320, 20),
                               },
                              ],
                             },
                             default: None,
                            },
                           },
                           Raw {
                            content: "\n  ",
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "optionalString",
                              position: (321, 15),
                             },
                             arguments: [
                              BinaryOperation {
                               operator: NotEqualTo,
                               operands: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "data",
                                  position: (321, 31),
                                 },
                                 attribute_path: AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "reloadServices",
                                    position: (321, 36),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                List {
                                 elements: [],
                                 position: (321, 54),
                                },
                               ],
                               position: (321, 51),
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "systemctl --no-block try-reload-or-restart ",
                                },
                                Expression {
                                 expression: FunctionApplication {
                                  function: Variable {
                                   identifier: "escapeShellArgs",
                                   position: (322, 63),
                                  },
                                  arguments: [
                                   PropertyAccess {
                                    expression: Variable {
                                     identifier: "data",
                                     position: (322, 79),
                                    },
                                    attribute_path: AttributePath {
                                     attributes: [
                                      Raw {
                                       content: "reloadServices",
                                       position: (322, 84),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                  ],
                                 },
                                },
                               ],
                               position: (322, 17),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "\nfi\n",
                           },
                          ],
                          position: (316, 69),
                         },
                        ],
                       },
                      ],
                      position: (316, 29),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (290, 46),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "optionalAttrs",
                    position: (326, 12),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: LogicalAnd,
                     operands: [
                      BinaryOperation {
                       operator: NotEqualTo,
                       operands: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "data",
                          position: (326, 27),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "listenHTTP",
                            position: (326, 32),
                           },
                          ],
                         },
                         default: None,
                        },
                        Variable {
                         identifier: "null",
                         position: (326, 46),
                        },
                       ],
                       position: (326, 43),
                      },
                      BinaryOperation {
                       operator: LessThan,
                       operands: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "toInt",
                          position: (326, 54),
                         },
                         arguments: [
                          FunctionApplication {
                           function: Variable {
                            identifier: "elemAt",
                            position: (326, 61),
                           },
                           arguments: [
                            FunctionApplication {
                             function: Variable {
                              identifier: "splitString",
                              position: (326, 69),
                             },
                             arguments: [
                              String {
                               parts: [
                                Raw {
                                 content: ":",
                                },
                               ],
                               position: (326, 81),
                              },
                              PropertyAccess {
                               expression: Variable {
                                identifier: "data",
                                position: (326, 85),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "listenHTTP",
                                  position: (326, 90),
                                 },
                                ],
                               },
                               default: None,
                              },
                             ],
                            },
                            Int {
                             value: 1,
                             position: (326, 102),
                            },
                           ],
                          },
                         ],
                        },
                        Int {
                         value: 1024,
                         position: (326, 107),
                        },
                       ],
                       position: (326, 105),
                      },
                     ],
                     position: (326, 51),
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "CapabilityBoundingSet",
                          position: (327, 9),
                         },
                        ],
                       },
                       List {
                        elements: [
                         String {
                          parts: [
                           Raw {
                            content: "CAP_NET_BIND_SERVICE",
                           },
                          ],
                          position: (327, 35),
                         },
                        ],
                        position: (327, 33),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (326, 113),
                    },
                   ],
                  },
                 ],
                 position: (326, 9),
                },
               ],
               position: (290, 43),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "script",
                 position: (331, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "optionalString",
                   position: (332, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (332, 26),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "enableDebugLogs",
                       position: (332, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: "set -x",
                     },
                    ],
                    position: (332, 47),
                   },
                  ],
                 },
                },
                Raw {
                 content: "\nset -euo pipefail\n\n# This reimplements the expiration date check, but without querying\n# the acme server first. By doing this offline, we avoid errors\n# when the network or DNS are unavailable, which can happen during\n# nixos-rebuild switch.\nis_expiration_skippable() {\n  pem=$1\n\n  # This function relies on set -e to exit early if any of the\n  # conditions or programs fail.\n\n  [[ -e $pem ]]\n\n  expiration_line=\"$(\n    set -euxo pipefail\n    openssl x509 -noout -enddate <$pem \\\n          | grep notAfter \\\n          | sed -e 's/^notAfter=//'\n  )\"\n  [[ -n \"$expiration_line\" ]]\n\n  expiration_date=\"$(date -d \"$expiration_line\" +%s)\"\n  now=\"$(date +%s)\"\n  expiration_s=$[expiration_date - now]\n  expiration_days=$[expiration_s / (3600 * 24)]   # rounds down\n\n  [[ $expiration_days -gt ",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "toString",
                   position: (360, 37),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (360, 46),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "validMinDays",
                       position: (360, 51),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: " ]]\n}\n\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "optionalString",
                   position: (363, 11),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "data",
                       position: (363, 27),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "webroot",
                         position: (363, 32),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "null",
                      position: (363, 43),
                     },
                    ],
                    position: (363, 40),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "# Ensure the webroot exists. Fixing group is required in case configuration was changed between runs.\n# Lego will fail if the webroot does not exist at all.\n(\n  mkdir -p ",
                     },
                     Raw {
                      content: "'",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "data",
                        position: (367, 25),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "webroot",
                          position: (367, 30),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/.well-known/acme-challenge' \\\n  && chgrp ",
                     },
                     Raw {
                      content: "'",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "data",
                        position: (368, 25),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "group",
                          position: (368, 30),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "' ",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "data",
                        position: (368, 40),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "webroot",
                          position: (368, 45),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/.well-known/acme-challenge\n) || (\n  echo 'Please ensure ",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "data",
                        position: (370, 35),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "webroot",
                          position: (370, 40),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/.well-known/acme-challenge exists and is writable by acme:",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "data",
                        position: (370, 109),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "group",
                          position: (370, 114),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "' \\\n  && exit 1\n)\n",
                     },
                    ],
                    position: (363, 49),
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\necho ",
                },
                Raw {
                 content: "'",
                },
                Expression {
                 expression: Variable {
                  identifier: "domainHash",
                  position: (375, 17),
                 },
                },
                Raw {
                 content: "' > domainhash.txt\n\n# Check if we can renew.\n# We can only renew if the list of domains has not changed.\nif cmp -s domainhash.txt certificates/domainhash.txt && [ -e 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (379, 86),
                 },
                },
                Raw {
                 content: ".key' -a -e 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (379, 122),
                 },
                },
                Raw {
                 content: ".crt' -a -n \"$(ls -1 accounts)\" ]; then\n\n  # Even if a cert is not expired, it may be revoked by the CA.\n  # Try to renew, and silently fail if the cert is not expired.\n  # Avoids #85794 and resolves #129838\n  if ! lego ",
                },
                Expression {
                 expression: Variable {
                  identifier: "renewOpts",
                  position: (384, 23),
                 },
                },
                Raw {
                 content: " --days ",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "toString",
                   position: (384, 43),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (384, 52),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "validMinDays",
                       position: (384, 57),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "; then\n    if is_expiration_skippable out/full.pem; then\n      echo 1>&2 \"nixos-acme: Ignoring failed renewal because expiration isn't within the coming ",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "toString",
                   position: (386, 107),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "data",
                     position: (386, 116),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "validMinDays",
                       position: (386, 121),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: " days\"\n    else\n      # High number to avoid Systemd reserved codes.\n      exit 11\n    fi\n  fi\n\n# Otherwise do a full run\nelif ! lego ",
                },
                Expression {
                 expression: Variable {
                  identifier: "runOpts",
                  position: (394, 23),
                 },
                },
                Raw {
                 content: "; then\n  # Produce a nice error for those doing their first nixos-rebuild with these certs\n  echo Failed to fetch certificates. \\\n    This may mean your DNS records are set up incorrectly. \\\n    ",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "optionalString",
                   position: (398, 15),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (398, 31),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "preliminarySelfsigned",
                       position: (398, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Selfsigned certs are in place and dependant services will still start.",
                     },
                    ],
                    position: (398, 58),
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n  # Exit 10 so that users can potentially amend SuccessExitStatus to ignore this error.\n  # High number to avoid Systemd reserved codes.\n  exit 10\nfi\n\nmv domainhash.txt certificates/\n\n# Group might change between runs, re-apply it\nchown ",
                },
                Raw {
                 content: "'",
                },
                Expression {
                 expression: Variable {
                  identifier: "user",
                  position: (407, 18),
                 },
                },
                Raw {
                 content: ":",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "data",
                   position: (407, 26),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "group",
                     position: (407, 31),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "' certificates/*\n\n# Copy all certs to the \"real\" certs directory\nif ! cmp -s 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (410, 37),
                 },
                },
                Raw {
                 content: ".crt' out/fullchain.pem; then\n  touch out/renewed\n  echo Installing new certificate\n  cp -vp 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (413, 34),
                 },
                },
                Raw {
                 content: ".crt' out/fullchain.pem\n  cp -vp 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (414, 34),
                 },
                },
                Raw {
                 content: ".key' out/key.pem\n  cp -vp 'certificates/",
                },
                Expression {
                 expression: Variable {
                  identifier: "keyName",
                  position: (415, 34),
                 },
                },
                Raw {
                 content: ".issuer.crt' out/chain.pem\n  ln -sf fullchain.pem out/cert.pem\n  cat out/key.pem out/fullchain.pem > out/full.pem\nfi\n\n# By default group will have no access to the cert files.\n# This chmod will fix that.\nchmod 640 out/*\n",
                },
               ],
               position: (331, 16),
              },
             ),
            ],
            recursive: false,
            position: (280, 20),
           },
          ),
         ],
         recursive: false,
         position: (206, 6),
        },
        position: (131, 30),
       },
       position: (131, 24),
      },
      position: (131, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "certConfigs",
        position: (427, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mapAttrs",
       position: (427, 17),
      },
      arguments: [
       Variable {
        identifier: "certToConfig",
        position: (427, 26),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (427, 39),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "certs",
           position: (427, 43),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "inheritableModule",
        position: (431, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "isDefaults",
      },
      definition: Function {
       argument: Destructured {
        identifier: None,
        arguments: [
         DestructuredArgument {
          identifier: "config",
          default: None,
         },
        ],
        ellipsis: true,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "defaultAndText",
             position: (432, 5),
            },
           ],
          },
          Function {
           argument: Simple {
            identifier: "name",
           },
           definition: Function {
            argument: Simple {
             identifier: "default",
            },
            definition: Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "default",
                  position: (436, 7),
                 },
                ],
               },
               IfThenElse {
                predicate: BinaryOperation {
                 operator: LogicalOr,
                 operands: [
                  Variable {
                   identifier: "isDefaults",
                   position: (436, 20),
                  },
                  UnaryOperation {
                   operator: Not,
                   operand: PropertyAccess {
                    expression: Variable {
                     identifier: "config",
                     position: (436, 36),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "inheritDefaults",
                       position: (436, 43),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (436, 34),
                  },
                 ],
                 position: (436, 31),
                },
                then: Variable {
                 identifier: "default",
                 position: (436, 64),
                },
                else_: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (436, 77),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "defaults",
                    position: (436, 81),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (436, 92),
                    },
                   },
                  ],
                 },
                 default: None,
                },
                position: (436, 17),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "defaultText",
                  position: (441, 7),
                 },
                ],
               },
               IfThenElse {
                predicate: Variable {
                 identifier: "isDefaults",
                 position: (441, 24),
                },
                then: Variable {
                 identifier: "default",
                 position: (441, 40),
                },
                else_: FunctionApplication {
                 function: Variable {
                  identifier: "literalExpression",
                  position: (441, 53),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "config.security.acme.defaults.",
                    },
                    Expression {
                     expression: Variable {
                      identifier: "name",
                      position: (441, 104),
                     },
                    },
                   ],
                   position: (441, 71),
                  },
                 ],
                },
                position: (441, 21),
               },
              ),
             ],
             recursive: false,
             position: (432, 37),
            },
            position: (432, 28),
           },
           position: (432, 22),
          },
         ),
        ],
        target: Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "options",
              position: (444, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "validMinDays",
                 position: (445, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (445, 22),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (446, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (446, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "int",
                       position: (446, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (447, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "validMinDays",
                        },
                       ],
                       position: (447, 33),
                      },
                      Int {
                       value: 30,
                       position: (447, 48),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (447, 52),
                    },
                    Raw {
                     content: "defaultText",
                     position: (447, 60),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (448, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Minimum remaining validity before renewal in days.",
                     },
                    ],
                    position: (448, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (445, 31),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "renewInterval",
                 position: (451, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (451, 23),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (452, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (452, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (452, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (453, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "renewInterval",
                        },
                       ],
                       position: (453, 33),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "daily",
                        },
                       ],
                       position: (453, 49),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (453, 58),
                    },
                    Raw {
                     content: "defaultText",
                     position: (453, 66),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (454, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Systemd calendar expression when to check for renewal. See\n<citerefentry><refentrytitle>systemd.time</refentrytitle>\n<manvolnum>7</manvolnum></citerefentry>.\n",
                     },
                    ],
                    position: (454, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (451, 32),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "enableDebugLogs",
                 position: (461, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "mkEnableOption",
                  position: (461, 25),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "debug logging for this certificate",
                    },
                   ],
                   position: (461, 40),
                  },
                 ],
                },
                Map {
                 bindings: [
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (462, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "enableDebugLogs",
                        },
                       ],
                       position: (462, 33),
                      },
                      Variable {
                       identifier: "true",
                       position: (462, 51),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (462, 57),
                    },
                    Raw {
                     content: "defaultText",
                     position: (462, 65),
                    },
                   ],
                  },
                 ],
                 recursive: false,
                 position: (461, 80),
                },
               ],
               position: (461, 77),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "webroot",
                 position: (465, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (465, 17),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (466, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (466, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "nullOr",
                        position: (466, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (466, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (466, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (467, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "webroot",
                        },
                       ],
                       position: (467, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (467, 43),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (467, 49),
                    },
                    Raw {
                     content: "defaultText",
                     position: (467, 57),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "example",
                      position: (468, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "/var/lib/acme/acme-challenge",
                     },
                    ],
                    position: (468, 19),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (469, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Where the webroot of the HTTP vhost is located.\n<filename>.well-known/acme-challenge/</filename> directory\nwill be created below the webroot if it doesn't exist.\n<literal>http://example.org/.well-known/acme-challenge/</literal> must also\nbe available (notice unencrypted HTTP).\n",
                     },
                    ],
                    position: (469, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (465, 26),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "server",
                 position: (478, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (478, 16),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (479, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (479, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "nullOr",
                        position: (479, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (479, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (479, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (480, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "server",
                        },
                       ],
                       position: (480, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (480, 42),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (480, 48),
                    },
                    Raw {
                     content: "defaultText",
                     position: (480, 56),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (481, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "ACME Directory Resource URI. Defaults to Let's Encrypt's\nproduction endpoint,\n<link xlink:href=\"https://acme-v02.api.letsencrypt.org/directory\"/>, if unset.\n",
                     },
                    ],
                    position: (481, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (478, 25),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "email",
                 position: (488, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (488, 15),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (489, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (489, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (489, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (490, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "email",
                        },
                       ],
                       position: (490, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (490, 41),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (490, 47),
                    },
                    Raw {
                     content: "defaultText",
                     position: (490, 55),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (491, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Email address for account creation and correspondence from the CA.\nIt is recommended to use the same email for all certs to avoid account\ncreation limits.\n",
                     },
                    ],
                    position: (491, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (488, 24),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (498, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (498, 15),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (499, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (499, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (499, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (500, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "group",
                        },
                       ],
                       position: (500, 33),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "acme",
                        },
                       ],
                       position: (500, 41),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (500, 49),
                    },
                    Raw {
                     content: "defaultText",
                     position: (500, 57),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (501, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Group running the ACME client.",
                     },
                    ],
                    position: (501, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (498, 24),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "reloadServices",
                 position: (504, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (504, 24),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (505, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (505, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listOf",
                        position: (505, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (505, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (505, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (506, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "reloadServices",
                        },
                       ],
                       position: (506, 33),
                      },
                      List {
                       elements: [],
                       position: (506, 50),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (506, 54),
                    },
                    Raw {
                     content: "defaultText",
                     position: (506, 62),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (507, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "The list of systemd services to call <code>systemctl try-reload-or-restart</code>\non.\n",
                     },
                    ],
                    position: (507, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (504, 33),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "postRun",
                 position: (513, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (513, 17),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (514, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (514, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "lines",
                       position: (514, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (515, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "postRun",
                        },
                       ],
                       position: (515, 33),
                      },
                      String {
                       parts: [],
                       position: (515, 43),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (515, 47),
                    },
                    Raw {
                     content: "defaultText",
                     position: (515, 55),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "example",
                      position: (516, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "cp full.pem backup.pem",
                     },
                    ],
                    position: (516, 19),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (517, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Commands to run after new certificates go live. Note that\nthese commands run as the root user.\n\nExecuted in the same directory with the new certificate.\n",
                     },
                    ],
                    position: (517, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (513, 26),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "keyType",
                 position: (525, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (525, 17),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (526, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (526, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (526, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (527, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "keyType",
                        },
                       ],
                       position: (527, 33),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "ec256",
                        },
                       ],
                       position: (527, 43),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (527, 52),
                    },
                    Raw {
                     content: "defaultText",
                     position: (527, 60),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (528, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Key type to use for private keys.\nFor an up to date list of supported values check the --key-type option\nat <link xlink:href=\"https://go-acme.github.io/lego/usage/cli/#usage\"/>.\n",
                     },
                    ],
                    position: (528, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (525, 26),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "dnsProvider",
                 position: (535, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (535, 21),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (536, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (536, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "nullOr",
                        position: (536, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (536, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (536, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (537, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "dnsProvider",
                        },
                       ],
                       position: (537, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (537, 47),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (537, 53),
                    },
                    Raw {
                     content: "defaultText",
                     position: (537, 61),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "example",
                      position: (538, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "route53",
                     },
                    ],
                    position: (538, 19),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (539, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "DNS Challenge provider. For a list of supported providers, see the \"code\"\nfield of the DNS providers listed at <link xlink:href=\"https://go-acme.github.io/lego/dns/\"/>.\n",
                     },
                    ],
                    position: (539, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (535, 30),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "dnsResolver",
                 position: (545, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (545, 21),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (546, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (546, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "nullOr",
                        position: (546, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (546, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (546, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (547, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "dnsResolver",
                        },
                       ],
                       position: (547, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (547, 47),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (547, 53),
                    },
                    Raw {
                     content: "defaultText",
                     position: (547, 61),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "example",
                      position: (548, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "1.1.1.1:53",
                     },
                    ],
                    position: (548, 19),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (549, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Set the resolver to use for performing recursive DNS queries. Supported:\nhost:port. The default is to use the system resolvers, or Google's DNS\nresolvers if the system's cannot be determined.\n",
                     },
                    ],
                    position: (549, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (545, 30),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "credentialsFile",
                 position: (556, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (556, 25),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (557, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (557, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "path",
                       position: (557, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (558, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "credentialsFile",
                        },
                       ],
                       position: (558, 33),
                      },
                      Variable {
                       identifier: "null",
                       position: (558, 51),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (558, 57),
                    },
                    Raw {
                     content: "defaultText",
                     position: (558, 65),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (559, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Path to an EnvironmentFile for the cert's service containing any required and\noptional environment variables for your selected dnsProvider.\nTo find out what values you need to set, consult the documentation at\n<link xlink:href=\"https://go-acme.github.io/lego/dns/\"/> for the corresponding dnsProvider.\n",
                     },
                    ],
                    position: (559, 23),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "example",
                      position: (565, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "/var/src/secrets/example.org-route53-api-token",
                     },
                    ],
                    position: (565, 19),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (556, 34),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "dnsPropagationCheck",
                 position: (568, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (568, 29),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (569, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (569, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "bool",
                       position: (569, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (570, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "dnsPropagationCheck",
                        },
                       ],
                       position: (570, 33),
                      },
                      Variable {
                       identifier: "true",
                       position: (570, 55),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (570, 61),
                    },
                    Raw {
                     content: "defaultText",
                     position: (570, 69),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (571, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Toggles lego DNS propagation check, which is used alongside DNS-01\nchallenge to ensure the DNS entries required are available.\n",
                     },
                    ],
                    position: (571, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (568, 38),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "ocspMustStaple",
                 position: (577, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (577, 24),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (578, 9),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (578, 16),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "bool",
                       position: (578, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (579, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "ocspMustStaple",
                        },
                       ],
                       position: (579, 33),
                      },
                      Variable {
                       identifier: "false",
                       position: (579, 50),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (579, 57),
                    },
                    Raw {
                     content: "defaultText",
                     position: (579, 65),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (580, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Turns on the OCSP Must-Staple TLS extension.\nMake sure you know what you're doing! See:\n<itemizedlist>\n  <listitem><para><link xlink:href=\"https://blog.apnic.net/2019/01/15/is-the-web-ready-for-ocsp-must-staple/\" /></para></listitem>\n  <listitem><para><link xlink:href=\"https://blog.hboeck.de/archives/886-The-Problem-with-OCSP-Stapling-and-Must-Staple-and-why-Certificate-Revocation-is-still-broken.html\" /></para></listitem>\n</itemizedlist>\n",
                     },
                    ],
                    position: (580, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (577, 33),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "extraLegoFlags",
                 position: (590, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (590, 24),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (591, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (591, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listOf",
                        position: (591, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (591, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (591, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (592, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "extraLegoFlags",
                        },
                       ],
                       position: (592, 33),
                      },
                      List {
                       elements: [],
                       position: (592, 50),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (592, 54),
                    },
                    Raw {
                     content: "defaultText",
                     position: (592, 62),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (593, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Additional global flags to pass to all lego commands.\n",
                     },
                    ],
                    position: (593, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (590, 33),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "extraLegoRenewFlags",
                 position: (598, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (598, 29),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (599, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (599, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listOf",
                        position: (599, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (599, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (599, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (600, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "extraLegoRenewFlags",
                        },
                       ],
                       position: (600, 33),
                      },
                      List {
                       elements: [],
                       position: (600, 55),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (600, 59),
                    },
                    Raw {
                     content: "defaultText",
                     position: (600, 67),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (601, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Additional flags to pass to lego renew.\n",
                     },
                    ],
                    position: (601, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (598, 38),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "extraLegoRunFlags",
                 position: (606, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkOption",
                position: (606, 27),
               },
               arguments: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (607, 9),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (607, 16),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "listOf",
                        position: (607, 22),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (607, 29),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (607, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                  Inherit {
                   from: Some(
                    FunctionApplication {
                     function: Variable {
                      identifier: "defaultAndText",
                      position: (608, 18),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "extraLegoRunFlags",
                        },
                       ],
                       position: (608, 33),
                      },
                      List {
                       elements: [],
                       position: (608, 53),
                      },
                     ],
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "default",
                     position: (608, 57),
                    },
                    Raw {
                     content: "defaultText",
                     position: (608, 65),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (609, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "Additional flags to pass to lego run.\n",
                     },
                    ],
                    position: (609, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (606, 36),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (444, 15),
           },
          ),
         ],
         recursive: false,
         position: (443, 6),
        },
        position: (431, 52),
       },
       position: (431, 35),
      },
      position: (431, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "certOpts",
        position: (616, 3),
       },
      ],
     },
     Function {
      argument: Destructured {
       identifier: None,
       arguments: [
        DestructuredArgument {
         identifier: "config",
         default: None,
        },
        DestructuredArgument {
         identifier: "name",
         default: None,
        },
       ],
       ellipsis: true,
      },
      definition: Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "options",
            position: (617, 5),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "user",
               position: (619, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (619, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "visible",
                    position: (620, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (620, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (621, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "_mkRemovedOptionModule",
                   },
                  ],
                  position: (621, 19),
                 },
                ),
               ],
               recursive: false,
               position: (619, 23),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "allowKeysForGroup",
               position: (625, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (625, 27),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "visible",
                    position: (626, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (626, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (627, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "_mkRemovedOptionModule",
                   },
                  ],
                  position: (627, 19),
                 },
                ),
               ],
               recursive: false,
               position: (625, 36),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraDomains",
               position: (631, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (631, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "visible",
                    position: (632, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (632, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (633, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "_mkMergedOptionModule",
                   },
                  ],
                  position: (633, 19),
                 },
                ),
               ],
               recursive: false,
               position: (631, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "directory",
               position: (636, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (636, 19),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (637, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (637, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (637, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "readOnly",
                    position: (638, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (638, 20),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (639, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/var/lib/acme/",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "name",
                     position: (639, 36),
                    },
                   },
                  ],
                  position: (639, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (640, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Directory where certificate and other state is stored.",
                   },
                  ],
                  position: (640, 23),
                 },
                ),
               ],
               recursive: false,
               position: (636, 28),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "domain",
               position: (643, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (643, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (644, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (644, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (644, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (645, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "name",
                  position: (645, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (646, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Domain to fetch certificate for (defaults to the entry name).",
                   },
                  ],
                  position: (646, 23),
                 },
                ),
               ],
               recursive: false,
               position: (643, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraDomainNames",
               position: (649, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (649, 26),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (650, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (650, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (650, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (650, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (650, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (651, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                  position: (651, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (652, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (652, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "[\n  \"example.org\"\n  \"mydomain.org\"\n]\n",
                     },
                    ],
                    position: (652, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (658, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "A list of extra domain names, which are included in the one certificate to be issued.\n",
                   },
                  ],
                  position: (658, 23),
                 },
                ),
               ],
               recursive: false,
               position: (649, 35),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "listenHTTP",
               position: (666, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (666, 20),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (667, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (667, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "nullOr",
                      position: (667, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (667, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (667, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (668, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (668, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (669, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: ":1360",
                   },
                  ],
                  position: (669, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (670, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Interface and port to listen on to solve HTTP challenges\nin the form [INTERFACE]:PORT.\nIf you use a port other than 80, you must proxy port 80 to this port.\n",
                   },
                  ],
                  position: (670, 23),
                 },
                ),
               ],
               recursive: false,
               position: (666, 29),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "inheritDefaults",
               position: (677, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (677, 25),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (678, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (678, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (679, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (679, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (680, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to inherit values set in `security.acme.defaults` or not.",
                   },
                  ],
                  position: (680, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (681, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (681, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "types",
                     position: (681, 20),
                    },
                    Raw {
                     content: "bool",
                     position: (681, 26),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
               ],
               recursive: false,
               position: (677, 34),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (617, 15),
         },
        ),
       ],
       recursive: false,
       position: (616, 37),
      },
      position: (616, 14),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (688, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "security",
            position: (689, 5),
           },
           Raw {
            content: "acme",
            position: (689, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "preliminarySelfsigned",
               position: (690, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (690, 31),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (691, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (691, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (691, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (692, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (692, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (693, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether a preliminary self-signed certificate should be generated before\ndoing ACME requests. This can be useful when certificates are required in\na webserver, but ACME needs the webserver to make its requests.\n\nWith preliminary self-signed certificate the webserver can be started and\ncan later reload the correct ACME certificates.\n",
                   },
                  ],
                  position: (693, 23),
                 },
                ),
               ],
               recursive: false,
               position: (690, 40),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "acceptTerms",
               position: (703, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (703, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (704, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (704, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (704, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (705, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (705, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (706, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Accept the CA's terms of service. The default provider is Let's Encrypt,\nyou can find their ToS at <link xlink:href=\"https://letsencrypt.org/repository/\"/>.\n",
                   },
                  ],
                  position: (706, 23),
                 },
                ),
               ],
               recursive: false,
               position: (703, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "useRoot",
               position: (712, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (712, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (713, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (713, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (713, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (714, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (714, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (715, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to use the root user when generating certs. This is not recommended\nfor security + compatiblity reasons. If a service requires root owned certificates\nconsider following the guide on \"Using ACME with services demanding root\nowned certificates\" in the NixOS manual, and only using this as a fallback\nor for testing.\n",
                   },
                  ],
                  position: (715, 23),
                 },
                ),
               ],
               recursive: false,
               position: (712, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "defaults",
               position: (724, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (724, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (725, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (725, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "submodule",
                      position: (725, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "inheritableModule",
                     position: (725, 33),
                    },
                    arguments: [
                     Variable {
                      identifier: "true",
                      position: (725, 51),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (726, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Default values inheritable by all configured certs. You can\nuse this to define options shared by all your certs. These defaults\ncan also be ignored on a per-cert basis using the\n`security.acme.certs.",
                   },
                   Raw {
                    content: "$",
                   },
                   Raw {
                    content: "{cert}.inheritDefaults' option.\n",
                   },
                  ],
                  position: (726, 23),
                 },
                ),
               ],
               recursive: false,
               position: (724, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "certs",
               position: (734, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (734, 15),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (735, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (735, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (736, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (736, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (736, 28),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "submodule",
                      position: (736, 37),
                     },
                     arguments: [
                      List {
                       elements: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "inheritableModule",
                          position: (736, 50),
                         },
                         arguments: [
                          Variable {
                           identifier: "false",
                           position: (736, 68),
                          },
                         ],
                        },
                        Variable {
                         identifier: "certOpts",
                         position: (736, 75),
                        },
                       ],
                       position: (736, 47),
                      },
                     ],
                    },
                   ],
                  },
                  position: (736, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (737, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Attribute set of certificates to get signed and renewed. Creates\n<literal>acme-",
                   },
                   Raw {
                    content: "$",
                   },
                   Raw {
                    content: "{cert}.{service,timer}</literal> systemd units for\neach certificate defined here. Other services can add dependencies\nto those units if they rely on the certificates being present,\nor trigger restarts of the service if certificates get renewed.\n",
                   },
                  ],
                  position: (737, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (744, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (744, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  \"example.com\" = {\n    webroot = \"/var/lib/acme/acme-challenge/\";\n    email = \"foo@example.com\";\n    extraDomainNames = [ \"www.example.com\" \"foo.example.com\" ];\n  };\n  \"bar.example.com\" = {\n    webroot = \"/var/lib/acme/acme-challenge/\";\n    email = \"bar@example.com\";\n  };\n}\n",
                     },
                    ],
                    position: (744, 37),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (734, 24),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (689, 21),
         },
        ),
       ],
       recursive: false,
       position: (688, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "imports",
         position: (761, 3),
        },
       ],
      },
      List {
       elements: [
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (762, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (762, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (762, 41),
            },
            String {
             parts: [
              Raw {
               content: "production",
              },
             ],
             position: (762, 48),
            },
           ],
           position: (762, 28),
          },
          String {
           parts: [
            Raw {
             content: "Use security.acme.server to define your staging ACME server URL instead.\n\nTo use the let's encrypt staging server, use security.acme.server =\n\"https://acme-staging-v02.api.letsencrypt.org/directory\".\n",
            },
           ],
           position: (762, 63),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (768, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (768, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (768, 41),
            },
            String {
             parts: [
              Raw {
               content: "directory",
              },
             ],
             position: (768, 48),
            },
           ],
           position: (768, 28),
          },
          String {
           parts: [
            Raw {
             content: "ACME Directory is now hardcoded to /var/lib/acme and its permisisons are managed by systemd. See https://github.com/NixOS/nixpkgs/issues/53852 for more info.",
            },
           ],
           position: (768, 62),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (769, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (769, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (769, 41),
            },
            String {
             parts: [
              Raw {
               content: "preDelay",
              },
             ],
             position: (769, 48),
            },
           ],
           position: (769, 28),
          },
          String {
           parts: [
            Raw {
             content: "This option has been removed. If you want to make sure that something executes before certificates are provisioned, add a RequiredBy=acme-${cert}.service to the service you want to execute before the cert renewal",
            },
           ],
           position: (769, 61),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (770, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (770, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (770, 41),
            },
            String {
             parts: [
              Raw {
               content: "activationDelay",
              },
             ],
             position: (770, 48),
            },
           ],
           position: (770, 28),
          },
          String {
           parts: [
            Raw {
             content: "This option has been removed. If you want to make sure that something executes before certificates are provisioned, add a RequiredBy=acme-${cert}.service to the service you want to execute before the cert renewal",
            },
           ],
           position: (770, 68),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (771, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (771, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (771, 41),
            },
            String {
             parts: [
              Raw {
               content: "validMin",
              },
             ],
             position: (771, 48),
            },
           ],
           position: (771, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (771, 63),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (771, 74),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (771, 81),
            },
            String {
             parts: [
              Raw {
               content: "validMinDays",
              },
             ],
             position: (771, 92),
            },
           ],
           position: (771, 61),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: BinaryOperation {
            operator: Division,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "config",
               position: (771, 118),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "security",
                 position: (771, 125),
                },
                Raw {
                 content: "acme",
                 position: (771, 134),
                },
                Raw {
                 content: "validMin",
                 position: (771, 139),
                },
               ],
              },
              default: None,
             },
             BinaryOperation {
              operator: Multiplication,
              operands: [
               Int {
                value: 24,
                position: (771, 151),
               },
               Int {
                value: 3600,
                position: (771, 156),
               },
              ],
              position: (771, 154),
             },
            ],
            position: (771, 148),
           },
           position: (771, 110),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (772, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (772, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (772, 41),
            },
            String {
             parts: [
              Raw {
               content: "validMinDays",
              },
             ],
             position: (772, 48),
            },
           ],
           position: (772, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (772, 67),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (772, 78),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (772, 85),
            },
            String {
             parts: [
              Raw {
               content: "validMinDays",
              },
             ],
             position: (772, 96),
            },
           ],
           position: (772, 65),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (772, 122),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "security",
               position: (772, 129),
              },
              Raw {
               content: "acme",
               position: (772, 138),
              },
              Raw {
               content: "validMinDays",
               position: (772, 143),
              },
             ],
            },
            default: None,
           },
           position: (772, 114),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (773, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (773, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (773, 41),
            },
            String {
             parts: [
              Raw {
               content: "renewInterval",
              },
             ],
             position: (773, 48),
            },
           ],
           position: (773, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (773, 68),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (773, 79),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (773, 86),
            },
            String {
             parts: [
              Raw {
               content: "renewInterval",
              },
             ],
             position: (773, 97),
            },
           ],
           position: (773, 66),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (773, 124),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "security",
               position: (773, 131),
              },
              Raw {
               content: "acme",
               position: (773, 140),
              },
              Raw {
               content: "renewInterval",
               position: (773, 145),
              },
             ],
            },
            default: None,
           },
           position: (773, 116),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (774, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (774, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (774, 41),
            },
            String {
             parts: [
              Raw {
               content: "email",
              },
             ],
             position: (774, 48),
            },
           ],
           position: (774, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (774, 60),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (774, 71),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (774, 78),
            },
            String {
             parts: [
              Raw {
               content: "email",
              },
             ],
             position: (774, 89),
            },
           ],
           position: (774, 58),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (774, 108),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "security",
               position: (774, 115),
              },
              Raw {
               content: "acme",
               position: (774, 124),
              },
              Raw {
               content: "email",
               position: (774, 129),
              },
             ],
            },
            default: None,
           },
           position: (774, 100),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (775, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (775, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (775, 41),
            },
            String {
             parts: [
              Raw {
               content: "server",
              },
             ],
             position: (775, 48),
            },
           ],
           position: (775, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (775, 61),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (775, 72),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (775, 79),
            },
            String {
             parts: [
              Raw {
               content: "server",
              },
             ],
             position: (775, 90),
            },
           ],
           position: (775, 59),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (775, 110),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "security",
               position: (775, 117),
              },
              Raw {
               content: "acme",
               position: (775, 126),
              },
              Raw {
               content: "server",
               position: (775, 131),
              },
             ],
            },
            default: None,
           },
           position: (775, 102),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkChangedOptionModule",
          position: (776, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (776, 30),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (776, 41),
            },
            String {
             parts: [
              Raw {
               content: "enableDebugLogs",
              },
             ],
             position: (776, 48),
            },
           ],
           position: (776, 28),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (776, 70),
            },
            String {
             parts: [
              Raw {
               content: "acme",
              },
             ],
             position: (776, 81),
            },
            String {
             parts: [
              Raw {
               content: "defaults",
              },
             ],
             position: (776, 88),
            },
            String {
             parts: [
              Raw {
               content: "enableDebugLogs",
              },
             ],
             position: (776, 99),
            },
           ],
           position: (776, 68),
          },
          Function {
           argument: Simple {
            identifier: "config",
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (776, 128),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "security",
               position: (776, 135),
              },
              Raw {
               content: "acme",
               position: (776, 144),
              },
              Raw {
               content: "enableDebugLogs",
               position: (776, 149),
              },
             ],
            },
            default: None,
           },
           position: (776, 120),
          },
         ],
        },
       ],
       position: (761, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (779, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkMerge",
        position: (779, 12),
       },
       arguments: [
        List {
         elements: [
          FunctionApplication {
           function: Variable {
            identifier: "mkIf",
            position: (780, 6),
           },
           arguments: [
            BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (780, 12),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "certs",
                  position: (780, 16),
                 },
                ],
               },
               default: None,
              },
              Map {
               bindings: [],
               recursive: false,
               position: (780, 25),
              },
             ],
             position: (780, 22),
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "warnings",
                  position: (784, 7),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "filter",
                 position: (784, 18),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "w",
                  },
                  definition: BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "w",
                     position: (784, 29),
                    },
                    String {
                     parts: [],
                     position: (784, 34),
                    },
                   ],
                   position: (784, 31),
                  },
                  position: (784, 26),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mapAttrsToList",
                   position: (784, 39),
                  },
                  arguments: [
                   Function {
                    argument: Simple {
                     identifier: "cert",
                    },
                    definition: Function {
                     argument: Simple {
                      identifier: "data",
                     },
                     definition: IfThenElse {
                      predicate: BinaryOperation {
                       operator: NotEqualTo,
                       operands: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "data",
                          position: (784, 70),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "extraDomains",
                            position: (784, 75),
                           },
                          ],
                         },
                         default: None,
                        },
                        String {
                         parts: [
                          Raw {
                           content: "_mkMergedOptionModule",
                          },
                         ],
                         position: (784, 91),
                        },
                       ],
                       position: (784, 88),
                      },
                      then: String {
                       parts: [
                        Raw {
                         content: "The option definition `security.acme.certs.",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "cert",
                          position: (785, 54),
                         },
                        },
                        Raw {
                         content: ".extraDomains` has changed\nto `security.acme.certs.",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "cert",
                          position: (786, 35),
                         },
                        },
                        Raw {
                         content: ".extraDomainNames` and is now a list of strings.\nSetting a custom webroot for extra domains is not possible, instead use separate certs.\n",
                        },
                       ],
                       position: (784, 120),
                      },
                      else_: String {
                       parts: [],
                       position: (788, 15),
                      },
                      position: (784, 67),
                     },
                     position: (784, 61),
                    },
                    position: (784, 55),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (788, 19),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "certs",
                       position: (788, 23),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "assertions",
                  position: (790, 7),
                 },
                ],
               },
               LetIn {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "certs",
                     position: (791, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "attrValues",
                    position: (791, 17),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (791, 28),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "certs",
                        position: (791, 32),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                ],
                target: BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  List {
                   elements: [
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "assertion",
                          position: (794, 11),
                         },
                        ],
                       },
                       BinaryOperation {
                        operator: LogicalOr,
                        operands: [
                         BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "cfg",
                             position: (794, 23),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "email",
                               position: (794, 27),
                              },
                             ],
                            },
                            default: None,
                           },
                           Variable {
                            identifier: "null",
                            position: (794, 36),
                           },
                          ],
                          position: (794, 33),
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "all",
                           position: (794, 44),
                          },
                          arguments: [
                           Function {
                            argument: Simple {
                             identifier: "certOpts",
                            },
                            definition: BinaryOperation {
                             operator: NotEqualTo,
                             operands: [
                              PropertyAccess {
                               expression: Variable {
                                identifier: "certOpts",
                                position: (794, 59),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "email",
                                  position: (794, 68),
                                 },
                                ],
                               },
                               default: None,
                              },
                              Variable {
                               identifier: "null",
                               position: (794, 77),
                              },
                             ],
                             position: (794, 74),
                            },
                            position: (794, 49),
                           },
                           Variable {
                            identifier: "certs",
                            position: (794, 83),
                           },
                          ],
                         },
                        ],
                        position: (794, 41),
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "message",
                          position: (795, 11),
                         },
                        ],
                       },
                       String {
                        parts: [
                         Raw {
                          content: "You must define `security.acme.certs.<name>.email` or\n`security.acme.email` to register with the CA. Note that using\nmany different addresses for certs may trigger account rate limits.\n",
                         },
                        ],
                        position: (795, 21),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (793, 9),
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "assertion",
                          position: (802, 11),
                         },
                        ],
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (802, 23),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "acceptTerms",
                           position: (802, 27),
                          },
                         ],
                        },
                        default: None,
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "message",
                          position: (803, 11),
                         },
                        ],
                       },
                       String {
                        parts: [
                         Raw {
                          content: "You must accept the CA's terms of service before using\nthe ACME module by setting `security.acme.acceptTerms`\nto `true`. For Let's Encrypt's ToS see https://letsencrypt.org/repository/\n",
                         },
                        ],
                        position: (803, 21),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (801, 9),
                    },
                   ],
                   position: (792, 10),
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (809, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "concatLists",
                       position: (809, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "mapAttrsToList",
                      position: (809, 35),
                     },
                     arguments: [
                      Function {
                       argument: Simple {
                        identifier: "cert",
                       },
                       definition: Function {
                        argument: Simple {
                         identifier: "data",
                        },
                        definition: List {
                         elements: [
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (811, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "data",
                                 position: (811, 23),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "user",
                                   position: (811, 28),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "_mkRemovedOptionModule",
                                 },
                                ],
                                position: (811, 36),
                               },
                              ],
                              position: (811, 33),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (812, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "The option definition `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (813, 58),
                                },
                               },
                               Raw {
                                content: ".user' no longer has any effect; Please remove it.\nCertificate user is now hard coded to the \"acme\" user. If you would\nlike another user to have access, consider adding them to the\n\"acme\" group or changing security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (816, 60),
                                },
                               },
                               Raw {
                                content: ".group.\n",
                               },
                              ],
                              position: (812, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (810, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (820, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: EqualTo,
                              operands: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "data",
                                 position: (820, 23),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "allowKeysForGroup",
                                   position: (820, 28),
                                  },
                                 ],
                                },
                                default: None,
                               },
                               String {
                                parts: [
                                 Raw {
                                  content: "_mkRemovedOptionModule",
                                 },
                                ],
                                position: (820, 49),
                               },
                              ],
                              position: (820, 46),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (821, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "The option definition `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (822, 58),
                                },
                               },
                               Raw {
                                content: ".allowKeysForGroup' no longer has any effect; Please remove it.\nAll certs are readable by the configured group. If this is undesired,\nconsider changing security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (824, 53),
                                },
                               },
                               Raw {
                                content: ".group to an unused group.\n",
                               },
                              ],
                              position: (821, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (819, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (831, 11),
                               },
                              ],
                             },
                             UnaryOperation {
                              operator: Not,
                              operand: FunctionApplication {
                               function: Variable {
                                identifier: "hasInfix",
                                position: (831, 25),
                               },
                               arguments: [
                                String {
                                 parts: [
                                  Raw {
                                   content: "*",
                                  },
                                 ],
                                 position: (831, 34),
                                },
                                Variable {
                                 identifier: "cert",
                                 position: (831, 38),
                                },
                               ],
                              },
                              position: (831, 23),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (832, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "The cert option path `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (833, 57),
                                },
                               },
                               Raw {
                                content: ".dnsProvider`\ncannot contain a * character.\nInstead, set `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (835, 49),
                                },
                               },
                               Raw {
                                content: ".domain = \"",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (835, 67),
                                },
                               },
                               Raw {
                                content: "\";`\nand remove the wildcard from the path.\n",
                               },
                              ],
                              position: (832, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (830, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (840, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: LogicalOr,
                              operands: [
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (840, 23),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "dnsProvider",
                                     position: (840, 28),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (840, 43),
                                 },
                                ],
                                position: (840, 40),
                               },
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (840, 51),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "webroot",
                                     position: (840, 56),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (840, 67),
                                 },
                                ],
                                position: (840, 64),
                               },
                              ],
                              position: (840, 48),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (841, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "Options `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (842, 44),
                                },
                               },
                               Raw {
                                content: ".dnsProvider` and\n`security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (843, 36),
                                },
                               },
                               Raw {
                                content: ".webroot` are mutually exclusive.\n",
                               },
                              ],
                              position: (841, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (839, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (847, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: LogicalOr,
                              operands: [
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (847, 23),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "webroot",
                                     position: (847, 28),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (847, 39),
                                 },
                                ],
                                position: (847, 36),
                               },
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (847, 47),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "listenHTTP",
                                     position: (847, 52),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (847, 66),
                                 },
                                ],
                                position: (847, 63),
                               },
                              ],
                              position: (847, 44),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (848, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "Options `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (849, 44),
                                },
                               },
                               Raw {
                                content: ".webroot` and\n`security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (850, 36),
                                },
                               },
                               Raw {
                                content: ".listenHTTP` are mutually exclusive.\n",
                               },
                              ],
                              position: (848, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (846, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (854, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: LogicalOr,
                              operands: [
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (854, 23),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "listenHTTP",
                                     position: (854, 28),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (854, 42),
                                 },
                                ],
                                position: (854, 39),
                               },
                               BinaryOperation {
                                operator: EqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (854, 50),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "dnsProvider",
                                     position: (854, 55),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (854, 70),
                                 },
                                ],
                                position: (854, 67),
                               },
                              ],
                              position: (854, 47),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (855, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "Options `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (856, 44),
                                },
                               },
                               Raw {
                                content: ".listenHTTP` and\n`security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (857, 36),
                                },
                               },
                               Raw {
                                content: ".dnsProvider` are mutually exclusive.\n",
                               },
                              ],
                              position: (855, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (853, 9),
                          },
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "assertion",
                                position: (861, 11),
                               },
                              ],
                             },
                             BinaryOperation {
                              operator: LogicalOr,
                              operands: [
                               BinaryOperation {
                                operator: LogicalOr,
                                operands: [
                                 BinaryOperation {
                                  operator: NotEqualTo,
                                  operands: [
                                   PropertyAccess {
                                    expression: Variable {
                                     identifier: "data",
                                     position: (861, 23),
                                    },
                                    attribute_path: AttributePath {
                                     attributes: [
                                      Raw {
                                       content: "dnsProvider",
                                       position: (861, 28),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                   Variable {
                                    identifier: "null",
                                    position: (861, 43),
                                   },
                                  ],
                                  position: (861, 40),
                                 },
                                 BinaryOperation {
                                  operator: NotEqualTo,
                                  operands: [
                                   PropertyAccess {
                                    expression: Variable {
                                     identifier: "data",
                                     position: (861, 51),
                                    },
                                    attribute_path: AttributePath {
                                     attributes: [
                                      Raw {
                                       content: "webroot",
                                       position: (861, 56),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                   Variable {
                                    identifier: "null",
                                    position: (861, 67),
                                   },
                                  ],
                                  position: (861, 64),
                                 },
                                ],
                                position: (861, 48),
                               },
                               BinaryOperation {
                                operator: NotEqualTo,
                                operands: [
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "data",
                                   position: (861, 75),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "listenHTTP",
                                     position: (861, 80),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                 Variable {
                                  identifier: "null",
                                  position: (861, 94),
                                 },
                                ],
                                position: (861, 91),
                               },
                              ],
                              position: (861, 72),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "message",
                                position: (862, 11),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "One of `security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (863, 43),
                                },
                               },
                               Raw {
                                content: ".dnsProvider`,\n`security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (864, 36),
                                },
                               },
                               Raw {
                                content: ".webroot`, or\n`security.acme.certs.",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (865, 36),
                                },
                               },
                               Raw {
                                content: ".listenHTTP` must be provided.\n",
                               },
                              ],
                              position: (862, 21),
                             },
                            ),
                           ],
                           recursive: false,
                           position: (860, 9),
                          },
                         ],
                         position: (809, 63),
                        },
                        position: (809, 57),
                       },
                       position: (809, 51),
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (868, 10),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "certs",
                          position: (868, 14),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                   ],
                  },
                 ],
                 position: (809, 9),
                },
                position: (790, 20),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "users",
                  position: (870, 7),
                 },
                 Raw {
                  content: "users",
                  position: (870, 13),
                 },
                 Raw {
                  content: "acme",
                  position: (870, 19),
                 },
                ],
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "home",
                     position: (871, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "/var/lib/acme",
                    },
                   ],
                   position: (871, 16),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "group",
                     position: (872, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "acme",
                    },
                   ],
                   position: (872, 17),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "isSystemUser",
                     position: (873, 9),
                    },
                   ],
                  },
                  Variable {
                   identifier: "true",
                   position: (873, 24),
                  },
                 ),
                ],
                recursive: false,
                position: (870, 26),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "users",
                  position: (876, 7),
                 },
                 Raw {
                  content: "groups",
                  position: (876, 13),
                 },
                 Raw {
                  content: "acme",
                  position: (876, 20),
                 },
                ],
               },
               Map {
                bindings: [],
                recursive: false,
                position: (876, 27),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "systemd",
                  position: (878, 7),
                 },
                 Raw {
                  content: "services",
                  position: (878, 15),
                 },
                ],
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Expression {
                       expression: String {
                        parts: [
                         Raw {
                          content: "acme-fixperms",
                         },
                        ],
                        position: (879, 9),
                       },
                      },
                     ],
                    },
                    Variable {
                     identifier: "userMigrationService",
                     position: (879, 27),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (878, 26),
                 },
                 BinaryOperation {
                  operator: Update,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "mapAttrs'",
                     position: (880, 13),
                    },
                    arguments: [
                     Function {
                      argument: Simple {
                       identifier: "cert",
                      },
                      definition: Function {
                       argument: Simple {
                        identifier: "conf",
                       },
                       definition: FunctionApplication {
                        function: Variable {
                         identifier: "nameValuePair",
                         position: (880, 36),
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: "acme-",
                           },
                           Expression {
                            expression: Variable {
                             identifier: "cert",
                             position: (880, 58),
                            },
                           },
                          ],
                          position: (880, 50),
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "conf",
                           position: (880, 65),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "renewService",
                             position: (880, 70),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                       },
                       position: (880, 30),
                      },
                      position: (880, 24),
                     },
                     Variable {
                      identifier: "certConfigs",
                      position: (880, 84),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "optionalAttrs",
                     position: (881, 13),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (881, 28),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "preliminarySelfsigned",
                         position: (881, 32),
                        },
                       ],
                      },
                      default: None,
                     },
                     BinaryOperation {
                      operator: Update,
                      operands: [
                       Map {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Expression {
                             expression: String {
                              parts: [
                               Raw {
                                content: "acme-selfsigned-ca",
                               },
                              ],
                              position: (882, 9),
                             },
                            },
                           ],
                          },
                          Variable {
                           identifier: "selfsignCAService",
                           position: (882, 32),
                          },
                         ),
                        ],
                        recursive: false,
                        position: (881, 56),
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "mapAttrs'",
                         position: (883, 13),
                        },
                        arguments: [
                         Function {
                          argument: Simple {
                           identifier: "cert",
                          },
                          definition: Function {
                           argument: Simple {
                            identifier: "conf",
                           },
                           definition: FunctionApplication {
                            function: Variable {
                             identifier: "nameValuePair",
                             position: (883, 36),
                            },
                            arguments: [
                             String {
                              parts: [
                               Raw {
                                content: "acme-selfsigned-",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (883, 69),
                                },
                               },
                              ],
                              position: (883, 50),
                             },
                             PropertyAccess {
                              expression: Variable {
                               identifier: "conf",
                               position: (883, 76),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "selfsignService",
                                 position: (883, 81),
                                },
                               ],
                              },
                              default: None,
                             },
                            ],
                           },
                           position: (883, 30),
                          },
                          position: (883, 24),
                         },
                         Variable {
                          identifier: "certConfigs",
                          position: (883, 98),
                         },
                        ],
                       },
                      ],
                      position: (883, 9),
                     },
                    ],
                   },
                  ],
                  position: (881, 9),
                 },
                ],
                position: (880, 9),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "systemd",
                  position: (885, 7),
                 },
                 Raw {
                  content: "timers",
                  position: (885, 15),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrs'",
                 position: (885, 24),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "cert",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "conf",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "nameValuePair",
                     position: (885, 47),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "acme-",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "cert",
                         position: (885, 69),
                        },
                       },
                      ],
                      position: (885, 61),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "conf",
                       position: (885, 76),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "renewTimer",
                         position: (885, 81),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (885, 41),
                  },
                  position: (885, 35),
                 },
                 Variable {
                  identifier: "certConfigs",
                  position: (885, 93),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "systemd",
                  position: (887, 7),
                 },
                 Raw {
                  content: "targets",
                  position: (887, 15),
                 },
                ],
               },
               LetIn {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "finishedTargets",
                     position: (889, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mapAttrs'",
                    position: (889, 27),
                   },
                   arguments: [
                    Function {
                     argument: Simple {
                      identifier: "cert",
                     },
                     definition: Function {
                      argument: Simple {
                       identifier: "conf",
                      },
                      definition: FunctionApplication {
                       function: Variable {
                        identifier: "nameValuePair",
                        position: (889, 50),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "acme-finished-",
                          },
                          Expression {
                           expression: Variable {
                            identifier: "cert",
                            position: (889, 81),
                           },
                          },
                         ],
                         position: (889, 64),
                        },
                        Map {
                         bindings: [
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "wantedBy",
                              position: (890, 11),
                             },
                            ],
                           },
                           List {
                            elements: [
                             String {
                              parts: [
                               Raw {
                                content: "default.target",
                               },
                              ],
                              position: (890, 24),
                             },
                            ],
                            position: (890, 22),
                           },
                          ),
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "requires",
                              position: (891, 11),
                             },
                            ],
                           },
                           List {
                            elements: [
                             String {
                              parts: [
                               Raw {
                                content: "acme-",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (891, 32),
                                },
                               },
                               Raw {
                                content: ".service",
                               },
                              ],
                              position: (891, 24),
                             },
                            ],
                            position: (891, 22),
                           },
                          ),
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "after",
                              position: (892, 11),
                             },
                            ],
                           },
                           List {
                            elements: [
                             String {
                              parts: [
                               Raw {
                                content: "acme-",
                               },
                               Expression {
                                expression: Variable {
                                 identifier: "cert",
                                 position: (892, 29),
                                },
                               },
                               Raw {
                                content: ".service",
                               },
                              ],
                              position: (892, 21),
                             },
                            ],
                            position: (892, 19),
                           },
                          ),
                         ],
                         recursive: false,
                         position: (889, 88),
                        },
                       ],
                      },
                      position: (889, 44),
                     },
                     position: (889, 38),
                    },
                    Variable {
                     identifier: "certConfigs",
                     position: (893, 12),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "accountTargets",
                     position: (904, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mapAttrs'",
                    position: (904, 26),
                   },
                   arguments: [
                    Function {
                     argument: Simple {
                      identifier: "hash",
                     },
                     definition: Function {
                      argument: Simple {
                       identifier: "confs",
                      },
                      definition: LetIn {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "leader",
                            position: (905, 11),
                           },
                          ],
                         },
                         String {
                          parts: [
                           Raw {
                            content: "acme-",
                           },
                           Expression {
                            expression: PropertyAccess {
                             expression: FunctionApplication {
                              function: PropertyAccess {
                               expression: Variable {
                                identifier: "builtins",
                                position: (905, 29),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "head",
                                  position: (905, 38),
                                 },
                                ],
                               },
                               default: None,
                              },
                              arguments: [
                               Variable {
                                identifier: "confs",
                                position: (905, 43),
                               },
                              ],
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "cert",
                                position: (905, 50),
                               },
                              ],
                             },
                             default: None,
                            },
                           },
                           Raw {
                            content: ".service",
                           },
                          ],
                          position: (905, 20),
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "dependantServices",
                            position: (906, 11),
                           },
                          ],
                         },
                         FunctionApplication {
                          function: Variable {
                           identifier: "map",
                           position: (906, 31),
                          },
                          arguments: [
                           Function {
                            argument: Simple {
                             identifier: "conf",
                            },
                            definition: String {
                             parts: [
                              Raw {
                               content: "acme-",
                              },
                              Expression {
                               expression: PropertyAccess {
                                expression: Variable {
                                 identifier: "conf",
                                 position: (906, 50),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "cert",
                                   position: (906, 55),
                                  },
                                 ],
                                },
                                default: None,
                               },
                              },
                              Raw {
                               content: ".service",
                              },
                             ],
                             position: (906, 42),
                            },
                            position: (906, 36),
                           },
                           FunctionApplication {
                            function: PropertyAccess {
                             expression: Variable {
                              identifier: "builtins",
                              position: (906, 72),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Raw {
                                content: "tail",
                                position: (906, 81),
                               },
                              ],
                             },
                             default: None,
                            },
                            arguments: [
                             Variable {
                              identifier: "confs",
                              position: (906, 86),
                             },
                            ],
                           },
                          ],
                         },
                        ),
                       ],
                       target: FunctionApplication {
                        function: Variable {
                         identifier: "nameValuePair",
                         position: (907, 12),
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: "acme-account-",
                           },
                           Expression {
                            expression: Variable {
                             identifier: "hash",
                             position: (907, 42),
                            },
                           },
                          ],
                          position: (907, 26),
                         },
                         Map {
                          bindings: [
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "requiredBy",
                               position: (908, 11),
                              },
                             ],
                            },
                            Variable {
                             identifier: "dependantServices",
                             position: (908, 24),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "before",
                               position: (909, 11),
                              },
                             ],
                            },
                            Variable {
                             identifier: "dependantServices",
                             position: (909, 20),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "requires",
                               position: (910, 11),
                              },
                             ],
                            },
                            List {
                             elements: [
                              Variable {
                               identifier: "leader",
                               position: (910, 24),
                              },
                             ],
                             position: (910, 22),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "after",
                               position: (911, 11),
                              },
                             ],
                            },
                            List {
                             elements: [
                              Variable {
                               identifier: "leader",
                               position: (911, 21),
                              },
                             ],
                             position: (911, 19),
                            },
                           ),
                          ],
                          recursive: false,
                          position: (907, 49),
                         },
                        ],
                       },
                       position: (904, 50),
                      },
                      position: (904, 43),
                     },
                     position: (904, 37),
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "groupBy",
                      position: (912, 13),
                     },
                     arguments: [
                      Function {
                       argument: Simple {
                        identifier: "conf",
                       },
                       definition: PropertyAccess {
                        expression: Variable {
                         identifier: "conf",
                         position: (912, 28),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "accountHash",
                           position: (912, 33),
                          },
                         ],
                        },
                        default: None,
                       },
                       position: (912, 22),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "attrValues",
                        position: (912, 47),
                       },
                       arguments: [
                        Variable {
                         identifier: "certConfigs",
                         position: (912, 58),
                        },
                       ],
                      },
                     ],
                    },
                   ],
                  },
                 ),
                ],
                target: BinaryOperation {
                 operator: Update,
                 operands: [
                  Variable {
                   identifier: "finishedTargets",
                   position: (913, 10),
                  },
                  Variable {
                   identifier: "accountTargets",
                   position: (913, 29),
                  },
                 ],
                 position: (913, 26),
                },
                position: (887, 25),
               },
              ),
             ],
             recursive: false,
             position: (780, 30),
            },
           ],
          },
         ],
         position: (779, 20),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "meta",
         position: (917, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "maintainers",
            position: (918, 5),
           },
          ],
         },
         PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (918, 19),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "teams",
             position: (918, 23),
            },
            Raw {
             content: "acme",
             position: (918, 29),
            },
            Raw {
             content: "members",
             position: (918, 34),
            },
           ],
          },
          default: None,
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "doc",
            position: (919, 5),
           },
          ],
         },
         Path {
          parts: [
           Raw {
            content: "./doc.xml",
           },
          ],
          position: (919, 11),
         },
        ),
       ],
       recursive: false,
       position: (917, 10),
      },
     ),
    ],
    recursive: false,
    position: (686, 4),
   },
   position: (3, 1),
  },
  position: (2, 1),
 },
 position: (1, 1),
}