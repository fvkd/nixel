---
Function {
 argument: Some(
  "f",
 ),
 arguments: FunctionArguments {
  arguments: [],
  ellipsis: false,
 },
 definition: Function {
  argument: Some(
   "x",
  ),
  arguments: FunctionArguments {
   arguments: [],
   ellipsis: false,
  },
  definition: Function {
   argument: Some(
    "y",
   ),
   arguments: FunctionArguments {
    arguments: [],
    ellipsis: false,
   },
   definition: LetIn {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "intToBits",
         position: (8, 5),
        },
       ],
      },
      Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: LogicalOr,
         operands: [
          BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "x",
             position: (9, 10),
            },
            Int {
             value: 0,
             position: (9, 15),
            },
           ],
          },
          BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "x",
             position: (9, 20),
            },
            UnaryOperation {
             operator: Negate,
             operand: Int {
              value: 1,
              position: (9, 26),
             },
            },
           ],
          },
         ],
        },
        then: List {
         elements: [],
        },
        else_: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "headbit",
              position: (13, 11),
             },
            ],
           },
           IfThenElse {
            predicate: BinaryOperation {
             operator: NotEqualTo,
             operands: [
              BinaryOperation {
               operator: Multiplication,
               operands: [
                BinaryOperation {
                 operator: Division,
                 operands: [
                  Variable {
                   identifier: "x",
                   position: (13, 26),
                  },
                  Int {
                   value: 2,
                   position: (13, 30),
                  },
                 ],
                },
                Int {
                 value: 2,
                 position: (13, 35),
                },
               ],
              },
              Variable {
               identifier: "x",
               position: (13, 40),
              },
             ],
            },
            then: Int {
             value: 1,
             position: (13, 47),
            },
            else_: Int {
             value: 0,
             position: (13, 54),
            },
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "tailbits",
              position: (14, 11),
             },
            ],
           },
           IfThenElse {
            predicate: BinaryOperation {
             operator: LessThan,
             operands: [
              Variable {
               identifier: "x",
               position: (14, 25),
              },
              Int {
               value: 0,
               position: (14, 29),
              },
             ],
            },
            then: BinaryOperation {
             operator: Subtraction,
             operands: [
              BinaryOperation {
               operator: Division,
               operands: [
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  Variable {
                   identifier: "x",
                   position: (14, 38),
                  },
                  Int {
                   value: 1,
                   position: (14, 42),
                  },
                 ],
                },
                Int {
                 value: 2,
                 position: (14, 47),
                },
               ],
              },
              Int {
               value: 1,
               position: (14, 52),
              },
             ],
            },
            else_: BinaryOperation {
             operator: Division,
             operands: [
              Variable {
               identifier: "x",
               position: (14, 59),
              },
              Int {
               value: 2,
               position: (14, 63),
              },
             ],
            },
           },
          ),
         ],
         target: BinaryOperation {
          operator: Concatenation,
          operands: [
           List {
            elements: [
             Variable {
              identifier: "headbit",
              position: (16, 12),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "intToBits",
             position: (16, 25),
            },
            arguments: [
             Variable {
              identifier: "tailbits",
              position: (16, 35),
             },
            ],
           },
          ],
         },
        },
       },
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "bitsToInt",
         position: (20, 5),
        },
       ],
      },
      Function {
       argument: Some(
        "l",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "signum",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "l",
            position: (21, 10),
           },
           List {
            elements: [],
           },
          ],
         },
         then: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "signum",
             position: (22, 13),
            },
            Int {
             value: 0,
             position: (22, 23),
            },
           ],
          },
          then: Int {
           value: 0,
           position: (22, 30),
          },
          else_: UnaryOperation {
           operator: Negate,
           operand: Int {
            value: 1,
            position: (22, 38),
           },
          },
         },
         else_: BinaryOperation {
          operator: Addition,
          operands: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (24, 10),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "head",
                position: (24, 19),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "l",
              position: (24, 24),
             },
            ],
           },
           BinaryOperation {
            operator: Multiplication,
            operands: [
             Int {
              value: 2,
              position: (24, 30),
             },
             FunctionApplication {
              function: Variable {
               identifier: "bitsToInt",
               position: (24, 35),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (24, 46),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tail",
                    position: (24, 55),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "l",
                  position: (24, 60),
                 },
                ],
               },
               Variable {
                identifier: "signum",
                position: (24, 63),
               },
              ],
             },
            ],
           },
          ],
         },
        },
       },
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "xsignum",
         position: (26, 5),
        },
       ],
      },
      IfThenElse {
       predicate: BinaryOperation {
        operator: LessThan,
        operands: [
         Variable {
          identifier: "x",
          position: (26, 18),
         },
         Int {
          value: 0,
          position: (26, 22),
         },
        ],
       },
       then: Int {
        value: 1,
        position: (26, 29),
       },
       else_: Int {
        value: 0,
        position: (26, 36),
       },
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "ysignum",
         position: (27, 5),
        },
       ],
      },
      IfThenElse {
       predicate: BinaryOperation {
        operator: LessThan,
        operands: [
         Variable {
          identifier: "y",
          position: (27, 18),
         },
         Int {
          value: 0,
          position: (27, 22),
         },
        ],
       },
       then: Int {
        value: 1,
        position: (27, 29),
       },
       else_: Int {
        value: 0,
        position: (27, 36),
       },
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "zipListsWith'",
         position: (28, 5),
        },
       ],
      },
      Function {
       argument: Some(
        "fst",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "snd",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: IfThenElse {
         predicate: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "fst",
              position: (29, 10),
             },
             List {
              elements: [],
             },
            ],
           },
           BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "snd",
              position: (29, 21),
             },
             List {
              elements: [],
             },
            ],
           },
          ],
         },
         then: List {
          elements: [],
         },
         else_: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "fst",
             position: (31, 15),
            },
            List {
             elements: [],
            },
           ],
          },
          then: BinaryOperation {
           operator: Concatenation,
           operands: [
            List {
             elements: [
              FunctionApplication {
               function: Variable {
                identifier: "f",
                position: (32, 11),
               },
               arguments: [
                Variable {
                 identifier: "xsignum",
                 position: (32, 13),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (32, 34),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "head",
                     position: (32, 43),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "snd",
                   position: (32, 48),
                  },
                 ],
                },
               ],
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "zipListsWith'",
              position: (32, 59),
             },
             arguments: [
              List {
               elements: [],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (32, 94),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "tail",
                   position: (32, 103),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "snd",
                 position: (32, 108),
                },
               ],
              },
             ],
            },
           ],
          },
          else_: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "snd",
              position: (33, 15),
             },
             List {
              elements: [],
             },
            ],
           },
           then: BinaryOperation {
            operator: Concatenation,
            operands: [
             List {
              elements: [
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (34, 11),
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (34, 14),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "head",
                      position: (34, 23),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "fst",
                    position: (34, 28),
                   },
                  ],
                 },
                 Variable {
                  identifier: "ysignum",
                  position: (34, 33),
                 },
                ],
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "zipListsWith'",
               position: (34, 59),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (34, 74),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tail",
                    position: (34, 83),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "fst",
                  position: (34, 88),
                 },
                ],
               },
               List {
                elements: [],
               },
              ],
             },
            ],
           },
           else_: BinaryOperation {
            operator: Concatenation,
            operands: [
             List {
              elements: [
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (36, 11),
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (36, 14),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "head",
                      position: (36, 23),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "fst",
                    position: (36, 28),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (36, 34),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "head",
                      position: (36, 43),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "snd",
                    position: (36, 48),
                   },
                  ],
                 },
                ],
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "zipListsWith'",
               position: (36, 59),
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (36, 74),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tail",
                    position: (36, 83),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "fst",
                  position: (36, 88),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (36, 94),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tail",
                    position: (36, 103),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "snd",
                  position: (36, 108),
                 },
                ],
               },
              ],
             },
            ],
           },
          },
         },
        },
       },
      },
     ),
    ],
    target: Assert {
     expression: BinaryOperation {
      operator: LogicalAnd,
      operands: [
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (38, 13),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "isInt",
            position: (38, 22),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "x",
          position: (38, 28),
         },
        ],
       },
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (38, 35),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "isInt",
            position: (38, 44),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "y",
          position: (38, 50),
         },
        ],
       },
      ],
     },
     target: FunctionApplication {
      function: Variable {
       identifier: "bitsToInt",
       position: (39, 5),
      },
      arguments: [
       FunctionApplication {
        function: Variable {
         identifier: "zipListsWith'",
         position: (39, 16),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "intToBits",
           position: (39, 31),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (39, 41),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "intToBits",
           position: (39, 45),
          },
          arguments: [
           Variable {
            identifier: "y",
            position: (39, 55),
           },
          ],
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "f",
         position: (39, 60),
        },
        arguments: [
         Variable {
          identifier: "xsignum",
          position: (39, 62),
         },
         Variable {
          identifier: "ysignum",
          position: (39, 70),
         },
        ],
       },
      ],
     },
    },
   },
  },
 },
}