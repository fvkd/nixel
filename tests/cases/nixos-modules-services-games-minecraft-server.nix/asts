---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "minecraft-server",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "eulaFile",
        position: (9, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (9, 14),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "toFile",
          position: (9, 23),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "eula.txt",
         },
        ],
        position: (9, 30),
       },
       String {
        parts: [
         Raw {
          content: "# eula.txt managed by NixOS Configuration\neula=true\n",
         },
        ],
        position: (9, 41),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "whitelistFile",
        position: (14, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (14, 19),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (14, 24),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "whitelist.json",
         },
        ],
        position: (14, 34),
       },
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (15, 6),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "toJSON",
            position: (15, 15),
           },
          ],
         },
         default: None,
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "mapAttrsToList",
           position: (16, 8),
          },
          arguments: [
           Function {
            argument: Some(
             "n",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "name",
                   position: (16, 32),
                  },
                 ],
                },
                Variable {
                 identifier: "n",
                 position: (16, 39),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "uuid",
                   position: (16, 42),
                  },
                 ],
                },
                Variable {
                 identifier: "v",
                 position: (16, 49),
                },
               ),
              ],
              recursive: false,
              position: (16, 30),
             },
             position: (16, 27),
            },
            position: (16, 24),
           },
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (16, 55),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "whitelist",
               position: (16, 59),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfgToString",
        position: (18, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "v",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (18, 23),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "isBool",
            position: (18, 32),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "v",
          position: (18, 39),
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "boolToString",
         position: (18, 46),
        },
        arguments: [
         Variable {
          identifier: "v",
          position: (18, 59),
         },
        ],
       },
       else_: FunctionApplication {
        function: Variable {
         identifier: "toString",
         position: (18, 66),
        },
        arguments: [
         Variable {
          identifier: "v",
          position: (18, 75),
         },
        ],
       },
       position: (18, 20),
      },
      position: (18, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "serverPropertiesFile",
        position: (20, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (20, 26),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (20, 31),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "server.properties",
         },
        ],
        position: (20, 41),
       },
       BinaryOperation {
        operator: Addition,
        operands: [
         String {
          parts: [
           Raw {
            content: "# server.properties managed by NixOS configuration\n",
           },
          ],
          position: (20, 62),
         },
         FunctionApplication {
          function: Variable {
           identifier: "concatStringsSep",
           position: (22, 8),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
             },
            ],
            position: (22, 25),
           },
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (22, 31),
            },
            arguments: [
             Function {
              argument: Some(
               "n",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "v",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: String {
                parts: [
                 Expression {
                  expression: Variable {
                   identifier: "n",
                   position: (23, 15),
                  },
                 },
                 Raw {
                  content: "=",
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "cfgToString",
                    position: (23, 20),
                   },
                   arguments: [
                    Variable {
                     identifier: "v",
                     position: (23, 32),
                    },
                   ],
                  },
                 },
                ],
                position: (23, 12),
               },
               position: (23, 9),
              },
              position: (23, 6),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (23, 37),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "serverProperties",
                 position: (23, 41),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
         },
        ],
        position: (22, 6),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "defaultServerPort",
        position: (29, 3),
       },
      ],
     },
     Int {
      value: 25565,
      position: (29, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "serverPort",
        position: (31, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (31, 16),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "serverProperties",
         position: (31, 20),
        },
        Raw {
         content: "server-port",
         position: (31, 37),
        },
       ],
      },
      default: Some(
       Variable {
        identifier: "defaultServerPort",
        position: (31, 52),
       },
      ),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "rconPort",
        position: (33, 3),
       },
      ],
     },
     IfThenElse {
      predicate: PropertyAccess {
       expression: Variable {
        identifier: "cfg",
        position: (33, 17),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "serverProperties",
          position: (33, 21),
         },
         Raw {
          content: "enable-rcon",
          position: (33, 38),
         },
        ],
       },
       default: Some(
        Variable {
         identifier: "false",
         position: (33, 53),
        },
       ),
      },
      then: PropertyAccess {
       expression: Variable {
        identifier: "cfg",
        position: (34, 10),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "serverProperties",
          position: (34, 14),
         },
         Expression {
          expression: __StringParts(
           [
            Raw {
             content: "rcon.port",
            },
           ],
          ),
         },
        ],
       },
       default: Some(
        Int {
         value: 25575,
         position: (34, 46),
        },
       ),
      },
      else_: Variable {
       identifier: "null",
       position: (35, 10),
      },
      position: (33, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "queryPort",
        position: (37, 3),
       },
      ],
     },
     IfThenElse {
      predicate: PropertyAccess {
       expression: Variable {
        identifier: "cfg",
        position: (37, 18),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "serverProperties",
          position: (37, 22),
         },
         Raw {
          content: "enable-query",
          position: (37, 39),
         },
        ],
       },
       default: Some(
        Variable {
         identifier: "false",
         position: (37, 55),
        },
       ),
      },
      then: PropertyAccess {
       expression: Variable {
        identifier: "cfg",
        position: (38, 10),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "serverProperties",
          position: (38, 14),
         },
         Expression {
          expression: __StringParts(
           [
            Raw {
             content: "query.port",
            },
           ],
          ),
         },
        ],
       },
       default: Some(
        Int {
         value: 25565,
         position: (38, 47),
        },
       ),
      },
      else_: Variable {
       identifier: "null",
       position: (39, 10),
      },
      position: (37, 15),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (42, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (43, 5),
           },
           Raw {
            content: "minecraft-server",
            position: (43, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (45, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (45, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (46, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (46, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (46, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (47, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (47, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (48, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "If enabled, start a Minecraft Server. The server\ndata will be loaded from and saved to\n<option>services.minecraft-server.dataDir</option>.\n",
                   },
                  ],
                  position: (48, 23),
                 },
                ),
               ],
               recursive: false,
               position: (45, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "declarative",
               position: (55, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (55, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (56, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (56, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (56, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (57, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (57, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (58, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to use a declarative Minecraft server configuration.\nOnly if set to <literal>true</literal>, the options\n<option>services.minecraft-server.whitelist</option> and\n<option>services.minecraft-server.serverProperties</option> will be\napplied.\n",
                   },
                  ],
                  position: (58, 23),
                 },
                ),
               ],
               recursive: false,
               position: (55, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "eula",
               position: (67, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (67, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (68, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (68, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (68, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (69, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (69, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (70, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether you agree to\n<link xlink:href=\"https://account.mojang.com/documents/minecraft_eula\">\nMojangs EULA</link>. This option must be set to\n<literal>true</literal> to run Minecraft server.\n",
                   },
                  ],
                  position: (70, 23),
                 },
                ),
               ],
               recursive: false,
               position: (67, 23),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "dataDir",
               position: (78, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (78, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (79, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (79, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "path",
                     position: (79, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (80, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/var/lib/minecraft",
                   },
                  ],
                  position: (80, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (81, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Directory to store Minecraft database and other state/data files.\n",
                   },
                  ],
                  position: (81, 23),
                 },
                ),
               ],
               recursive: false,
               position: (78, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "openFirewall",
               position: (86, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (86, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (87, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (87, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (87, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (88, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (88, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (89, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to open ports in the firewall for the server.\n",
                   },
                  ],
                  position: (89, 23),
                 },
                ),
               ],
               recursive: false,
               position: (86, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "whitelist",
               position: (94, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (94, 19),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (95, 9),
                   },
                  ],
                 },
                 LetIn {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "minecraftUUID",
                       position: (96, 11),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Update,
                     operands: [
                      FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "types",
                         position: (96, 27),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "strMatching",
                           position: (96, 33),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                          },
                         ],
                         position: (97, 13),
                        },
                       ],
                      },
                      Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "description",
                            position: (98, 15),
                           },
                          ],
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Minecraft UUID",
                           },
                          ],
                          position: (98, 29),
                         },
                        ),
                       ],
                       recursive: false,
                       position: (97, 79),
                      },
                     ],
                     position: (97, 76),
                    },
                   ),
                  ],
                  target: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (100, 14),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "attrsOf",
                       position: (100, 20),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "minecraftUUID",
                     position: (100, 28),
                    },
                   ],
                  },
                  position: (95, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (101, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (101, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (102, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whitelisted players, only has an effect when\n<option>services.minecraft-server.declarative</option> is\n<literal>true</literal> and the whitelist is enabled\nvia <option>services.minecraft-server.serverProperties</option> by\nsetting <literal>white-list</literal> to <literal>true</literal>.\nThis is a mapping from Minecraft usernames to UUIDs.\nYou can use <link xlink:href=\"https://mcuuid.net/\"/> to get a\nMinecraft UUID for a username.\n",
                   },
                  ],
                  position: (102, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (112, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (112, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  username1 = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n  username2 = \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\";\n};\n",
                     },
                    ],
                    position: (112, 37),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (94, 28),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "serverProperties",
               position: (120, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (120, 26),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (121, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (121, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (121, 28),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "oneOf",
                      position: (121, 37),
                     },
                     arguments: [
                      List {
                       elements: [
                        Variable {
                         identifier: "bool",
                         position: (121, 45),
                        },
                        Variable {
                         identifier: "int",
                         position: (121, 50),
                        },
                        Variable {
                         identifier: "str",
                         position: (121, 54),
                        },
                       ],
                       position: (121, 43),
                      },
                     ],
                    },
                   ],
                  },
                  position: (121, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (122, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (122, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (123, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (123, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  server-port = 43000;\n  difficulty = 3;\n  gamemode = 1;\n  max-players = 5;\n  motd = \"NixOS Minecraft server!\";\n  white-list = true;\n  enable-rcon = true;\n  \"rcon.password\" = \"hunter2\";\n}\n",
                     },
                    ],
                    position: (123, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (135, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Minecraft server properties for the server.properties file. Only has\nan effect when <option>services.minecraft-server.declarative</option>\nis set to <literal>true</literal>. See\n<link xlink:href=\"https://minecraft.gamepedia.com/Server.properties#Java_Edition_3\"/>\nfor documentation on these values.\n",
                   },
                  ],
                  position: (135, 23),
                 },
                ),
               ],
               recursive: false,
               position: (120, 35),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "package",
               position: (144, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (144, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (145, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (145, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "package",
                     position: (145, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (146, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (146, 19),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "minecraft-server",
                     position: (146, 24),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (147, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (147, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.minecraft-server",
                     },
                    ],
                    position: (147, 41),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (148, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (148, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.minecraft-server_1_12_2",
                     },
                    ],
                    position: (148, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (149, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Version of minecraft-server to run.",
                   },
                  ],
                  position: (149, 23),
                 },
                ),
               ],
               recursive: false,
               position: (144, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "jvmOpts",
               position: (152, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (152, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (153, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (153, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "separatedString",
                      position: (153, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: " ",
                     },
                    ],
                    position: (153, 38),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (154, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "-Xmx2048M -Xms2048M",
                   },
                  ],
                  position: (154, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (156, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   BinaryOperation {
                    operator: Addition,
                    operands: [
                     String {
                      parts: [
                       Raw {
                        content: "-Xms4092M -Xmx4092M -XX:+UseG1GC -XX:+CMSIncrementalPacing ",
                       },
                      ],
                      position: (156, 19),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "-XX:+CMSClassUnloadingEnabled -XX:ParallelGCThreads=2 ",
                       },
                      ],
                      position: (157, 13),
                     },
                    ],
                    position: (157, 11),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "-XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10",
                     },
                    ],
                    position: (158, 13),
                   },
                  ],
                  position: (158, 11),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (159, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "JVM options for the Minecraft server.",
                   },
                  ],
                  position: (159, 23),
                 },
                ),
               ],
               recursive: false,
               position: (152, 26),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (43, 33),
         },
        ),
       ],
       recursive: false,
       position: (42, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (164, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (164, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (164, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (164, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (166, 5),
             },
             Raw {
              content: "users",
              position: (166, 11),
             },
             Raw {
              content: "minecraft",
              position: (166, 17),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (167, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Minecraft server service user",
                },
               ],
               position: (167, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "home",
                 position: (168, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (168, 25),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "dataDir",
                  position: (168, 29),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "createHome",
                 position: (169, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (169, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "isSystemUser",
                 position: (170, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (170, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (171, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "minecraft",
                },
               ],
               position: (171, 25),
              },
             ),
            ],
            recursive: false,
            position: (166, 29),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (173, 5),
             },
             Raw {
              content: "groups",
              position: (173, 11),
             },
             Raw {
              content: "minecraft",
              position: (173, 18),
             },
            ],
           },
           Map {
            bindings: [],
            recursive: false,
            position: (173, 30),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (175, 5),
             },
             Raw {
              content: "services",
              position: (175, 13),
             },
             Raw {
              content: "minecraft-server",
              position: (175, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (176, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Minecraft Server Service",
                },
               ],
               position: (176, 23),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (177, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                  },
                 ],
                 position: (177, 25),
                },
               ],
               position: (177, 23),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (178, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "network.target",
                  },
                 ],
                 position: (178, 25),
                },
               ],
               position: (178, 23),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (180, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (181, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (181, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "package",
                        position: (181, 28),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/bin/minecraft-server ",
                   },
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (181, 60),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "jvmOpts",
                        position: (181, 64),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                  ],
                  position: (181, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Restart",
                    position: (182, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "always",
                   },
                  ],
                  position: (182, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "User",
                    position: (183, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "minecraft",
                   },
                  ],
                  position: (183, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "WorkingDirectory",
                    position: (184, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (184, 28),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "dataDir",
                     position: (184, 32),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "CapabilityBoundingSet",
                    position: (186, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [],
                    position: (186, 35),
                   },
                  ],
                  position: (186, 33),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "DeviceAllow",
                    position: (187, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [],
                    position: (187, 25),
                   },
                  ],
                  position: (187, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "LockPersonality",
                    position: (188, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (188, 27),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "PrivateDevices",
                    position: (189, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (189, 26),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "PrivateTmp",
                    position: (190, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (190, 22),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "PrivateUsers",
                    position: (191, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (191, 24),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectClock",
                    position: (192, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (192, 24),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectControlGroups",
                    position: (193, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (193, 32),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectHome",
                    position: (194, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (194, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectHostname",
                    position: (195, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (195, 27),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectKernelLogs",
                    position: (196, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (196, 29),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectKernelModules",
                    position: (197, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (197, 32),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectKernelTunables",
                    position: (198, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (198, 33),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ProtectProc",
                    position: (199, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "invisible",
                   },
                  ],
                  position: (199, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RestrictAddressFamilies",
                    position: (200, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "AF_INET",
                     },
                    ],
                    position: (200, 37),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "AF_INET6",
                     },
                    ],
                    position: (200, 47),
                   },
                  ],
                  position: (200, 35),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RestrictNamespaces",
                    position: (201, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (201, 30),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RestrictRealtime",
                    position: (202, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (202, 28),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RestrictSUIDSGID",
                    position: (203, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (203, 28),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "SystemCallArchitectures",
                    position: (204, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "native",
                   },
                  ],
                  position: (204, 35),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "UMask",
                    position: (205, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "0077",
                   },
                  ],
                  position: (205, 17),
                 },
                ),
               ],
               recursive: false,
               position: (180, 23),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "preStart",
                 position: (208, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Addition,
               operands: [
                String {
                 parts: [
                  Raw {
                   content: "ln -sf ",
                  },
                  Expression {
                   expression: Variable {
                    identifier: "eulaFile",
                    position: (209, 18),
                   },
                  },
                  Raw {
                   content: " eula.txt\n",
                  },
                 ],
                 position: (208, 18),
                },
                IfThenElse {
                 predicate: PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (210, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "declarative",
                     position: (210, 20),
                    },
                   ],
                  },
                  default: None,
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "\nif [ -e .declarative ]; then\n\n  # Was declarative before, no need to back up anything\n  ln -sf ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "whitelistFile",
                     position: (215, 20),
                    },
                   },
                   Raw {
                    content: " whitelist.json\n  cp -f ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "serverPropertiesFile",
                     position: (216, 19),
                    },
                   },
                   Raw {
                    content: " server.properties\n\nelse\n\n  # Declarative for the first time, backup stateful files\n  ln -sb --suffix=.stateful ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "whitelistFile",
                     position: (221, 39),
                    },
                   },
                   Raw {
                    content: " whitelist.json\n  cp -b --suffix=.stateful ",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "serverPropertiesFile",
                     position: (222, 38),
                    },
                   },
                   Raw {
                    content: " server.properties\n\n  # server.properties must have write permissions, because every time\n  # the server starts it first parses the file and then regenerates it..\n  chmod +w server.properties\n  echo \"Autogenerated file that signifies that this server configuration is managed declaratively by NixOS\" \\\n    > .declarative\n\nfi\n",
                   },
                  ],
                  position: (210, 37),
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: "if [ -e .declarative ]; then\n  rm .declarative\nfi\n",
                   },
                  ],
                  position: (231, 15),
                 },
                 position: (210, 13),
                },
               ],
               position: (210, 10),
              },
             ),
            ],
            recursive: false,
            position: (175, 41),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "networking",
              position: (238, 5),
             },
             Raw {
              content: "firewall",
              position: (238, 16),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (238, 27),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (238, 32),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "openFirewall",
                 position: (238, 36),
                },
               ],
              },
              default: None,
             },
             IfThenElse {
              predicate: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (238, 53),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "declarative",
                  position: (238, 57),
                 },
                ],
               },
               default: None,
              },
              then: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "allowedUDPPorts",
                    position: (239, 7),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Variable {
                    identifier: "serverPort",
                    position: (239, 27),
                   },
                  ],
                  position: (239, 25),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "allowedTCPPorts",
                    position: (240, 7),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Concatenation,
                  operands: [
                   List {
                    elements: [
                     Variable {
                      identifier: "serverPort",
                      position: (240, 27),
                     },
                    ],
                    position: (240, 25),
                   },
                   BinaryOperation {
                    operator: Concatenation,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "optional",
                       position: (241, 12),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         Variable {
                          identifier: "queryPort",
                          position: (241, 22),
                         },
                         Variable {
                          identifier: "null",
                          position: (241, 35),
                         },
                        ],
                        position: (241, 32),
                       },
                       Variable {
                        identifier: "queryPort",
                        position: (241, 41),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "optional",
                       position: (242, 12),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         Variable {
                          identifier: "rconPort",
                          position: (242, 22),
                         },
                         Variable {
                          identifier: "null",
                          position: (242, 34),
                         },
                        ],
                        position: (242, 31),
                       },
                       Variable {
                        identifier: "rconPort",
                        position: (242, 40),
                       },
                      ],
                     },
                    ],
                    position: (242, 9),
                   },
                  ],
                  position: (241, 9),
                 },
                ),
               ],
               recursive: false,
               position: (238, 74),
              },
              else_: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "allowedUDPPorts",
                    position: (244, 7),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Variable {
                    identifier: "defaultServerPort",
                    position: (244, 27),
                   },
                  ],
                  position: (244, 25),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "allowedTCPPorts",
                    position: (245, 7),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Variable {
                    identifier: "defaultServerPort",
                    position: (245, 27),
                   },
                  ],
                  position: (245, 25),
                 },
                ),
               ],
               recursive: false,
               position: (243, 12),
              },
              position: (238, 50),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (248, 5),
             },
            ],
           },
           List {
            elements: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "assertion",
                   position: (249, 9),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (249, 21),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "eula",
                    position: (249, 25),
                   },
                  ],
                 },
                 default: None,
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "message",
                   position: (250, 9),
                  },
                 ],
                },
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  BinaryOperation {
                   operator: Addition,
                   operands: [
                    String {
                     parts: [
                      Raw {
                       content: "You must agree to Mojangs EULA to run minecraft-server.",
                      },
                     ],
                     position: (250, 19),
                    },
                    String {
                     parts: [
                      Raw {
                       content: " Read https://account.mojang.com/documents/minecraft_eula and",
                      },
                     ],
                     position: (251, 13),
                    },
                   ],
                   position: (251, 11),
                  },
                  String {
                   parts: [
                    Raw {
                     content: " set `services.minecraft-server.eula` to `true` if you agree.",
                    },
                   ],
                   position: (252, 13),
                  },
                 ],
                 position: (252, 11),
                },
               ),
              ],
              recursive: false,
              position: (249, 7),
             },
            ],
            position: (248, 18),
           },
          ),
         ],
         recursive: false,
         position: (164, 28),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (41, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}