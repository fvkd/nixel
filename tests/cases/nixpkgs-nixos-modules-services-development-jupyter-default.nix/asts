---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (7, 16),
        },
        Raw {
         content: "jupyter",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "package",
        position: (9, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (9, 13),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "package",
         position: (9, 17),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "kernels",
        position: (11, 3),
       },
      ],
     },
     to: Parentheses {
      expression: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (11, 14),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "jupyter-kernel",
           position: (11, 19),
          },
          Raw {
           content: "create",
           position: (11, 34),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "definitions",
              position: (12, 5),
             },
            ],
           },
           to: IfThenElse {
            predicate: BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (12, 22),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "kernels",
                  position: (12, 26),
                 },
                ],
               },
               default: None,
              },
              Variable {
               identifier: "null",
               position: (12, 37),
              },
             ],
             position: (12, 34),
            },
            then: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (13, 12),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "kernels",
                position: (13, 16),
               },
              ],
             },
             default: None,
            },
            else_: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (14, 13),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "jupyter-kernel",
                position: (14, 18),
               },
               Raw {
                content: "default",
                position: (14, 33),
               },
              ],
             },
             default: None,
            },
            position: (12, 19),
           },
          },
         ],
         recursive: false,
         position: (11, 42),
        },
       ],
      },
      position: (11, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "notebookConfig",
        position: (17, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (17, 20),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "writeText",
          position: (17, 25),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "jupyter_config.py",
          position: (17, 36),
         },
        ],
        position: (17, 35),
       },
       String {
        parts: [
         Raw {
          content: "",
          position: (18, 1),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (18, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "notebookConfig",
              position: (18, 11),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n\nc.NotebookApp.password = ",
          position: (18, 26),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (20, 32),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "password",
              position: (20, 36),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n",
          position: (20, 45),
         },
        ],
        position: (17, 55),
       },
      ],
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "meta",
         position: (24, 3),
        },
        Raw {
         content: "maintainers",
         position: (24, 8),
        },
       ],
      },
      to: With {
       expression: Variable {
        identifier: "maintainers",
        position: (24, 27),
       },
       target: List {
        elements: [
         Variable {
          identifier: "aborsu",
          position: (24, 42),
         },
        ],
        position: (24, 40),
       },
       position: (24, 22),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (26, 3),
        },
        Raw {
         content: "services",
         position: (26, 11),
        },
        Raw {
         content: "jupyter",
         position: (26, 20),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (27, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkEnableOption",
           position: (27, 14),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "Jupyter development server",
              position: (27, 30),
             },
            ],
            position: (27, 29),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "ip",
            position: (29, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (29, 10),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (30, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (30, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (30, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (31, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "localhost",
                 position: (31, 18),
                },
               ],
               position: (31, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (32, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "IP address Jupyter will be listening on.\n",
                 position: (33, 1),
                },
               ],
               position: (32, 21),
              },
             },
            ],
            recursive: false,
            position: (29, 19),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "package",
            position: (37, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (37, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (38, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (38, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "package",
                  position: (38, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (42, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (42, 17),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "python3",
                  position: (42, 22),
                 },
                 Raw {
                  content: "pkgs",
                  position: (42, 30),
                 },
                 Raw {
                  content: "notebook",
                  position: (42, 35),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (43, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (43, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.python3.pkgs.notebook",
                   position: (43, 40),
                  },
                 ],
                 position: (43, 39),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (44, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Jupyter package to use.\n",
                 position: (45, 1),
                },
               ],
               position: (44, 21),
              },
             },
            ],
            recursive: false,
            position: (37, 24),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "command",
            position: (49, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (49, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (50, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (50, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (50, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (51, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "jupyter-notebook",
                 position: (51, 18),
                },
               ],
               position: (51, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (52, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "jupyter-lab",
                 position: (52, 18),
                },
               ],
               position: (52, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (53, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Which command the service runs. Note that not all jupyter packages\nhave all commands, e.g. jupyter-lab isn't present in the default package.\n",
                 position: (54, 1),
                },
               ],
               position: (53, 21),
              },
             },
            ],
            recursive: false,
            position: (49, 24),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "port",
            position: (59, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (59, 12),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (60, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (60, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "int",
                  position: (60, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (61, 7),
                },
               ],
              },
              to: Int {
               value: 8888,
               position: (61, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (62, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Port number Jupyter will be listening on.\n",
                 position: (63, 1),
                },
               ],
               position: (62, 21),
              },
             },
            ],
            recursive: false,
            position: (59, 21),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "notebookDir",
            position: (67, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (67, 19),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (68, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (68, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (68, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (69, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "~/",
                 position: (69, 18),
                },
               ],
               position: (69, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (70, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Root directory for notebooks.\n",
                 position: (71, 1),
                },
               ],
               position: (70, 21),
              },
             },
            ],
            recursive: false,
            position: (67, 28),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "user",
            position: (75, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (75, 12),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (76, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (76, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (76, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (77, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "jupyter",
                 position: (77, 18),
                },
               ],
               position: (77, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (78, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Name of the user used to run the jupyter service.\nFor security reason, jupyter should really not be run as root.\nIf not set (jupyter), the service will create a jupyter user with appropriate settings.\n",
                 position: (79, 1),
                },
               ],
               position: (78, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (83, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "aborsu",
                 position: (83, 18),
                },
               ],
               position: (83, 17),
              },
             },
            ],
            recursive: false,
            position: (75, 21),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "group",
            position: (86, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (86, 13),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (87, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (87, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (87, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (88, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "jupyter",
                 position: (88, 18),
                },
               ],
               position: (88, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (89, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Name of the group used to run the jupyter service.\nUse this if you want to create a group of users that are able to view the notebook directory's content.\n",
                 position: (90, 1),
                },
               ],
               position: (89, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (93, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "users",
                 position: (93, 18),
                },
               ],
               position: (93, 17),
              },
             },
            ],
            recursive: false,
            position: (86, 22),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "password",
            position: (96, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (96, 16),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (97, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (97, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (97, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (98, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Password to use with notebook.\nCan be generated using:\n  In [1]: from notebook.auth import passwd\n  In [2]: passwd('test')\n  Out[2]: 'sha1:1b961dc713fb:88483270a63e57d18d43cf337e629539de1436ba'\n  NOTE: you need to keep the single quote inside the nix string.\nOr you can use a python oneliner:\n  \"open('/path/secret_file', 'r', encoding='utf8').read().strip()\"\nIt will be interpreted at the end of the notebookConfig.\n",
                 position: (99, 1),
                },
               ],
               position: (98, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (109, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "'sha1:1b961dc713fb:88483270a63e57d18d43cf337e629539de1436ba'",
                 position: (109, 18),
                },
               ],
               position: (109, 17),
              },
             },
            ],
            recursive: false,
            position: (96, 25),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "notebookConfig",
            position: (112, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (112, 22),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (113, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (113, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "lines",
                  position: (113, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (114, 7),
                },
               ],
              },
              to: String {
               parts: [],
               position: (114, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (115, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Raw jupyter config.\n",
                 position: (116, 1),
                },
               ],
               position: (115, 21),
              },
             },
            ],
            recursive: false,
            position: (112, 31),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "kernels",
            position: (120, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (120, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (121, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (121, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "nullOr",
                   position: (121, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Parentheses {
                 expression: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (121, 28),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "attrsOf",
                      position: (121, 34),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (121, 42),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "submodule",
                         position: (121, 48),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "import",
                         position: (121, 59),
                        },
                        arguments: [
                         Path {
                          parts: [
                           Raw {
                            content: "./kernel-options.nix",
                            position: (121, 66),
                           },
                          ],
                          position: (121, 66),
                         },
                         Map {
                          bindings: [
                           Inherit {
                            from: None,
                            attributes: [
                             Raw {
                              content: "lib",
                              position: (122, 17),
                             },
                            ],
                           },
                          ],
                          recursive: false,
                          position: (121, 87),
                         },
                        ],
                       },
                       position: (121, 58),
                      },
                     ],
                    },
                    position: (121, 41),
                   },
                  ],
                 },
                 position: (121, 27),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (125, 7),
                },
               ],
              },
              to: Variable {
               identifier: "null",
               position: (125, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (126, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (126, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "{\n  python3 = let\n    env = (pkgs.python3.withPackages (pythonPackages: with pythonPackages; [\n            ipykernel\n            pandas\n            scikit-learn\n          ]));\n  in {\n    displayName = \"Python 3 for machine learning\";\n    argv = [\n      \"",
                   position: (127, 1),
                  },
                  Raw {
                   content: "$",
                   position: (137, 16),
                  },
                  Raw {
                   content: "{env.interpreter}\"\n      \"-m\"\n      \"ipykernel_launcher\"\n      \"-f\"\n      \"{connection_file}\"\n    ];\n    language = \"python\";\n    logo32 = \"",
                   position: (137, 19),
                  },
                  Raw {
                   content: "$",
                   position: (144, 23),
                  },
                  Raw {
                   content: "{env.sitePackages}/ipykernel/resources/logo-32x32.png\";\n    logo64 = \"",
                   position: (144, 26),
                  },
                  Raw {
                   content: "$",
                   position: (145, 23),
                  },
                  Raw {
                   content: "{env.sitePackages}/ipykernel/resources/logo-64x64.png\";\n  };\n}\n",
                   position: (145, 26),
                  },
                 ],
                 position: (126, 35),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (149, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Declarative kernel config\n\n      Kernels can be declared in any language that supports and has the required\n      dependencies to communicate with a jupyter server.\n      In python's case, it means that ipykernel package must always be included in\n      the list of packages of the targeted environment.\n      ",
                 position: (149, 22),
                },
               ],
               position: (149, 21),
              },
             },
            ],
            recursive: false,
            position: (120, 24),
           },
          ],
         },
        },
       ],
       recursive: false,
       position: (26, 30),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (159, 3),
        },
       ],
      },
      to: FunctionApplication {
       function: Variable {
        identifier: "mkMerge",
        position: (159, 12),
       },
       arguments: [
        List {
         elements: [
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (160, 6),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (160, 11),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "enable",
                 position: (160, 15),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "systemd",
                   position: (161, 7),
                  },
                  Raw {
                   content: "services",
                   position: (161, 15),
                  },
                  Raw {
                   content: "jupyter",
                   position: (161, 24),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "description",
                      position: (162, 9),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "Jupyter development server",
                      position: (162, 24),
                     },
                    ],
                    position: (162, 23),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "after",
                      position: (164, 9),
                     },
                    ],
                   },
                   to: List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "network.target",
                        position: (164, 20),
                       },
                      ],
                      position: (164, 19),
                     },
                    ],
                    position: (164, 17),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "wantedBy",
                      position: (165, 9),
                     },
                    ],
                   },
                   to: List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "multi-user.target",
                        position: (165, 23),
                       },
                      ],
                      position: (165, 22),
                     },
                    ],
                    position: (165, 20),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "path",
                      position: (168, 9),
                     },
                    ],
                   },
                   to: List {
                    elements: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "pkgs",
                       position: (168, 18),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "bash",
                         position: (168, 23),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                    position: (168, 16),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "environment",
                      position: (170, 9),
                     },
                    ],
                   },
                   to: Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "JUPYTER_PATH",
                         position: (171, 11),
                        },
                       ],
                      },
                      to: FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (171, 26),
                       },
                       arguments: [
                        Variable {
                         identifier: "kernels",
                         position: (171, 35),
                        },
                       ],
                      },
                     },
                    ],
                    recursive: false,
                    position: (170, 23),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "serviceConfig",
                      position: (174, 9),
                     },
                    ],
                   },
                   to: Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "Restart",
                         position: (175, 11),
                        },
                       ],
                      },
                      to: String {
                       parts: [
                        Raw {
                         content: "always",
                         position: (175, 22),
                        },
                       ],
                       position: (175, 21),
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "ExecStart",
                         position: (176, 11),
                        },
                       ],
                      },
                      to: String {
                       parts: [
                        Expression {
                         expression: Variable {
                          identifier: "package",
                          position: (176, 27),
                         },
                        },
                        Raw {
                         content: "/bin/",
                         position: (176, 35),
                        },
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (176, 42),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "command",
                             position: (176, 46),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: " \\\n            --no-browser \\\n            --ip=",
                         position: (176, 54),
                        },
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (178, 20),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "ip",
                             position: (178, 24),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: " \\\n            --port=",
                         position: (178, 27),
                        },
                        Expression {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "toString",
                           position: (179, 22),
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "cfg",
                             position: (179, 31),
                            },
                            attribute_path: AttributePath {
                             parts: [
                              Raw {
                               content: "port",
                               position: (179, 35),
                              },
                             ],
                            },
                            default: None,
                           },
                          ],
                         },
                        },
                        Raw {
                         content: " --port-retries 0 \\\n            --notebook-dir=",
                         position: (179, 40),
                        },
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (180, 30),
                          },
                          attribute_path: AttributePath {
                           parts: [
                            Raw {
                             content: "notebookDir",
                             position: (180, 34),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: " \\\n            --NotebookApp.config_file=",
                         position: (180, 46),
                        },
                        Expression {
                         expression: Variable {
                          identifier: "notebookConfig",
                          position: (181, 41),
                         },
                        },
                        Raw {
                         content: "\n          ",
                         position: (181, 56),
                        },
                       ],
                       position: (176, 23),
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "User",
                         position: (183, 11),
                        },
                       ],
                      },
                      to: PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (183, 18),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "user",
                          position: (183, 22),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "Group",
                         position: (184, 11),
                        },
                       ],
                      },
                      to: PropertyAccess {
                       expression: Variable {
                        identifier: "cfg",
                        position: (184, 19),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "group",
                          position: (184, 23),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "WorkingDirectory",
                         position: (185, 11),
                        },
                       ],
                      },
                      to: String {
                       parts: [
                        Raw {
                         content: "~",
                         position: (185, 31),
                        },
                       ],
                       position: (185, 30),
                      },
                     },
                    ],
                    recursive: false,
                    position: (174, 25),
                   },
                  },
                 ],
                 recursive: false,
                 position: (161, 34),
                },
               },
              ],
              recursive: false,
              position: (160, 23),
             },
            ],
           },
           position: (160, 5),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (189, 6),
            },
            arguments: [
             Parentheses {
              expression: BinaryOperation {
               operator: LogicalAnd,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (189, 12),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "enable",
                    position: (189, 16),
                   },
                  ],
                 },
                 default: None,
                },
                Parentheses {
                 expression: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (189, 27),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "group",
                       position: (189, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: "jupyter",
                      position: (189, 41),
                     },
                    ],
                    position: (189, 40),
                   },
                  ],
                  position: (189, 37),
                 },
                 position: (189, 26),
                },
               ],
               position: (189, 23),
              },
              position: (189, 11),
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "users",
                   position: (190, 7),
                  },
                  Raw {
                   content: "groups",
                   position: (190, 13),
                  },
                  Raw {
                   content: "jupyter",
                   position: (190, 20),
                  },
                 ],
                },
                to: Map {
                 bindings: [],
                 recursive: false,
                 position: (190, 30),
                },
               },
              ],
              recursive: false,
              position: (189, 52),
             },
            ],
           },
           position: (189, 5),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (192, 6),
            },
            arguments: [
             Parentheses {
              expression: BinaryOperation {
               operator: LogicalAnd,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (192, 12),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "enable",
                    position: (192, 16),
                   },
                  ],
                 },
                 default: None,
                },
                Parentheses {
                 expression: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (192, 27),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "user",
                       position: (192, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: "jupyter",
                      position: (192, 40),
                     },
                    ],
                    position: (192, 39),
                   },
                  ],
                  position: (192, 36),
                 },
                 position: (192, 26),
                },
               ],
               position: (192, 23),
              },
              position: (192, 11),
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "users",
                   position: (193, 7),
                  },
                  Raw {
                   content: "extraUsers",
                   position: (193, 13),
                  },
                  Raw {
                   content: "jupyter",
                   position: (193, 24),
                  },
                 ],
                },
                to: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "extraGroups",
                      position: (194, 9),
                     },
                    ],
                   },
                   to: List {
                    elements: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (194, 25),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "group",
                         position: (194, 29),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                    position: (194, 23),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "home",
                      position: (195, 9),
                     },
                    ],
                   },
                   to: String {
                    parts: [
                     Raw {
                      content: "/var/lib/jupyter",
                      position: (195, 17),
                     },
                    ],
                    position: (195, 16),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "createHome",
                      position: (196, 9),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "true",
                    position: (196, 22),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "isSystemUser",
                      position: (197, 9),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "true",
                    position: (197, 24),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "useDefaultShell",
                      position: (198, 9),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "true",
                    position: (198, 27),
                   },
                  },
                 ],
                 recursive: false,
                 position: (193, 34),
                },
               },
              ],
              recursive: false,
              position: (192, 51),
             },
            ],
           },
           position: (192, 5),
          },
         ],
         position: (159, 20),
        },
       ],
      },
     },
    ],
    recursive: false,
    position: (23, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}