---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit(
    Some(
     Variable {
      identifier: "builtins",
      position: (3, 14),
     },
    ),
    [
     Raw {
      content: "head",
      position: (3, 24),
     },
     Raw {
      content: "tail",
      position: (3, 29),
     },
     Raw {
      content: "isList",
      position: (3, 34),
     },
     Raw {
      content: "isAttrs",
      position: (3, 41),
     },
     Raw {
      content: "isInt",
      position: (3, 49),
     },
     Raw {
      content: "attrNames",
      position: (3, 55),
     },
    ],
   ),
  ],
  target: With {
   expression: PropertyAccess {
    expression: Variable {
     identifier: "lib",
     position: (7, 6),
    },
    attribute_path: AttributePath {
     attributes: [
      Raw {
       content: "lists",
       position: (7, 10),
      },
     ],
    },
    default: None,
   },
   target: With {
    expression: PropertyAccess {
     expression: Variable {
      identifier: "lib",
      position: (8, 6),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "attrsets",
        position: (8, 10),
       },
      ],
     },
     default: None,
    },
    target: With {
     expression: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (9, 6),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (9, 10),
        },
       ],
      },
      default: None,
     },
     target: Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "maybeEnv",
           position: (14, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "name",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "default",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "value",
                position: (15, 9),
               },
              ],
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (15, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "getEnv",
                  position: (15, 26),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "name",
                position: (15, 33),
               },
              ],
             },
            ),
           ],
           target: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "value",
               position: (16, 8),
              },
              String {
               parts: [],
              },
             ],
             position: (16, 14),
            },
            then: Variable {
             identifier: "default",
             position: (16, 25),
            },
            else_: Variable {
             identifier: "value",
             position: (16, 38),
            },
            position: (16, 5),
           },
           position: (15, 5),
          },
          position: (14, 20),
         },
         position: (14, 14),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "defaultMergeArg",
           position: (18, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "x",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "y",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (18, 31),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isAttrs",
                position: (18, 40),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "y",
              position: (18, 48),
             },
            ],
           },
           then: Variable {
            identifier: "y",
            position: (19, 5),
           },
           else_: FunctionApplication {
            function: Variable {
             identifier: "y",
             position: (21, 6),
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (21, 8),
             },
            ],
           },
           position: (18, 28),
          },
          position: (18, 25),
         },
         position: (18, 21),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "defaultMerge",
           position: (22, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "x",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "y",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: BinaryOperation {
           operator: Update,
           operands: [
            Variable {
             identifier: "x",
             position: (22, 24),
            },
            FunctionApplication {
             function: Variable {
              identifier: "defaultMergeArg",
              position: (22, 30),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (22, 46),
              },
              Variable {
               identifier: "y",
               position: (22, 48),
              },
             ],
            },
           ],
           position: (22, 26),
          },
          position: (22, 21),
         },
         position: (22, 18),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "foldArgs",
           position: (23, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "merger",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "f",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "init",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "x",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "arg",
                  position: (24, 9),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "merger",
                 position: (24, 16),
                },
                arguments: [
                 Variable {
                  identifier: "init",
                  position: (24, 23),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "defaultMergeArg",
                   position: (24, 29),
                  },
                  arguments: [
                   Variable {
                    identifier: "init",
                    position: (24, 45),
                   },
                   Variable {
                    identifier: "x",
                    position: (24, 50),
                   },
                  ],
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "base",
                  position: (26, 9),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "setAttrMerge",
                 position: (26, 17),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "passthru",
                    position: (26, 31),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (26, 41),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "f",
                   position: (26, 45),
                  },
                  arguments: [
                   Variable {
                    identifier: "arg",
                    position: (26, 47),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "z",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: BinaryOperation {
                   operator: Update,
                   operands: [
                    Variable {
                     identifier: "z",
                     position: (27, 30),
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "function",
                          position: (28, 29),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "foldArgs",
                         position: (28, 40),
                        },
                        arguments: [
                         Variable {
                          identifier: "merger",
                          position: (28, 49),
                         },
                         Variable {
                          identifier: "f",
                          position: (28, 56),
                         },
                         Variable {
                          identifier: "arg",
                          position: (28, 58),
                         },
                        ],
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "args",
                          position: (29, 29),
                         },
                        ],
                       },
                       BinaryOperation {
                        operator: Update,
                        operands: [
                         FunctionApplication {
                          function: PropertyAccess {
                           expression: Variable {
                            identifier: "lib",
                            position: (29, 37),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "attrByPath",
                              position: (29, 41),
                             },
                            ],
                           },
                           default: None,
                          },
                          arguments: [
                           List {
                            elements: [
                             String {
                              parts: [
                               Raw {
                                content: "passthru",
                                position: (29, 54),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "args",
                                position: (29, 65),
                               },
                              ],
                             },
                            ],
                            position: (29, 52),
                           },
                           Map {
                            bindings: [],
                            recursive: false,
                            position: (29, 72),
                           },
                           Variable {
                            identifier: "z",
                            position: (29, 75),
                           },
                          ],
                         },
                         Variable {
                          identifier: "x",
                          position: (29, 81),
                         },
                        ],
                        position: (29, 78),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (27, 35),
                    },
                   ],
                   position: (27, 32),
                  },
                  position: (27, 27),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "withStdOverrides",
                  position: (31, 9),
                 },
                ],
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 Variable {
                  identifier: "base",
                  position: (31, 28),
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "override",
                       position: (32, 11),
                      },
                     ],
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "base",
                      position: (32, 22),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "passthru",
                        position: (32, 27),
                       },
                       Raw {
                        content: "function",
                        position: (32, 36),
                       },
                      ],
                     },
                     default: None,
                    },
                   ),
                  ],
                  recursive: false,
                  position: (31, 36),
                 },
                ],
                position: (31, 33),
               },
              ),
             ],
             target: Variable {
              identifier: "withStdOverrides",
              position: (35, 11),
             },
             position: (24, 5),
            },
            position: (23, 31),
           },
           position: (23, 25),
          },
          position: (23, 22),
         },
         position: (23, 14),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "maybeAttrNullable",
           position: (39, 3),
          },
         ],
        },
        Variable {
         identifier: "maybeAttr",
         position: (39, 23),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "maybeAttr",
           position: (42, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "name",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "default",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "attrs",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: PropertyAccess {
            expression: Variable {
             identifier: "attrs",
             position: (42, 37),
            },
            attribute_path: AttributePath {
             attributes: [
              Expression {
               expression: Variable {
                identifier: "name",
                position: (42, 45),
               },
              },
             ],
            },
            default: Some(
             Variable {
              identifier: "default",
              position: (42, 54),
             },
            ),
           },
           position: (42, 30),
          },
          position: (42, 21),
         },
         position: (42, 15),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "ifEnable",
           position: (47, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "cond",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "val",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: Variable {
            identifier: "cond",
            position: (48, 8),
           },
           then: Variable {
            identifier: "val",
            position: (48, 18),
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (49, 13),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isList",
                 position: (49, 22),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "val",
               position: (49, 29),
              },
             ],
            },
            then: List {
             elements: [],
             position: (49, 38),
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (50, 13),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "isAttrs",
                  position: (50, 22),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "val",
                position: (50, 30),
               },
              ],
             },
             then: Map {
              bindings: [],
              recursive: false,
              position: (50, 39),
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: LogicalOr,
               operands: [
                BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "val",
                   position: (52, 13),
                  },
                  Variable {
                   identifier: "true",
                   position: (52, 20),
                  },
                 ],
                 position: (52, 17),
                },
                BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "val",
                   position: (52, 28),
                  },
                  Variable {
                   identifier: "false",
                   position: (52, 35),
                  },
                 ],
                 position: (52, 32),
                },
               ],
               position: (52, 25),
              },
              then: Variable {
               identifier: "false",
               position: (52, 46),
              },
              else_: Variable {
               identifier: "null",
               position: (53, 10),
              },
              position: (52, 10),
             },
             position: (50, 10),
            },
            position: (49, 10),
           },
           position: (48, 5),
          },
          position: (47, 20),
         },
         position: (47, 14),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "checkFlag",
           position: (57, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "attrSet",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "name",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "name",
              position: (58, 12),
             },
             String {
              parts: [
               Raw {
                content: "true",
                position: (58, 21),
               },
              ],
             },
            ],
            position: (58, 17),
           },
           then: Variable {
            identifier: "true",
            position: (58, 32),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "name",
               position: (59, 12),
              },
              String {
               parts: [
                Raw {
                 content: "false",
                 position: (59, 21),
                },
               ],
              },
             ],
             position: (59, 17),
            },
            then: Variable {
             identifier: "false",
             position: (59, 33),
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "elem",
               position: (60, 13),
              },
              arguments: [
               Variable {
                identifier: "name",
                position: (60, 18),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "attrByPath",
                 position: (60, 24),
                },
                arguments: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "flags",
                      position: (60, 37),
                     },
                    ],
                   },
                  ],
                  position: (60, 35),
                 },
                 List {
                  elements: [],
                  position: (60, 45),
                 },
                 Variable {
                  identifier: "attrSet",
                  position: (60, 48),
                 },
                ],
               },
              ],
             },
             then: Variable {
              identifier: "true",
              position: (60, 63),
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "attrByPath",
               position: (61, 9),
              },
              arguments: [
               List {
                elements: [
                 Variable {
                  identifier: "name",
                  position: (61, 21),
                 },
                ],
                position: (61, 20),
               },
               Variable {
                identifier: "false",
                position: (61, 27),
               },
               Variable {
                identifier: "attrSet",
                position: (61, 33),
               },
              ],
             },
             position: (60, 9),
            },
            position: (59, 9),
           },
           position: (58, 9),
          },
          position: (57, 24),
         },
         position: (57, 15),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "getValue",
           position: (66, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "attrSet",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "argList",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "name",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "attrByPath",
             position: (67, 5),
            },
            arguments: [
             List {
              elements: [
               Variable {
                identifier: "name",
                position: (67, 17),
               },
              ],
              position: (67, 16),
             },
             IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "checkFlag",
                position: (67, 27),
               },
               arguments: [
                Variable {
                 identifier: "attrSet",
                 position: (67, 37),
                },
                Variable {
                 identifier: "name",
                 position: (67, 45),
                },
               ],
              },
              then: Variable {
               identifier: "true",
               position: (67, 55),
              },
              else_: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "argList",
                  position: (68, 12),
                 },
                 List {
                  elements: [],
                  position: (68, 23),
                 },
                ],
                position: (68, 20),
               },
               then: Variable {
                identifier: "null",
                position: (68, 31),
               },
               else_: LetIn {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "x",
                     position: (69, 13),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (69, 17),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "head",
                       position: (69, 26),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "argList",
                     position: (69, 31),
                    },
                   ],
                  },
                 ),
                ],
                target: IfThenElse {
                 predicate: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "head",
                     position: (70, 21),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (70, 26),
                     },
                    ],
                   },
                   Variable {
                    identifier: "name",
                    position: (70, 32),
                   },
                  ],
                  position: (70, 29),
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "head",
                   position: (71, 26),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "tail",
                     position: (71, 32),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (71, 37),
                     },
                    ],
                   },
                  ],
                 },
                 else_: FunctionApplication {
                  function: Variable {
                   identifier: "getValue",
                   position: (72, 23),
                  },
                  arguments: [
                   Variable {
                    identifier: "attrSet",
                    position: (72, 32),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "tail",
                     position: (73, 26),
                    },
                    arguments: [
                     Variable {
                      identifier: "argList",
                      position: (73, 31),
                     },
                    ],
                   },
                   Variable {
                    identifier: "name",
                    position: (73, 40),
                   },
                  ],
                 },
                 position: (70, 17),
                },
                position: (69, 9),
               },
               position: (68, 9),
              },
              position: (67, 24),
             },
             Variable {
              identifier: "attrSet",
              position: (73, 47),
             },
            ],
           },
           position: (66, 32),
          },
          position: (66, 23),
         },
         position: (66, 14),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "checkReqs",
           position: (78, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "attrSet",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "argList",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "condList",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (80, 5),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (80, 11),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "and",
                 position: (80, 15),
                },
               ],
              },
              default: None,
             },
             Variable {
              identifier: "true",
              position: (80, 19),
             },
             FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (81, 8),
              },
              arguments: [
               Function {
                argument: Some(
                 "x",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "name",
                      position: (81, 20),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "head",
                     position: (81, 28),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (81, 33),
                     },
                    ],
                   },
                  ),
                 ],
                 target: BinaryOperation {
                  operator: Implication,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "checkFlag",
                     position: (83, 11),
                    },
                    arguments: [
                     Variable {
                      identifier: "attrSet",
                      position: (83, 21),
                     },
                     Variable {
                      identifier: "name",
                      position: (83, 29),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "foldr",
                     position: (84, 10),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "lib",
                       position: (84, 16),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "and",
                         position: (84, 20),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "true",
                      position: (84, 24),
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "map",
                       position: (85, 10),
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "y",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: LetIn {
                         bindings: [
                          KeyValue(
                           AttributePath {
                            attributes: [
                             Raw {
                              content: "val",
                              position: (85, 22),
                             },
                            ],
                           },
                           FunctionApplication {
                            function: Variable {
                             identifier: "getValue",
                             position: (85, 27),
                            },
                            arguments: [
                             Variable {
                              identifier: "attrSet",
                              position: (85, 36),
                             },
                             Variable {
                              identifier: "argList",
                              position: (85, 44),
                             },
                             Variable {
                              identifier: "y",
                              position: (85, 52),
                             },
                            ],
                           },
                          ),
                         ],
                         target: BinaryOperation {
                          operator: LogicalAnd,
                          operands: [
                           BinaryOperation {
                            operator: NotEqualTo,
                            operands: [
                             Variable {
                              identifier: "val",
                              position: (86, 18),
                             },
                             Variable {
                              identifier: "null",
                              position: (86, 23),
                             },
                            ],
                            position: (86, 21),
                           },
                           BinaryOperation {
                            operator: NotEqualTo,
                            operands: [
                             Variable {
                              identifier: "val",
                              position: (86, 33),
                             },
                             Variable {
                              identifier: "false",
                              position: (86, 38),
                             },
                            ],
                            position: (86, 36),
                           },
                          ],
                          position: (86, 29),
                         },
                         position: (85, 18),
                        },
                        position: (85, 15),
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "tail",
                         position: (87, 10),
                        },
                        arguments: [
                         Variable {
                          identifier: "x",
                          position: (87, 15),
                         },
                        ],
                       },
                      ],
                     },
                    ],
                   },
                  ],
                  position: (83, 35),
                 },
                 position: (81, 16),
                },
                position: (81, 13),
               },
               Variable {
                identifier: "condList",
                position: (87, 22),
               },
              ],
             },
            ],
           },
           position: (78, 33),
          },
          position: (78, 24),
         },
         position: (78, 15),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "uniqList",
           position: (91, 3),
          },
         ],
        },
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "acc",
            default: Some(
             List {
              elements: [],
              position: (91, 33),
             },
            ),
           },
           FunctionArgument {
            identifier: "inputList",
            default: None,
           },
          ],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "go",
               position: (92, 9),
              },
             ],
            },
            Function {
             argument: Some(
              "xs",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "acc",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "xs",
                  position: (93, 17),
                 },
                 List {
                  elements: [],
                  position: (93, 23),
                 },
                ],
                position: (93, 20),
               },
               then: List {
                elements: [],
                position: (94, 19),
               },
               else_: LetIn {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "x",
                     position: (95, 23),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "head",
                    position: (95, 27),
                   },
                   arguments: [
                    Variable {
                     identifier: "xs",
                     position: (95, 32),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "y",
                     position: (96, 23),
                    },
                   ],
                  },
                  IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "elem",
                     position: (96, 30),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (96, 35),
                     },
                     Variable {
                      identifier: "acc",
                      position: (96, 37),
                     },
                    ],
                   },
                   then: List {
                    elements: [],
                    position: (96, 46),
                   },
                   else_: List {
                    elements: [
                     Variable {
                      identifier: "x",
                      position: (96, 55),
                     },
                    ],
                    position: (96, 54),
                   },
                   position: (96, 27),
                  },
                 ),
                ],
                target: BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  Variable {
                   identifier: "y",
                   position: (97, 22),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "go",
                    position: (97, 27),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "tail",
                      position: (97, 31),
                     },
                     arguments: [
                      Variable {
                       identifier: "xs",
                       position: (97, 36),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Variable {
                       identifier: "y",
                       position: (97, 41),
                      },
                      Variable {
                       identifier: "acc",
                       position: (97, 46),
                      },
                     ],
                     position: (97, 43),
                    },
                   ],
                  },
                 ],
                 position: (97, 24),
                },
                position: (95, 19),
               },
               position: (93, 14),
              },
              position: (92, 18),
             },
             position: (92, 14),
            },
           ),
          ],
          target: FunctionApplication {
           function: Variable {
            identifier: "go",
            position: (98, 8),
           },
           arguments: [
            Variable {
             identifier: "inputList",
             position: (98, 11),
            },
            Variable {
             identifier: "acc",
             position: (98, 21),
            },
           ],
          },
          position: (92, 5),
         },
         position: (91, 14),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "uniqListExt",
           position: (100, 3),
          },
         ],
        },
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "compare",
            default: Some(
             Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "y",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "x",
                  position: (103, 36),
                 },
                 Variable {
                  identifier: "y",
                  position: (103, 39),
                 },
                ],
                position: (103, 37),
               },
               position: (103, 33),
              },
              position: (103, 30),
             },
            ),
           },
           FunctionArgument {
            identifier: "getter",
            default: Some(
             Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Variable {
               identifier: "x",
               position: (102, 32),
              },
              position: (102, 29),
             },
            ),
           },
           FunctionArgument {
            identifier: "outputList",
            default: Some(
             List {
              elements: [],
              position: (101, 32),
             },
            ),
           },
           FunctionArgument {
            identifier: "inputList",
            default: None,
           },
          ],
          ellipsis: false,
         },
         definition: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "inputList",
             position: (104, 12),
            },
            List {
             elements: [],
             position: (104, 25),
            },
           ],
           position: (104, 22),
          },
          then: Variable {
           identifier: "outputList",
           position: (104, 33),
          },
          else_: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "x",
                position: (105, 13),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "head",
               position: (105, 17),
              },
              arguments: [
               Variable {
                identifier: "inputList",
                position: (105, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "isX",
                position: (106, 13),
               },
              ],
             },
             Function {
              argument: Some(
               "y",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "compare",
                position: (106, 23),
               },
               arguments: [
                FunctionApplication {
                 function: Variable {
                  identifier: "getter",
                  position: (106, 32),
                 },
                 arguments: [
                  Variable {
                   identifier: "y",
                   position: (106, 39),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "getter",
                  position: (106, 43),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (106, 50),
                  },
                 ],
                },
               ],
              },
              position: (106, 19),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "newOutputList",
                position: (107, 13),
               },
              ],
             },
             BinaryOperation {
              operator: Concatenation,
              operands: [
               Variable {
                identifier: "outputList",
                position: (107, 29),
               },
               IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "any",
                  position: (108, 21),
                 },
                 arguments: [
                  Variable {
                   identifier: "isX",
                   position: (108, 25),
                  },
                  Variable {
                   identifier: "outputList",
                   position: (108, 29),
                  },
                 ],
                },
                then: List {
                 elements: [],
                 position: (108, 45),
                },
                else_: List {
                 elements: [
                  Variable {
                   identifier: "x",
                   position: (108, 54),
                  },
                 ],
                 position: (108, 53),
                },
                position: (108, 18),
               },
              ],
              position: (107, 40),
             },
            ),
           ],
           target: FunctionApplication {
            function: Variable {
             identifier: "uniqListExt",
             position: (109, 12),
            },
            arguments: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "outputList",
                   position: (109, 26),
                  },
                 ],
                },
                Variable {
                 identifier: "newOutputList",
                 position: (109, 39),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "inputList",
                   position: (110, 26),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "tail",
                  position: (110, 39),
                 },
                 arguments: [
                  Variable {
                   identifier: "inputList",
                   position: (110, 44),
                  },
                 ],
                },
               ),
               Inherit(
                None,
                [
                 Raw {
                  content: "getter",
                  position: (111, 34),
                 },
                 Raw {
                  content: "compare",
                  position: (111, 41),
                 },
                ],
               ),
              ],
              recursive: false,
              position: (109, 24),
             },
            ],
           },
           position: (105, 9),
          },
          position: (104, 9),
         },
         position: (100, 17),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "condConcat",
           position: (114, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "name",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "list",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "checker",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "list",
               position: (115, 12),
              },
              List {
               elements: [],
               position: (115, 20),
              },
             ],
             position: (115, 17),
            },
            then: Variable {
             identifier: "name",
             position: (115, 28),
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "checker",
               position: (116, 12),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "head",
                 position: (116, 21),
                },
                arguments: [
                 Variable {
                  identifier: "list",
                  position: (116, 26),
                 },
                ],
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "condConcat",
               position: (117, 17),
              },
              arguments: [
               BinaryOperation {
                operator: Addition,
                operands: [
                 Variable {
                  identifier: "name",
                  position: (118, 26),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "head",
                   position: (118, 34),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "tail",
                     position: (118, 40),
                    },
                    arguments: [
                     Variable {
                      identifier: "list",
                      position: (118, 45),
                     },
                    ],
                   },
                  ],
                 },
                ],
                position: (118, 31),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (119, 26),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "tail",
                   position: (119, 32),
                  },
                  arguments: [
                   Variable {
                    identifier: "list",
                    position: (119, 37),
                   },
                  ],
                 },
                ],
               },
               Variable {
                identifier: "checker",
                position: (120, 25),
               },
              ],
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "condConcat",
               position: (121, 14),
              },
              arguments: [
               Variable {
                identifier: "name",
                position: (122, 17),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (122, 23),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "tail",
                   position: (122, 29),
                  },
                  arguments: [
                   Variable {
                    identifier: "list",
                    position: (122, 34),
                   },
                  ],
                 },
                ],
               },
               Variable {
                identifier: "checker",
                position: (122, 41),
               },
              ],
             },
             position: (116, 9),
            },
            position: (115, 9),
           },
           position: (114, 28),
          },
          position: (114, 22),
         },
         position: (114, 16),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "lazyGenericClosure",
           position: (124, 3),
          },
         ],
        },
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "operator",
            default: None,
           },
           FunctionArgument {
            identifier: "startSet",
            default: None,
           },
          ],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "work",
               position: (126, 7),
              },
             ],
            },
            Function {
             argument: Some(
              "list",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "doneKeys",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "result",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "list",
                   position: (127, 12),
                  },
                  List {
                   elements: [],
                   position: (127, 20),
                  },
                 ],
                 position: (127, 17),
                },
                then: Variable {
                 identifier: "result",
                 position: (128, 11),
                },
                else_: LetIn {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "x",
                      position: (130, 15),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "head",
                     position: (130, 19),
                    },
                    arguments: [
                     Variable {
                      identifier: "list",
                      position: (130, 24),
                     },
                    ],
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "key",
                      position: (130, 30),
                     },
                    ],
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "x",
                     position: (130, 36),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "key",
                       position: (130, 38),
                      },
                     ],
                    },
                    default: None,
                   },
                  ),
                 ],
                 target: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "elem",
                    position: (131, 14),
                   },
                   arguments: [
                    Variable {
                     identifier: "key",
                     position: (131, 19),
                    },
                    Variable {
                     identifier: "doneKeys",
                     position: (131, 23),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "work",
                    position: (132, 13),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "tail",
                      position: (132, 19),
                     },
                     arguments: [
                      Variable {
                       identifier: "list",
                       position: (132, 24),
                      },
                     ],
                    },
                    Variable {
                     identifier: "doneKeys",
                     position: (132, 30),
                    },
                    Variable {
                     identifier: "result",
                     position: (132, 39),
                    },
                   ],
                  },
                  else_: FunctionApplication {
                   function: Variable {
                    identifier: "work",
                    position: (134, 13),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      FunctionApplication {
                       function: Variable {
                        identifier: "tail",
                        position: (134, 19),
                       },
                       arguments: [
                        Variable {
                         identifier: "list",
                         position: (134, 24),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "operator",
                        position: (134, 32),
                       },
                       arguments: [
                        Variable {
                         identifier: "x",
                         position: (134, 41),
                        },
                       ],
                      },
                     ],
                     position: (134, 29),
                    },
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      List {
                       elements: [
                        Variable {
                         identifier: "key",
                         position: (134, 46),
                        },
                       ],
                       position: (134, 45),
                      },
                      Variable {
                       identifier: "doneKeys",
                       position: (134, 54),
                      },
                     ],
                     position: (134, 51),
                    },
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      List {
                       elements: [
                        Variable {
                         identifier: "x",
                         position: (134, 66),
                        },
                       ],
                       position: (134, 65),
                      },
                      Variable {
                       identifier: "result",
                       position: (134, 72),
                      },
                     ],
                     position: (134, 69),
                    },
                   ],
                  },
                  position: (131, 11),
                 },
                 position: (130, 11),
                },
                position: (127, 9),
               },
               position: (126, 30),
              },
              position: (126, 20),
             },
             position: (126, 14),
            },
           ),
          ],
          target: FunctionApplication {
           function: Variable {
            identifier: "work",
            position: (136, 7),
           },
           arguments: [
            Variable {
             identifier: "startSet",
             position: (136, 12),
            },
            List {
             elements: [],
             position: (136, 21),
            },
            List {
             elements: [],
             position: (136, 24),
            },
           ],
          },
          position: (125, 5),
         },
         position: (124, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "innerModifySumArgs",
           position: (138, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "f",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "x",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "a",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "b",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               Variable {
                identifier: "b",
                position: (138, 39),
               },
               Variable {
                identifier: "null",
                position: (138, 44),
               },
              ],
              position: (138, 41),
             },
             then: BinaryOperation {
              operator: Update,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (138, 55),
                },
                arguments: [
                 Variable {
                  identifier: "a",
                  position: (138, 57),
                 },
                 Variable {
                  identifier: "b",
                  position: (138, 59),
                 },
                ],
               },
               Variable {
                identifier: "x",
                position: (138, 65),
               },
              ],
              position: (138, 62),
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "innerModifySumArgs",
               position: (139, 9),
              },
              arguments: [
               Variable {
                identifier: "f",
                position: (139, 28),
               },
               Variable {
                identifier: "x",
                position: (139, 30),
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 Variable {
                  identifier: "a",
                  position: (139, 33),
                 },
                 Variable {
                  identifier: "b",
                  position: (139, 38),
                 },
                ],
                position: (139, 35),
               },
              ],
             },
             position: (138, 36),
            },
            position: (138, 33),
           },
           position: (138, 30),
          },
          position: (138, 27),
         },
         position: (138, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "modifySumArgs",
           position: (140, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "f",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "x",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "innerModifySumArgs",
            position: (140, 25),
           },
           arguments: [
            Variable {
             identifier: "f",
             position: (140, 44),
            },
            Variable {
             identifier: "x",
             position: (140, 46),
            },
            Map {
             bindings: [],
             recursive: false,
             position: (140, 48),
            },
           ],
          },
          position: (140, 22),
         },
         position: (140, 19),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "innerClosePropagation",
           position: (143, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "acc",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "xs",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "xs",
              position: (144, 8),
             },
             List {
              elements: [],
              position: (144, 14),
             },
            ],
            position: (144, 11),
           },
           then: Variable {
            identifier: "acc",
            position: (145, 10),
           },
           else_: LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "y",
                 position: (146, 14),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "head",
                position: (146, 19),
               },
               arguments: [
                Variable {
                 identifier: "xs",
                 position: (146, 24),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "ys",
                 position: (147, 14),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "tail",
                position: (147, 19),
               },
               arguments: [
                Variable {
                 identifier: "xs",
                 position: (147, 24),
                },
               ],
              },
             ),
            ],
            target: IfThenElse {
             predicate: UnaryOperation {
              operator: Not,
              operand: FunctionApplication {
               function: Variable {
                identifier: "isAttrs",
                position: (148, 18),
               },
               arguments: [
                Variable {
                 identifier: "y",
                 position: (148, 26),
                },
               ],
              },
              position: (148, 16),
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "innerClosePropagation",
               position: (149, 18),
              },
              arguments: [
               Variable {
                identifier: "acc",
                position: (149, 40),
               },
               Variable {
                identifier: "ys",
                position: (149, 44),
               },
              ],
             },
             else_: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "acc'",
                   position: (150, 22),
                  },
                 ],
                },
                BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  List {
                   elements: [
                    Variable {
                     identifier: "y",
                     position: (150, 30),
                    },
                   ],
                   position: (150, 29),
                  },
                  Variable {
                   identifier: "acc",
                   position: (150, 36),
                  },
                 ],
                 position: (150, 33),
                },
               ),
              ],
              target: FunctionApplication {
               function: Variable {
                identifier: "innerClosePropagation",
                position: (151, 21),
               },
               arguments: [
                Variable {
                 identifier: "acc'",
                 position: (152, 23),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "uniqList",
                  position: (153, 24),
                 },
                 arguments: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "inputList",
                        position: (153, 35),
                       },
                      ],
                     },
                     BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "maybeAttrNullable",
                         position: (153, 48),
                        },
                        arguments: [
                         String {
                          parts: [
                           Raw {
                            content: "propagatedBuildInputs",
                            position: (153, 67),
                           },
                          ],
                         },
                         List {
                          elements: [],
                          position: (153, 90),
                         },
                         Variable {
                          identifier: "y",
                          position: (153, 93),
                         },
                        ],
                       },
                       BinaryOperation {
                        operator: Concatenation,
                        operands: [
                         FunctionApplication {
                          function: Variable {
                           identifier: "maybeAttrNullable",
                           position: (154, 48),
                          },
                          arguments: [
                           String {
                            parts: [
                             Raw {
                              content: "propagatedNativeBuildInputs",
                              position: (154, 67),
                             },
                            ],
                           },
                           List {
                            elements: [],
                            position: (154, 96),
                           },
                           Variable {
                            identifier: "y",
                            position: (154, 99),
                           },
                          ],
                         },
                         Variable {
                          identifier: "ys",
                          position: (155, 47),
                         },
                        ],
                        position: (155, 44),
                       },
                      ],
                      position: (154, 44),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "acc",
                        position: (156, 35),
                       },
                      ],
                     },
                     Variable {
                      identifier: "acc'",
                      position: (156, 41),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (153, 33),
                  },
                 ],
                },
               ],
              },
              position: (150, 18),
             },
             position: (148, 13),
            },
            position: (146, 10),
           },
           position: (144, 5),
          },
          position: (143, 32),
         },
         position: (143, 27),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "closePropagation",
           position: (160, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "list",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "uniqList",
           position: (160, 29),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "inputList",
                 position: (160, 39),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "innerClosePropagation",
                position: (160, 52),
               },
               arguments: [
                List {
                 elements: [],
                 position: (160, 74),
                },
                Variable {
                 identifier: "list",
                 position: (160, 77),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (160, 38),
           },
          ],
         },
         position: (160, 22),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mapAttrsFlatten",
           position: (163, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "f",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "r",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (163, 27),
           },
           arguments: [
            Function {
             argument: Some(
              "attr",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "f",
               position: (163, 38),
              },
              arguments: [
               Variable {
                identifier: "attr",
                position: (163, 40),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "r",
                 position: (163, 45),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "attr",
                    position: (163, 49),
                   },
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             position: (163, 32),
            },
            FunctionApplication {
             function: Variable {
              identifier: "attrNames",
              position: (163, 57),
             },
             arguments: [
              Variable {
               identifier: "r",
               position: (163, 67),
              },
             ],
            },
           ],
          },
          position: (163, 24),
         },
         position: (163, 21),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "nvs",
           position: (166, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "name",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "value",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "listToAttrs",
            position: (166, 22),
           },
           arguments: [
            List {
             elements: [
              FunctionApplication {
               function: Variable {
                identifier: "nameValuePair",
                position: (166, 37),
               },
               arguments: [
                Variable {
                 identifier: "name",
                 position: (166, 51),
                },
                Variable {
                 identifier: "value",
                 position: (166, 56),
                },
               ],
              },
             ],
             position: (166, 34),
            },
           ],
          },
          position: (166, 15),
         },
         position: (166, 9),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "setAttr",
           position: (168, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "set",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "name",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: BinaryOperation {
            operator: Update,
            operands: [
             Variable {
              identifier: "set",
              position: (168, 27),
             },
             FunctionApplication {
              function: Variable {
               identifier: "nvs",
               position: (168, 35),
              },
              arguments: [
               Variable {
                identifier: "name",
                position: (168, 39),
               },
               Variable {
                identifier: "v",
                position: (168, 44),
               },
              ],
             },
            ],
            position: (168, 31),
           },
           position: (168, 24),
          },
          position: (168, 18),
         },
         position: (168, 13),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "setAttrMerge",
           position: (173, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "name",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "default",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "attrs",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "f",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "setAttr",
              position: (174, 5),
             },
             arguments: [
              Variable {
               identifier: "attrs",
               position: (174, 13),
              },
              Variable {
               identifier: "name",
               position: (174, 19),
              },
              FunctionApplication {
               function: Variable {
                identifier: "f",
                position: (174, 25),
               },
               arguments: [
                FunctionApplication {
                 function: Variable {
                  identifier: "maybeAttr",
                  position: (174, 28),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (174, 38),
                  },
                  Variable {
                   identifier: "default",
                   position: (174, 43),
                  },
                  Variable {
                   identifier: "attrs",
                   position: (174, 51),
                  },
                 ],
                },
               ],
              },
             ],
            },
            position: (173, 40),
           },
           position: (173, 33),
          },
          position: (173, 24),
         },
         position: (173, 18),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrsWithFunc",
           position: (179, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "f",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "set1",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "set2",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (180, 5),
            },
            arguments: [
             Function {
              argument: Some(
               "n",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "set",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: IfThenElse {
                predicate: HasProperty {
                 expression: Variable {
                  identifier: "set",
                  position: (180, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: Variable {
                     identifier: "n",
                     position: (180, 31),
                    },
                   },
                  ],
                 },
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "setAttr",
                  position: (181, 30),
                 },
                 arguments: [
                  Variable {
                   identifier: "set",
                   position: (181, 38),
                  },
                  Variable {
                   identifier: "n",
                   position: (181, 42),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "f",
                    position: (181, 45),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "set",
                      position: (181, 47),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "n",
                         position: (181, 53),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "set2",
                      position: (181, 56),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "n",
                         position: (181, 63),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
                else_: Variable {
                 identifier: "set",
                 position: (182, 30),
                },
                position: (180, 20),
               },
               position: (180, 15),
              },
              position: (180, 12),
             },
             BinaryOperation {
              operator: Update,
              operands: [
               Variable {
                identifier: "set2",
                position: (183, 13),
               },
               Variable {
                identifier: "set1",
                position: (183, 21),
               },
              ],
              position: (183, 18),
             },
             FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (183, 28),
              },
              arguments: [
               Variable {
                identifier: "set2",
                position: (183, 38),
               },
              ],
             },
            ],
           },
           position: (179, 33),
          },
          position: (179, 27),
         },
         position: (179, 24),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrsConcatenateValues",
           position: (187, 3),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mergeAttrsWithFunc",
          position: (187, 33),
         },
         arguments: [
          Function {
           argument: Some(
            "a",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "b",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: BinaryOperation {
             operator: Concatenation,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "toList",
                position: (187, 61),
               },
               arguments: [
                Variable {
                 identifier: "a",
                 position: (187, 68),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "toList",
                position: (187, 75),
               },
               arguments: [
                Variable {
                 identifier: "b",
                 position: (187, 82),
                },
               ],
              },
             ],
             position: (187, 71),
            },
            position: (187, 57),
           },
           position: (187, 54),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrsNoOverride",
           position: (196, 3),
          },
         ],
        },
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "overrideSnd",
            default: Some(
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "buildPhase",
                  position: (197, 45),
                 },
                ],
               },
              ],
              position: (197, 42),
             },
            ),
           },
           FunctionArgument {
            identifier: "mergeLists",
            default: Some(
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "buildInputs",
                  position: (196, 43),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "propagatedBuildInputs",
                  position: (196, 57),
                 },
                ],
               },
              ],
              position: (196, 41),
             },
            ),
           },
          ],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "attrs1",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "attrs2",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (199, 5),
            },
            arguments: [
             Function {
              argument: Some(
               "n",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "set",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "setAttr",
                 position: (200, 9),
                },
                arguments: [
                 Variable {
                  identifier: "set",
                  position: (200, 17),
                 },
                 Variable {
                  identifier: "n",
                  position: (200, 21),
                 },
                 IfThenElse {
                  predicate: HasProperty {
                   expression: Variable {
                    identifier: "set",
                    position: (200, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Expression {
                      expression: Variable {
                       identifier: "n",
                       position: (200, 36),
                      },
                     },
                    ],
                   },
                  },
                  then: IfThenElse {
                   predicate: FunctionApplication {
                    function: Variable {
                     identifier: "elem",
                     position: (202, 18),
                    },
                    arguments: [
                     Variable {
                      identifier: "n",
                      position: (202, 23),
                     },
                     Variable {
                      identifier: "mergeLists",
                      position: (202, 25),
                     },
                    ],
                   },
                   then: BinaryOperation {
                    operator: Concatenation,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "attrs2",
                       position: (203, 22),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Expression {
                         expression: Variable {
                          identifier: "n",
                          position: (203, 31),
                         },
                        },
                       ],
                      },
                      default: None,
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "attrs1",
                       position: (203, 37),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Expression {
                         expression: Variable {
                          identifier: "n",
                          position: (203, 46),
                         },
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                    position: (203, 34),
                   },
                   else_: IfThenElse {
                    predicate: FunctionApplication {
                     function: Variable {
                      identifier: "elem",
                      position: (204, 23),
                     },
                     arguments: [
                      Variable {
                       identifier: "n",
                       position: (204, 28),
                      },
                      Variable {
                       identifier: "overrideSnd",
                       position: (204, 30),
                      },
                     ],
                    },
                    then: PropertyAccess {
                     expression: Variable {
                      identifier: "attrs1",
                      position: (205, 22),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "n",
                         position: (205, 31),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                    else_: FunctionApplication {
                     function: Variable {
                      identifier: "throw",
                      position: (206, 20),
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "error mergeAttrsNoOverride, attribute ",
                         position: (206, 27),
                        },
                        Expression {
                         expression: Variable {
                          identifier: "n",
                          position: (206, 67),
                         },
                        },
                        Raw {
                         content: " given in both attributes - no merge func defined",
                         position: (206, 69),
                        },
                       ],
                      },
                     ],
                    },
                    position: (204, 20),
                   },
                   position: (202, 15),
                  },
                  else_: PropertyAccess {
                   expression: Variable {
                    identifier: "attrs2",
                    position: (207, 18),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Expression {
                      expression: Variable {
                       identifier: "n",
                       position: (207, 27),
                      },
                     },
                    ],
                   },
                   default: None,
                  },
                  position: (200, 25),
                 },
                ],
               },
               position: (199, 15),
              },
              position: (199, 12),
             },
             Variable {
              identifier: "attrs1",
              position: (208, 15),
             },
             FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (208, 23),
              },
              arguments: [
               Variable {
                identifier: "attrs2",
                position: (208, 33),
               },
              ],
             },
            ],
           },
           position: (198, 37),
          },
          position: (198, 29),
         },
         position: (196, 26),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrByFunc",
           position: (222, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "x",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "y",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "mergeAttrBy2",
                position: (224, 11),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "mergeAttrBy",
                     position: (224, 28),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (224, 42),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "mergeAttrs",
                      position: (224, 46),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                ],
                recursive: false,
                position: (224, 26),
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "maybeAttr",
                   position: (225, 27),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "mergeAttrBy",
                      position: (225, 38),
                     },
                    ],
                   },
                   Map {
                    bindings: [],
                    recursive: false,
                    position: (225, 51),
                   },
                   Variable {
                    identifier: "x",
                    position: (225, 54),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "maybeAttr",
                   position: (226, 27),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "mergeAttrBy",
                      position: (226, 38),
                     },
                    ],
                   },
                   Map {
                    bindings: [],
                    recursive: false,
                    position: (226, 51),
                   },
                   Variable {
                    identifier: "y",
                    position: (226, 54),
                   },
                  ],
                 },
                ],
                position: (226, 23),
               },
              ],
              position: (225, 23),
             },
            ),
           ],
           target: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (227, 5),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (227, 11),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "mergeAttrs",
                 position: (227, 15),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [],
              recursive: false,
              position: (227, 26),
             },
             List {
              elements: [
               Variable {
                identifier: "x",
                position: (228, 7),
               },
               Variable {
                identifier: "y",
                position: (228, 9),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrs",
                 position: (229, 8),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "a",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "v",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: IfThenElse {
                    predicate: HasProperty {
                     expression: Variable {
                      identifier: "x",
                      position: (230, 14),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "a",
                         position: (230, 20),
                        },
                       },
                      ],
                     },
                    },
                    then: IfThenElse {
                     predicate: HasProperty {
                      expression: Variable {
                       identifier: "y",
                       position: (231, 22),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Expression {
                         expression: Variable {
                          identifier: "a",
                          position: (231, 28),
                         },
                        },
                       ],
                      },
                     },
                     then: FunctionApplication {
                      function: Variable {
                       identifier: "v",
                       position: (232, 21),
                      },
                      arguments: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "x",
                         position: (232, 23),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Expression {
                           expression: Variable {
                            identifier: "a",
                            position: (232, 27),
                           },
                          },
                         ],
                        },
                        default: None,
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "y",
                         position: (232, 30),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Expression {
                           expression: Variable {
                            identifier: "a",
                            position: (232, 34),
                           },
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                     },
                     else_: PropertyAccess {
                      expression: Variable {
                       identifier: "x",
                       position: (233, 21),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Expression {
                         expression: Variable {
                          identifier: "a",
                          position: (233, 25),
                         },
                        },
                       ],
                      },
                      default: None,
                     },
                     position: (231, 19),
                    },
                    else_: PropertyAccess {
                     expression: Variable {
                      identifier: "y",
                      position: (234, 19),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "a",
                         position: (234, 23),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                    position: (230, 11),
                   },
                   position: (229, 22),
                  },
                  position: (229, 19),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "removeAttrs",
                   position: (235, 14),
                  },
                  arguments: [
                   Variable {
                    identifier: "mergeAttrBy2",
                    position: (235, 26),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "filter",
                     position: (237, 27),
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "a",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: BinaryOperation {
                       operator: LogicalAnd,
                       operands: [
                        UnaryOperation {
                         operator: Not,
                         operand: HasProperty {
                          expression: Variable {
                           identifier: "x",
                           position: (237, 40),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Expression {
                             expression: Variable {
                              identifier: "a",
                              position: (237, 46),
                             },
                            },
                           ],
                          },
                         },
                         position: (237, 38),
                        },
                        UnaryOperation {
                         operator: Not,
                         operand: HasProperty {
                          expression: Variable {
                           identifier: "y",
                           position: (237, 54),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Expression {
                             expression: Variable {
                              identifier: "a",
                              position: (237, 60),
                             },
                            },
                           ],
                          },
                         },
                         position: (237, 52),
                        },
                       ],
                       position: (237, 49),
                      },
                      position: (237, 35),
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "attrNames",
                       position: (238, 35),
                      },
                      arguments: [
                       Variable {
                        identifier: "mergeAttrBy2",
                        position: (238, 45),
                       },
                      ],
                     },
                    ],
                   },
                  ],
                 },
                ],
               },
              ],
              position: (227, 29),
             },
            ],
           },
           position: (223, 5),
          },
          position: (222, 24),
         },
         position: (222, 21),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrsByFuncDefaults",
           position: (242, 3),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "foldl",
          position: (242, 30),
         },
         arguments: [
          Variable {
           identifier: "mergeAttrByFunc",
           position: (242, 36),
          },
          Map {
           bindings: [
            Inherit(
             None,
             [
              Raw {
               content: "mergeAttrBy",
               position: (242, 62),
              },
             ],
            ),
           ],
           recursive: false,
           position: (242, 52),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrsByFuncDefaultsClean",
           position: (243, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "list",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "removeAttrs",
           position: (243, 41),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "mergeAttrsByFuncDefaults",
             position: (243, 54),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (243, 79),
             },
            ],
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "mergeAttrBy",
                position: (243, 87),
               },
              ],
             },
            ],
            position: (243, 85),
           },
          ],
         },
         position: (243, 35),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mergeAttrBy",
           position: (246, 3),
          },
         ],
        },
        BinaryOperation {
         operator: Update,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "listToAttrs",
            position: (247, 5),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "map",
              position: (247, 18),
             },
             arguments: [
              Function {
               argument: Some(
                "n",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "nameValuePair",
                 position: (247, 26),
                },
                arguments: [
                 Variable {
                  identifier: "n",
                  position: (247, 40),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (247, 42),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "concat",
                     position: (247, 46),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               position: (247, 23),
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "nativeBuildInputs",
                   position: (248, 10),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "buildInputs",
                   position: (248, 30),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "propagatedBuildInputs",
                   position: (248, 44),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "configureFlags",
                   position: (248, 68),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "prePhases",
                   position: (248, 85),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "postAll",
                   position: (248, 97),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "patches",
                   position: (248, 107),
                  },
                 ],
                },
               ],
               position: (248, 7),
              },
             ],
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "listToAttrs",
              position: (249, 8),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "map",
                position: (249, 21),
               },
               arguments: [
                Function {
                 argument: Some(
                  "n",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "nameValuePair",
                   position: (249, 29),
                  },
                  arguments: [
                   Variable {
                    identifier: "n",
                    position: (249, 43),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (249, 45),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "mergeAttrs",
                       position: (249, 49),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                 position: (249, 26),
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "passthru",
                     position: (249, 64),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "meta",
                     position: (249, 75),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "cfg",
                     position: (249, 82),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "flags",
                     position: (249, 88),
                    },
                   ],
                  },
                 ],
                 position: (249, 61),
                },
               ],
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "listToAttrs",
              position: (250, 8),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "map",
                position: (250, 21),
               },
               arguments: [
                Function {
                 argument: Some(
                  "n",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "nameValuePair",
                   position: (250, 29),
                  },
                  arguments: [
                   Variable {
                    identifier: "n",
                    position: (250, 43),
                   },
                   Function {
                    argument: Some(
                     "a",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: Function {
                     argument: Some(
                      "b",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: String {
                      parts: [
                       Expression {
                        expression: Variable {
                         identifier: "a",
                         position: (250, 55),
                        },
                       },
                       Raw {
                        content: "\n",
                        position: (250, 57),
                       },
                       Expression {
                        expression: Variable {
                         identifier: "b",
                         position: (250, 61),
                        },
                       },
                      ],
                     },
                     position: (250, 49),
                    },
                    position: (250, 46),
                   },
                  ],
                 },
                 position: (250, 26),
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "preConfigure",
                     position: (250, 71),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "postInstall",
                     position: (250, 86),
                    },
                   ],
                  },
                 ],
                 position: (250, 68),
                },
               ],
              },
             ],
            },
           ],
           position: (250, 5),
          },
         ],
         position: (249, 5),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "nixType",
           position: (253, 3),
          },
         ],
        },
        Function {
         argument: Some(
          "x",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: IfThenElse {
          predicate: FunctionApplication {
           function: Variable {
            identifier: "isAttrs",
            position: (254, 10),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (254, 18),
            },
           ],
          },
          then: IfThenElse {
           predicate: HasProperty {
            expression: Variable {
             identifier: "x",
             position: (255, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "outPath",
               position: (255, 18),
              },
             ],
            },
           },
           then: String {
            parts: [
             Raw {
              content: "derivation",
              position: (255, 32),
             },
            ],
           },
           else_: String {
            parts: [
             Raw {
              content: "attrs",
              position: (256, 17),
             },
            ],
           },
           position: (255, 11),
          },
          else_: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (257, 15),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isFunction",
                position: (257, 19),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (257, 30),
             },
            ],
           },
           then: String {
            parts: [
             Raw {
              content: "function",
              position: (257, 38),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "isList",
              position: (258, 15),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (258, 22),
              },
             ],
            },
            then: String {
             parts: [
              Raw {
               content: "list",
               position: (258, 30),
              },
             ],
            },
            else_: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               Variable {
                identifier: "x",
                position: (259, 15),
               },
               Variable {
                identifier: "true",
                position: (259, 20),
               },
              ],
              position: (259, 17),
             },
             then: String {
              parts: [
               Raw {
                content: "bool",
                position: (259, 31),
               },
              ],
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: EqualTo,
               operands: [
                Variable {
                 identifier: "x",
                 position: (260, 15),
                },
                Variable {
                 identifier: "false",
                 position: (260, 20),
                },
               ],
               position: (260, 17),
              },
              then: String {
               parts: [
                Raw {
                 content: "bool",
                 position: (260, 32),
                },
               ],
              },
              else_: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "x",
                  position: (261, 15),
                 },
                 Variable {
                  identifier: "null",
                  position: (261, 20),
                 },
                ],
                position: (261, 17),
               },
               then: String {
                parts: [
                 Raw {
                  content: "null",
                  position: (261, 31),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isInt",
                  position: (262, 15),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (262, 21),
                  },
                 ],
                },
                then: String {
                 parts: [
                  Raw {
                   content: "int",
                   position: (262, 29),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "string",
                   position: (263, 13),
                  },
                 ],
                },
                position: (262, 12),
               },
               position: (261, 12),
              },
              position: (260, 12),
             },
             position: (259, 12),
            },
            position: (258, 12),
           },
           position: (257, 12),
          },
          position: (254, 7),
         },
         position: (253, 13),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "imap",
           position: (272, 3),
          },
         ],
        },
        Variable {
         identifier: "imap1",
         position: (272, 10),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "fakeHash",
           position: (275, 3),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
           position: (275, 15),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "fakeSha256",
           position: (276, 3),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "0000000000000000000000000000000000000000000000000000000000000000",
           position: (276, 17),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "fakeSha512",
           position: (277, 3),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
           position: (277, 17),
          },
         ],
        },
       ),
      ],
      recursive: true,
      position: (11, 1),
     },
     position: (9, 1),
    },
    position: (8, 1),
   },
   position: (7, 1),
  },
  position: (2, 1),
 },
 position: (1, 1),
}