---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "options",
       position: (4, 3),
      },
     ],
    },
    Map {
     bindings: [
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "services",
          position: (5, 5),
         },
         Raw {
          content: "sysprof",
          position: (5, 14),
         },
        ],
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "enable",
             position: (6, 7),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (6, 16),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "mkEnableOption",
               position: (6, 20),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "sysprof profiling daemon",
               position: (6, 36),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (5, 24),
       },
      ),
     ],
     recursive: false,
     position: (4, 13),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "config",
       position: (10, 3),
      },
     ],
    },
    FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (10, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "mkIf",
         position: (10, 16),
        },
       ],
      },
      default: None,
     },
     arguments: [
      PropertyAccess {
       expression: Variable {
        identifier: "config",
        position: (10, 21),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "services",
          position: (10, 28),
         },
         Raw {
          content: "sysprof",
          position: (10, 37),
         },
         Raw {
          content: "enable",
          position: (10, 45),
         },
        ],
       },
       default: None,
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "environment",
            position: (11, 5),
           },
           Raw {
            content: "systemPackages",
            position: (11, 17),
           },
          ],
         },
         List {
          elements: [
           PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (11, 36),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "sysprof",
               position: (11, 41),
              },
             ],
            },
            default: None,
           },
          ],
          position: (11, 34),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (13, 5),
           },
           Raw {
            content: "dbus",
            position: (13, 14),
           },
           Raw {
            content: "packages",
            position: (13, 19),
           },
          ],
         },
         List {
          elements: [
           PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (13, 32),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "sysprof",
               position: (13, 37),
              },
             ],
            },
            default: None,
           },
          ],
          position: (13, 30),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "systemd",
            position: (15, 5),
           },
           Raw {
            content: "packages",
            position: (15, 13),
           },
          ],
         },
         List {
          elements: [
           PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (15, 26),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "sysprof",
               position: (15, 31),
              },
             ],
            },
            default: None,
           },
          ],
          position: (15, 24),
         },
        ),
       ],
       recursive: false,
       position: (10, 52),
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "meta",
       position: (18, 3),
      },
      Raw {
       content: "maintainers",
       position: (18, 8),
      },
     ],
    },
    PropertyAccess {
     expression: Variable {
      identifier: "pkgs",
      position: (18, 22),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "sysprof",
        position: (18, 27),
       },
       Raw {
        content: "meta",
        position: (18, 35),
       },
       Raw {
        content: "maintainers",
        position: (18, 40),
       },
      ],
     },
     default: None,
    },
   ),
  ],
  recursive: false,
  position: (3, 1),
 },
 position: (1, 1),
}