---
Î“ := rules "expr"
  expr := rules "expr_function"
    expr_function := rules "{" "formals" "}" ":" "expr_function"
      { := lexemes "{"
        { "{" (1, 1)
      formals := rules "formal" "," "formals"
        formal := rules "ID"
          ID := lexemes "ID"
            ID "stdenv" (1, 3)
        , := lexemes ","
          , "," (1, 9)
        formals := rules "formal" "," "formals"
          formal := rules "ID"
            ID := lexemes "ID"
              ID "rust" (1, 11)
          , := lexemes ","
            , "," (1, 15)
          formals := rules "formal" "," "formals"
            formal := rules "ID"
              ID := lexemes "ID"
                ID "rustPlatform" (1, 17)
            , := lexemes ","
              , "," (1, 29)
            formals := rules "formal"
              formal := rules "ID"
                ID := lexemes "ID"
                  ID "buildPackages" (1, 31)
      } := lexemes "}"
        } "}" (1, 45)
      : := lexemes ":"
        : ":" (1, 46)
      expr_function := rules "{" "formals" "}" ":" "expr_function"
        { := lexemes "{"
          { "{" (3, 1)
        formals := rules "formal" "," "formals"
          formal := rules "ID"
            ID := lexemes "ID"
              ID "shortTarget" (3, 3)
          , := lexemes ","
            , "," (3, 14)
          formals := rules "formal" "," "formals"
            formal := rules "ID"
              ID := lexemes "ID"
                ID "originalCargoToml" (3, 16)
            , := lexemes ","
              , "," (3, 33)
            formals := rules "formal" "," "formals"
              formal := rules "ID"
                ID := lexemes "ID"
                  ID "target" (3, 35)
              , := lexemes ","
                , "," (3, 41)
              formals := rules "formal"
                formal := rules "ID"
                  ID := lexemes "ID"
                    ID "RUSTFLAGS" (3, 43)
        } := lexemes "}"
          } "}" (3, 53)
        : := lexemes ":"
          : ":" (3, 54)
        expr_function := rules "LET" "binds" "IN" "expr_function"
          LET := lexemes "LET"
            LET "let" (5, 1)
          binds := rules "binds" "attrpath" "=" "expr" ";"
            binds := rules 
            attrpath := rules "attr"
              attr := rules "ID"
                ID := lexemes "ID"
                  ID "cargoSrc" (6, 3)
            = := lexemes "="
              = "=" (6, 12)
            expr := rules "expr_function"
              expr_function := rules "expr_if"
                expr_if := rules "expr_op"
                  expr_op := rules "expr_app"
                    expr_app := rules "expr_app" "expr_select"
                      expr_app := rules "expr_app" "expr_select"
                        expr_app := rules "expr_select"
                          expr_select := rules "expr_simple"
                            expr_simple := rules "ID"
                              ID := lexemes "ID"
                                ID "import" (6, 14)
                        expr_select := rules "expr_simple"
                          expr_simple := rules "path_start" "PATH_END"
                            path_start := rules "PATH"
                              PATH := lexemes "PATH"
                                PATH "../../sysroot/src.nix" (6, 21)
                            PATH_END := lexemes "PATH_END"
                              PATH_END " " (6, 42)
                      expr_select := rules "expr_simple"
                        expr_simple := rules "{" "binds" "}"
                          { := lexemes "{"
                            { "{" (6, 43)
                          binds := rules "binds" "INHERIT" "attrs" ";"
                            binds := rules 
                            INHERIT := lexemes "INHERIT"
                              INHERIT "inherit" (7, 5)
                            attrs := rules "attrs" "attr"
                              attrs := rules "attrs" "attr"
                                attrs := rules "attrs" "attr"
                                  attrs := rules "attrs" "attr"
                                    attrs := rules 
                                    attr := rules "ID"
                                      ID := lexemes "ID"
                                        ID "stdenv" (7, 13)
                                  attr := rules "ID"
                                    ID := lexemes "ID"
                                      ID "rustPlatform" (7, 20)
                                attr := rules "ID"
                                  ID := lexemes "ID"
                                    ID "buildPackages" (7, 33)
                              attr := rules "ID"
                                ID := lexemes "ID"
                                  ID "originalCargoToml" (7, 47)
                            ; := lexemes ";"
                              ; ";" (7, 64)
                          } := lexemes "}"
                            } "}" (8, 3)
            ; := lexemes ";"
              ; ";" (8, 4)
          IN := lexemes "IN"
            IN "in" (9, 1)
          expr_function := rules "expr_if"
            expr_if := rules "expr_op"
              expr_op := rules "expr_app"
                expr_app := rules "expr_app" "expr_select"
                  expr_app := rules "expr_select"
                    expr_select := rules "expr_simple" "." "attrpath"
                      expr_simple := rules "ID"
                        ID := lexemes "ID"
                          ID "rustPlatform" (9, 4)
                      . := lexemes "."
                        . "." (9, 16)
                      attrpath := rules "attr"
                        attr := rules "ID"
                          ID := lexemes "ID"
                            ID "buildRustPackage" (9, 17)
                  expr_select := rules "expr_simple"
                    expr_simple := rules "{" "binds" "}"
                      { := lexemes "{"
                        { "{" (9, 34)
                      binds := rules "binds" "attrpath" "=" "expr" ";"
                        binds := rules "binds" "attrpath" "=" "expr" ";"
                          binds := rules "binds" "attrpath" "=" "expr" ";"
                            binds := rules "binds" "attrpath" "=" "expr" ";"
                              binds := rules "binds" "attrpath" "=" "expr" ";"
                                binds := rules "binds" "attrpath" "=" "expr" ";"
                                  binds := rules "binds" "attrpath" "=" "expr" ";"
                                    binds := rules "binds" "INHERIT" "attrs" ";"
                                      binds := rules 
                                      INHERIT := lexemes "INHERIT"
                                        INHERIT "inherit" (10, 3)
                                      attrs := rules "attrs" "attr"
                                        attrs := rules "attrs" "attr"
                                          attrs := rules 
                                          attr := rules "ID"
                                            ID := lexemes "ID"
                                              ID "target" (10, 11)
                                        attr := rules "ID"
                                          ID := lexemes "ID"
                                            ID "RUSTFLAGS" (10, 18)
                                      ; := lexemes ";"
                                        ; ";" (10, 27)
                                    attrpath := rules "attr"
                                      attr := rules "ID"
                                        ID := lexemes "ID"
                                          ID "name" (12, 3)
                                    = := lexemes "="
                                      = "=" (12, 8)
                                    expr := rules "expr_function"
                                      expr_function := rules "expr_if"
                                        expr_if := rules "expr_op"
                                          expr_op := rules "expr_app"
                                            expr_app := rules "expr_select"
                                              expr_select := rules "expr_simple"
                                                expr_simple := rules "\"" "string_parts" "\""
                                                  " := lexemes "\""
                                                    " "\"" (12, 10)
                                                  string_parts := rules "STR"
                                                    STR := lexemes "STR"
                                                      STR "custom-sysroot" (12, 11)
                                                  " := lexemes "\""
                                                    " "\"" (12, 25)
                                    ; := lexemes ";"
                                      ; ";" (12, 26)
                                  attrpath := rules "attr"
                                    attr := rules "ID"
                                      ID := lexemes "ID"
                                        ID "src" (13, 3)
                                  = := lexemes "="
                                    = "=" (13, 7)
                                  expr := rules "expr_function"
                                    expr_function := rules "expr_if"
                                      expr_if := rules "expr_op"
                                        expr_op := rules "expr_app"
                                          expr_app := rules "expr_select"
                                            expr_select := rules "expr_simple"
                                              expr_simple := rules "ID"
                                                ID := lexemes "ID"
                                                  ID "cargoSrc" (13, 10)
                                  ; := lexemes ";"
                                    ; ";" (13, 18)
                                attrpath := rules "attr"
                                  attr := rules "ID"
                                    ID := lexemes "ID"
                                      ID "RUSTC_BOOTSTRAP" (15, 3)
                                = := lexemes "="
                                  = "=" (15, 19)
                                expr := rules "expr_function"
                                  expr_function := rules "expr_if"
                                    expr_if := rules "expr_op"
                                      expr_op := rules "expr_app"
                                        expr_app := rules "expr_select"
                                          expr_select := rules "expr_simple"
                                            expr_simple := rules "INT"
                                              INT := lexemes "INT"
                                                INT "1" (15, 21)
                                ; := lexemes ";"
                                  ; ";" (15, 22)
                              attrpath := rules "attr"
                                attr := rules "ID"
                                  ID := lexemes "ID"
                                    ID "__internal_dontAddSysroot" (16, 3)
                              = := lexemes "="
                                = "=" (16, 29)
                              expr := rules "expr_function"
                                expr_function := rules "expr_if"
                                  expr_if := rules "expr_op"
                                    expr_op := rules "expr_app"
                                      expr_app := rules "expr_select"
                                        expr_select := rules "expr_simple"
                                          expr_simple := rules "ID"
                                            ID := lexemes "ID"
                                              ID "true" (16, 31)
                              ; := lexemes ";"
                                ; ";" (16, 35)
                            attrpath := rules "attr"
                              attr := rules "ID"
                                ID := lexemes "ID"
                                  ID "cargoSha256" (17, 3)
                            = := lexemes "="
                              = "=" (17, 15)
                            expr := rules "expr_function"
                              expr_function := rules "expr_if"
                                expr_if := rules "expr_op"
                                  expr_op := rules "expr_app"
                                    expr_app := rules "expr_select"
                                      expr_select := rules "expr_simple"
                                        expr_simple := rules "\"" "string_parts" "\""
                                          " := lexemes "\""
                                            " "\"" (17, 17)
                                          string_parts := rules "STR"
                                            STR := lexemes "STR"
                                              STR "0y6dqfhsgk00y3fv5bnjzk0s7i30nwqc1rp0xlrk83hkh80x81mw" (17, 18)
                                          " := lexemes "\""
                                            " "\"" (17, 70)
                            ; := lexemes ";"
                              ; ";" (17, 71)
                          attrpath := rules "attr"
                            attr := rules "ID"
                              ID := lexemes "ID"
                                ID "doCheck" (19, 3)
                          = := lexemes "="
                            = "=" (19, 11)
                          expr := rules "expr_function"
                            expr_function := rules "expr_if"
                              expr_if := rules "expr_op"
                                expr_op := rules "expr_app"
                                  expr_app := rules "expr_select"
                                    expr_select := rules "expr_simple"
                                      expr_simple := rules "ID"
                                        ID := lexemes "ID"
                                          ID "false" (19, 13)
                          ; := lexemes ";"
                            ; ";" (19, 18)
                        attrpath := rules "attr"
                          attr := rules "ID"
                            ID := lexemes "ID"
                              ID "installPhase" (21, 3)
                        = := lexemes "="
                          = "=" (21, 16)
                        expr := rules "expr_function"
                          expr_function := rules "expr_if"
                            expr_if := rules "expr_op"
                              expr_op := rules "expr_app"
                                expr_app := rules "expr_select"
                                  expr_select := rules "expr_simple"
                                    expr_simple := rules "IND_STRING_OPEN" "ind_string_parts" "IND_STRING_CLOSE"
                                      IND_STRING_OPEN := lexemes "IND_STRING_OPEN"
                                        IND_STRING_OPEN "''\n" (21, 18)
                                      ind_string_parts := rules "ind_string_parts" "IND_STR"
                                        ind_string_parts := rules "ind_string_parts" "DOLLAR_CURLY" "expr" "}"
                                          ind_string_parts := rules "ind_string_parts" "IND_STR"
                                            ind_string_parts := rules "ind_string_parts" "DOLLAR_CURLY" "expr" "}"
                                              ind_string_parts := rules "ind_string_parts" "IND_STR"
                                                ind_string_parts := rules "ind_string_parts" "DOLLAR_CURLY" "expr" "}"
                                                  ind_string_parts := rules "ind_string_parts" "IND_STR"
                                                    ind_string_parts := rules 
                                                    IND_STR := lexemes "IND_STR"
                                                      IND_STR "    export LIBS_DIR=$out/lib/rustlib/" (22, 1)
                                                  DOLLAR_CURLY := lexemes "DOLLAR_CURLY"
                                                    DOLLAR_CURLY "${" (22, 38)
                                                  expr := rules "expr_function"
                                                    expr_function := rules "expr_if"
                                                      expr_if := rules "expr_op"
                                                        expr_op := rules "expr_app"
                                                          expr_app := rules "expr_select"
                                                            expr_select := rules "expr_simple"
                                                              expr_simple := rules "ID"
                                                                ID := lexemes "ID"
                                                                  ID "shortTarget" (22, 40)
                                                  } := lexemes "}"
                                                    } "}" (22, 51)
                                                IND_STR := lexemes "IND_STR"
                                                  IND_STR "/lib\n    mkdir -p $LIBS_DIR\n    for f in target/" (22, 52)
                                              DOLLAR_CURLY := lexemes "DOLLAR_CURLY"
                                                DOLLAR_CURLY "${" (24, 21)
                                              expr := rules "expr_function"
                                                expr_function := rules "expr_if"
                                                  expr_if := rules "expr_op"
                                                    expr_op := rules "expr_app"
                                                      expr_app := rules "expr_select"
                                                        expr_select := rules "expr_simple"
                                                          expr_simple := rules "ID"
                                                            ID := lexemes "ID"
                                                              ID "shortTarget" (24, 23)
                                              } := lexemes "}"
                                                } "}" (24, 34)
                                            IND_STR := lexemes "IND_STR"
                                              IND_STR "/release/deps/*.{rlib,rmeta}; do\n      cp $f $LIBS_DIR\n    done\n\n    export RUST_SYSROOT=$(rustc --print=sysroot)\n    host=" (24, 35)
                                          DOLLAR_CURLY := lexemes "DOLLAR_CURLY"
                                            DOLLAR_CURLY "${" (29, 10)
                                          expr := rules "expr_function"
                                            expr_function := rules "expr_if"
                                              expr_if := rules "expr_op"
                                                expr_op := rules "expr_app"
                                                  expr_app := rules "expr_app" "expr_select"
                                                    expr_app := rules "expr_select"
                                                      expr_select := rules "expr_simple" "." "attrpath"
                                                        expr_simple := rules "ID"
                                                          ID := lexemes "ID"
                                                            ID "rust" (29, 12)
                                                        . := lexemes "."
                                                          . "." (29, 16)
                                                        attrpath := rules "attr"
                                                          attr := rules "ID"
                                                            ID := lexemes "ID"
                                                              ID "toRustTarget" (29, 17)
                                                    expr_select := rules "expr_simple" "." "attrpath"
                                                      expr_simple := rules "ID"
                                                        ID := lexemes "ID"
                                                          ID "stdenv" (29, 30)
                                                      . := lexemes "."
                                                        . "." (29, 36)
                                                      attrpath := rules "attr"
                                                        attr := rules "ID"
                                                          ID := lexemes "ID"
                                                            ID "buildPlatform" (29, 37)
                                          } := lexemes "}"
                                            } "}" (29, 50)
                                        IND_STR := lexemes "IND_STR"
                                          IND_STR "\n    cp -r $RUST_SYSROOT/lib/rustlib/$host $out\n  " (29, 51)
                                      IND_STRING_CLOSE := lexemes "IND_STRING_CLOSE"
                                        IND_STRING_CLOSE "''" (31, 3)
                        ; := lexemes ";"
                          ; ";" (31, 5)
                      } := lexemes "}"
                        } "}" (32, 1)