---
Function {
 argument: Some(
  "evalConfigArgs",
 ),
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "extraModules",
    default: Some(
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "e",
           position: (29, 22),
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (29, 26),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "getEnv",
             position: (29, 35),
            },
           ],
          },
          default: None,
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "NIXOS_EXTRA_MODULE_PATH",
            },
           ],
           position: (29, 42),
          },
         ],
        },
       ),
      ],
      target: IfThenElse {
       predicate: BinaryOperation {
        operator: EqualTo,
        operands: [
         Variable {
          identifier: "e",
          position: (30, 24),
         },
         String {
          parts: [],
          position: (30, 29),
         },
        ],
        position: (30, 26),
       },
       then: List {
        elements: [],
        position: (30, 37),
       },
       else_: List {
        elements: [
         FunctionApplication {
          function: Variable {
           identifier: "import",
           position: (30, 47),
          },
          arguments: [
           Variable {
            identifier: "e",
            position: (30, 54),
           },
          ],
         },
        ],
        position: (30, 45),
       },
       position: (30, 21),
      },
      position: (29, 18),
     },
    ),
   },
   FunctionArgument {
    identifier: "lib",
    default: Some(
     FunctionApplication {
      function: Variable {
       identifier: "import",
       position: (28, 9),
      },
      arguments: [
       Path {
        parts: [
         Raw {
          content: "../../lib",
         },
        ],
        position: (28, 16),
       },
      ],
     },
    ),
   },
   FunctionArgument {
    identifier: "prefix",
    default: Some(
     List {
      elements: [],
      position: (27, 12),
     },
    ),
   },
   FunctionArgument {
    identifier: "check",
    default: Some(
     Variable {
      identifier: "true",
      position: (26, 11),
     },
    ),
   },
   FunctionArgument {
    identifier: "modulesLocation",
    default: Some(
     PropertyAccess {
      expression: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (24, 22),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "unsafeGetAttrPos",
           position: (24, 31),
          },
         ],
        },
        default: None,
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "modules",
          },
         ],
         position: (24, 48),
        },
        Variable {
         identifier: "evalConfigArgs",
         position: (24, 58),
        },
       ],
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "file",
         position: (24, 74),
        },
       ],
      },
      default: Some(
       Variable {
        identifier: "null",
        position: (24, 82),
       },
      ),
     },
    ),
   },
   FunctionArgument {
    identifier: "modules",
    default: None,
   },
   FunctionArgument {
    identifier: "specialArgs",
    default: Some(
     Map {
      bindings: [],
      recursive: false,
      position: (22, 17),
     },
    ),
   },
   FunctionArgument {
    identifier: "extraArgs",
    default: Some(
     Map {
      bindings: [],
      recursive: false,
      position: (20, 15),
     },
    ),
   },
   FunctionArgument {
    identifier: "baseModules",
    default: Some(
     FunctionApplication {
      function: Variable {
       identifier: "import",
       position: (18, 17),
      },
      arguments: [
       Path {
        parts: [
         Raw {
          content: "../modules/module-list.nix",
         },
        ],
        position: (18, 24),
       },
      ],
     },
    ),
   },
   FunctionArgument {
    identifier: "pkgs",
    default: Some(
     Variable {
      identifier: "null",
      position: (16, 10),
     },
    ),
   },
   FunctionArgument {
    identifier: "system",
    default: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (13, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "currentSystem",
         position: (13, 21),
        },
       ],
      },
      default: None,
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "pkgs_",
       position: (33, 5),
      },
     ],
    },
    Variable {
     identifier: "pkgs",
     position: (33, 13),
    },
   ),
  ],
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "evalModulesMinimal",
        position: (37, 3),
       },
      ],
     },
     PropertyAccess {
      expression: FunctionApplication {
       function: Variable {
        identifier: "import",
        position: (37, 25),
       },
       arguments: [
        Path {
         parts: [
          Raw {
           content: "./default.nix",
          },
         ],
         position: (37, 32),
        },
        Map {
         bindings: [
          Inherit {
           from: None,
           attributes: [
            Raw {
             content: "lib",
             position: (38, 13),
            },
           ],
          },
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "featureFlags",
              position: (40, 5),
             },
             Raw {
              content: "minimalModules",
              position: (40, 18),
             },
            ],
           },
           Map {
            bindings: [],
            recursive: false,
            position: (40, 35),
           },
          ),
         ],
         recursive: false,
         position: (37, 46),
        },
       ],
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "evalModules",
         position: (41, 6),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pkgsModule",
        position: (43, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "_file",
           position: (44, 5),
          },
         ],
        },
        Path {
         parts: [
          Raw {
           content: "./eval-config.nix",
          },
         ],
         position: (44, 13),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "key",
           position: (45, 5),
          },
         ],
        },
        Variable {
         identifier: "_file",
         position: (45, 11),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (46, 5),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "nixpkgs",
              position: (51, 7),
             },
             Raw {
              content: "system",
              position: (51, 15),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (51, 24),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "mkDefault",
                position: (51, 28),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "system",
              position: (51, 38),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "nixpkgs",
              position: (56, 7),
             },
             Raw {
              content: "initialSystem",
              position: (56, 15),
             },
            ],
           },
           Variable {
            identifier: "system",
            position: (56, 31),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "_module",
              position: (58, 7),
             },
             Raw {
              content: "args",
              position: (58, 15),
             },
             Raw {
              content: "pkgs",
              position: (58, 20),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (58, 27),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "mkIf",
                position: (58, 31),
               },
              ],
             },
             default: None,
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "pkgs_",
                position: (58, 37),
               },
               Variable {
                identifier: "null",
                position: (58, 46),
               },
              ],
              position: (58, 43),
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (58, 53),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mkForce",
                  position: (58, 57),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "pkgs_",
                position: (58, 65),
               },
              ],
             },
            ],
           },
          ),
         ],
         recursive: false,
         position: (46, 14),
        },
       ),
      ],
      recursive: true,
      position: (43, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "withWarnings",
        position: (62, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (63, 5),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "warnIf",
           position: (63, 9),
          },
         ],
        },
        default: None,
       },
       arguments: [
        HasProperty {
         expression: Variable {
          identifier: "evalConfigArgs",
          position: (63, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "extraArgs",
            position: (63, 32),
           },
          ],
         },
         position: (63, 31),
        },
        String {
         parts: [
          Raw {
           content: "The extraArgs argument to eval-config.nix is deprecated. Please set config._module.args instead.",
          },
         ],
         position: (63, 43),
        },
        PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (64, 5),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "warnIf",
            position: (64, 9),
           },
          ],
         },
         default: None,
        },
        HasProperty {
         expression: Variable {
          identifier: "evalConfigArgs",
          position: (64, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "check",
            position: (64, 32),
           },
          ],
         },
         position: (64, 31),
        },
        String {
         parts: [
          Raw {
           content: "The check argument to eval-config.nix is deprecated. Please set config._module.check instead.",
          },
         ],
         position: (64, 39),
        },
        Variable {
         identifier: "x",
         position: (65, 5),
        },
       ],
      },
      position: (62, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "legacyModules",
        position: (67, 3),
       },
      ],
     },
     BinaryOperation {
      operator: Concatenation,
      operands: [
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (68, 5),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "optional",
            position: (68, 9),
           },
          ],
         },
         default: None,
        },
        arguments: [
         HasProperty {
          expression: Variable {
           identifier: "evalConfigArgs",
           position: (68, 19),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "extraArgs",
             position: (68, 34),
            },
           ],
          },
          position: (68, 33),
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "config",
               position: (69, 7),
              },
             ],
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "_module",
                  position: (70, 9),
                 },
                 Raw {
                  content: "args",
                  position: (70, 17),
                 },
                ],
               },
               Variable {
                identifier: "extraArgs",
                position: (70, 24),
               },
              ),
             ],
             recursive: false,
             position: (69, 16),
            },
           ),
          ],
          recursive: false,
          position: (68, 45),
         },
        ],
       },
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (73, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "optional",
            position: (73, 12),
           },
          ],
         },
         default: None,
        },
        arguments: [
         HasProperty {
          expression: Variable {
           identifier: "evalConfigArgs",
           position: (73, 22),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "check",
             position: (73, 37),
            },
           ],
          },
          position: (73, 36),
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "config",
               position: (74, 7),
              },
             ],
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "_module",
                  position: (75, 9),
                 },
                 Raw {
                  content: "check",
                  position: (75, 17),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (75, 25),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "mkDefault",
                    position: (75, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "check",
                  position: (75, 39),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (74, 16),
            },
           ),
          ],
          recursive: false,
          position: (73, 44),
         },
        ],
       },
      ],
      position: (73, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "allUserModules",
        position: (79, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "locatedModules",
           position: (83, 7),
          },
         ],
        },
        IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "modulesLocation",
            position: (84, 12),
           },
           Variable {
            identifier: "null",
            position: (84, 31),
           },
          ],
          position: (84, 28),
         },
         then: Variable {
          identifier: "modules",
          position: (85, 11),
         },
         else_: FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (87, 11),
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (87, 16),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "setDefaultModuleLocation",
                position: (87, 20),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "modulesLocation",
              position: (87, 45),
             },
            ],
           },
           Variable {
            identifier: "modules",
            position: (87, 62),
           },
          ],
         },
         position: (84, 9),
        },
       ),
      ],
      target: BinaryOperation {
       operator: Concatenation,
       operands: [
        Variable {
         identifier: "locatedModules",
         position: (89, 7),
        },
        Variable {
         identifier: "legacyModules",
         position: (89, 25),
        },
       ],
       position: (89, 22),
      },
      position: (80, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "noUserModules",
        position: (91, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "evalModulesMinimal",
       position: (91, 19),
      },
      arguments: [
       Map {
        bindings: [
         Inherit {
          from: None,
          attributes: [
           Raw {
            content: "prefix",
            position: (92, 13),
           },
           Raw {
            content: "specialArgs",
            position: (92, 20),
           },
          ],
         },
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "modules",
             position: (93, 5),
            },
           ],
          },
          BinaryOperation {
           operator: Concatenation,
           operands: [
            Variable {
             identifier: "baseModules",
             position: (93, 15),
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              Variable {
               identifier: "extraModules",
               position: (93, 30),
              },
              List {
               elements: [
                Variable {
                 identifier: "pkgsModule",
                 position: (93, 48),
                },
                Variable {
                 identifier: "modulesModule",
                 position: (93, 59),
                },
               ],
               position: (93, 46),
              },
             ],
             position: (93, 43),
            },
           ],
           position: (93, 27),
          },
         ),
        ],
        recursive: false,
        position: (91, 39),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "modulesModule",
        position: (97, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (98, 5),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "_module",
              position: (99, 7),
             },
             Raw {
              content: "args",
              position: (99, 15),
             },
            ],
           },
           Map {
            bindings: [
             Inherit {
              from: None,
              attributes: [
               Raw {
                content: "noUserModules",
                position: (100, 17),
               },
               Raw {
                content: "baseModules",
                position: (100, 31),
               },
               Raw {
                content: "extraModules",
                position: (100, 43),
               },
               Raw {
                content: "modules",
                position: (100, 56),
               },
              ],
             },
            ],
            recursive: false,
            position: (99, 22),
           },
          ),
         ],
         recursive: false,
         position: (98, 14),
        },
       ),
      ],
      recursive: false,
      position: (97, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nixosWithUserModules",
        position: (105, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "noUserModules",
        position: (105, 26),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "extendModules",
          position: (105, 40),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "modules",
             position: (105, 56),
            },
           ],
          },
          Variable {
           identifier: "allUserModules",
           position: (105, 66),
          },
         ),
        ],
        recursive: false,
        position: (105, 54),
       },
      ],
     },
    ),
   ],
   target: BinaryOperation {
    operator: Update,
    operands: [
     FunctionApplication {
      function: Variable {
       identifier: "withWarnings",
       position: (108, 1),
      },
      arguments: [
       Variable {
        identifier: "nixosWithUserModules",
        position: (108, 14),
       },
      ],
     },
     Map {
      bindings: [
       Inherit {
        from: None,
        attributes: [
         Raw {
          content: "extraArgs",
          position: (109, 11),
         },
        ],
       },
       Inherit {
        from: Some(
         PropertyAccess {
          expression: Variable {
           identifier: "nixosWithUserModules",
           position: (110, 12),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "_module",
             position: (110, 33),
            },
            Raw {
             content: "args",
             position: (110, 41),
            },
           ],
          },
          default: None,
         },
        ),
        attributes: [
         Raw {
          content: "pkgs",
          position: (110, 47),
         },
        ],
       },
      ],
      recursive: false,
      position: (108, 38),
     },
    ],
    position: (108, 35),
   },
   position: (36, 1),
  },
  position: (33, 1),
 },
 position: (11, 1),
}