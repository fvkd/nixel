---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "ananicy",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configFile",
        position: (7, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (7, 16),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (7, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "ananicy.conf",
         },
        ],
        position: (7, 31),
       },
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "generators",
          position: (7, 47),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "toKeyValue",
            position: (7, 58),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Map {
          bindings: [],
          recursive: false,
          position: (7, 69),
         },
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (7, 73),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "settings",
             position: (7, 77),
            },
           ],
          },
          default: None,
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "extraRules",
        position: (8, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (8, 16),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (8, 21),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "extraRules",
         },
        ],
        position: (8, 31),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (8, 44),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "extraRules",
           position: (8, 48),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "servicename",
        position: (9, 3),
       },
      ],
     },
     IfThenElse {
      predicate: BinaryOperation {
       operator: EqualTo,
       operands: [
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (9, 22),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "getName",
             position: (9, 26),
            },
           ],
          },
          default: None,
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (9, 34),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "package",
              position: (9, 38),
             },
            ],
           },
           default: None,
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (9, 51),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "getName",
             position: (9, 55),
            },
           ],
          },
          default: None,
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (9, 63),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "ananicy-cpp",
              position: (9, 68),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ],
       position: (9, 47),
      },
      then: String {
       parts: [
        Raw {
         content: "ananicy-cpp",
        },
       ],
       position: (9, 87),
      },
      else_: String {
       parts: [
        Raw {
         content: "ananicy",
        },
       ],
       position: (9, 106),
      },
      position: (9, 17),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (12, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (13, 5),
           },
           Raw {
            content: "ananicy",
            position: (13, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (14, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (14, 16),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "Ananicy, an auto nice daemon",
                },
               ],
               position: (14, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "package",
               position: (16, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (16, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (17, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (17, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "package",
                     position: (17, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (18, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (18, 19),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "ananicy",
                     position: (18, 24),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (19, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (19, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.ananicy",
                     },
                    ],
                    position: (19, 41),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (20, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (20, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.ananicy-cpp",
                     },
                    ],
                    position: (20, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (21, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Which ananicy package to use.\n",
                   },
                  ],
                  position: (21, 23),
                 },
                ),
               ],
               recursive: false,
               position: (16, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "settings",
               position: (26, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (26, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (27, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (27, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (27, 28),
                   },
                   arguments: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "oneOf",
                      position: (27, 37),
                     },
                     arguments: [
                      List {
                       elements: [
                        Variable {
                         identifier: "int",
                         position: (27, 45),
                        },
                        Variable {
                         identifier: "bool",
                         position: (27, 49),
                        },
                        Variable {
                         identifier: "str",
                         position: (27, 54),
                        },
                       ],
                       position: (27, 43),
                      },
                     ],
                    },
                   ],
                  },
                  position: (27, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (28, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (28, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (29, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "apply_nice",
                       position: (30, 11),
                      },
                     ],
                    },
                    Variable {
                     identifier: "false",
                     position: (30, 24),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (29, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (32, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "See <link xlink:href=\"https://github.com/Nefelim4ag/Ananicy/blob/master/ananicy.d/ananicy.conf\"/>\n",
                   },
                  ],
                  position: (32, 23),
                 },
                ),
               ],
               recursive: false,
               position: (26, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraRules",
               position: (37, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (37, 20),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (38, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (38, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "str",
                     position: (38, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (39, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                  position: (39, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (40, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Extra rules in json format on separate lines. See:\n<link xlink:href=\"https://github.com/Nefelim4ag/Ananicy#configuration\"/>\n<link xlink:href=\"https://gitlab.com/ananicy-cpp/ananicy-cpp/#global-configuration\"/>\n",
                   },
                  ],
                  position: (40, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (45, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (45, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "",
                     },
                     Raw {
                      content: "''",
                     },
                     Raw {
                      content: "\n  { \"name\": \"eog\", \"type\": \"Image-View\" }\n  { \"name\": \"fdupes\", \"type\": \"BG_CPUIO\" }\n",
                     },
                     Raw {
                      content: "''",
                     },
                     Raw {
                      content: "\n",
                     },
                    ],
                    position: (45, 37),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (37, 29),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (13, 24),
         },
        ),
       ],
       recursive: false,
       position: (12, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (56, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (56, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (56, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (56, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (57, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "systemPackages",
                 position: (58, 7),
                },
               ],
              },
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (58, 26),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "package",
                    position: (58, 30),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (58, 24),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "etc",
                 position: (59, 7),
                },
                Expression {
                 expression: __StringParts(
                  [
                   Raw {
                    content: "ananicy.d",
                   },
                  ],
                 ),
                },
                Raw {
                 content: "source",
                 position: (59, 23),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (59, 32),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "runCommandLocal",
                   position: (59, 37),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "ananicyfiles",
                  },
                 ],
                 position: (59, 53),
                },
                Map {
                 bindings: [],
                 recursive: false,
                 position: (59, 68),
                },
                String {
                 parts: [
                  Raw {
                   content: "mkdir -p $out\n# ananicy-cpp does not include rules or settings on purpose\ncp -r ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (62, 17),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "ananicy",
                       position: (62, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/etc/ananicy.d/* $out\nrm $out/ananicy.conf\ncp ",
                  },
                  Expression {
                   expression: Variable {
                    identifier: "configFile",
                    position: (64, 14),
                   },
                  },
                  Raw {
                   content: " $out/ananicy.conf\n",
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "optionalString",
                     position: (65, 11),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (65, 27),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "extraRules",
                           position: (65, 31),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [],
                        position: (65, 45),
                       },
                      ],
                      position: (65, 42),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "cp ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "extraRules",
                         position: (65, 55),
                        },
                       },
                       Raw {
                        content: " $out/nixRules.rules",
                       },
                      ],
                      position: (65, 49),
                     },
                    ],
                   },
                  },
                  Raw {
                   content: "\n",
                  },
                 ],
                 position: (59, 72),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (57, 19),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (70, 5),
             },
             Raw {
              content: "ananicy",
              position: (70, 14),
             },
             Raw {
              content: "settings",
              position: (70, 22),
             },
            ],
           },
           LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "mkOD",
                 position: (72, 9),
                },
               ],
              },
              Variable {
               identifier: "mkOptionDefault",
               position: (72, 16),
              },
             ),
            ],
            target: BinaryOperation {
             operator: Update,
             operands: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "cgroup_load",
                    position: (75, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (75, 23),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (75, 28),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type_load",
                    position: (76, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (76, 21),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (76, 26),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "rule_load",
                    position: (77, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (77, 21),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (77, 26),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_nice",
                    position: (78, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (78, 22),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (78, 27),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_ioclass",
                    position: (79, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (79, 25),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (79, 30),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_ionice",
                    position: (80, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (80, 24),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (80, 29),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_sched",
                    position: (81, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (81, 23),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (81, 28),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_oom_score_adj",
                    position: (82, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (82, 31),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (82, 36),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply_cgroup",
                    position: (83, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mkOD",
                   position: (83, 24),
                  },
                  arguments: [
                   Variable {
                    identifier: "true",
                    position: (83, 29),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (74, 7),
              },
              IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (84, 18),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "getName",
                      position: (84, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (84, 30),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "package",
                       position: (84, 34),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (84, 47),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "getName",
                      position: (84, 51),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (84, 59),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "ananicy-cpp",
                       position: (84, 64),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ],
                position: (84, 43),
               },
               then: Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "loglevel",
                     position: (86, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkOD",
                    position: (86, 20),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "warn",
                      },
                     ],
                     position: (86, 25),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "cgroup_realtime_workaround",
                     position: (87, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkOD",
                    position: (87, 38),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "config",
                      position: (87, 43),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "systemd",
                        position: (87, 50),
                       },
                       Raw {
                        content: "enableUnifiedCgroupHierarchy",
                        position: (87, 58),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (84, 83),
               },
               else_: Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "check_disks_schedulers",
                     position: (90, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkOD",
                    position: (90, 34),
                   },
                   arguments: [
                    Variable {
                     identifier: "true",
                     position: (90, 39),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "check_freq",
                     position: (91, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkOD",
                    position: (91, 22),
                   },
                   arguments: [
                    Int {
                     value: 5,
                     position: (91, 27),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (88, 14),
               },
               position: (84, 13),
              },
             ],
             position: (84, 9),
            },
            position: (71, 7),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (94, 5),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "enableUnifiedCgroupHierarchy",
                 position: (96, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "mkDefault",
                position: (96, 38),
               },
               arguments: [
                Variable {
                 identifier: "false",
                 position: (96, 48),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "packages",
                 position: (97, 7),
                },
               ],
              },
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (97, 20),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "package",
                    position: (97, 24),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (97, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "services",
                 position: (98, 7),
                },
                Expression {
                 expression: __StringParts(
                  [
                   Expression {
                    expression: Variable {
                     identifier: "servicename",
                     position: (98, 19),
                    },
                   },
                  ],
                 ),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "wantedBy",
                    position: (99, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "default.target",
                     },
                    ],
                    position: (99, 22),
                   },
                  ],
                  position: (99, 20),
                 },
                ),
               ],
               recursive: false,
               position: (98, 35),
              },
             ),
            ],
            recursive: false,
            position: (94, 15),
           },
          ),
         ],
         recursive: false,
         position: (56, 28),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "meta",
         position: (104, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "maintainers",
            position: (105, 5),
           },
          ],
         },
         With {
          expression: Variable {
           identifier: "maintainers",
           position: (105, 24),
          },
          target: List {
           elements: [
            Variable {
             identifier: "artturin",
             position: (105, 39),
            },
           ],
           position: (105, 37),
          },
          position: (105, 19),
         },
        ),
       ],
       recursive: false,
       position: (104, 10),
      },
     ),
    ],
    recursive: false,
    position: (11, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}