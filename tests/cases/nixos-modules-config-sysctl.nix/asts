---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "sysctlOption",
        position: (7, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkOptionType",
       position: (7, 18),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (8, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "sysctl option value",
            },
           ],
           position: (8, 12),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "check",
             position: (9, 5),
            },
           ],
          },
          Function {
           argument: Simple {
            identifier: "val",
           },
           definition: LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "checkType",
                 position: (11, 9),
                },
               ],
              },
              Function {
               argument: Simple {
                identifier: "x",
               },
               definition: BinaryOperation {
                operator: LogicalOr,
                operands: [
                 BinaryOperation {
                  operator: LogicalOr,
                  operands: [
                   BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "isBool",
                       position: (11, 24),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (11, 31),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "isString",
                       position: (11, 36),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (11, 45),
                       },
                      ],
                     },
                    ],
                    position: (11, 33),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "isInt",
                     position: (11, 50),
                    },
                    arguments: [
                     Variable {
                      identifier: "x",
                      position: (11, 56),
                     },
                    ],
                   },
                  ],
                  position: (11, 47),
                 },
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   Variable {
                    identifier: "x",
                    position: (11, 61),
                   },
                   Variable {
                    identifier: "null",
                    position: (11, 66),
                   },
                  ],
                  position: (11, 63),
                 },
                ],
                position: (11, 58),
               },
               position: (11, 21),
              },
             ),
            ],
            target: BinaryOperation {
             operator: LogicalOr,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "checkType",
                position: (13, 9),
               },
               arguments: [
                Variable {
                 identifier: "val",
                 position: (13, 19),
                },
               ],
              },
              BinaryOperation {
               operator: LogicalAnd,
               operands: [
                BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "val",
                    position: (13, 27),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "_type",
                      position: (13, 31),
                     },
                    ],
                   },
                   default: Some(
                    String {
                     parts: [],
                     position: (13, 40),
                    },
                   ),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "override",
                    },
                   ],
                   position: (13, 46),
                  },
                 ],
                 position: (13, 43),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "checkType",
                  position: (13, 60),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "val",
                    position: (13, 70),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "content",
                      position: (13, 74),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ],
               position: (13, 57),
              },
             ],
             position: (13, 23),
            },
            position: (10, 7),
           },
           position: (9, 13),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "merge",
             position: (14, 5),
            },
           ],
          },
          Function {
           argument: Simple {
            identifier: "loc",
           },
           definition: Function {
            argument: Simple {
             identifier: "defs",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "mergeOneOption",
              position: (14, 24),
             },
             arguments: [
              Variable {
               identifier: "loc",
               position: (14, 39),
              },
              FunctionApplication {
               function: Variable {
                identifier: "filterOverrides",
                position: (14, 44),
               },
               arguments: [
                Variable {
                 identifier: "defs",
                 position: (14, 60),
                },
               ],
              },
             ],
            },
            position: (14, 18),
           },
           position: (14, 13),
          },
         ),
        ],
        recursive: false,
        position: (7, 31),
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (21, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "boot",
            position: (23, 5),
           },
           Raw {
            content: "kernel",
            position: (23, 10),
           },
           Raw {
            content: "sysctl",
            position: (23, 17),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (23, 26),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (24, 7),
                },
               ],
              },
              Map {
               bindings: [],
               recursive: false,
               position: (24, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (25, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (25, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "{ \"net.ipv4.tcp_syncookies\" = false; \"vm.swappiness\" = 60; }\n",
                  },
                 ],
                 position: (25, 35),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (28, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (28, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "attrsOf",
                   position: (28, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "sysctlOption",
                 position: (28, 28),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (29, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Runtime parameters of the Linux kernel, as set by\n<citerefentry><refentrytitle>sysctl</refentrytitle>\n<manvolnum>8</manvolnum></citerefentry>.  Note that sysctl\nparameters names must be enclosed in quotes\n(e.g. <literal>\"vm.swappiness\"</literal> instead of\n<literal>vm.swappiness</literal>).  The value of each\nparameter may be a string, integer, boolean, or null\n(signifying the option will not appear at all).\n",
                },
               ],
               position: (29, 21),
              },
             ),
            ],
            recursive: false,
            position: (23, 35),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (21, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (43, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "environment",
            position: (45, 5),
           },
           Raw {
            content: "etc",
            position: (45, 17),
           },
           Expression {
            expression: String {
             parts: [
              Raw {
               content: "sysctl.d/60-nixos.conf",
              },
             ],
             position: (45, 21),
            },
           },
           Raw {
            content: "text",
            position: (45, 46),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "concatStrings",
           position: (46, 7),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (46, 22),
            },
            arguments: [
             Function {
              argument: Simple {
               identifier: "n",
              },
              definition: Function {
               argument: Simple {
                identifier: "v",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "optionalString",
                 position: (47, 9),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   Variable {
                    identifier: "v",
                    position: (47, 25),
                   },
                   Variable {
                    identifier: "null",
                    position: (47, 30),
                   },
                  ],
                  position: (47, 27),
                 },
                 String {
                  parts: [
                   Expression {
                    expression: Variable {
                     identifier: "n",
                     position: (47, 39),
                    },
                   },
                   Raw {
                    content: "=",
                   },
                   Expression {
                    expression: IfThenElse {
                     predicate: BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       Variable {
                        identifier: "v",
                        position: (47, 47),
                       },
                       Variable {
                        identifier: "false",
                        position: (47, 52),
                       },
                      ],
                      position: (47, 49),
                     },
                     then: String {
                      parts: [
                       Raw {
                        content: "0",
                       },
                      ],
                      position: (47, 63),
                     },
                     else_: FunctionApplication {
                      function: Variable {
                       identifier: "toString",
                       position: (47, 72),
                      },
                      arguments: [
                       Variable {
                        identifier: "v",
                        position: (47, 81),
                       },
                      ],
                     },
                     position: (47, 44),
                    },
                   },
                   Raw {
                    content: "\n",
                   },
                  ],
                  position: (47, 36),
                 },
                ],
               },
               position: (46, 41),
              },
              position: (46, 38),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "config",
               position: (48, 9),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "boot",
                 position: (48, 16),
                },
                Raw {
                 content: "kernel",
                 position: (48, 21),
                },
                Raw {
                 content: "sysctl",
                 position: (48, 28),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "systemd",
            position: (50, 5),
           },
           Raw {
            content: "services",
            position: (50, 13),
           },
           Raw {
            content: "systemd-sysctl",
            position: (50, 22),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "wantedBy",
               position: (51, 9),
              },
             ],
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "multi-user.target",
                },
               ],
               position: (51, 22),
              },
             ],
             position: (51, 20),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "restartTriggers",
               position: (52, 9),
              },
             ],
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (52, 29),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "environment",
                  position: (52, 36),
                 },
                 Raw {
                  content: "etc",
                  position: (52, 48),
                 },
                 Expression {
                  expression: String {
                   parts: [
                    Raw {
                     content: "sysctl.d/60-nixos.conf",
                    },
                   ],
                   position: (52, 52),
                  },
                 },
                 Raw {
                  content: "source",
                  position: (52, 77),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (52, 27),
            },
           ),
          ],
          recursive: false,
          position: (51, 7),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "boot",
            position: (57, 5),
           },
           Raw {
            content: "kernel",
            position: (57, 10),
           },
           Raw {
            content: "sysctl",
            position: (57, 17),
           },
           Expression {
            expression: String {
             parts: [
              Raw {
               content: "kernel.kptr_restrict",
              },
             ],
             position: (57, 24),
            },
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkDefault",
           position: (57, 49),
          },
          arguments: [
           Int {
            value: 1,
            position: (57, 59),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "boot",
            position: (60, 5),
           },
           Raw {
            content: "kernel",
            position: (60, 10),
           },
           Raw {
            content: "sysctl",
            position: (60, 17),
           },
           Expression {
            expression: String {
             parts: [
              Raw {
               content: "kernel.yama.ptrace_scope",
              },
             ],
             position: (60, 24),
            },
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkDefault",
           position: (60, 53),
          },
          arguments: [
           Int {
            value: 0,
            position: (60, 63),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (43, 12),
      },
     ),
    ],
    recursive: false,
    position: (19, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}