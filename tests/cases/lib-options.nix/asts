---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit(
    Some(
     Variable {
      identifier: "lib",
      position: (5, 12),
     },
    ),
    [
     Raw {
      content: "all",
      position: (6, 5),
     },
     Raw {
      content: "collect",
      position: (7, 5),
     },
     Raw {
      content: "concatLists",
      position: (8, 5),
     },
     Raw {
      content: "concatMap",
      position: (9, 5),
     },
     Raw {
      content: "elemAt",
      position: (10, 5),
     },
     Raw {
      content: "filter",
      position: (11, 5),
     },
     Raw {
      content: "foldl'",
      position: (12, 5),
     },
     Raw {
      content: "head",
      position: (13, 5),
     },
     Raw {
      content: "tail",
      position: (14, 5),
     },
     Raw {
      content: "isAttrs",
      position: (15, 5),
     },
     Raw {
      content: "isBool",
      position: (16, 5),
     },
     Raw {
      content: "isDerivation",
      position: (17, 5),
     },
     Raw {
      content: "isFunction",
      position: (18, 5),
     },
     Raw {
      content: "isInt",
      position: (19, 5),
     },
     Raw {
      content: "isList",
      position: (20, 5),
     },
     Raw {
      content: "isString",
      position: (21, 5),
     },
     Raw {
      content: "length",
      position: (22, 5),
     },
     Raw {
      content: "mapAttrs",
      position: (23, 5),
     },
     Raw {
      content: "optional",
      position: (24, 5),
     },
     Raw {
      content: "optionals",
      position: (25, 5),
     },
     Raw {
      content: "take",
      position: (26, 5),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (28, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrsets",
         position: (28, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "attrByPath",
      position: (29, 5),
     },
     Raw {
      content: "optionalAttrs",
      position: (30, 5),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (32, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (32, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "concatMapStrings",
      position: (33, 5),
     },
     Raw {
      content: "concatStringsSep",
      position: (34, 5),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (36, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "types",
         position: (36, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "mkOptionType",
      position: (37, 5),
     },
    ],
   ),
  ],
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "isOption",
        position: (50, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "lib",
        position: (50, 14),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "isType",
          position: (50, 18),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "option",
          position: (50, 26),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkOption",
        position: (60, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [
        FunctionArgument {
         identifier: "options",
         default: Some(
          Variable {
           identifier: "null",
           position: (83, 15),
          },
         ),
        },
        FunctionArgument {
         identifier: "readOnly",
         default: Some(
          Variable {
           identifier: "null",
           position: (81, 16),
          },
         ),
        },
        FunctionArgument {
         identifier: "visible",
         default: Some(
          Variable {
           identifier: "null",
           position: (79, 15),
          },
         ),
        },
        FunctionArgument {
         identifier: "internal",
         default: Some(
          Variable {
           identifier: "null",
           position: (77, 16),
          },
         ),
        },
        FunctionArgument {
         identifier: "apply",
         default: Some(
          Variable {
           identifier: "null",
           position: (75, 13),
          },
         ),
        },
        FunctionArgument {
         identifier: "type",
         default: Some(
          Variable {
           identifier: "null",
           position: (73, 12),
          },
         ),
        },
        FunctionArgument {
         identifier: "relatedPackages",
         default: Some(
          Variable {
           identifier: "null",
           position: (71, 23),
          },
         ),
        },
        FunctionArgument {
         identifier: "description",
         default: Some(
          Variable {
           identifier: "null",
           position: (69, 19),
          },
         ),
        },
        FunctionArgument {
         identifier: "example",
         default: Some(
          Variable {
           identifier: "null",
           position: (67, 15),
          },
         ),
        },
        FunctionArgument {
         identifier: "defaultText",
         default: Some(
          Variable {
           identifier: "null",
           position: (65, 19),
          },
         ),
        },
        FunctionArgument {
         identifier: "default",
         default: Some(
          Variable {
           identifier: "null",
           position: (63, 15),
          },
         ),
        },
       ],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "attrs",
         position: (85, 5),
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "_type",
              position: (85, 16),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "option",
              position: (85, 25),
             },
            ],
           },
          ),
         ],
         recursive: false,
         position: (85, 14),
        },
       ],
       position: (85, 11),
      },
      position: (61, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkEnableOption",
        position: (94, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "mkOption",
        position: (96, 11),
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "default",
              position: (97, 5),
             },
            ],
           },
           Variable {
            identifier: "false",
            position: (97, 15),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "example",
              position: (98, 5),
             },
            ],
           },
           Variable {
            identifier: "true",
            position: (98, 15),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "description",
              position: (99, 5),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "Whether to enable ",
              position: (99, 20),
             },
             Expression {
              expression: Variable {
               identifier: "name",
               position: (99, 40),
              },
             },
             Raw {
              content: ".",
              position: (99, 45),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "type",
              position: (100, 5),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (100, 12),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "types",
               position: (100, 16),
              },
              Raw {
               content: "bool",
               position: (100, 22),
              },
             ],
            },
            default: None,
           },
          ),
         ],
         recursive: false,
         position: (96, 20),
        },
       ],
      },
      position: (96, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkPackageOption",
        position: (129, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pkgs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "name",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: None,
        arguments: FunctionArguments {
         arguments: [
          FunctionArgument {
           identifier: "example",
           default: Some(
            Variable {
             identifier: "null",
             position: (134, 39),
            },
           ),
          },
          FunctionArgument {
           identifier: "default",
           default: Some(
            List {
             elements: [
              Variable {
               identifier: "name",
               position: (134, 21),
              },
             ],
             position: (134, 19),
            },
           ),
          },
         ],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "default'",
              position: (135, 11),
             },
            ],
           },
           IfThenElse {
            predicate: UnaryOperation {
             operator: Not,
             operand: FunctionApplication {
              function: Variable {
               identifier: "isList",
               position: (135, 26),
              },
              arguments: [
               Variable {
                identifier: "default",
                position: (135, 33),
               },
              ],
             },
             position: (135, 25),
            },
            then: List {
             elements: [
              Variable {
               identifier: "default",
               position: (135, 48),
              },
             ],
             position: (135, 46),
            },
            else_: Variable {
             identifier: "default",
             position: (135, 63),
            },
            position: (135, 22),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (136, 10),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (137, 9),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (137, 16),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "types",
                  position: (137, 20),
                 },
                 Raw {
                  content: "package",
                  position: (137, 26),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (138, 9),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The ",
                 position: (138, 24),
                },
                Expression {
                 expression: Variable {
                  identifier: "name",
                  position: (138, 30),
                 },
                },
                Raw {
                 content: " package to use.",
                 position: (138, 35),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (139, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "attrByPath",
                position: (139, 19),
               },
               arguments: [
                Variable {
                 identifier: "default'",
                 position: (139, 30),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "throw",
                  position: (140, 12),
                 },
                 arguments: [
                  String {
                   parts: [
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "concatStringsSep",
                       position: (140, 21),
                      },
                      arguments: [
                       String {
                        parts: [
                         Raw {
                          content: ".",
                          position: (140, 39),
                         },
                        ],
                       },
                       Variable {
                        identifier: "default'",
                        position: (140, 42),
                       },
                      ],
                     },
                    },
                    Raw {
                     content: " cannot be found in pkgs",
                     position: (140, 51),
                    },
                   ],
                  },
                 ],
                },
                Variable {
                 identifier: "pkgs",
                 position: (140, 78),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (141, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (141, 23),
               },
               arguments: [
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  String {
                   parts: [
                    Raw {
                     content: "pkgs.",
                     position: (141, 43),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "concatStringsSep",
                    position: (141, 52),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: ".",
                       position: (141, 70),
                      },
                     ],
                    },
                    Variable {
                     identifier: "default'",
                     position: (141, 73),
                    },
                   ],
                  },
                 ],
                 position: (141, 50),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Expression {
                 expression: IfThenElse {
                  predicate: BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    Variable {
                     identifier: "example",
                     position: (142, 14),
                    },
                    Variable {
                     identifier: "null",
                     position: (142, 25),
                    },
                   ],
                   position: (142, 22),
                  },
                  then: String {
                   parts: [
                    Raw {
                     content: "example",
                     position: (142, 36),
                    },
                   ],
                  },
                  else_: Variable {
                   identifier: "null",
                   position: (142, 50),
                  },
                  position: (142, 11),
                 },
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (142, 58),
               },
               arguments: [
                IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isList",
                   position: (143, 15),
                  },
                  arguments: [
                   Variable {
                    identifier: "example",
                    position: (143, 22),
                   },
                  ],
                 },
                 then: BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.",
                      position: (143, 36),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "concatStringsSep",
                     position: (143, 45),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: ".",
                        position: (143, 63),
                       },
                      ],
                     },
                     Variable {
                      identifier: "example",
                      position: (143, 66),
                     },
                    ],
                   },
                  ],
                  position: (143, 43),
                 },
                 else_: Variable {
                  identifier: "example",
                  position: (143, 79),
                 },
                 position: (143, 12),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (136, 19),
           },
          ],
         },
         position: (135, 7),
        },
        position: (134, 7),
       },
       position: (133, 7),
      },
      position: (131, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkSinkUndeclaredOptions",
        position: (151, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "mkOption",
        position: (151, 36),
       },
       arguments: [
        BinaryOperation {
         operator: Update,
         operands: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "internal",
                position: (152, 5),
               },
              ],
             },
             Variable {
              identifier: "true",
              position: (152, 16),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "visible",
                position: (153, 5),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (153, 15),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (154, 5),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (154, 15),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (155, 5),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Sink for option definitions.",
                position: (155, 20),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (156, 5),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "mkOptionType",
               position: (156, 12),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "name",
                     position: (157, 7),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "sink",
                     position: (157, 15),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "check",
                     position: (158, 7),
                    },
                   ],
                  },
                  Function {
                   argument: Some(
                    "x",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Variable {
                    identifier: "true",
                    position: (158, 18),
                   },
                   position: (158, 15),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "merge",
                     position: (159, 7),
                    },
                   ],
                  },
                  Function {
                   argument: Some(
                    "loc",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Function {
                    argument: Some(
                     "defs",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: Variable {
                     identifier: "false",
                     position: (159, 26),
                    },
                    position: (159, 20),
                   },
                   position: (159, 15),
                  },
                 ),
                ],
                recursive: false,
                position: (156, 25),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "apply",
                position: (161, 5),
               },
              ],
             },
             Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "throw",
                position: (161, 16),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "Option value is not readable because the option is not declared.",
                   position: (161, 23),
                  },
                 ],
                },
               ],
              },
              position: (161, 13),
             },
            ),
           ],
           recursive: false,
           position: (151, 46),
          },
          Variable {
           identifier: "attrs",
           position: (162, 8),
          },
         ],
         position: (162, 5),
        },
       ],
      },
      position: (151, 29),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mergeDefaultOption",
        position: (164, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "loc",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "defs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "list",
             position: (165, 9),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "getValues",
            position: (165, 16),
           },
           arguments: [
            Variable {
             identifier: "defs",
             position: (165, 26),
            },
           ],
          },
         ),
        ],
        target: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (166, 8),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (166, 15),
             },
            ],
           },
           Int {
            value: 1,
            position: (166, 23),
           },
          ],
          position: (166, 20),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "head",
           position: (166, 30),
          },
          arguments: [
           Variable {
            identifier: "list",
            position: (166, 35),
           },
          ],
         },
         else_: IfThenElse {
          predicate: FunctionApplication {
           function: Variable {
            identifier: "all",
            position: (167, 13),
           },
           arguments: [
            Variable {
             identifier: "isFunction",
             position: (167, 17),
            },
            Variable {
             identifier: "list",
             position: (167, 28),
            },
           ],
          },
          then: Function {
           argument: Some(
            "x",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mergeDefaultOption",
             position: (167, 41),
            },
            arguments: [
             Variable {
              identifier: "loc",
              position: (167, 60),
             },
             FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (167, 65),
              },
              arguments: [
               Function {
                argument: Some(
                 "f",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "f",
                  position: (167, 73),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (167, 75),
                  },
                 ],
                },
                position: (167, 70),
               },
               Variable {
                identifier: "list",
                position: (167, 78),
               },
              ],
             },
            ],
           },
           position: (167, 38),
          },
          else_: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "all",
             position: (168, 13),
            },
            arguments: [
             Variable {
              identifier: "isList",
              position: (168, 17),
             },
             Variable {
              identifier: "list",
              position: (168, 24),
             },
            ],
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "concatLists",
             position: (168, 34),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (168, 46),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "all",
              position: (169, 13),
             },
             arguments: [
              Variable {
               identifier: "isAttrs",
               position: (169, 17),
              },
              Variable {
               identifier: "list",
               position: (169, 25),
              },
             ],
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "foldl'",
              position: (169, 35),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (169, 42),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mergeAttrs",
                  position: (169, 46),
                 },
                ],
               },
               default: None,
              },
              Map {
               bindings: [],
               recursive: false,
               position: (169, 57),
              },
              Variable {
               identifier: "list",
               position: (169, 60),
              },
             ],
            },
            else_: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "all",
               position: (170, 13),
              },
              arguments: [
               Variable {
                identifier: "isBool",
                position: (170, 17),
               },
               Variable {
                identifier: "list",
                position: (170, 24),
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "foldl'",
               position: (170, 34),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (170, 41),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "or",
                   position: (170, 45),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "false",
                position: (170, 48),
               },
               Variable {
                identifier: "list",
                position: (170, 54),
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "all",
                position: (171, 13),
               },
               arguments: [
                Variable {
                 identifier: "isString",
                 position: (171, 17),
                },
                Variable {
                 identifier: "list",
                 position: (171, 26),
                },
               ],
              },
              then: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (171, 36),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "concatStrings",
                   position: (171, 40),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "list",
                 position: (171, 54),
                },
               ],
              },
              else_: IfThenElse {
               predicate: BinaryOperation {
                operator: LogicalAnd,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "all",
                   position: (172, 13),
                  },
                  arguments: [
                   Variable {
                    identifier: "isInt",
                    position: (172, 17),
                   },
                   Variable {
                    identifier: "list",
                    position: (172, 23),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "all",
                   position: (172, 31),
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "x",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: BinaryOperation {
                     operator: EqualTo,
                     operands: [
                      Variable {
                       identifier: "x",
                       position: (172, 39),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "head",
                        position: (172, 44),
                       },
                       arguments: [
                        Variable {
                         identifier: "list",
                         position: (172, 49),
                        },
                       ],
                      },
                     ],
                     position: (172, 41),
                    },
                    position: (172, 36),
                   },
                   Variable {
                    identifier: "list",
                    position: (172, 55),
                   },
                  ],
                 },
                ],
                position: (172, 28),
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "head",
                 position: (172, 65),
                },
                arguments: [
                 Variable {
                  identifier: "list",
                  position: (172, 70),
                 },
                ],
               },
               else_: FunctionApplication {
                function: Variable {
                 identifier: "throw",
                 position: (173, 10),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "Cannot merge definitions of `",
                    position: (173, 17),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "showOption",
                      position: (173, 48),
                     },
                     arguments: [
                      Variable {
                       identifier: "loc",
                       position: (173, 59),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: "'. Definition values:",
                    position: (173, 63),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "showDefs",
                      position: (173, 86),
                     },
                     arguments: [
                      Variable {
                       identifier: "defs",
                       position: (173, 95),
                      },
                     ],
                    },
                   },
                  ],
                 },
                ],
               },
               position: (172, 10),
              },
              position: (171, 10),
             },
             position: (170, 10),
            },
            position: (169, 10),
           },
           position: (168, 10),
          },
          position: (167, 10),
         },
         position: (166, 5),
        },
        position: (165, 5),
       },
       position: (164, 29),
      },
      position: (164, 24),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mergeOneOption",
        position: (175, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mergeUniqueOption",
       position: (175, 20),
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "message",
             position: (175, 40),
            },
           ],
          },
          String {
           parts: [],
          },
         ),
        ],
        recursive: false,
        position: (175, 38),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mergeUniqueOption",
        position: (177, 3),
       },
      ],
     },
     Function {
      argument: None,
      arguments: FunctionArguments {
       arguments: [
        FunctionArgument {
         identifier: "message",
         default: None,
        },
       ],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "loc",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "defs",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (178, 8),
            },
            arguments: [
             Variable {
              identifier: "defs",
              position: (178, 15),
             },
            ],
           },
           Int {
            value: 1,
            position: (178, 23),
           },
          ],
          position: (178, 20),
         },
         then: PropertyAccess {
          expression: FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (179, 11),
           },
           arguments: [
            Variable {
             identifier: "defs",
             position: (179, 16),
            },
           ],
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "value",
             position: (179, 22),
            },
           ],
          },
          default: None,
         },
         else_: Assert {
          expression: BinaryOperation {
           operator: GreaterThan,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "length",
              position: (180, 17),
             },
             arguments: [
              Variable {
               identifier: "defs",
               position: (180, 24),
              },
             ],
            },
            Int {
             value: 1,
             position: (180, 31),
            },
           ],
           position: (180, 29),
          },
          target: FunctionApplication {
           function: Variable {
            identifier: "throw",
            position: (181, 7),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "The option `",
               position: (181, 14),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "showOption",
                 position: (181, 28),
                },
                arguments: [
                 Variable {
                  identifier: "loc",
                  position: (181, 39),
                 },
                ],
               },
              },
              Raw {
               content: "' is defined multiple times.\n",
               position: (181, 43),
              },
              Expression {
               expression: Variable {
                identifier: "message",
                position: (181, 75),
               },
              },
              Raw {
               content: "\nDefinition values:",
               position: (181, 83),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "showDefs",
                 position: (181, 105),
                },
                arguments: [
                 Variable {
                  identifier: "defs",
                  position: (181, 114),
                 },
                ],
               },
              },
             ],
            },
           ],
          },
          position: (180, 10),
         },
         position: (178, 5),
        },
        position: (177, 41),
       },
       position: (177, 36),
      },
      position: (177, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mergeEqualOption",
        position: (184, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "loc",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "defs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "defs",
           position: (185, 8),
          },
          List {
           elements: [],
           position: (185, 16),
          },
         ],
         position: (185, 13),
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "abort",
          position: (185, 24),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "This case should never happen.",
             position: (185, 31),
            },
           ],
          },
         ],
        },
        else_: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (189, 13),
            },
            arguments: [
             Variable {
              identifier: "defs",
              position: (189, 20),
             },
            ],
           },
           Int {
            value: 1,
            position: (189, 28),
           },
          ],
          position: (189, 25),
         },
         then: PropertyAccess {
          expression: FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (189, 36),
           },
           arguments: [
            Variable {
             identifier: "defs",
             position: (189, 41),
            },
           ],
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "value",
             position: (189, 47),
            },
           ],
          },
          default: None,
         },
         else_: PropertyAccess {
          expression: FunctionApplication {
           function: Variable {
            identifier: "foldl'",
            position: (190, 11),
           },
           arguments: [
            Function {
             argument: Some(
              "first",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "def",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: IfThenElse {
               predicate: BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "def",
                   position: (191, 10),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "value",
                     position: (191, 14),
                    },
                   ],
                  },
                  default: None,
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "first",
                   position: (191, 23),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "value",
                     position: (191, 29),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
                position: (191, 20),
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "throw",
                 position: (192, 9),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "The option `",
                    position: (192, 16),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "showOption",
                      position: (192, 30),
                     },
                     arguments: [
                      Variable {
                       identifier: "loc",
                       position: (192, 41),
                      },
                     ],
                    },
                   },
                   Raw {
                    content: "' has conflicting definition values:",
                    position: (192, 45),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "showDefs",
                      position: (192, 83),
                     },
                     arguments: [
                      List {
                       elements: [
                        Variable {
                         identifier: "first",
                         position: (192, 94),
                        },
                        Variable {
                         identifier: "def",
                         position: (192, 100),
                        },
                       ],
                       position: (192, 92),
                      },
                     ],
                    },
                   },
                  ],
                 },
                ],
               },
               else_: Variable {
                identifier: "first",
                position: (194, 9),
               },
               position: (191, 7),
              },
              position: (190, 26),
             },
             position: (190, 19),
            },
            FunctionApplication {
             function: Variable {
              identifier: "head",
              position: (194, 17),
             },
             arguments: [
              Variable {
               identifier: "defs",
               position: (194, 22),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "tail",
              position: (194, 29),
             },
             arguments: [
              Variable {
               identifier: "defs",
               position: (194, 34),
              },
             ],
            },
           ],
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "value",
             position: (194, 41),
            },
           ],
          },
          default: None,
         },
         position: (189, 10),
        },
        position: (185, 5),
       },
       position: (184, 27),
      },
      position: (184, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getValues",
        position: (204, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "map",
       position: (204, 15),
      },
      arguments: [
       Function {
        argument: Some(
         "x",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: PropertyAccess {
         expression: Variable {
          identifier: "x",
          position: (204, 23),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "value",
            position: (204, 25),
           },
          ],
         },
         default: None,
        },
        position: (204, 20),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "getFiles",
        position: (214, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "map",
       position: (214, 14),
      },
      arguments: [
       Function {
        argument: Some(
         "x",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: PropertyAccess {
         expression: Variable {
          identifier: "x",
          position: (214, 22),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "file",
            position: (214, 24),
           },
          ],
         },
         default: None,
        },
        position: (214, 19),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "optionAttrSetToDocList",
        position: (218, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "optionAttrSetToDocList'",
       position: (218, 28),
      },
      arguments: [
       List {
        elements: [],
        position: (218, 52),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "optionAttrSetToDocList'",
        position: (220, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "prefix",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "options",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "concatMap",
         position: (221, 5),
        },
        arguments: [
         Function {
          argument: Some(
           "opt",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "docOption",
                position: (223, 9),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "loc",
                     position: (224, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (224, 17),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "loc",
                      position: (224, 21),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "name",
                     position: (225, 11),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "showOption",
                    position: (225, 18),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "opt",
                      position: (225, 29),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "loc",
                        position: (225, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "description",
                     position: (226, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (226, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (226, 29),
                     },
                    ],
                   },
                   default: Some(
                    Variable {
                     identifier: "null",
                     position: (226, 44),
                    },
                   ),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "declarations",
                     position: (227, 11),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "filter",
                    position: (227, 26),
                   },
                   arguments: [
                    Function {
                     argument: Some(
                      "x",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       Variable {
                        identifier: "x",
                        position: (227, 37),
                       },
                       Variable {
                        identifier: "unknownModule",
                        position: (227, 42),
                       },
                      ],
                      position: (227, 39),
                     },
                     position: (227, 34),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "opt",
                      position: (227, 57),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "declarations",
                        position: (227, 61),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "internal",
                     position: (228, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (228, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "internal",
                      position: (228, 26),
                     },
                    ],
                   },
                   default: Some(
                    Variable {
                     identifier: "false",
                     position: (228, 38),
                    },
                   ),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "visible",
                     position: (229, 11),
                    },
                   ],
                  },
                  IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     HasProperty {
                      expression: Variable {
                       identifier: "opt",
                       position: (230, 17),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "visible",
                         position: (230, 21),
                        },
                       ],
                      },
                     },
                     BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "opt",
                         position: (230, 32),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "visible",
                           position: (230, 36),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [
                         Raw {
                          content: "shallow",
                          position: (230, 48),
                         },
                        ],
                       },
                      ],
                      position: (230, 44),
                     },
                    ],
                    position: (230, 29),
                   },
                   then: Variable {
                    identifier: "true",
                    position: (231, 18),
                   },
                   else_: PropertyAccess {
                    expression: Variable {
                     identifier: "opt",
                     position: (232, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "visible",
                       position: (232, 22),
                      },
                     ],
                    },
                    default: Some(
                     Variable {
                      identifier: "true",
                      position: (232, 33),
                     },
                    ),
                   },
                   position: (230, 13),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "readOnly",
                     position: (233, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (233, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "readOnly",
                      position: (233, 26),
                     },
                    ],
                   },
                   default: Some(
                    Variable {
                     identifier: "false",
                     position: (233, 38),
                    },
                   ),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (234, 11),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (234, 18),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "type",
                      position: (234, 22),
                     },
                     Raw {
                      content: "description",
                      position: (234, 27),
                     },
                    ],
                   },
                   default: Some(
                    Variable {
                     identifier: "null",
                     position: (234, 42),
                    },
                   ),
                  },
                 ),
                ],
                recursive: true,
                position: (223, 21),
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (236, 12),
                  },
                  arguments: [
                   HasProperty {
                    expression: Variable {
                     identifier: "opt",
                     position: (236, 27),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "example",
                       position: (236, 33),
                      },
                     ],
                    },
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "example",
                         position: (236, 44),
                        },
                       ],
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "scrubOptionValue",
                        position: (236, 54),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "opt",
                          position: (236, 71),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "example",
                            position: (236, 75),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                     ),
                    ],
                    recursive: false,
                    position: (236, 42),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Update,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "optionalAttrs",
                     position: (237, 12),
                    },
                    arguments: [
                     HasProperty {
                      expression: Variable {
                       identifier: "opt",
                       position: (237, 27),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "default",
                         position: (237, 33),
                        },
                       ],
                      },
                     },
                     Map {
                      bindings: [
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "default",
                           position: (237, 44),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "scrubOptionValue",
                          position: (237, 54),
                         },
                         arguments: [
                          PropertyAccess {
                           expression: Variable {
                            identifier: "opt",
                            position: (237, 71),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "default",
                              position: (237, 75),
                             },
                            ],
                           },
                           default: None,
                          },
                         ],
                        },
                       ),
                      ],
                      recursive: false,
                      position: (237, 42),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: Update,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "optionalAttrs",
                       position: (238, 12),
                      },
                      arguments: [
                       HasProperty {
                        expression: Variable {
                         identifier: "opt",
                         position: (238, 27),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "defaultText",
                           position: (238, 33),
                          },
                         ],
                        },
                       },
                       Map {
                        bindings: [
                         KeyValue(
                          AttributePath {
                           attributes: [
                            Raw {
                             content: "default",
                             position: (238, 48),
                            },
                           ],
                          },
                          PropertyAccess {
                           expression: Variable {
                            identifier: "opt",
                            position: (238, 58),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "defaultText",
                              position: (238, 62),
                             },
                            ],
                           },
                           default: None,
                          },
                         ),
                        ],
                        recursive: false,
                        position: (238, 46),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "optionalAttrs",
                       position: (239, 12),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: LogicalAnd,
                        operands: [
                         HasProperty {
                          expression: Variable {
                           identifier: "opt",
                           position: (239, 27),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "relatedPackages",
                             position: (239, 33),
                            },
                           ],
                          },
                         },
                         BinaryOperation {
                          operator: NotEqualTo,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "opt",
                             position: (239, 52),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "relatedPackages",
                               position: (239, 56),
                              },
                             ],
                            },
                            default: None,
                           },
                           Variable {
                            identifier: "null",
                            position: (239, 75),
                           },
                          ],
                          position: (239, 72),
                         },
                        ],
                        position: (239, 49),
                       },
                       Map {
                        bindings: [
                         Inherit(
                          Some(
                           Variable {
                            identifier: "opt",
                            position: (239, 92),
                           },
                          ),
                          [
                           Raw {
                            content: "relatedPackages",
                            position: (239, 97),
                           },
                          ],
                         ),
                        ],
                        recursive: false,
                        position: (239, 81),
                       },
                      ],
                     },
                    ],
                    position: (239, 9),
                   },
                  ],
                  position: (238, 9),
                 },
                ],
                position: (237, 9),
               },
              ],
              position: (236, 9),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "subOptions",
                position: (241, 9),
               },
              ],
             },
             LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "ss",
                   position: (242, 15),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "opt",
                   position: (242, 20),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (242, 24),
                    },
                    Raw {
                     content: "getSubOptions",
                     position: (242, 29),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "opt",
                    position: (242, 43),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "loc",
                      position: (242, 47),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
              ],
              target: IfThenElse {
               predicate: BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 Variable {
                  identifier: "ss",
                  position: (243, 17),
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (243, 23),
                 },
                ],
                position: (243, 20),
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "optionAttrSetToDocList'",
                 position: (243, 31),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "opt",
                   position: (243, 55),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "loc",
                     position: (243, 59),
                    },
                   ],
                  },
                  default: None,
                 },
                 Variable {
                  identifier: "ss",
                  position: (243, 63),
                 },
                ],
               },
               else_: List {
                elements: [],
                position: (243, 71),
               },
               position: (243, 14),
              },
              position: (242, 11),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "subOptionsVisible",
                position: (244, 9),
               },
              ],
             },
             BinaryOperation {
              operator: LogicalAnd,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "docOption",
                 position: (244, 29),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "visible",
                   position: (244, 39),
                  },
                 ],
                },
                default: None,
               },
               BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "opt",
                   position: (244, 50),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "visible",
                     position: (244, 54),
                    },
                   ],
                  },
                  default: Some(
                   Variable {
                    identifier: "null",
                    position: (244, 65),
                   },
                  ),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "shallow",
                    position: (244, 74),
                   },
                  ],
                 },
                ],
                position: (244, 70),
               },
              ],
              position: (244, 47),
             },
            ),
           ],
           target: BinaryOperation {
            operator: Concatenation,
            operands: [
             List {
              elements: [
               Variable {
                identifier: "docOption",
                position: (246, 11),
               },
              ],
              position: (246, 9),
             },
             FunctionApplication {
              function: Variable {
               identifier: "optionals",
               position: (246, 26),
              },
              arguments: [
               Variable {
                identifier: "subOptionsVisible",
                position: (246, 36),
               },
               Variable {
                identifier: "subOptions",
                position: (246, 54),
               },
              ],
             },
            ],
            position: (246, 23),
           },
           position: (222, 7),
          },
          position: (221, 16),
         },
         FunctionApplication {
          function: Variable {
           identifier: "collect",
           position: (246, 67),
          },
          arguments: [
           Variable {
            identifier: "isOption",
            position: (246, 75),
           },
           Variable {
            identifier: "options",
            position: (246, 84),
           },
          ],
         },
        ],
       },
       position: (220, 37),
      },
      position: (220, 29),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "scrubOptionValue",
        position: (257, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "isDerivation",
         position: (258, 8),
        },
        arguments: [
         Variable {
          identifier: "x",
          position: (258, 21),
         },
        ],
       },
       then: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "type",
             position: (259, 9),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "derivation",
             position: (259, 17),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "drvPath",
             position: (259, 30),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "x",
            position: (259, 40),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "name",
              position: (259, 42),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "outPath",
             position: (259, 48),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "x",
            position: (259, 58),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "name",
              position: (259, 60),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (259, 66),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "x",
            position: (259, 73),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "name",
              position: (259, 75),
             },
            ],
           },
           default: None,
          },
         ),
        ],
        recursive: false,
        position: (259, 7),
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "isList",
          position: (260, 13),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (260, 20),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (260, 27),
         },
         arguments: [
          Variable {
           identifier: "scrubOptionValue",
           position: (260, 31),
          },
          Variable {
           identifier: "x",
           position: (260, 48),
          },
         ],
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: Variable {
           identifier: "isAttrs",
           position: (261, 13),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (261, 21),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "mapAttrs",
           position: (261, 28),
          },
          arguments: [
           Function {
            argument: Some(
             "n",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "scrubOptionValue",
               position: (261, 44),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (261, 61),
               },
              ],
             },
             position: (261, 41),
            },
            position: (261, 38),
           },
           FunctionApplication {
            function: Variable {
             identifier: "removeAttrs",
             position: (261, 65),
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (261, 77),
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "_args",
                  position: (261, 81),
                 },
                ],
               },
              ],
              position: (261, 79),
             },
            ],
           },
          ],
         },
         else_: Variable {
          identifier: "x",
          position: (262, 10),
         },
         position: (261, 10),
        },
        position: (260, 10),
       },
       position: (258, 5),
      },
      position: (257, 22),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "literalExpression",
        position: (270, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "text",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: UnaryOperation {
        operator: Not,
        operand: FunctionApplication {
         function: Variable {
          identifier: "isString",
          position: (271, 10),
         },
         arguments: [
          Variable {
           identifier: "text",
           position: (271, 19),
          },
         ],
        },
        position: (271, 8),
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "throw",
         position: (271, 29),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "literalExpression expects a string.",
            position: (271, 36),
           },
          ],
         },
        ],
       },
       else_: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "_type",
             position: (272, 12),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "literalExpression",
             position: (272, 21),
            },
           ],
          },
         ),
         Inherit(
          None,
          [
           Raw {
            content: "text",
            position: (272, 49),
           },
          ],
         ),
        ],
        recursive: false,
        position: (272, 10),
       },
       position: (271, 5),
      },
      position: (270, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "literalExample",
        position: (274, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "lib",
        position: (274, 20),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "warn",
          position: (274, 24),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "literalExample is deprecated, use literalExpression instead, or use literalDocBook for a non-Nix description.",
          position: (274, 30),
         },
        ],
       },
       Variable {
        identifier: "literalExpression",
        position: (274, 141),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "literalDocBook",
        position: (281, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "text",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: UnaryOperation {
        operator: Not,
        operand: FunctionApplication {
         function: Variable {
          identifier: "isString",
          position: (282, 10),
         },
         arguments: [
          Variable {
           identifier: "text",
           position: (282, 19),
          },
         ],
        },
        position: (282, 8),
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "throw",
         position: (282, 29),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "literalDocBook expects a string.",
            position: (282, 36),
           },
          ],
         },
        ],
       },
       else_: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "_type",
             position: (283, 12),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "literalDocBook",
             position: (283, 21),
            },
           ],
          },
         ),
         Inherit(
          None,
          [
           Raw {
            content: "text",
            position: (283, 46),
           },
          ],
         ),
        ],
        recursive: false,
        position: (283, 10),
       },
       position: (282, 5),
      },
      position: (281, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "showOption",
        position: (301, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "parts",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "escapeOptionPart",
            position: (302, 5),
           },
          ],
         },
         Function {
          argument: Some(
           "part",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "escaped",
                position: (304, 9),
               },
              ],
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (304, 19),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "strings",
                  position: (304, 23),
                 },
                 Raw {
                  content: "escapeNixString",
                  position: (304, 31),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "part",
                position: (304, 47),
               },
              ],
             },
            ),
           ],
           target: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "escaped",
               position: (305, 13),
              },
              String {
               parts: [
                Raw {
                 content: "\"",
                 position: (305, 25),
                },
                Expression {
                 expression: Variable {
                  identifier: "part",
                  position: (305, 29),
                 },
                },
                Raw {
                 content: "\"",
                 position: (305, 34),
                },
               ],
              },
             ],
             position: (305, 21),
            },
            then: Variable {
             identifier: "part",
             position: (306, 15),
            },
            else_: Variable {
             identifier: "escaped",
             position: (307, 15),
            },
            position: (305, 10),
           },
           position: (303, 7),
          },
          position: (302, 24),
         },
        ),
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "concatStringsSep",
         position: (308, 9),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: ".",
            position: (308, 27),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (308, 32),
          },
          arguments: [
           Variable {
            identifier: "escapeOptionPart",
            position: (308, 36),
           },
           Variable {
            identifier: "parts",
            position: (308, 53),
           },
          ],
         },
        ],
       },
       position: (301, 23),
      },
      position: (301, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "showFiles",
        position: (309, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "files",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatStringsSep",
        position: (309, 22),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: " and ",
           position: (309, 40),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (309, 48),
         },
         arguments: [
          Function {
           argument: Some(
            "f",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: String {
            parts: [
             Raw {
              content: "`",
              position: (309, 57),
             },
             Expression {
              expression: Variable {
               identifier: "f",
               position: (309, 60),
              },
             },
             Raw {
              content: "'",
              position: (309, 62),
             },
            ],
           },
           position: (309, 53),
          },
          Variable {
           identifier: "files",
           position: (309, 66),
          },
         ],
        },
       ],
      },
      position: (309, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "showDefs",
        position: (311, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "defs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatMapStrings",
        position: (311, 20),
       },
       arguments: [
        Function {
         argument: Some(
          "def",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "prettyEval",
               position: (314, 7),
              },
             ],
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (314, 20),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "tryEval",
                 position: (314, 29),
                },
               ],
              },
              default: None,
             },
             arguments: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (315, 10),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "generators",
                   position: (315, 14),
                  },
                  Raw {
                   content: "toPretty",
                   position: (315, 25),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Map {
                 bindings: [],
                 recursive: false,
                 position: (315, 34),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (316, 12),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "generators",
                     position: (316, 16),
                    },
                    Raw {
                     content: "withRecursion",
                     position: (316, 27),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "depthLimit",
                        position: (316, 43),
                       },
                      ],
                     },
                     Int {
                      value: 10,
                      position: (316, 56),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "throwOnDepthLimit",
                        position: (316, 60),
                       },
                      ],
                     },
                     Variable {
                      identifier: "false",
                      position: (316, 80),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (316, 41),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "def",
                    position: (316, 89),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "value",
                      position: (316, 93),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "lines",
               position: (318, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "filter",
              position: (318, 15),
             },
             arguments: [
              Function {
               argument: Some(
                "v",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: UnaryOperation {
                operator: Not,
                operand: FunctionApplication {
                 function: Variable {
                  identifier: "isList",
                  position: (318, 28),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (318, 35),
                  },
                 ],
                },
                position: (318, 26),
               },
               position: (318, 23),
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (318, 39),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "split",
                   position: (318, 48),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "\n",
                   position: (318, 55),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "prettyEval",
                  position: (318, 59),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "value",
                    position: (318, 70),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "value",
               position: (320, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "concatStringsSep",
              position: (320, 15),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "\n    ",
                 position: (320, 33),
                },
               ],
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "take",
                  position: (320, 42),
                 },
                 arguments: [
                  Int {
                   value: 5,
                   position: (320, 47),
                  },
                  Variable {
                   identifier: "lines",
                   position: (320, 49),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "optional",
                  position: (320, 58),
                 },
                 arguments: [
                  BinaryOperation {
                   operator: GreaterThan,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "length",
                      position: (320, 68),
                     },
                     arguments: [
                      Variable {
                       identifier: "lines",
                       position: (320, 75),
                      },
                     ],
                    },
                    Int {
                     value: 5,
                     position: (320, 83),
                    },
                   ],
                   position: (320, 81),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "...",
                     position: (320, 87),
                    },
                   ],
                  },
                 ],
                },
               ],
               position: (320, 55),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "result",
               position: (321, 7),
              },
             ],
            },
            IfThenElse {
             predicate: UnaryOperation {
              operator: Not,
              operand: PropertyAccess {
               expression: Variable {
                identifier: "prettyEval",
                position: (323, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "success",
                  position: (323, 25),
                 },
                ],
               },
               default: None,
              },
              position: (323, 12),
             },
             then: String {
              parts: [],
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: GreaterThan,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "length",
                  position: (325, 17),
                 },
                 arguments: [
                  Variable {
                   identifier: "lines",
                   position: (325, 24),
                  },
                 ],
                },
                Int {
                 value: 1,
                 position: (325, 32),
                },
               ],
               position: (325, 30),
              },
              then: BinaryOperation {
               operator: Addition,
               operands: [
                String {
                 parts: [
                  Raw {
                   content: ":\n    ",
                   position: (325, 40),
                  },
                 ],
                },
                Variable {
                 identifier: "value",
                 position: (325, 51),
                },
               ],
               position: (325, 49),
              },
              else_: BinaryOperation {
               operator: Addition,
               operands: [
                String {
                 parts: [
                  Raw {
                   content: ": ",
                   position: (326, 15),
                  },
                 ],
                },
                Variable {
                 identifier: "value",
                 position: (326, 21),
                },
               ],
               position: (326, 19),
              },
              position: (325, 14),
             },
             position: (323, 9),
            },
           ),
          ],
          target: String {
           parts: [
            Raw {
             content: "\n- In `",
             position: (327, 9),
            },
            Expression {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "def",
               position: (327, 19),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "file",
                 position: (327, 23),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "'",
             position: (327, 28),
            },
            Expression {
             expression: Variable {
              identifier: "result",
              position: (327, 31),
             },
            },
           ],
          },
          position: (312, 5),
         },
         position: (311, 38),
        },
        Variable {
         identifier: "defs",
         position: (328, 5),
        },
       ],
      },
      position: (311, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "unknownModule",
        position: (330, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "<unknown-file>",
        position: (330, 20),
       },
      ],
     },
    ),
   ],
   recursive: true,
   position: (40, 1),
  },
  position: (4, 1),
 },
 position: (2, 1),
}