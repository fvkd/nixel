---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "options",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "mpdscribble",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mpdCfg",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (7, 19),
        },
        Raw {
         content: "mpd",
         position: (7, 28),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mpdOpt",
        position: (8, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "options",
       position: (8, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (8, 20),
        },
        Raw {
         content: "mpd",
         position: (8, 29),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "endpointUrls",
        position: (10, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Expression {
           expression: String {
            parts: [
             Raw {
              content: "last.fm",
              position: (11, 6),
             },
            ],
           },
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "http://post.audioscrobbler.com",
           position: (11, 18),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Expression {
           expression: String {
            parts: [
             Raw {
              content: "libre.fm",
              position: (12, 6),
             },
            ],
           },
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "http://turtle.libre.fm",
           position: (12, 19),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Expression {
           expression: String {
            parts: [
             Raw {
              content: "jamendo",
              position: (13, 6),
             },
            ],
           },
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "http://postaudioscrobbler.jamendo.com",
           position: (13, 18),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Expression {
           expression: String {
            parts: [
             Raw {
              content: "listenbrainz",
              position: (14, 6),
             },
            ],
           },
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "http://proxy.listenbrainz.org",
           position: (14, 23),
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkSection",
        position: (17, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "secname",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "secCfg",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: String {
        parts: [
         Raw {
          content: "[",
          position: (18, 1),
         },
         Expression {
          expression: Variable {
           identifier: "secname",
           position: (18, 8),
          },
         },
         Raw {
          content: "]\nurl      = ",
          position: (18, 16),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "secCfg",
            position: (19, 18),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "url",
              position: (19, 25),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\nusername = ",
          position: (19, 29),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "secCfg",
            position: (20, 18),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "username",
              position: (20, 25),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\npassword = {{",
          position: (20, 34),
         },
         Expression {
          expression: Variable {
           identifier: "secname",
           position: (21, 20),
          },
         },
         Raw {
          content: "_PASSWORD}}\njournal  = /var/lib/mpdscribble/",
          position: (21, 28),
         },
         Expression {
          expression: Variable {
           identifier: "secname",
           position: (22, 39),
          },
         },
         Raw {
          content: ".journal\n",
          position: (22, 47),
         },
        ],
       },
      },
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "endpoints",
        position: (25, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "concatStringsSep",
       position: (25, 15),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "\n",
          position: (25, 33),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mapAttrsToList",
         position: (25, 38),
        },
        arguments: [
         Variable {
          identifier: "mkSection",
          position: (25, 53),
         },
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (25, 63),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "endpoints",
             position: (25, 67),
            },
           ],
          },
          default: None,
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfgTemplate",
        position: (26, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (26, 17),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (26, 22),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "mpdscribble.conf",
          position: (26, 33),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "## This file was automatically genenrated by NixOS and will be overwritten.\n## Do not edit. Edit your NixOS configuration instead.\n\n## mpdscribble - an audioscrobbler for the Music Player Daemon.\n## http://mpd.wikia.com/wiki/Client:mpdscribble\n\n# HTTP proxy URL.\n",
          position: (27, 1),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (34, 7),
           },
           arguments: [
            BinaryOperation {
             operator: NotEqualTo,
             operands: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (34, 23),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "proxy",
                  position: (34, 27),
                 },
                ],
               },
               default: None,
              },
              Variable {
               identifier: "null",
               position: (34, 36),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "proxy = ",
               position: (34, 43),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (34, 53),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "proxy",
                   position: (34, 57),
                  },
                 ],
                },
                default: None,
               },
              },
             ],
            },
           ],
          },
         },
         Raw {
          content: "\n\n# The location of the mpdscribble log file.  The special value\n# \"syslog\" makes mpdscribble use the local syslog daemon.  On most\n# systems, log messages will appear in /var/log/daemon.log then.\n# \"-\" means log to stderr (the current terminal).\nlog = -\n\n# How verbose mpdscribble's logging should be.  Default is 1.\nverbose = ",
          position: (34, 65),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (43, 17),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (43, 26),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "verbose",
                position: (43, 30),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n# How often should mpdscribble save the journal file? [seconds]\njournal_interval = ",
          position: (43, 38),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (46, 26),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (46, 35),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "journalInterval",
                position: (46, 39),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n# The host running MPD, possibly protected by a password\n# ([PASSWORD@]HOSTNAME).\nhost = ",
          position: (46, 55),
         },
         Expression {
          expression: BinaryOperation {
           operator: Addition,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "optionalString",
              position: (50, 15),
             },
             arguments: [
              BinaryOperation {
               operator: NotEqualTo,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (50, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "passwordFile",
                    position: (50, 35),
                   },
                  ],
                 },
                 default: None,
                },
                Variable {
                 identifier: "null",
                 position: (50, 51),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "{{MPD_PASSWORD}}@",
                 position: (50, 58),
                },
               ],
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (50, 80),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "host",
                position: (50, 84),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n# The port that the MPD listens on and mpdscribble should try to\n# connect to.\nport = ",
          position: (50, 89),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (54, 14),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (54, 23),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "port",
                position: (54, 27),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n",
          position: (54, 32),
         },
         Expression {
          expression: Variable {
           identifier: "endpoints",
           position: (56, 7),
          },
         },
         Raw {
          content: "\n",
          position: (56, 17),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfgFile",
        position: (59, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "/run/mpdscribble/mpdscribble.conf",
        position: (59, 14),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "replaceSecret",
        position: (61, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "secretFile",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "placeholder",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "targetFile",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "optionalString",
          position: (62, 5),
         },
         arguments: [
          BinaryOperation {
           operator: NotEqualTo,
           operands: [
            Variable {
             identifier: "secretFile",
             position: (62, 21),
            },
            Variable {
             identifier: "null",
             position: (62, 35),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "      ",
             position: (63, 1),
            },
            Expression {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (63, 9),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "replace-secret",
                 position: (63, 14),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "/bin/replace-secret ",
             position: (63, 29),
            },
            Raw {
             content: "'",
             position: (63, 49),
            },
            Expression {
             expression: Variable {
              identifier: "placeholder",
              position: (63, 52),
             },
            },
            Raw {
             content: "' ",
             position: (63, 64),
            },
            Raw {
             content: "'",
             position: (63, 66),
            },
            Expression {
             expression: Variable {
              identifier: "secretFile",
              position: (63, 69),
             },
            },
            Raw {
             content: "' ",
             position: (63, 80),
            },
            Raw {
             content: "'",
             position: (63, 82),
            },
            Expression {
             expression: Variable {
              identifier: "targetFile",
              position: (63, 85),
             },
            },
            Raw {
             content: "' ",
             position: (63, 96),
            },
           ],
          },
         ],
        },
       },
      },
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "preStart",
        position: (65, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (65, 14),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeShellScript",
          position: (65, 19),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "mpdscribble-pre-start",
          position: (65, 37),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "cp -f \"",
          position: (66, 1),
         },
         Expression {
          expression: Variable {
           identifier: "cfgTemplate",
           position: (66, 14),
          },
         },
         Raw {
          content: "\" \"",
          position: (66, 26),
         },
         Expression {
          expression: Variable {
           identifier: "cfgFile",
           position: (66, 31),
          },
         },
         Raw {
          content: "\"\n",
          position: (66, 39),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "replaceSecret",
            position: (67, 7),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (67, 21),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "passwordFile",
                position: (67, 25),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [
              Raw {
               content: "{{MPD_PASSWORD}}",
               position: (67, 39),
              },
             ],
            },
            Variable {
             identifier: "cfgFile",
             position: (67, 57),
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (67, 65),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "concatStringsSep",
            position: (68, 7),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (68, 25),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mapAttrsToList",
              position: (68, 30),
             },
             arguments: [
              Function {
               argument: Some(
                "secname",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "cfg",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "replaceSecret",
                  position: (69, 7),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (69, 21),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "passwordFile",
                      position: (69, 25),
                     },
                    ],
                   },
                   default: None,
                  },
                  String {
                   parts: [
                    Raw {
                     content: "{{",
                     position: (69, 39),
                    },
                    Expression {
                     expression: Variable {
                      identifier: "secname",
                      position: (69, 43),
                     },
                    },
                    Raw {
                     content: "_PASSWORD}}",
                     position: (69, 51),
                    },
                   ],
                  },
                  Variable {
                   identifier: "cfgFile",
                   position: (69, 64),
                  },
                 ],
                },
               },
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (70, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "endpoints",
                  position: (70, 11),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (70, 22),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "localMpd",
        position: (73, 3),
       },
      ],
     },
     BinaryOperation {
      operator: LogicalOr,
      operands: [
       BinaryOperation {
        operator: EqualTo,
        operands: [
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (73, 15),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "host",
             position: (73, 19),
            },
           ],
          },
          default: None,
         },
         String {
          parts: [
           Raw {
            content: "localhost",
            position: (73, 28),
           },
          ],
         },
        ],
       },
       BinaryOperation {
        operator: EqualTo,
        operands: [
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (73, 42),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "host",
             position: (73, 46),
            },
           ],
          },
          default: None,
         },
         String {
          parts: [
           Raw {
            content: "127.0.0.1",
            position: (73, 55),
           },
          ],
         },
        ],
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (78, 3),
        },
        Raw {
         content: "services",
         position: (78, 11),
        },
        Raw {
         content: "mpdscribble",
         position: (78, 20),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (80, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkEnableOption",
           position: (80, 14),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "mpdscribble",
              position: (80, 30),
             },
            ],
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "proxy",
            position: (82, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (82, 13),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (83, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (83, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (84, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (84, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (84, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (84, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (84, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (85, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "HTTP proxy URL.\n",
                 position: (86, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "verbose",
            position: (90, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (90, 15),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (91, 7),
                },
               ],
              },
              Int {
               value: 1,
               position: (91, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (92, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (92, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "int",
                  position: (92, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (93, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Log level for the mpdscribble daemon.\n",
                 position: (94, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "journalInterval",
            position: (98, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (98, 23),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (99, 7),
                },
               ],
              },
              Int {
               value: 600,
               position: (99, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (100, 7),
                },
               ],
              },
              Int {
               value: 60,
               position: (100, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (101, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (101, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "int",
                  position: (101, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (102, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "How often should mpdscribble save the journal file? [seconds]\n",
                 position: (103, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "host",
            position: (107, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (107, 12),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (108, 7),
                },
               ],
              },
              IfThenElse {
               predicate: BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "mpdCfg",
                   position: (108, 21),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "network",
                     position: (108, 28),
                    },
                    Raw {
                     content: "listenAddress",
                     position: (108, 36),
                    },
                   ],
                  },
                  default: None,
                 },
                 String {
                  parts: [
                   Raw {
                    content: "any",
                    position: (108, 54),
                   },
                  ],
                 },
                ],
               },
               then: PropertyAccess {
                expression: Variable {
                 identifier: "mpdCfg",
                 position: (109, 9),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "network",
                   position: (109, 16),
                  },
                  Raw {
                   content: "listenAddress",
                   position: (109, 24),
                  },
                 ],
                },
                default: None,
               },
               else_: String {
                parts: [
                 Raw {
                  content: "localhost",
                  position: (111, 10),
                 },
                ],
               },
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (112, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (112, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "if config.",
                   position: (113, 1),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "mpdOpt",
                     position: (113, 21),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "network",
                       position: (113, 28),
                      },
                      Raw {
                       content: "listenAddress",
                       position: (113, 36),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: " != \"any\"\nthen config.",
                   position: (113, 50),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "mpdOpt",
                     position: (114, 23),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "network",
                       position: (114, 30),
                      },
                      Raw {
                       content: "listenAddress",
                       position: (114, 38),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "\nelse \"localhost\"\n",
                   position: (114, 52),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (117, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (117, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (117, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (118, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Host for the mpdscribble daemon to search for a mpd daemon on.\n",
                 position: (119, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "passwordFile",
            position: (123, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (123, 20),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (124, 7),
                },
               ],
              },
              IfThenElse {
               predicate: Variable {
                identifier: "localMpd",
                position: (124, 20),
               },
               then: PropertyAccess {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "findFirst",
                  position: (125, 10),
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "c",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "any",
                     position: (126, 15),
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "x",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        Variable {
                         identifier: "x",
                         position: (126, 23),
                        },
                        String {
                         parts: [
                          Raw {
                           content: "read",
                           position: (126, 29),
                          },
                         ],
                        },
                       ],
                      },
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "c",
                       position: (126, 36),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "permissions",
                         position: (126, 38),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  },
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "passwordFile",
                        position: (127, 13),
                       },
                      ],
                     },
                     Variable {
                      identifier: "null",
                      position: (127, 28),
                     },
                    ),
                   ],
                   recursive: false,
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mpdCfg",
                    position: (128, 11),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "credentials",
                      position: (128, 18),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "passwordFile",
                   position: (128, 31),
                  },
                 ],
                },
                default: None,
               },
               else_: Variable {
                identifier: "null",
                position: (130, 9),
               },
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (131, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalDocBook",
                position: (131, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "The first password file with read access configured for MPD when using a local instance,\notherwise <literal>null</literal>.\n",
                   position: (132, 1),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (135, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (135, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (135, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (135, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "str",
                    position: (135, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (136, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "File containing the password for the mpd daemon.\nIf there is a local mpd configured using <option>services.mpd.credentials</option>\nthe default is automatically set to a matching passwordFile of the local mpd.\n",
                 position: (137, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "port",
            position: (143, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (143, 12),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (144, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "mpdCfg",
                position: (144, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "network",
                  position: (144, 24),
                 },
                 Raw {
                  content: "port",
                  position: (144, 32),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (145, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (145, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "config.",
                   position: (145, 40),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "mpdOpt",
                     position: (145, 49),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "network",
                       position: (145, 56),
                      },
                      Raw {
                       content: "port",
                       position: (145, 64),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (146, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (146, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "port",
                  position: (146, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (147, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Port for the mpdscribble daemon to search for a mpd daemon on.\n",
                 position: (148, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "endpoints",
            position: (152, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (152, 17),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (153, 7),
                },
               ],
              },
              LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "endpoint",
                    position: (154, 9),
                   },
                  ],
                 },
                 Function {
                  argument: None,
                  arguments: FunctionArguments {
                   arguments: [
                    FunctionArgument {
                     identifier: "name",
                     default: None,
                    },
                   ],
                   ellipsis: true,
                  },
                  definition: Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "options",
                        position: (155, 11),
                       },
                      ],
                     },
                     Map {
                      bindings: [
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "url",
                           position: (156, 13),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "mkOption",
                          position: (156, 19),
                         },
                         arguments: [
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "type",
                                position: (157, 15),
                               },
                              ],
                             },
                             PropertyAccess {
                              expression: Variable {
                               identifier: "types",
                               position: (157, 22),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "str",
                                 position: (157, 28),
                                },
                               ],
                              },
                              default: None,
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "default",
                                position: (158, 15),
                               },
                              ],
                             },
                             PropertyAccess {
                              expression: Variable {
                               identifier: "endpointUrls",
                               position: (158, 25),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Expression {
                                 expression: Variable {
                                  identifier: "name",
                                  position: (158, 40),
                                 },
                                },
                               ],
                              },
                              default: Some(
                               String {
                                parts: [],
                               },
                              ),
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "description",
                                position: (159, 15),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "The url endpoint where the scrobble API is listening.",
                                position: (160, 18),
                               },
                              ],
                             },
                            ),
                           ],
                           recursive: false,
                          },
                         ],
                        },
                       ),
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "username",
                           position: (162, 13),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "mkOption",
                          position: (162, 24),
                         },
                         arguments: [
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "type",
                                position: (163, 15),
                               },
                              ],
                             },
                             PropertyAccess {
                              expression: Variable {
                               identifier: "types",
                               position: (163, 22),
                              },
                              attribute_path: AttributePath {
                               attributes: [
                                Raw {
                                 content: "str",
                                 position: (163, 28),
                                },
                               ],
                              },
                              default: None,
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "description",
                                position: (164, 15),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "Username for the scrobble service.\n",
                                position: (165, 1),
                               },
                              ],
                             },
                            ),
                           ],
                           recursive: false,
                          },
                         ],
                        },
                       ),
                       KeyValue(
                        AttributePath {
                         attributes: [
                          Raw {
                           content: "passwordFile",
                           position: (168, 13),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "mkOption",
                          position: (168, 28),
                         },
                         arguments: [
                          Map {
                           bindings: [
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "type",
                                position: (169, 15),
                               },
                              ],
                             },
                             FunctionApplication {
                              function: PropertyAccess {
                               expression: Variable {
                                identifier: "types",
                                position: (169, 22),
                               },
                               attribute_path: AttributePath {
                                attributes: [
                                 Raw {
                                  content: "nullOr",
                                  position: (169, 28),
                                 },
                                ],
                               },
                               default: None,
                              },
                              arguments: [
                               PropertyAccess {
                                expression: Variable {
                                 identifier: "types",
                                 position: (169, 35),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "str",
                                   position: (169, 41),
                                  },
                                 ],
                                },
                                default: None,
                               },
                              ],
                             },
                            ),
                            KeyValue(
                             AttributePath {
                              attributes: [
                               Raw {
                                content: "description",
                                position: (170, 15),
                               },
                              ],
                             },
                             String {
                              parts: [
                               Raw {
                                content: "File containing the password, either as MD5SUM or cleartext.",
                                position: (171, 18),
                               },
                              ],
                             },
                            ),
                           ],
                           recursive: false,
                          },
                         ],
                        },
                       ),
                      ],
                      recursive: false,
                     },
                    ),
                   ],
                   recursive: false,
                  },
                 },
                ),
               ],
               target: FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (175, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "attrsOf",
                    position: (175, 16),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (175, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "submodule",
                      position: (175, 31),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "endpoint",
                    position: (175, 41),
                   },
                  ],
                 },
                ],
               },
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (176, 7),
                },
               ],
              },
              Map {
               bindings: [],
               recursive: false,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (177, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Expression {
                    expression: String {
                     parts: [
                      Raw {
                       content: "last.fm",
                       position: (178, 10),
                      },
                     ],
                    },
                   },
                  ],
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "username",
                       position: (179, 11),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "foo",
                       position: (179, 23),
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "passwordFile",
                       position: (180, 11),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "/run/secrets/lastfm_password",
                       position: (180, 27),
                      },
                     ],
                    },
                   ),
                  ],
                  recursive: false,
                 },
                ),
               ],
               recursive: false,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (183, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Endpoints to scrobble to.\nIf the endpoint is one of \"",
                 position: (184, 1),
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "concatStringsSep",
                   position: (186, 11),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\", \"",
                      position: (186, 29),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "attrNames",
                     position: (186, 38),
                    },
                    arguments: [
                     Variable {
                      identifier: "endpointUrls",
                      position: (186, 48),
                     },
                    ],
                   },
                  ],
                 },
                },
                Raw {
                 content: "\" the url is set automatically.\n",
                 position: (187, 10),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (195, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (195, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (195, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (195, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (196, 5),
             },
             Raw {
              content: "services",
              position: (196, 13),
             },
             Raw {
              content: "mpdscribble",
              position: (196, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (197, 7),
                },
               ],
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "network.target",
                     position: (197, 18),
                    },
                   ],
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "optional",
                  position: (197, 40),
                 },
                 arguments: [
                  Variable {
                   identifier: "localMpd",
                   position: (197, 49),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "mpd.service",
                     position: (197, 59),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (198, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "mpdscribble mpd scrobble client",
                 position: (198, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (199, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                   position: (199, 21),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (200, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "DynamicUser",
                    position: (201, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (201, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectory",
                    position: (202, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "mpdscribble",
                    position: (202, 27),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RuntimeDirectory",
                    position: (203, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "mpdscribble",
                    position: (203, 29),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "RuntimeDirectoryMode",
                    position: (204, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "700",
                    position: (204, 33),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStartPre",
                    position: (206, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "+",
                    position: (206, 25),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "preStart",
                     position: (206, 28),
                    },
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (207, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "pkgs",
                      position: (208, 14),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "mpdscribble",
                        position: (208, 19),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/bin/mpdscribble --no-daemon --conf ",
                    position: (208, 31),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "cfgFile",
                     position: (208, 69),
                    },
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
              },
             ),
            ],
            recursive: false,
           },
          ),
         ],
         recursive: false,
        },
       ],
      },
     ),
    ],
    recursive: false,
   },
  },
 },
}