---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: LetIn {
  bindings: [
   Inherit {
    from: Some(
     Variable {
      identifier: "lib",
      position: (4, 12),
     },
    ),
    attributes: [
     Raw {
      content: "mkOption",
      position: (4, 17),
     },
     Raw {
      content: "mkIf",
      position: (4, 26),
     },
     Raw {
      content: "types",
      position: (4, 31),
     },
    ],
   },
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "cfg",
       position: (5, 3),
      },
     ],
    },
    PropertyAccess {
     expression: Variable {
      identifier: "config",
      position: (5, 9),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "hardware",
        position: (5, 16),
       },
       Raw {
        content: "keyboard",
        position: (5, 25),
       },
       Raw {
        content: "zsa",
        position: (5, 34),
       },
      ],
     },
     default: None,
    },
   ),
  ],
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "options",
        position: (8, 3),
       },
       Raw {
        content: "hardware",
        position: (8, 11),
       },
       Raw {
        content: "keyboard",
        position: (8, 20),
       },
       Raw {
        content: "zsa",
        position: (8, 29),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "enable",
           position: (9, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (9, 14),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (10, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (10, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "bool",
                 position: (10, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (11, 7),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (11, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (12, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Enables udev rules for keyboards from ZSA like the ErgoDox EZ, Planck EZ and Moonlander Mark I.\nYou need it when you want to flash a new configuration on the keyboard\nor use their live training in the browser.\nYou may want to install the wally-cli package.\n",
               },
              ],
              position: (12, 21),
             },
            ),
           ],
           recursive: false,
           position: (9, 23),
          },
         ],
        },
       ),
      ],
      recursive: false,
      position: (8, 35),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "config",
        position: (21, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkIf",
       position: (21, 12),
      },
      arguments: [
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (21, 17),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "enable",
           position: (21, 21),
          },
         ],
        },
        default: None,
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "services",
             position: (22, 5),
            },
            Raw {
             content: "udev",
             position: (22, 14),
            },
            Raw {
             content: "packages",
             position: (22, 19),
            },
           ],
          },
          List {
           elements: [
            PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (22, 32),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "zsa-udev-rules",
                position: (22, 37),
               },
              ],
             },
             default: None,
            },
           ],
           position: (22, 30),
          },
         ),
        ],
        recursive: false,
        position: (21, 28),
       },
      ],
     },
    ),
   ],
   recursive: false,
   position: (7, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}