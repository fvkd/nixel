---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "options",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "neo4j",
         position: (6, 25),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "opt",
        position: (7, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "options",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (7, 17),
        },
        Raw {
         content: "neo4j",
         position: (7, 26),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "certDirOpt",
        position: (8, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "options",
       position: (8, 16),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "services",
         position: (8, 24),
        },
        Raw {
         content: "neo4j",
         position: (8, 33),
        },
        Raw {
         content: "directories",
         position: (8, 39),
        },
        Raw {
         content: "certificates",
         position: (8, 51),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "isDefaultPathOption",
        position: (9, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "opt",
      },
      definition: BinaryOperation {
       operator: LogicalAnd,
       operands: [
        BinaryOperation {
         operator: LogicalAnd,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "isOption",
            position: (9, 30),
           },
           arguments: [
            Variable {
             identifier: "opt",
             position: (9, 39),
            },
           ],
          },
          BinaryOperation {
           operator: EqualTo,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "opt",
              position: (9, 46),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "type",
                position: (9, 50),
               },
              ],
             },
             default: None,
            },
            PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (9, 58),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "path",
                position: (9, 64),
               },
              ],
             },
             default: None,
            },
           ],
           position: (9, 55),
          },
         ],
         position: (9, 43),
        },
        BinaryOperation {
         operator: GreaterThanOrEqualTo,
         operands: [
          PropertyAccess {
           expression: Variable {
            identifier: "opt",
            position: (9, 72),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "highestPrio",
              position: (9, 76),
             },
            ],
           },
           default: None,
          },
          Int {
           value: 1500,
           position: (9, 91),
          },
         ],
         position: (9, 88),
        },
       ],
       position: (9, 69),
      },
      position: (9, 25),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "sslPolicies",
        position: (11, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "mapAttrsToList",
       position: (11, 17),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "name",
         },
         definition: Function {
          argument: Simple {
           identifier: "conf",
          },
          definition: String {
           parts: [
            Raw {
             content: "dbms.ssl.policy.",
             position: (13, 1),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (13, 25),
             },
            },
            Raw {
             content: ".allow_key_generation=",
             position: (13, 30),
            },
            Interpolation {
             expression: FunctionApplication {
              function: Variable {
               identifier: "boolToString",
               position: (13, 54),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "conf",
                 position: (13, 67),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "allowKeyGeneration",
                   position: (13, 72),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (13, 91),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (14, 25),
             },
            },
            Raw {
             content: ".base_directory=",
             position: (14, 30),
            },
            Interpolation {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "conf",
               position: (14, 48),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "baseDirectory",
                 position: (14, 53),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "\n",
             position: (14, 67),
            },
            Interpolation {
             expression: FunctionApplication {
              function: Variable {
               identifier: "optionalString",
               position: (15, 9),
              },
              arguments: [
               Parentheses {
                expression: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "conf",
                    position: (15, 25),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "ciphers",
                      position: (15, 30),
                     },
                    ],
                   },
                   default: None,
                  },
                  Variable {
                   identifier: "null",
                   position: (15, 41),
                  },
                 ],
                 position: (15, 38),
                },
                position: (15, 24),
               },
               String {
                parts: [
                 Raw {
                  content: "dbms.ssl.policy.",
                  position: (16, 1),
                 },
                 Interpolation {
                  expression: Variable {
                   identifier: "name",
                   position: (16, 27),
                  },
                 },
                 Raw {
                  content: ".ciphers=",
                  position: (16, 32),
                 },
                 Interpolation {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "concatStringsSep",
                    position: (16, 43),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: ",",
                       position: (16, 61),
                      },
                     ],
                     position: (16, 60),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "conf",
                      position: (16, 64),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "ciphers",
                        position: (16, 69),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "\n",
                  position: (16, 77),
                 },
                ],
                position: (15, 47),
               },
              ],
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (17, 10),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (18, 25),
             },
            },
            Raw {
             content: ".client_auth=",
             position: (18, 30),
            },
            Interpolation {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "conf",
               position: (18, 45),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "clientAuth",
                 position: (18, 50),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "\n",
             position: (18, 61),
            },
            Interpolation {
             expression: IfThenElse {
              predicate: BinaryOperation {
               operator: GreaterThan,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "length",
                  position: (19, 12),
                 },
                 arguments: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "splitString",
                     position: (19, 20),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "/",
                        position: (19, 33),
                       },
                      ],
                      position: (19, 32),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "conf",
                       position: (19, 36),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "privateKey",
                         position: (19, 41),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (19, 19),
                  },
                 ],
                },
                Int {
                 value: 1,
                 position: (19, 55),
                },
               ],
               position: (19, 53),
              },
              then: String {
               parts: [
                Raw {
                 content: "dbms.ssl.policy.",
                 position: (20, 10),
                },
                Interpolation {
                 expression: Variable {
                  identifier: "name",
                  position: (20, 28),
                 },
                },
                Raw {
                 content: ".private_key=",
                 position: (20, 33),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (20, 48),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "privateKey",
                     position: (20, 53),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               position: (20, 9),
              },
              else_: String {
               parts: [
                Raw {
                 content: "dbms.ssl.policy.",
                 position: (22, 10),
                },
                Interpolation {
                 expression: Variable {
                  identifier: "name",
                  position: (22, 28),
                 },
                },
                Raw {
                 content: ".private_key=",
                 position: (22, 33),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (22, 48),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "baseDirectory",
                     position: (22, 53),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "/",
                 position: (22, 67),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (22, 70),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "privateKey",
                     position: (22, 75),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               position: (22, 9),
              },
              position: (19, 9),
             },
            },
            Raw {
             content: "\n",
             position: (23, 8),
            },
            Interpolation {
             expression: IfThenElse {
              predicate: BinaryOperation {
               operator: GreaterThan,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "length",
                  position: (24, 12),
                 },
                 arguments: [
                  Parentheses {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "splitString",
                     position: (24, 20),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "/",
                        position: (24, 33),
                       },
                      ],
                      position: (24, 32),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "conf",
                       position: (24, 36),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "privateKey",
                         position: (24, 41),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   position: (24, 19),
                  },
                 ],
                },
                Int {
                 value: 1,
                 position: (24, 55),
                },
               ],
               position: (24, 53),
              },
              then: String {
               parts: [
                Raw {
                 content: "dbms.ssl.policy.",
                 position: (25, 10),
                },
                Interpolation {
                 expression: Variable {
                  identifier: "name",
                  position: (25, 28),
                 },
                },
                Raw {
                 content: ".public_certificate=",
                 position: (25, 33),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (25, 55),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "publicCertificate",
                     position: (25, 60),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               position: (25, 9),
              },
              else_: String {
               parts: [
                Raw {
                 content: "dbms.ssl.policy.",
                 position: (27, 10),
                },
                Interpolation {
                 expression: Variable {
                  identifier: "name",
                  position: (27, 28),
                 },
                },
                Raw {
                 content: ".public_certificate=",
                 position: (27, 33),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (27, 55),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "baseDirectory",
                     position: (27, 60),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: "/",
                 position: (27, 74),
                },
                Interpolation {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "conf",
                   position: (27, 77),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "publicCertificate",
                     position: (27, 82),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               position: (27, 9),
              },
              position: (24, 9),
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (28, 8),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (29, 25),
             },
            },
            Raw {
             content: ".revoked_dir=",
             position: (29, 30),
            },
            Interpolation {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "conf",
               position: (29, 45),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "revokedDir",
                 position: (29, 50),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (29, 61),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (30, 25),
             },
            },
            Raw {
             content: ".tls_versions=",
             position: (30, 30),
            },
            Interpolation {
             expression: FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (30, 46),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: ",",
                  position: (30, 64),
                 },
                ],
                position: (30, 63),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "conf",
                 position: (30, 67),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "tlsVersions",
                   position: (30, 72),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (30, 84),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (31, 25),
             },
            },
            Raw {
             content: ".trust_all=",
             position: (31, 30),
            },
            Interpolation {
             expression: FunctionApplication {
              function: Variable {
               identifier: "boolToString",
               position: (31, 43),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "conf",
                 position: (31, 56),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "trustAll",
                   position: (31, 61),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            },
            Raw {
             content: "\ndbms.ssl.policy.",
             position: (31, 70),
            },
            Interpolation {
             expression: Variable {
              identifier: "name",
              position: (32, 25),
             },
            },
            Raw {
             content: ".trusted_dir=",
             position: (32, 30),
            },
            Interpolation {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "conf",
               position: (32, 45),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "trustedDir",
                 position: (32, 50),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "\n",
             position: (32, 61),
            },
           ],
           position: (12, 17),
          },
          position: (12, 11),
         },
         position: (12, 5),
        },
        position: (11, 32),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (34, 5),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "ssl",
           position: (34, 9),
          },
          Raw {
           content: "policies",
           position: (34, 13),
          },
         ],
        },
        default: None,
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "serverConfig",
        position: (36, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (36, 18),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "writeText",
          position: (36, 23),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "neo4j.conf",
          position: (36, 34),
         },
        ],
        position: (36, 33),
       },
       String {
        parts: [
         Raw {
          content: "# General\ndbms.allow_upgrade=",
          position: (37, 1),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (38, 26),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (38, 39),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "allowUpgrade",
                position: (38, 43),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\ndbms.connectors.default_listen_address=",
          position: (38, 56),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (39, 46),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "defaultListenAddress",
              position: (39, 50),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\ndbms.read_only=",
          position: (39, 71),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (40, 22),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (40, 35),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "readOnly",
                position: (40, 39),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (40, 48),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (41, 7),
           },
           arguments: [
            Parentheses {
             expression: BinaryOperation {
              operator: GreaterThan,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (41, 23),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "workerCount",
                   position: (41, 27),
                  },
                 ],
                },
                default: None,
               },
               Int {
                value: 0,
                position: (41, 41),
               },
              ],
              position: (41, 39),
             },
             position: (41, 22),
            },
            String {
             parts: [
              Raw {
               content: "dbms.threads.worker_count=",
               position: (42, 1),
              },
              Interpolation {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (42, 35),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (42, 44),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "workerCount",
                     position: (42, 48),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: "\n",
               position: (42, 60),
              },
             ],
             position: (41, 44),
            },
           ],
          },
         },
         Raw {
          content: "\n\n# Directories\ndbms.directories.certificates=",
          position: (43, 8),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (46, 37),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "directories",
              position: (46, 41),
             },
             Raw {
              content: "certificates",
              position: (46, 53),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\ndbms.directories.data=",
          position: (46, 66),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (47, 29),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "directories",
              position: (47, 33),
             },
             Raw {
              content: "data",
              position: (47, 45),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\ndbms.directories.logs=",
          position: (47, 50),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (48, 29),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "directories",
              position: (48, 33),
             },
             Raw {
              content: "home",
              position: (48, 45),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/logs\ndbms.directories.plugins=",
          position: (48, 50),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (49, 32),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "directories",
              position: (49, 36),
             },
             Raw {
              content: "plugins",
              position: (49, 48),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n",
          position: (49, 56),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (50, 7),
           },
           arguments: [
            Parentheses {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (50, 23),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "constrainLoadCsv",
                 position: (50, 27),
                },
               ],
              },
              default: None,
             },
             position: (50, 22),
            },
            String {
             parts: [
              Raw {
               content: "dbms.directories.import=",
               position: (51, 1),
              },
              Interpolation {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (51, 33),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "directories",
                   position: (51, 37),
                  },
                  Raw {
                   content: "imports",
                   position: (51, 49),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (51, 57),
              },
             ],
             position: (50, 45),
            },
           ],
          },
         },
         Raw {
          content: "\n\n# HTTP Connector\n",
          position: (52, 8),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (55, 7),
           },
           arguments: [
            Parentheses {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (55, 23),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "http",
                 position: (55, 27),
                },
                Raw {
                 content: "enable",
                 position: (55, 32),
                },
               ],
              },
              default: None,
             },
             position: (55, 22),
            },
            String {
             parts: [
              Raw {
               content: "dbms.connector.http.enabled=",
               position: (56, 1),
              },
              Interpolation {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "boolToString",
                 position: (56, 37),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (56, 50),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "http",
                     position: (56, 54),
                    },
                    Raw {
                     content: "enable",
                     position: (56, 59),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: "\ndbms.connector.http.listen_address=",
               position: (56, 66),
              },
              Interpolation {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (57, 44),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "http",
                   position: (57, 48),
                  },
                  Raw {
                   content: "listenAddress",
                   position: (57, 53),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (57, 67),
              },
             ],
             position: (55, 40),
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (58, 8),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (59, 7),
           },
           arguments: [
            Parentheses {
             expression: UnaryOperation {
              operator: Not,
              operand: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (59, 24),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "http",
                  position: (59, 28),
                 },
                 Raw {
                  content: "enable",
                  position: (59, 33),
                 },
                ],
               },
               default: None,
              },
              position: (59, 23),
             },
             position: (59, 22),
            },
            String {
             parts: [
              Raw {
               content: "# It is not possible to disable the HTTP connector. To fully prevent\n# clients from connecting to HTTP, block the HTTP port (7474 by default)\n# via firewall. listen_address is set to the loopback interface to\n# prevent remote clients from connecting.\ndbms.connector.http.listen_address=127.0.0.1\n",
               position: (60, 1),
              },
             ],
             position: (59, 41),
            },
           ],
          },
         },
         Raw {
          content: "\n\n# HTTPS Connector\ndbms.connector.https.enabled=",
          position: (65, 8),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (68, 36),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (68, 49),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "https",
                position: (68, 53),
               },
               Raw {
                content: "enable",
                position: (68, 59),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\ndbms.connector.https.listen_address=",
          position: (68, 66),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (69, 43),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "https",
              position: (69, 47),
             },
             Raw {
              content: "listenAddress",
              position: (69, 53),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\nhttps.ssl_policy=",
          position: (69, 67),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (70, 24),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "https",
              position: (70, 28),
             },
             Raw {
              content: "sslPolicy",
              position: (70, 34),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n\n# BOLT Connector\ndbms.connector.bolt.enabled=",
          position: (70, 44),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (73, 35),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (73, 48),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "bolt",
                position: (73, 52),
               },
               Raw {
                content: "enable",
                position: (73, 57),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\ndbms.connector.bolt.listen_address=",
          position: (73, 64),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (74, 42),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "bolt",
              position: (74, 46),
             },
             Raw {
              content: "listenAddress",
              position: (74, 51),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\nbolt.ssl_policy=",
          position: (74, 65),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (75, 23),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "bolt",
              position: (75, 27),
             },
             Raw {
              content: "sslPolicy",
              position: (75, 32),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\ndbms.connector.bolt.tls_level=",
          position: (75, 42),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (76, 37),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "bolt",
              position: (76, 41),
             },
             Raw {
              content: "tlsLevel",
              position: (76, 46),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n\n# neo4j-shell\ndbms.shell.enabled=",
          position: (76, 55),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (79, 26),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (79, 39),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "shell",
                position: (79, 43),
               },
               Raw {
                content: "enable",
                position: (79, 49),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n# SSL Policies\n",
          position: (79, 56),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "concatStringsSep",
            position: (82, 7),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "\n",
               position: (82, 25),
              },
             ],
             position: (82, 24),
            },
            Variable {
             identifier: "sslPolicies",
             position: (82, 29),
            },
           ],
          },
         },
         Raw {
          content: "\n\n# Default retention policy from neo4j.conf\ndbms.tx_log.rotation.retention_policy=1 days\n\n# Default JVM parameters from neo4j.conf\ndbms.jvm.additional=-XX:+UseG1GC\ndbms.jvm.additional=-XX:-OmitStackTraceInFastThrow\ndbms.jvm.additional=-XX:+AlwaysPreTouch\ndbms.jvm.additional=-XX:+UnlockExperimentalVMOptions\ndbms.jvm.additional=-XX:+TrustFinalNonStaticFields\ndbms.jvm.additional=-XX:+DisableExplicitGC\ndbms.jvm.additional=-Djdk.tls.ephemeralDHKeySize=2048\ndbms.jvm.additional=-Djdk.tls.rejectClientInitiatedRenegotiation=true\ndbms.jvm.additional=-Dunsupported.dbms.udc.source=tarball\n\n# Usage Data Collector\ndbms.udc.enabled=",
          position: (82, 41),
         },
         Interpolation {
          expression: FunctionApplication {
           function: Variable {
            identifier: "boolToString",
            position: (99, 24),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (99, 37),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "udc",
                position: (99, 41),
               },
               Raw {
                content: "enable",
                position: (99, 45),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "\n\n# Extra Configuration\n",
          position: (99, 52),
         },
         Interpolation {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (102, 7),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "extraServerConfig",
              position: (102, 11),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n",
          position: (102, 29),
         },
        ],
        position: (36, 46),
       },
      ],
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "imports",
         position: (107, 3),
        },
       ],
      },
      to: List {
       elements: [
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (108, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (108, 31),
               },
              ],
              position: (108, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (108, 42),
               },
              ],
              position: (108, 41),
             },
             String {
              parts: [
               Raw {
                content: "host",
                position: (108, 50),
               },
              ],
              position: (108, 49),
             },
            ],
            position: (108, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (108, 61),
               },
              ],
              position: (108, 60),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (108, 72),
               },
              ],
              position: (108, 71),
             },
             String {
              parts: [
               Raw {
                content: "defaultListenAddress",
                position: (108, 80),
               },
              ],
              position: (108, 79),
             },
            ],
            position: (108, 58),
           },
          ],
         },
         position: (108, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (109, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (109, 31),
               },
              ],
              position: (109, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (109, 42),
               },
              ],
              position: (109, 41),
             },
             String {
              parts: [
               Raw {
                content: "listenAddress",
                position: (109, 50),
               },
              ],
              position: (109, 49),
             },
            ],
            position: (109, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (109, 70),
               },
              ],
              position: (109, 69),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (109, 81),
               },
              ],
              position: (109, 80),
             },
             String {
              parts: [
               Raw {
                content: "defaultListenAddress",
                position: (109, 89),
               },
              ],
              position: (109, 88),
             },
            ],
            position: (109, 67),
           },
          ],
         },
         position: (109, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (110, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (110, 31),
               },
              ],
              position: (110, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (110, 42),
               },
              ],
              position: (110, 41),
             },
             String {
              parts: [
               Raw {
                content: "enableBolt",
                position: (110, 50),
               },
              ],
              position: (110, 49),
             },
            ],
            position: (110, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (110, 67),
               },
              ],
              position: (110, 66),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (110, 78),
               },
              ],
              position: (110, 77),
             },
             String {
              parts: [
               Raw {
                content: "bolt",
                position: (110, 86),
               },
              ],
              position: (110, 85),
             },
             String {
              parts: [
               Raw {
                content: "enable",
                position: (110, 93),
               },
              ],
              position: (110, 92),
             },
            ],
            position: (110, 64),
           },
          ],
         },
         position: (110, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (111, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (111, 31),
               },
              ],
              position: (111, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (111, 42),
               },
              ],
              position: (111, 41),
             },
             String {
              parts: [
               Raw {
                content: "enableHttps",
                position: (111, 50),
               },
              ],
              position: (111, 49),
             },
            ],
            position: (111, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (111, 68),
               },
              ],
              position: (111, 67),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (111, 79),
               },
              ],
              position: (111, 78),
             },
             String {
              parts: [
               Raw {
                content: "https",
                position: (111, 87),
               },
              ],
              position: (111, 86),
             },
             String {
              parts: [
               Raw {
                content: "enable",
                position: (111, 95),
               },
              ],
              position: (111, 94),
             },
            ],
            position: (111, 65),
           },
          ],
         },
         position: (111, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (112, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (112, 31),
               },
              ],
              position: (112, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (112, 42),
               },
              ],
              position: (112, 41),
             },
             String {
              parts: [
               Raw {
                content: "certDir",
                position: (112, 50),
               },
              ],
              position: (112, 49),
             },
            ],
            position: (112, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (112, 64),
               },
              ],
              position: (112, 63),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (112, 75),
               },
              ],
              position: (112, 74),
             },
             String {
              parts: [
               Raw {
                content: "directories",
                position: (112, 83),
               },
              ],
              position: (112, 82),
             },
             String {
              parts: [
               Raw {
                content: "certificates",
                position: (112, 97),
               },
              ],
              position: (112, 96),
             },
            ],
            position: (112, 61),
           },
          ],
         },
         position: (112, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRenamedOptionModule",
           position: (113, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (113, 31),
               },
              ],
              position: (113, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (113, 42),
               },
              ],
              position: (113, 41),
             },
             String {
              parts: [
               Raw {
                content: "dataDir",
                position: (113, 50),
               },
              ],
              position: (113, 49),
             },
            ],
            position: (113, 28),
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (113, 64),
               },
              ],
              position: (113, 63),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (113, 75),
               },
              ],
              position: (113, 74),
             },
             String {
              parts: [
               Raw {
                content: "directories",
                position: (113, 83),
               },
              ],
              position: (113, 82),
             },
             String {
              parts: [
               Raw {
                content: "home",
                position: (113, 97),
               },
              ],
              position: (113, 96),
             },
            ],
            position: (113, 61),
           },
          ],
         },
         position: (113, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRemovedOptionModule",
           position: (114, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (114, 31),
               },
              ],
              position: (114, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (114, 42),
               },
              ],
              position: (114, 41),
             },
             String {
              parts: [
               Raw {
                content: "port",
                position: (114, 50),
               },
              ],
              position: (114, 49),
             },
            ],
            position: (114, 28),
           },
           String {
            parts: [
             Raw {
              content: "Use services.neo4j.http.listenAddress instead.",
              position: (114, 59),
             },
            ],
            position: (114, 58),
           },
          ],
         },
         position: (114, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRemovedOptionModule",
           position: (115, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (115, 31),
               },
              ],
              position: (115, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (115, 42),
               },
              ],
              position: (115, 41),
             },
             String {
              parts: [
               Raw {
                content: "boltPort",
                position: (115, 50),
               },
              ],
              position: (115, 49),
             },
            ],
            position: (115, 28),
           },
           String {
            parts: [
             Raw {
              content: "Use services.neo4j.bolt.listenAddress instead.",
              position: (115, 63),
             },
            ],
            position: (115, 62),
           },
          ],
         },
         position: (115, 5),
        },
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRemovedOptionModule",
           position: (116, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "services",
                position: (116, 31),
               },
              ],
              position: (116, 30),
             },
             String {
              parts: [
               Raw {
                content: "neo4j",
                position: (116, 42),
               },
              ],
              position: (116, 41),
             },
             String {
              parts: [
               Raw {
                content: "httpsPort",
                position: (116, 50),
               },
              ],
              position: (116, 49),
             },
            ],
            position: (116, 28),
           },
           String {
            parts: [
             Raw {
              content: "Use services.neo4j.https.listenAddress instead.",
              position: (116, 64),
             },
            ],
            position: (116, 63),
           },
          ],
         },
         position: (116, 5),
        },
       ],
       position: (107, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (121, 3),
        },
        Raw {
         content: "services",
         position: (121, 11),
        },
        Raw {
         content: "neo4j",
         position: (121, 20),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (123, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (123, 14),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (124, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (124, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bool",
                  position: (124, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (125, 7),
                },
               ],
              },
              to: Variable {
               identifier: "false",
               position: (125, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (126, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Whether to enable Neo4j Community Edition.\n",
                 position: (127, 1),
                },
               ],
               position: (126, 21),
              },
             },
            ],
            recursive: false,
            position: (123, 23),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "allowUpgrade",
            position: (131, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (131, 20),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (132, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (132, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bool",
                  position: (132, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (133, 7),
                },
               ],
              },
              to: Variable {
               identifier: "false",
               position: (133, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (134, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Allow upgrade of Neo4j database files from an older version.\n",
                 position: (135, 1),
                },
               ],
               position: (134, 21),
              },
             },
            ],
            recursive: false,
            position: (131, 29),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "constrainLoadCsv",
            position: (139, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (139, 24),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (140, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (140, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bool",
                  position: (140, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (141, 7),
                },
               ],
              },
              to: Variable {
               identifier: "true",
               position: (141, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (142, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Sets the root directory for file URLs used with the Cypher\n<literal>LOAD CSV</literal> clause to be that defined by\n<option>directories.imports</option>. It restricts\naccess to only those files within that directory and its\nsubdirectories.\n</para>\n<para>\nSetting this option to <literal>false</literal> introduces\npossible security problems.\n",
                 position: (143, 1),
                },
               ],
               position: (142, 21),
              },
             },
            ],
            recursive: false,
            position: (139, 33),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "defaultListenAddress",
            position: (155, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (155, 28),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (156, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (156, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (156, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (157, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "127.0.0.1",
                 position: (157, 18),
                },
               ],
               position: (157, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (158, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Default network interface to listen for incoming connections. To\nlisten for connections on all interfaces, use \"0.0.0.0\".\n</para>\n<para>\nSpecifies the default IP address and address part of connector\nspecific <option>listenAddress</option> options. To bind specific\nconnectors to a specific network interfaces, specify the entire\n<option>listenAddress</option> option for that connector.\n",
                 position: (159, 1),
                },
               ],
               position: (158, 21),
              },
             },
            ],
            recursive: false,
            position: (155, 37),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "extraServerConfig",
            position: (170, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (170, 25),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (171, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (171, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "lines",
                  position: (171, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (172, 7),
                },
               ],
              },
              to: String {
               parts: [],
               position: (172, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (173, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Extra configuration for Neo4j Community server. Refer to the\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/\">complete reference</link>\nof Neo4j configuration settings.\n",
                 position: (174, 1),
                },
               ],
               position: (173, 21),
              },
             },
            ],
            recursive: false,
            position: (170, 34),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "package",
            position: (180, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (180, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (181, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (181, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "package",
                  position: (181, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (182, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (182, 17),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "neo4j",
                  position: (182, 22),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (183, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (183, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.neo4j",
                   position: (183, 40),
                  },
                 ],
                 position: (183, 39),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (184, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Neo4j package to use.\n",
                 position: (185, 1),
                },
               ],
               position: (184, 21),
              },
             },
            ],
            recursive: false,
            position: (180, 24),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "readOnly",
            position: (189, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (189, 16),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (190, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (190, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bool",
                  position: (190, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (191, 7),
                },
               ],
              },
              to: Variable {
               identifier: "false",
               position: (191, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (192, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Only allow read operations from this Neo4j instance.\n",
                 position: (193, 1),
                },
               ],
               position: (192, 21),
              },
             },
            ],
            recursive: false,
            position: (189, 25),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "workerCount",
            position: (197, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (197, 19),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (198, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (198, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "ints",
                   position: (198, 20),
                  },
                  Raw {
                   content: "between",
                   position: (198, 25),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Int {
                 value: 0,
                 position: (198, 33),
                },
                Int {
                 value: 44738,
                 position: (198, 35),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (199, 7),
                },
               ],
              },
              to: Int {
               value: 0,
               position: (199, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (200, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Number of Neo4j worker threads, where the default of\n<literal>0</literal> indicates a worker count equal to the number of\navailable processors.\n",
                 position: (201, 1),
                },
               ],
               position: (200, 21),
              },
             },
            ],
            recursive: false,
            position: (197, 28),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "bolt",
            position: (207, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (208, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (208, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (209, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (209, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (209, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (210, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (210, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (211, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Enable the BOLT connector for Neo4j. Setting this option to\n<literal>false</literal> will stop Neo4j from listening for incoming\nconnections on the BOLT port (7687 by default).\n",
                    position: (212, 1),
                   },
                  ],
                  position: (211, 23),
                 },
                },
               ],
               recursive: false,
               position: (208, 25),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "listenAddress",
               position: (218, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (218, 23),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (219, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (219, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (219, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (220, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: ":7687",
                    position: (220, 20),
                   },
                  ],
                  position: (220, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (221, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Neo4j listen address for BOLT traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n",
                    position: (222, 1),
                   },
                  ],
                  position: (221, 23),
                 },
                },
               ],
               recursive: false,
               position: (218, 32),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "sslPolicy",
               position: (227, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (227, 19),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (228, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (228, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (228, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (229, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "legacy",
                    position: (229, 20),
                   },
                  ],
                  position: (229, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (230, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Neo4j SSL policy for BOLT traffic.\n</para>\n<para>\nThe legacy policy is a special policy which is not defined in\nthe policy configuration section, but rather derives from\n<option>directories.certificates</option> and\nassociated files (by default: <filename>neo4j.key</filename> and\n<filename>neo4j.cert</filename>). Its use will be deprecated.\n</para>\n<para>\nNote: This connector must be configured to support/require\nSSL/TLS for the legacy policy to actually be utilized. See\n<option>bolt.tlsLevel</option>.\n",
                    position: (231, 1),
                   },
                  ],
                  position: (230, 23),
                 },
                },
               ],
               recursive: false,
               position: (227, 28),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "tlsLevel",
               position: (247, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (247, 18),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (248, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (248, 16),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "enum",
                      position: (248, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "REQUIRED",
                        position: (248, 30),
                       },
                      ],
                      position: (248, 29),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "OPTIONAL",
                        position: (248, 41),
                       },
                      ],
                      position: (248, 40),
                     },
                     String {
                      parts: [
                       Raw {
                        content: "DISABLED",
                        position: (248, 52),
                       },
                      ],
                      position: (248, 51),
                     },
                    ],
                    position: (248, 27),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (249, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "OPTIONAL",
                    position: (249, 20),
                   },
                  ],
                  position: (249, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (250, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "SSL/TSL requirement level for BOLT traffic.\n",
                    position: (251, 1),
                   },
                  ],
                  position: (250, 23),
                 },
                },
               ],
               recursive: false,
               position: (247, 27),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (207, 12),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "directories",
            position: (256, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "certificates",
               position: (257, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (257, 22),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (258, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (258, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (258, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (259, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (259, 22),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "directories",
                        position: (259, 26),
                       },
                       Raw {
                        content: "home",
                        position: (259, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/certificates",
                    position: (259, 43),
                   },
                  ],
                  position: (259, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (260, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (260, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\"",
                      position: (260, 43),
                     },
                     Raw {
                      content: "$",
                      position: (260, 44),
                     },
                     Raw {
                      content: "{config.",
                      position: (260, 47),
                     },
                     Interpolation {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "opt",
                        position: (260, 57),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "directories",
                          position: (260, 61),
                         },
                         Raw {
                          content: "home",
                          position: (260, 73),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "}/certificates\"",
                      position: (260, 78),
                     },
                    ],
                    position: (260, 41),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (261, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Directory for storing certificates to be used by Neo4j for\nTLS connections.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read/write permissions are\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nNote that changing this directory from its default will prevent\nthe directory structure required for each SSL policy from being\nautomatically generated. A policy's directory structure as defined by\nits <option>baseDirectory</option>,<option>revokedDir</option> and\n<option>trustedDir</option> must then be setup manually. The\nexistence of these directories is mandatory, as well as the presence\nof the certificate file and the private key. Ensure the correct\npermissions are set on these directories and files.\n",
                    position: (262, 1),
                   },
                  ],
                  position: (261, 23),
                 },
                },
               ],
               recursive: false,
               position: (257, 31),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "data",
               position: (282, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (282, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (283, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (283, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (283, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (284, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (284, 22),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "directories",
                        position: (284, 26),
                       },
                       Raw {
                        content: "home",
                        position: (284, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/data",
                    position: (284, 43),
                   },
                  ],
                  position: (284, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (285, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (285, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\"",
                      position: (285, 43),
                     },
                     Raw {
                      content: "$",
                      position: (285, 44),
                     },
                     Raw {
                      content: "{config.",
                      position: (285, 47),
                     },
                     Interpolation {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "opt",
                        position: (285, 57),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "directories",
                          position: (285, 61),
                         },
                         Raw {
                          content: "home",
                          position: (285, 73),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "}/data\"",
                      position: (285, 78),
                     },
                    ],
                    position: (285, 41),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (286, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Path of the data directory. You must not configure more than one\nNeo4j installation to use the same data directory.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read/write permissions are\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n",
                    position: (287, 1),
                   },
                  ],
                  position: (286, 23),
                 },
                },
               ],
               recursive: false,
               position: (282, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "home",
               position: (297, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (297, 14),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (298, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (298, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (298, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (299, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "/var/lib/neo4j",
                    position: (299, 20),
                   },
                  ],
                  position: (299, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (300, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Path of the Neo4j home directory. Other default directories are\nsubdirectories of this path. This directory will be created if\nnon-existent, and its ownership will be <command>chown</command> to\nthe Neo4j daemon user <literal>neo4j</literal>.\n",
                    position: (301, 1),
                   },
                  ],
                  position: (300, 23),
                 },
                },
               ],
               recursive: false,
               position: (297, 23),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "imports",
               position: (308, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (308, 17),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (309, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (309, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (309, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (310, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (310, 22),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "directories",
                        position: (310, 26),
                       },
                       Raw {
                        content: "home",
                        position: (310, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/import",
                    position: (310, 43),
                   },
                  ],
                  position: (310, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (311, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (311, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\"",
                      position: (311, 43),
                     },
                     Raw {
                      content: "$",
                      position: (311, 44),
                     },
                     Raw {
                      content: "{config.",
                      position: (311, 47),
                     },
                     Interpolation {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "opt",
                        position: (311, 57),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "directories",
                          position: (311, 61),
                         },
                         Raw {
                          content: "home",
                          position: (311, 73),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "}/import\"",
                      position: (311, 78),
                     },
                    ],
                    position: (311, 41),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (312, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The root directory for file URLs used with the Cypher\n<literal>LOAD CSV</literal> clause. Only meaningful when\n<option>constrainLoadCvs</option> is set to\n<literal>true</literal>.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read permission is\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n",
                    position: (313, 1),
                   },
                  ],
                  position: (312, 23),
                 },
                },
               ],
               recursive: false,
               position: (308, 26),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "plugins",
               position: (325, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (325, 17),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (326, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (326, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "path",
                     position: (326, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (327, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (327, 22),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "directories",
                        position: (327, 26),
                       },
                       Raw {
                        content: "home",
                        position: (327, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/plugins",
                    position: (327, 43),
                   },
                  ],
                  position: (327, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "defaultText",
                    position: (328, 9),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (328, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\"",
                      position: (328, 43),
                     },
                     Raw {
                      content: "$",
                      position: (328, 44),
                     },
                     Raw {
                      content: "{config.",
                      position: (328, 47),
                     },
                     Interpolation {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "opt",
                        position: (328, 57),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "directories",
                          position: (328, 61),
                         },
                         Raw {
                          content: "home",
                          position: (328, 73),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "}/plugins\"",
                      position: (328, 78),
                     },
                    ],
                    position: (328, 41),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (329, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Path of the database plugin directory. Compiled Java JAR files that\ncontain database procedures will be loaded if they are placed in\nthis directory.\n</para>\n<para>\nWhen setting this directory to something other than its default,\nensure the directory's existence, and that read permission is\ngiven to the Neo4j daemon user <literal>neo4j</literal>.\n",
                    position: (330, 1),
                   },
                  ],
                  position: (329, 23),
                 },
                },
               ],
               recursive: false,
               position: (325, 26),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (256, 19),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "http",
            position: (342, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (343, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (343, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (344, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (344, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (344, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (345, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (345, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (346, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The HTTP connector is required for Neo4j, and cannot be disabled.\nSetting this option to <literal>false</literal> will force the HTTP\nconnector's <option>listenAddress</option> to the loopback\ninterface to prevent connection of remote clients. To prevent all\nclients from connecting, block the HTTP port (7474 by default) by\nfirewall.\n",
                    position: (347, 1),
                   },
                  ],
                  position: (346, 23),
                 },
                },
               ],
               recursive: false,
               position: (343, 25),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "listenAddress",
               position: (356, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (356, 23),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (357, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (357, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (357, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (358, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: ":7474",
                    position: (358, 20),
                   },
                  ],
                  position: (358, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (359, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Neo4j listen address for HTTP traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n",
                    position: (360, 1),
                   },
                  ],
                  position: (359, 23),
                 },
                },
               ],
               recursive: false,
               position: (356, 32),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (342, 12),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "https",
            position: (366, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (367, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (367, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (368, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (368, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (368, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (369, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (369, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (370, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Enable the HTTPS connector for Neo4j. Setting this option to\n<literal>false</literal> will stop Neo4j from listening for incoming\nconnections on the HTTPS port (7473 by default).\n",
                    position: (371, 1),
                   },
                  ],
                  position: (370, 23),
                 },
                },
               ],
               recursive: false,
               position: (367, 25),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "listenAddress",
               position: (377, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (377, 23),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (378, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (378, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (378, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (379, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: ":7473",
                    position: (379, 20),
                   },
                  ],
                  position: (379, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (380, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Neo4j listen address for HTTPS traffic. The listen address is\nexpressed in the format <literal>&lt;ip-address&gt;:&lt;port-number&gt;</literal>.\n",
                    position: (381, 1),
                   },
                  ],
                  position: (380, 23),
                 },
                },
               ],
               recursive: false,
               position: (377, 32),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "sslPolicy",
               position: (386, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (386, 19),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (387, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (387, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "str",
                     position: (387, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (388, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "legacy",
                    position: (388, 20),
                   },
                  ],
                  position: (388, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (389, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Neo4j SSL policy for HTTPS traffic.\n</para>\n<para>\nThe legacy policy is a special policy which is not defined in the\npolicy configuration section, but rather derives from\n<option>directories.certificates</option> and\nassociated files (by default: <filename>neo4j.key</filename> and\n<filename>neo4j.cert</filename>). Its use will be deprecated.\n",
                    position: (390, 1),
                   },
                  ],
                  position: (389, 23),
                 },
                },
               ],
               recursive: false,
               position: (386, 28),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (366, 13),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "shell",
            position: (402, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (403, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (403, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (404, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (404, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (404, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (405, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "false",
                  position: (405, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (406, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Enable a remote shell server which Neo4j Shell clients can log in to.\nOnly applicable to <command>neo4j-shell</command>.\n",
                    position: (407, 1),
                   },
                  ],
                  position: (406, 23),
                 },
                },
               ],
               recursive: false,
               position: (403, 25),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (402, 13),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "ssl",
            position: (413, 5),
           },
           Raw {
            content: "policies",
            position: (413, 9),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (413, 20),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (414, 7),
                },
               ],
              },
              to: With {
               expression: Variable {
                identifier: "types",
                position: (414, 19),
               },
               target: FunctionApplication {
                function: Variable {
                 identifier: "attrsOf",
                 position: (414, 26),
                },
                arguments: [
                 Parentheses {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "submodule",
                    position: (414, 35),
                   },
                   arguments: [
                    Parentheses {
                     expression: Function {
                      argument: Destructured {
                       identifier: None,
                       arguments: [
                        DestructuredArgument {
                         identifier: "name",
                         default: None,
                        },
                        DestructuredArgument {
                         identifier: "config",
                         default: None,
                        },
                        DestructuredArgument {
                         identifier: "options",
                         default: None,
                        },
                       ],
                       ellipsis: true,
                      },
                      definition: Map {
                       bindings: [
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "options",
                            position: (415, 9),
                           },
                          ],
                         },
                         to: Map {
                          bindings: [
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "allowKeyGeneration",
                               position: (417, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (417, 32),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (418, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (418, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "bool",
                                     position: (418, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (419, 13),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "false",
                                  position: (419, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (420, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Allows the generation of a private key and associated self-signed\ncertificate. Only performed when both objects cannot be found for\nthis policy. It is recommended to turn this off again after keys\nhave been generated.\n</para>\n<para>\nThe public certificate is required to be duplicated to the\ndirectory holding trusted certificates as defined by the\n<option>trustedDir</option> option.\n</para>\n<para>\nKeys should in general be generated and distributed offline by a\ntrusted certificate authority and not by utilizing this mode.\n",
                                    position: (421, 1),
                                   },
                                  ],
                                  position: (420, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (417, 41),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "baseDirectory",
                               position: (437, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (437, 27),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (438, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (438, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "path",
                                     position: (438, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (439, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Interpolation {
                                    expression: PropertyAccess {
                                     expression: Variable {
                                      identifier: "cfg",
                                      position: (439, 26),
                                     },
                                     attribute_path: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "directories",
                                        position: (439, 30),
                                       },
                                       Raw {
                                        content: "certificates",
                                        position: (439, 42),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                   },
                                   Raw {
                                    content: "/",
                                    position: (439, 55),
                                   },
                                   Interpolation {
                                    expression: Variable {
                                     identifier: "name",
                                     position: (439, 58),
                                    },
                                   },
                                  ],
                                  position: (439, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "defaultText",
                                    position: (440, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: Variable {
                                   identifier: "literalExpression",
                                   position: (440, 27),
                                  },
                                  arguments: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "\"",
                                      position: (440, 47),
                                     },
                                     Raw {
                                      content: "$",
                                      position: (440, 48),
                                     },
                                     Raw {
                                      content: "{config.",
                                      position: (440, 51),
                                     },
                                     Interpolation {
                                      expression: PropertyAccess {
                                       expression: Variable {
                                        identifier: "opt",
                                        position: (440, 61),
                                       },
                                       attribute_path: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "directories",
                                          position: (440, 65),
                                         },
                                         Raw {
                                          content: "certificates",
                                          position: (440, 77),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                     },
                                     Raw {
                                      content: "}/",
                                      position: (440, 90),
                                     },
                                     Raw {
                                      content: "$",
                                      position: (440, 92),
                                     },
                                     Raw {
                                      content: "{name}\"",
                                      position: (440, 95),
                                     },
                                    ],
                                    position: (440, 45),
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (441, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "The mandatory base directory for cryptographic objects of this\npolicy. This path is only automatically generated when this\noption as well as <option>directories.certificates</option> are\nleft at their default. Ensure read/write permissions are given\nto the Neo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nIt is also possible to override each individual\nconfiguration with absolute paths. See the\n<option>privateKey</option> and <option>publicCertificate</option>\npolicy options.\n",
                                    position: (442, 1),
                                   },
                                  ],
                                  position: (441, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (437, 36),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "ciphers",
                               position: (456, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (456, 21),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (457, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "types",
                                    position: (457, 20),
                                   },
                                   attribute_path: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "nullOr",
                                      position: (457, 26),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   Parentheses {
                                    expression: FunctionApplication {
                                     function: PropertyAccess {
                                      expression: Variable {
                                       identifier: "types",
                                       position: (457, 34),
                                      },
                                      attribute_path: AttributePath {
                                       parts: [
                                        Raw {
                                         content: "listOf",
                                         position: (457, 40),
                                        },
                                       ],
                                      },
                                      default: None,
                                     },
                                     arguments: [
                                      PropertyAccess {
                                       expression: Variable {
                                        identifier: "types",
                                        position: (457, 47),
                                       },
                                       attribute_path: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "str",
                                          position: (457, 53),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                     ],
                                    },
                                    position: (457, 33),
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (458, 13),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "null",
                                  position: (458, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (459, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Restrict the allowed ciphers of this policy to those defined\nhere. The default ciphers are those of the JVM platform.\n",
                                    position: (460, 1),
                                   },
                                  ],
                                  position: (459, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (456, 30),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "clientAuth",
                               position: (465, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (465, 24),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (466, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "types",
                                    position: (466, 20),
                                   },
                                   attribute_path: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "enum",
                                      position: (466, 26),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   List {
                                    elements: [
                                     String {
                                      parts: [
                                       Raw {
                                        content: "NONE",
                                        position: (466, 34),
                                       },
                                      ],
                                      position: (466, 33),
                                     },
                                     String {
                                      parts: [
                                       Raw {
                                        content: "OPTIONAL",
                                        position: (466, 41),
                                       },
                                      ],
                                      position: (466, 40),
                                     },
                                     String {
                                      parts: [
                                       Raw {
                                        content: "REQUIRE",
                                        position: (466, 52),
                                       },
                                      ],
                                      position: (466, 51),
                                     },
                                    ],
                                    position: (466, 31),
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (467, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "REQUIRE",
                                    position: (467, 24),
                                   },
                                  ],
                                  position: (467, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (468, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "The client authentication stance for this policy.\n",
                                    position: (469, 1),
                                   },
                                  ],
                                  position: (468, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (465, 33),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "privateKey",
                               position: (473, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (473, 24),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (474, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (474, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "str",
                                     position: (474, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (475, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "private.key",
                                    position: (475, 24),
                                   },
                                  ],
                                  position: (475, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (476, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "The name of private PKCS #8 key file for this policy to be found\nin the <option>baseDirectory</option>, or the absolute path to\nthe key file. It is mandatory that a key can be found or generated.\n",
                                    position: (477, 1),
                                   },
                                  ],
                                  position: (476, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (473, 33),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "publicCertificate",
                               position: (483, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (483, 31),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (484, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (484, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "str",
                                     position: (484, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (485, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "public.crt",
                                    position: (485, 24),
                                   },
                                  ],
                                  position: (485, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (486, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "The name of public X.509 certificate (chain) file in PEM format\nfor this policy to be found in the <option>baseDirectory</option>,\nor the absolute path to the certificate file. It is mandatory\nthat a certificate can be found or generated.\n</para>\n<para>\nThe public certificate is required to be duplicated to the\ndirectory holding trusted certificates as defined by the\n<option>trustedDir</option> option.\n",
                                    position: (487, 1),
                                   },
                                  ],
                                  position: (486, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (483, 40),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "revokedDir",
                               position: (499, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (499, 24),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (500, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (500, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "path",
                                     position: (500, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (501, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Interpolation {
                                    expression: PropertyAccess {
                                     expression: Variable {
                                      identifier: "config",
                                      position: (501, 26),
                                     },
                                     attribute_path: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "baseDirectory",
                                        position: (501, 33),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                   },
                                   Raw {
                                    content: "/revoked",
                                    position: (501, 47),
                                   },
                                  ],
                                  position: (501, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "defaultText",
                                    position: (502, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: Variable {
                                   identifier: "literalExpression",
                                   position: (502, 27),
                                  },
                                  arguments: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "\"",
                                      position: (502, 47),
                                     },
                                     Raw {
                                      content: "$",
                                      position: (502, 48),
                                     },
                                     Raw {
                                      content: "{config.",
                                      position: (502, 51),
                                     },
                                     Interpolation {
                                      expression: PropertyAccess {
                                       expression: Variable {
                                        identifier: "options",
                                        position: (502, 61),
                                       },
                                       attribute_path: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "baseDirectory",
                                          position: (502, 69),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                     },
                                     Raw {
                                      content: "}/revoked\"",
                                      position: (502, 83),
                                     },
                                    ],
                                    position: (502, 45),
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (503, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Path to directory of CRLs (Certificate Revocation Lists) in\nPEM format. Must be an absolute path. The existence of this\ndirectory is mandatory and will need to be created manually when:\nsetting this option to something other than its default; setting\neither this policy's <option>baseDirectory</option> or\n<option>directories.certificates</option> to something other than\ntheir default. Ensure read/write permissions are given to the\nNeo4j daemon user <literal>neo4j</literal>.\n",
                                    position: (504, 1),
                                   },
                                  ],
                                  position: (503, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (499, 33),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "tlsVersions",
                               position: (515, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (515, 25),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (516, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "types",
                                    position: (516, 20),
                                   },
                                   attribute_path: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "listOf",
                                      position: (516, 26),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   PropertyAccess {
                                    expression: Variable {
                                     identifier: "types",
                                     position: (516, 33),
                                    },
                                    attribute_path: AttributePath {
                                     parts: [
                                      Raw {
                                       content: "str",
                                       position: (516, 39),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (517, 13),
                                   },
                                  ],
                                 },
                                 to: List {
                                  elements: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "TLSv1.2",
                                      position: (517, 26),
                                     },
                                    ],
                                    position: (517, 25),
                                   },
                                  ],
                                  position: (517, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (518, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Restrict the TLS protocol versions of this policy to those\ndefined here.\n",
                                    position: (519, 1),
                                   },
                                  ],
                                  position: (518, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (515, 34),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "trustAll",
                               position: (524, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (524, 22),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (525, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (525, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "bool",
                                     position: (525, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (526, 13),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "false",
                                  position: (526, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (527, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Makes this policy trust all remote parties. Enabling this is not\nrecommended and the policy's trusted directory will be ignored.\nUse of this mode is discouraged. It would offer encryption but\nno security.\n",
                                    position: (528, 1),
                                   },
                                  ],
                                  position: (527, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (524, 31),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "trustedDir",
                               position: (535, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (535, 24),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (536, 13),
                                   },
                                  ],
                                 },
                                 to: PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (536, 20),
                                  },
                                  attribute_path: AttributePath {
                                   parts: [
                                    Raw {
                                     content: "path",
                                     position: (536, 26),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "default",
                                    position: (537, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Interpolation {
                                    expression: PropertyAccess {
                                     expression: Variable {
                                      identifier: "config",
                                      position: (537, 26),
                                     },
                                     attribute_path: AttributePath {
                                      parts: [
                                       Raw {
                                        content: "baseDirectory",
                                        position: (537, 33),
                                       },
                                      ],
                                     },
                                     default: None,
                                    },
                                   },
                                   Raw {
                                    content: "/trusted",
                                    position: (537, 47),
                                   },
                                  ],
                                  position: (537, 23),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "defaultText",
                                    position: (538, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: Variable {
                                   identifier: "literalExpression",
                                   position: (538, 27),
                                  },
                                  arguments: [
                                   String {
                                    parts: [
                                     Raw {
                                      content: "\"",
                                      position: (538, 47),
                                     },
                                     Raw {
                                      content: "$",
                                      position: (538, 48),
                                     },
                                     Raw {
                                      content: "{config.",
                                      position: (538, 51),
                                     },
                                     Interpolation {
                                      expression: PropertyAccess {
                                       expression: Variable {
                                        identifier: "options",
                                        position: (538, 61),
                                       },
                                       attribute_path: AttributePath {
                                        parts: [
                                         Raw {
                                          content: "baseDirectory",
                                          position: (538, 69),
                                         },
                                        ],
                                       },
                                       default: None,
                                      },
                                     },
                                     Raw {
                                      content: "}/trusted\"",
                                      position: (538, 83),
                                     },
                                    ],
                                    position: (538, 45),
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (539, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Path to directory of X.509 certificates in PEM format for\ntrusted parties. Must be an absolute path. The existence of this\ndirectory is mandatory and will need to be created manually when:\nsetting this option to something other than its default; setting\neither this policy's <option>baseDirectory</option> or\n<option>directories.certificates</option> to something other than\ntheir default. Ensure read/write permissions are given to the\nNeo4j daemon user <literal>neo4j</literal>.\n</para>\n<para>\nThe public certificate as defined by\n<option>publicCertificate</option> is required to be duplicated\nto this directory.\n",
                                    position: (540, 1),
                                   },
                                  ],
                                  position: (539, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (535, 33),
                              },
                             ],
                            },
                           },
                           Binding {
                            from: AttributePath {
                             parts: [
                              Raw {
                               content: "directoriesToCreate",
                               position: (556, 11),
                              },
                             ],
                            },
                            to: FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (556, 33),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "type",
                                    position: (557, 13),
                                   },
                                  ],
                                 },
                                 to: FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "types",
                                    position: (557, 20),
                                   },
                                   attribute_path: AttributePath {
                                    parts: [
                                     Raw {
                                      content: "listOf",
                                      position: (557, 26),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   PropertyAccess {
                                    expression: Variable {
                                     identifier: "types",
                                     position: (557, 33),
                                    },
                                    attribute_path: AttributePath {
                                     parts: [
                                      Raw {
                                       content: "path",
                                       position: (557, 39),
                                      },
                                     ],
                                    },
                                    default: None,
                                   },
                                  ],
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "internal",
                                    position: (558, 13),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "true",
                                  position: (558, 24),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "readOnly",
                                    position: (559, 13),
                                   },
                                  ],
                                 },
                                 to: Variable {
                                  identifier: "true",
                                  position: (559, 24),
                                 },
                                },
                                Binding {
                                 from: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "description",
                                    position: (560, 13),
                                   },
                                  ],
                                 },
                                 to: String {
                                  parts: [
                                   Raw {
                                    content: "Directories of this policy that will be created automatically\nwhen the certificates directory is left at its default value.\nThis includes all options of type path that are left at their\ndefault value.\n",
                                    position: (561, 1),
                                   },
                                  ],
                                  position: (560, 27),
                                 },
                                },
                               ],
                               recursive: false,
                               position: (556, 42),
                              },
                             ],
                            },
                           },
                          ],
                          recursive: false,
                          position: (415, 19),
                         },
                        },
                        Binding {
                         from: AttributePath {
                          parts: [
                           Raw {
                            content: "config",
                            position: (570, 9),
                           },
                           Raw {
                            content: "directoriesToCreate",
                            position: (570, 16),
                           },
                          ],
                         },
                         to: FunctionApplication {
                          function: Variable {
                           identifier: "optionals",
                           position: (570, 38),
                          },
                          arguments: [
                           Parentheses {
                            expression: BinaryOperation {
                             operator: LogicalAnd,
                             operands: [
                              BinaryOperation {
                               operator: GreaterThanOrEqualTo,
                               operands: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "certDirOpt",
                                  position: (571, 12),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "highestPrio",
                                    position: (571, 23),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                Int {
                                 value: 1500,
                                 position: (571, 38),
                                },
                               ],
                               position: (571, 35),
                              },
                              BinaryOperation {
                               operator: GreaterThanOrEqualTo,
                               operands: [
                                PropertyAccess {
                                 expression: Variable {
                                  identifier: "options",
                                  position: (571, 46),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "baseDirectory",
                                    position: (571, 54),
                                   },
                                   Raw {
                                    content: "highestPrio",
                                    position: (571, 68),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                Int {
                                 value: 1500,
                                 position: (571, 83),
                                },
                               ],
                               position: (571, 80),
                              },
                             ],
                             position: (571, 43),
                            },
                            position: (571, 11),
                           },
                           Parentheses {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "map",
                              position: (572, 12),
                             },
                             arguments: [
                              Parentheses {
                               expression: Function {
                                argument: Simple {
                                 identifier: "opt",
                                },
                                definition: PropertyAccess {
                                 expression: Variable {
                                  identifier: "opt",
                                  position: (572, 22),
                                 },
                                 attribute_path: AttributePath {
                                  parts: [
                                   Raw {
                                    content: "value",
                                    position: (572, 26),
                                   },
                                  ],
                                 },
                                 default: None,
                                },
                                position: (572, 17),
                               },
                               position: (572, 16),
                              },
                              Parentheses {
                               expression: FunctionApplication {
                                function: Variable {
                                 identifier: "filter",
                                 position: (572, 34),
                                },
                                arguments: [
                                 Variable {
                                  identifier: "isDefaultPathOption",
                                  position: (572, 41),
                                 },
                                 Parentheses {
                                  expression: FunctionApplication {
                                   function: Variable {
                                    identifier: "attrValues",
                                    position: (572, 62),
                                   },
                                   arguments: [
                                    Variable {
                                     identifier: "options",
                                     position: (572, 73),
                                    },
                                   ],
                                  },
                                  position: (572, 61),
                                 },
                                ],
                               },
                               position: (572, 33),
                              },
                             ],
                            },
                            position: (572, 11),
                           },
                          ],
                         },
                        },
                       ],
                       recursive: false,
                       position: (414, 78),
                      },
                      position: (414, 46),
                     },
                     position: (414, 45),
                    },
                   ],
                  },
                  position: (414, 34),
                 },
                ],
               },
               position: (414, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (575, 7),
                },
               ],
              },
              to: Map {
               bindings: [],
               recursive: false,
               position: (575, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (576, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Defines the SSL policies for use with Neo4j connectors. Each attribute\nof this set defines a policy, with the attribute name defining the name\nof the policy and its namespace. Refer to the operations manual section\non Neo4j's\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/security/ssl-framework/\">SSL Framework</link>\nfor further details.\n",
                 position: (577, 1),
                },
               ],
               position: (576, 21),
              },
             },
            ],
            recursive: false,
            position: (413, 29),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "udc",
            position: (586, 5),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (587, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (587, 16),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (588, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (588, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "bool",
                     position: (588, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (589, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "false",
                  position: (589, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (590, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Enable the Usage Data Collector which Neo4j uses to collect usage\ndata. Refer to the operations manual section on the\n<link xlink:href=\"https://neo4j.com/docs/operations-manual/current/configuration/usage-data-collector/\">Usage Data Collector</link>\nfor more information.\n",
                    position: (591, 1),
                   },
                  ],
                  position: (590, 23),
                 },
                },
               ],
               recursive: false,
               position: (587, 25),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (586, 11),
         },
        },
       ],
       recursive: false,
       position: (121, 28),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (603, 3),
        },
       ],
      },
      to: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "policyNameList",
            position: (606, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "attrNames",
           position: (606, 24),
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (606, 34),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "ssl",
               position: (606, 38),
              },
              Raw {
               content: "policies",
               position: (606, 42),
              },
             ],
            },
            default: None,
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "validPolicyNameList",
            position: (607, 7),
           },
          ],
         },
         to: BinaryOperation {
          operator: Concatenation,
          operands: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "legacy",
                position: (607, 32),
               },
              ],
              position: (607, 31),
             },
            ],
            position: (607, 29),
           },
           Variable {
            identifier: "policyNameList",
            position: (607, 45),
           },
          ],
          position: (607, 42),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "validPolicyNameString",
            position: (608, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "concatStringsSep",
           position: (608, 31),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: ", ",
              position: (608, 49),
             },
            ],
            position: (608, 48),
           },
           Variable {
            identifier: "validPolicyNameList",
            position: (608, 53),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "defaultDirectoriesToCreate",
            position: (611, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (611, 36),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "opt",
             },
             definition: PropertyAccess {
              expression: Variable {
               identifier: "opt",
               position: (611, 46),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "value",
                 position: (611, 50),
                },
               ],
              },
              default: None,
             },
             position: (611, 41),
            },
            position: (611, 40),
           },
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "filter",
              position: (611, 58),
             },
             arguments: [
              Variable {
               identifier: "isDefaultPathOption",
               position: (611, 65),
              },
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "attrValues",
                 position: (611, 86),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "options",
                   position: (611, 97),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "services",
                     position: (611, 105),
                    },
                    Raw {
                     content: "neo4j",
                     position: (611, 114),
                    },
                    Raw {
                     content: "directories",
                     position: (611, 120),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               position: (611, 85),
              },
             ],
            },
            position: (611, 57),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "policyDirectoriesToCreate",
            position: (612, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "concatMap",
           position: (612, 35),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "pol",
             },
             definition: PropertyAccess {
              expression: Variable {
               identifier: "pol",
               position: (612, 51),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "directoriesToCreate",
                 position: (612, 55),
                },
               ],
              },
              default: None,
             },
             position: (612, 46),
            },
            position: (612, 45),
           },
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "attrValues",
              position: (612, 77),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (612, 88),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "ssl",
                  position: (612, 92),
                 },
                 Raw {
                  content: "policies",
                  position: (612, 96),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            position: (612, 76),
           },
          ],
         },
        },
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "mkIf",
         position: (615, 5),
        },
        arguments: [
         PropertyAccess {
          expression: Variable {
           identifier: "cfg",
           position: (615, 10),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "enable",
             position: (615, 14),
            },
           ],
          },
          default: None,
         },
         Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "assertions",
               position: (616, 7),
              },
             ],
            },
            to: List {
             elements: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "assertion",
                    position: (617, 11),
                   },
                  ],
                 },
                 to: UnaryOperation {
                  operator: Not,
                  operand: FunctionApplication {
                   function: Variable {
                    identifier: "elem",
                    position: (617, 24),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "legacy",
                       position: (617, 30),
                      },
                     ],
                     position: (617, 29),
                    },
                    Variable {
                     identifier: "policyNameList",
                     position: (617, 38),
                    },
                   ],
                  },
                  position: (617, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "message",
                    position: (618, 11),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "The policy 'legacy' is special to Neo4j, and its name is reserved.",
                    position: (618, 22),
                   },
                  ],
                  position: (618, 21),
                 },
                },
               ],
               recursive: false,
               position: (617, 9),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "assertion",
                    position: (619, 11),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "elem",
                   position: (619, 23),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (619, 28),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "bolt",
                       position: (619, 32),
                      },
                      Raw {
                       content: "sslPolicy",
                       position: (619, 37),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "validPolicyNameList",
                    position: (619, 47),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "message",
                    position: (620, 11),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Invalid policy assigned: `services.neo4j.bolt.sslPolicy = \"",
                    position: (620, 22),
                   },
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (620, 84),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "bolt",
                        position: (620, 88),
                       },
                       Raw {
                        content: "sslPolicy",
                        position: (620, 93),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "\"`, defined policies are: ",
                    position: (620, 103),
                   },
                   Interpolation {
                    expression: Variable {
                     identifier: "validPolicyNameString",
                     position: (620, 132),
                    },
                   },
                  ],
                  position: (620, 21),
                 },
                },
               ],
               recursive: false,
               position: (619, 9),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "assertion",
                    position: (621, 11),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "elem",
                   position: (621, 23),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (621, 28),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "https",
                       position: (621, 32),
                      },
                      Raw {
                       content: "sslPolicy",
                       position: (621, 38),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "validPolicyNameList",
                    position: (621, 48),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "message",
                    position: (622, 11),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Invalid policy assigned: `services.neo4j.https.sslPolicy = \"",
                    position: (622, 22),
                   },
                   Interpolation {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (622, 85),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "https",
                        position: (622, 89),
                       },
                       Raw {
                        content: "sslPolicy",
                        position: (622, 95),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "\"`, defined policies are: ",
                    position: (622, 105),
                   },
                   Interpolation {
                    expression: Variable {
                     identifier: "validPolicyNameString",
                     position: (622, 134),
                    },
                   },
                  ],
                  position: (622, 21),
                 },
                },
               ],
               recursive: false,
               position: (621, 9),
              },
             ],
             position: (616, 20),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "systemd",
               position: (625, 7),
              },
              Raw {
               content: "services",
               position: (625, 15),
              },
              Raw {
               content: "neo4j",
               position: (625, 24),
              },
             ],
            },
            to: Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (626, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "Neo4j Daemon",
                  position: (626, 24),
                 },
                ],
                position: (626, 23),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "wantedBy",
                  position: (627, 9),
                 },
                ],
               },
               to: List {
                elements: [
                 String {
                  parts: [
                   Raw {
                    content: "multi-user.target",
                    position: (627, 23),
                   },
                  ],
                  position: (627, 22),
                 },
                ],
                position: (627, 20),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "after",
                  position: (628, 9),
                 },
                ],
               },
               to: List {
                elements: [
                 String {
                  parts: [
                   Raw {
                    content: "network.target",
                    position: (628, 20),
                   },
                  ],
                  position: (628, 19),
                 },
                ],
                position: (628, 17),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "environment",
                  position: (629, 9),
                 },
                ],
               },
               to: Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "NEO4J_HOME",
                     position: (630, 11),
                    },
                   ],
                  },
                  to: String {
                   parts: [
                    Interpolation {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (630, 27),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "package",
                         position: (630, 31),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/share/neo4j",
                     position: (630, 39),
                    },
                   ],
                   position: (630, 24),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "NEO4J_CONF",
                     position: (631, 11),
                    },
                   ],
                  },
                  to: String {
                   parts: [
                    Interpolation {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (631, 27),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "directories",
                         position: (631, 31),
                        },
                        Raw {
                         content: "home",
                         position: (631, 43),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/conf",
                     position: (631, 48),
                    },
                   ],
                   position: (631, 24),
                  },
                 },
                ],
                recursive: false,
                position: (629, 23),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "serviceConfig",
                  position: (633, 9),
                 },
                ],
               },
               to: Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "ExecStart",
                     position: (634, 11),
                    },
                   ],
                  },
                  to: String {
                   parts: [
                    Interpolation {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (634, 26),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "package",
                         position: (634, 30),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/bin/neo4j console",
                     position: (634, 38),
                    },
                   ],
                   position: (634, 23),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "User",
                     position: (635, 11),
                    },
                   ],
                  },
                  to: String {
                   parts: [
                    Raw {
                     content: "neo4j",
                     position: (635, 19),
                    },
                   ],
                   position: (635, 18),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "PermissionsStartOnly",
                     position: (636, 11),
                    },
                   ],
                  },
                  to: Variable {
                   identifier: "true",
                   position: (636, 34),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "LimitNOFILE",
                     position: (637, 11),
                    },
                   ],
                  },
                  to: Int {
                   value: 40000,
                   position: (637, 25),
                  },
                 },
                ],
                recursive: false,
                position: (633, 25),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "preStart",
                  position: (640, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "# Directories Setup\n#   Always ensure home exists with nested conf, logs directories.\nmkdir -m 0700 -p ",
                  position: (641, 1),
                 },
                 Interpolation {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (643, 30),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "directories",
                      position: (643, 34),
                     },
                     Raw {
                      content: "home",
                      position: (643, 46),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/{conf,logs}\n\n#   Create other sub-directories and policy directories that have been left at their default.\n",
                  position: (643, 51),
                 },
                 Interpolation {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "concatMapStringsSep",
                    position: (646, 13),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "\n",
                       position: (646, 34),
                      },
                     ],
                     position: (646, 33),
                    },
                    Parentheses {
                     expression: Function {
                      argument: Simple {
                       identifier: "dir",
                      },
                      definition: String {
                       parts: [
                        Raw {
                         content: "mkdir -m 0700 -p ",
                         position: (648, 1),
                        },
                        Interpolation {
                         expression: Variable {
                          identifier: "dir",
                          position: (648, 34),
                         },
                        },
                        Raw {
                         content: "\n",
                         position: (648, 38),
                        },
                       ],
                       position: (647, 18),
                      },
                      position: (647, 13),
                     },
                     position: (646, 38),
                    },
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Concatenation,
                      operands: [
                       Variable {
                        identifier: "defaultDirectoriesToCreate",
                        position: (649, 16),
                       },
                       Variable {
                        identifier: "policyDirectoriesToCreate",
                        position: (649, 46),
                       },
                      ],
                      position: (649, 43),
                     },
                     position: (649, 15),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: "\n\n# Place the configuration where Neo4j can find it.\nln -fs ",
                  position: (649, 73),
                 },
                 Interpolation {
                  expression: Variable {
                   identifier: "serverConfig",
                   position: (652, 20),
                  },
                 },
                 Raw {
                  content: " ",
                  position: (652, 33),
                 },
                 Interpolation {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (652, 36),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "directories",
                      position: (652, 40),
                     },
                     Raw {
                      content: "home",
                      position: (652, 52),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/conf/neo4j.conf\n\n# Ensure neo4j user ownership\nchown -R neo4j ",
                  position: (652, 57),
                 },
                 Interpolation {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (655, 28),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "directories",
                      position: (655, 32),
                     },
                     Raw {
                      content: "home",
                      position: (655, 44),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "\n",
                  position: (655, 49),
                 },
                ],
                position: (640, 20),
               },
              },
             ],
             recursive: false,
             position: (625, 32),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "environment",
               position: (659, 7),
              },
              Raw {
               content: "systemPackages",
               position: (659, 19),
              },
             ],
            },
            to: List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (659, 38),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "package",
                  position: (659, 42),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (659, 36),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "users",
               position: (661, 7),
              },
              Raw {
               content: "users",
               position: (661, 13),
              },
              Raw {
               content: "neo4j",
               position: (661, 19),
              },
             ],
            },
            to: Map {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "isSystemUser",
                  position: (662, 9),
                 },
                ],
               },
               to: Variable {
                identifier: "true",
                position: (662, 24),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "group",
                  position: (663, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "neo4j",
                  position: (663, 18),
                 },
                ],
                position: (663, 17),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "description",
                  position: (664, 9),
                 },
                ],
               },
               to: String {
                parts: [
                 Raw {
                  content: "Neo4j daemon user",
                  position: (664, 24),
                 },
                ],
                position: (664, 23),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "home",
                  position: (665, 9),
                 },
                ],
               },
               to: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (665, 16),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "directories",
                   position: (665, 20),
                  },
                  Raw {
                   content: "home",
                   position: (665, 32),
                  },
                 ],
                },
                default: None,
               },
              },
             ],
             recursive: false,
             position: (661, 27),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "users",
               position: (667, 7),
              },
              Raw {
               content: "groups",
               position: (667, 13),
              },
              Raw {
               content: "neo4j",
               position: (667, 20),
              },
             ],
            },
            to: Map {
             bindings: [],
             recursive: false,
             position: (667, 28),
            },
           },
          ],
          recursive: false,
          position: (615, 21),
         },
        ],
       },
       position: (604, 5),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "meta",
         position: (670, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "maintainers",
            position: (671, 5),
           },
          ],
         },
         to: With {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (671, 24),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "maintainers",
              position: (671, 28),
             },
            ],
           },
           default: None,
          },
          target: List {
           elements: [
            Variable {
             identifier: "patternspandemic",
             position: (671, 43),
            },
           ],
           position: (671, 41),
          },
          position: (671, 19),
         },
        },
       ],
       recursive: false,
       position: (670, 10),
      },
     },
    ],
    recursive: false,
    position: (105, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}