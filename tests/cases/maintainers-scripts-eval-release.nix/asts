---
With {
 expression: FunctionApplication {
  function: Variable {
   identifier: "import",
   position: (4, 6),
  },
  arguments: [
   Path {
    parts: [
     Raw {
      content: "../../lib",
      position: (4, 13),
     },
    ],
   },
  ],
 },
 target: LetIn {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "trace",
       position: (7, 3),
      },
     ],
    },
    IfThenElse {
     predicate: BinaryOperation {
      operator: EqualTo,
      operands: [
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (7, 14),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "getEnv",
            position: (7, 23),
           },
          ],
         },
         default: None,
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "VERBOSE",
            position: (7, 31),
           },
          ],
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "1",
          position: (7, 44),
         },
        ],
       },
      ],
      position: (7, 40),
     },
     then: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (7, 52),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "trace",
         position: (7, 61),
        },
       ],
      },
      default: None,
     },
     else_: Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "y",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Variable {
        identifier: "y",
        position: (7, 79),
       },
       position: (7, 76),
      },
      position: (7, 73),
     },
     position: (7, 11),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "rel",
       position: (9, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "removeAttrs",
      position: (9, 9),
     },
     arguments: [
      FunctionApplication {
       function: Variable {
        identifier: "import",
        position: (9, 22),
       },
       arguments: [
        Path {
         parts: [
          Raw {
           content: "../../pkgs/top-level/release.nix",
           position: (9, 29),
          },
         ],
        },
        Map {
         bindings: [],
         recursive: false,
        },
       ],
      },
      List {
       elements: [
        String {
         parts: [
          Raw {
           content: "tarball",
           position: (9, 70),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "unstable",
           position: (9, 80),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "xbursttools",
           position: (9, 91),
          },
         ],
        },
       ],
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "recurse",
       position: (13, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "path",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: PropertyAccess {
        expression: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (14, 9),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "tryEval",
             position: (14, 18),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "attrs",
           position: (14, 26),
          },
         ],
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "success",
           position: (14, 33),
          },
         ],
        },
        default: None,
       },
       then: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "isDerivation",
          position: (15, 10),
         },
         arguments: [
          Variable {
           identifier: "attrs",
           position: (15, 23),
          },
         ],
        },
        then: IfThenElse {
         predicate: PropertyAccess {
          expression: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (17, 13),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "tryEval",
               position: (17, 22),
              },
             ],
            },
            default: None,
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "attrs",
              position: (17, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "drvPath",
                position: (17, 36),
               },
              ],
             },
             default: None,
            },
           ],
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "success",
             position: (17, 45),
            },
           ],
          },
          default: None,
         },
         then: Map {
          bindings: [
           Inherit(
            Some(
             Variable {
              identifier: "attrs",
              position: (18, 25),
             },
            ),
            [
             Raw {
              content: "name",
              position: (18, 32),
             },
             Raw {
              content: "drvPath",
              position: (18, 37),
             },
            ],
           ),
          ],
          recursive: false,
         },
         else_: Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "failed",
               position: (19, 16),
              },
             ],
            },
            Variable {
             identifier: "true",
             position: (19, 25),
            },
           ),
          ],
          recursive: false,
         },
         position: (17, 9),
        },
        else_: BinaryOperation {
         operator: Update,
         operands: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "recurseForDerivations",
                position: (20, 14),
               },
              ],
             },
             Variable {
              identifier: "true",
              position: (20, 38),
             },
            ),
           ],
           recursive: false,
          },
          FunctionApplication {
           function: Variable {
            identifier: "mapAttrs",
            position: (21, 12),
           },
           arguments: [
            Function {
             argument: Some(
              "n",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "path'",
                    position: (21, 32),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Concatenation,
                  operands: [
                   Variable {
                    identifier: "path",
                    position: (21, 40),
                   },
                   List {
                    elements: [
                     Variable {
                      identifier: "n",
                      position: (21, 49),
                     },
                    ],
                   },
                  ],
                  position: (21, 45),
                 },
                ),
               ],
               target: FunctionApplication {
                function: Variable {
                 identifier: "trace",
                 position: (21, 56),
                },
                arguments: [
                 Variable {
                  identifier: "path'",
                  position: (21, 62),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "recurse",
                   position: (21, 69),
                  },
                  arguments: [
                   Variable {
                    identifier: "path'",
                    position: (21, 77),
                   },
                   Variable {
                    identifier: "v",
                    position: (21, 83),
                   },
                  ],
                 },
                ],
               },
               position: (21, 28),
              },
              position: (21, 25),
             },
             position: (21, 22),
            },
            Variable {
             identifier: "attrs",
             position: (21, 87),
            },
           ],
          },
         ],
         position: (20, 46),
        },
        position: (15, 7),
       },
       else_: Map {
        bindings: [],
        recursive: false,
       },
       position: (14, 5),
      },
      position: (13, 19),
     },
     position: (13, 13),
    },
   ),
  ],
  target: FunctionApplication {
   function: Variable {
    identifier: "recurse",
    position: (24, 4),
   },
   arguments: [
    List {
     elements: [],
    },
    Variable {
     identifier: "rel",
     position: (24, 15),
    },
   ],
  },
  position: (6, 1),
 },
 position: (4, 1),
}