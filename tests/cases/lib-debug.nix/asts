---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit(
    Some(
     Variable {
      identifier: "lib",
      position: (17, 12),
     },
    ),
    [
     Raw {
      content: "isInt",
      position: (18, 5),
     },
     Raw {
      content: "attrNames",
      position: (19, 5),
     },
     Raw {
      content: "isList",
      position: (20, 5),
     },
     Raw {
      content: "isAttrs",
      position: (21, 5),
     },
     Raw {
      content: "substring",
      position: (22, 5),
     },
     Raw {
      content: "addErrorContext",
      position: (23, 5),
     },
     Raw {
      content: "attrValues",
      position: (24, 5),
     },
     Raw {
      content: "concatLists",
      position: (25, 5),
     },
     Raw {
      content: "concatStringsSep",
      position: (26, 5),
     },
     Raw {
      content: "const",
      position: (27, 5),
     },
     Raw {
      content: "elem",
      position: (28, 5),
     },
     Raw {
      content: "generators",
      position: (29, 5),
     },
     Raw {
      content: "head",
      position: (30, 5),
     },
     Raw {
      content: "id",
      position: (31, 5),
     },
     Raw {
      content: "isDerivation",
      position: (32, 5),
     },
     Raw {
      content: "isFunction",
      position: (33, 5),
     },
     Raw {
      content: "mapAttrs",
      position: (34, 5),
     },
     Raw {
      content: "trace",
      position: (35, 5),
     },
    ],
   ),
  ],
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceIf",
        position: (51, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "pred",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "msg",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "x",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: IfThenElse {
         predicate: Variable {
          identifier: "pred",
          position: (57, 11),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "trace",
           position: (57, 21),
          },
          arguments: [
           Variable {
            identifier: "msg",
            position: (57, 27),
           },
           Variable {
            identifier: "x",
            position: (57, 31),
           },
          ],
         },
         else_: Variable {
          identifier: "x",
          position: (57, 38),
         },
         position: (57, 8),
        },
        position: (57, 5),
       },
       position: (55, 5),
      },
      position: (53, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValFn",
        position: (69, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "trace",
         position: (73, 8),
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (73, 15),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (73, 17),
           },
          ],
         },
         Variable {
          identifier: "x",
          position: (73, 20),
         },
        ],
       },
       position: (73, 5),
      },
      position: (71, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceVal",
        position: (84, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "traceValFn",
       position: (84, 14),
      },
      arguments: [
       Variable {
        identifier: "id",
        position: (84, 25),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceSeq",
        position: (98, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "y",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "trace",
         position: (102, 8),
        },
        arguments: [
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (102, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "deepSeq",
              position: (102, 24),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (102, 32),
           },
           Variable {
            identifier: "x",
            position: (102, 34),
           },
          ],
         },
         Variable {
          identifier: "y",
          position: (102, 37),
         },
        ],
       },
       position: (102, 5),
      },
      position: (100, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceSeqN",
        position: (113, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "depth",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "y",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "snip",
              position: (114, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isList",
               position: (114, 27),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (114, 35),
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "noQuotes",
               position: (114, 42),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "[…]",
                  position: (114, 52),
                 },
                ],
               },
               Variable {
                identifier: "v",
                position: (114, 57),
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "isAttrs",
                position: (115, 27),
               },
               arguments: [
                Variable {
                 identifier: "v",
                 position: (115, 35),
                },
               ],
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "noQuotes",
                position: (115, 42),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "{…}",
                   position: (115, 52),
                  },
                 ],
                },
                Variable {
                 identifier: "v",
                 position: (115, 57),
                },
               ],
              },
              else_: Variable {
               identifier: "v",
               position: (116, 24),
              },
              position: (115, 24),
             },
             position: (114, 19),
            },
            position: (114, 16),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "noQuotes",
              position: (117, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "str",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "__pretty",
                   position: (117, 30),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "const",
                  position: (117, 41),
                 },
                 arguments: [
                  Variable {
                   identifier: "str",
                   position: (117, 47),
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "val",
                   position: (117, 52),
                  },
                 ],
                },
                Variable {
                 identifier: "v",
                 position: (117, 58),
                },
               ),
              ],
              recursive: false,
              position: (117, 28),
             },
             position: (117, 25),
            },
            position: (117, 20),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "modify",
              position: (118, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "n",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "fn",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "v",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "n",
                  position: (118, 32),
                 },
                 Int {
                  value: 0,
                  position: (118, 37),
                 },
                ],
                position: (118, 34),
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "fn",
                 position: (118, 45),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (118, 48),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isList",
                  position: (119, 31),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (119, 39),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (119, 46),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "modify",
                    position: (119, 51),
                   },
                   arguments: [
                    BinaryOperation {
                     operator: Subtraction,
                     operands: [
                      Variable {
                       identifier: "n",
                       position: (119, 59),
                      },
                      Int {
                       value: 1,
                       position: (119, 63),
                      },
                     ],
                     position: (119, 61),
                    },
                    Variable {
                     identifier: "fn",
                     position: (119, 66),
                    },
                   ],
                  },
                  Variable {
                   identifier: "v",
                   position: (119, 70),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: Variable {
                   identifier: "isAttrs",
                   position: (120, 31),
                  },
                  arguments: [
                   Variable {
                    identifier: "v",
                    position: (120, 39),
                   },
                  ],
                 },
                 then: FunctionApplication {
                  function: Variable {
                   identifier: "mapAttrs",
                   position: (120, 46),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "const",
                     position: (121, 26),
                    },
                    arguments: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "modify",
                       position: (121, 33),
                      },
                      arguments: [
                       BinaryOperation {
                        operator: Subtraction,
                        operands: [
                         Variable {
                          identifier: "n",
                          position: (121, 41),
                         },
                         Int {
                          value: 1,
                          position: (121, 45),
                         },
                        ],
                        position: (121, 43),
                       },
                       Variable {
                        identifier: "fn",
                        position: (121, 48),
                       },
                      ],
                     },
                    ],
                   },
                   Variable {
                    identifier: "v",
                    position: (121, 53),
                   },
                  ],
                 },
                 else_: Variable {
                  identifier: "v",
                  position: (122, 28),
                 },
                 position: (120, 28),
                },
                position: (119, 28),
               },
               position: (118, 28),
              },
              position: (118, 25),
             },
             position: (118, 21),
            },
            position: (118, 18),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "trace",
           position: (123, 8),
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "generators",
              position: (123, 15),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "toPretty",
                position: (123, 26),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "allowPrettyValues",
                   position: (123, 37),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (123, 57),
                },
               ),
              ],
              recursive: false,
              position: (123, 35),
             },
             FunctionApplication {
              function: Variable {
               identifier: "modify",
               position: (124, 17),
              },
              arguments: [
               Variable {
                identifier: "depth",
                position: (124, 24),
               },
               Variable {
                identifier: "snip",
                position: (124, 30),
               },
               Variable {
                identifier: "x",
                position: (124, 35),
               },
              ],
             },
            ],
           },
           Variable {
            identifier: "y",
            position: (124, 39),
           },
          ],
         },
         position: (114, 5),
        },
        position: (113, 25),
       },
       position: (113, 22),
      },
      position: (113, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValSeqFn",
        position: (130, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "v",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "traceValFn",
         position: (134, 8),
        },
        arguments: [
         Variable {
          identifier: "f",
          position: (134, 19),
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (134, 22),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "deepSeq",
              position: (134, 31),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "v",
            position: (134, 39),
           },
           Variable {
            identifier: "v",
            position: (134, 41),
           },
          ],
         },
        ],
       },
       position: (134, 5),
      },
      position: (132, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValSeq",
        position: (137, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "traceValSeqFn",
       position: (137, 17),
      },
      arguments: [
       Variable {
        identifier: "id",
        position: (137, 31),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValSeqNFn",
        position: (141, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "depth",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "v",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "traceSeqN",
          position: (146, 8),
         },
         arguments: [
          Variable {
           identifier: "depth",
           position: (146, 18),
          },
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (146, 25),
           },
           arguments: [
            Variable {
             identifier: "v",
             position: (146, 27),
            },
           ],
          },
          Variable {
           identifier: "v",
           position: (146, 30),
          },
         ],
        },
        position: (146, 5),
       },
       position: (144, 5),
      },
      position: (143, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValSeqN",
        position: (149, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "traceValSeqNFn",
       position: (149, 18),
      },
      arguments: [
       Variable {
        identifier: "id",
        position: (149, 33),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceFnSeqN",
        position: (162, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "depth",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "name",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "f",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "v",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "res",
               position: (163, 9),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "f",
              position: (163, 15),
             },
             arguments: [
              Variable {
               identifier: "v",
               position: (163, 17),
              },
             ],
            },
           ),
          ],
          target: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (164, 8),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "traceSeqN",
               position: (164, 12),
              },
             ],
            },
            default: None,
           },
           arguments: [
            BinaryOperation {
             operator: Addition,
             operands: [
              Variable {
               identifier: "depth",
               position: (165, 10),
              },
              Int {
               value: 1,
               position: (165, 18),
              },
             ],
             position: (165, 16),
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "fn",
                  position: (167, 11),
                 },
                ],
               },
               Variable {
                identifier: "name",
                position: (167, 16),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "from",
                  position: (168, 11),
                 },
                ],
               },
               Variable {
                identifier: "v",
                position: (168, 18),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "to",
                  position: (169, 11),
                 },
                ],
               },
               Variable {
                identifier: "res",
                position: (169, 16),
               },
              ),
             ],
             recursive: false,
             position: (166, 9),
            },
            Variable {
             identifier: "res",
             position: (171, 9),
            },
           ],
          },
          position: (163, 5),
         },
         position: (162, 33),
        },
        position: (162, 30),
       },
       position: (162, 24),
      },
      position: (162, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "runTests",
        position: (188, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "tests",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatLists",
        position: (190, 12),
       },
       arguments: [
        FunctionApplication {
         function: Variable {
          identifier: "attrValues",
          position: (190, 25),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "mapAttrs",
            position: (190, 37),
           },
           arguments: [
            Function {
             argument: Some(
              "name",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "test",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "testsToRun",
                    position: (191, 9),
                   },
                  ],
                 },
                 IfThenElse {
                  predicate: HasProperty {
                   expression: Variable {
                    identifier: "tests",
                    position: (191, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "tests",
                      position: (191, 33),
                     },
                    ],
                   },
                   position: (191, 31),
                  },
                  then: PropertyAccess {
                   expression: Variable {
                    identifier: "tests",
                    position: (191, 44),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "tests",
                      position: (191, 50),
                     },
                    ],
                   },
                   default: None,
                  },
                  else_: List {
                   elements: [],
                   position: (191, 61),
                  },
                  position: (191, 22),
                 },
                ),
               ],
               target: IfThenElse {
                predicate: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "substring",
                          position: (192, 12),
                         },
                         arguments: [
                          Int {
                           value: 0,
                           position: (192, 22),
                          },
                          Int {
                           value: 4,
                           position: (192, 24),
                          },
                          Variable {
                           identifier: "name",
                           position: (192, 26),
                          },
                         ],
                        },
                        String {
                         parts: [
                          Raw {
                           content: "test",
                           position: (192, 35),
                          },
                         ],
                        },
                       ],
                       position: (192, 31),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "elem",
                        position: (192, 45),
                       },
                       arguments: [
                        Variable {
                         identifier: "name",
                         position: (192, 50),
                        },
                        Variable {
                         identifier: "testsToRun",
                         position: (192, 55),
                        },
                       ],
                      },
                     ],
                     position: (192, 41),
                    },
                    BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        Variable {
                         identifier: "testsToRun",
                         position: (193, 13),
                        },
                        List {
                         elements: [],
                         position: (193, 27),
                        },
                       ],
                       position: (193, 24),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "elem",
                        position: (193, 34),
                       },
                       arguments: [
                        Variable {
                         identifier: "name",
                         position: (193, 39),
                        },
                        PropertyAccess {
                         expression: Variable {
                          identifier: "tests",
                          position: (193, 44),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "tests",
                            position: (193, 50),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                     ],
                     position: (193, 31),
                    },
                   ],
                   position: (193, 8),
                  },
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "test",
                      position: (194, 12),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "expr",
                        position: (194, 17),
                       },
                      ],
                     },
                     default: None,
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "test",
                      position: (194, 25),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "expected",
                        position: (194, 30),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (194, 22),
                  },
                 ],
                 position: (194, 8),
                },
                then: List {
                 elements: [
                  Map {
                   bindings: [
                    Inherit(
                     None,
                     [
                      Raw {
                       content: "name",
                       position: (196, 24),
                      },
                     ],
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "expected",
                        position: (196, 30),
                       },
                      ],
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "test",
                       position: (196, 41),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "expected",
                         position: (196, 46),
                        },
                       ],
                      },
                      default: None,
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "result",
                        position: (196, 56),
                       },
                      ],
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "test",
                       position: (196, 65),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "expr",
                         position: (196, 70),
                        },
                       ],
                      },
                      default: None,
                     },
                    ),
                   ],
                   recursive: false,
                   position: (196, 14),
                  },
                 ],
                 position: (196, 12),
                },
                else_: List {
                 elements: [],
                 position: (197, 12),
                },
                position: (192, 8),
               },
               position: (191, 5),
              },
              position: (190, 53),
             },
             position: (190, 47),
            },
            Variable {
             identifier: "tests",
             position: (197, 17),
            },
           ],
          },
         ],
        },
       ],
      },
      position: (190, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "testAllTrue",
        position: (204, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "expr",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Map {
       bindings: [
        Inherit(
         None,
         [
          Raw {
           content: "expr",
           position: (204, 33),
          },
         ],
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "expected",
            position: (204, 39),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (204, 50),
          },
          arguments: [
           Function {
            argument: Some(
             "x",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Variable {
             identifier: "true",
             position: (204, 58),
            },
            position: (204, 55),
           },
           Variable {
            identifier: "expr",
            position: (204, 64),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (204, 23),
      },
      position: (204, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceShowVal",
        position: (209, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "trace",
        position: (209, 21),
       },
       arguments: [
        FunctionApplication {
         function: Variable {
          identifier: "showVal",
          position: (209, 28),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (209, 36),
          },
         ],
        },
        Variable {
         identifier: "x",
         position: (209, 39),
        },
       ],
      },
      position: (209, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceShowValMarked",
        position: (210, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "str",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "trace",
         position: (210, 32),
        },
        arguments: [
         BinaryOperation {
          operator: Addition,
          operands: [
           Variable {
            identifier: "str",
            position: (210, 39),
           },
           FunctionApplication {
            function: Variable {
             identifier: "showVal",
             position: (210, 45),
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (210, 53),
             },
            ],
           },
          ],
          position: (210, 43),
         },
         Variable {
          identifier: "x",
          position: (210, 56),
         },
        ],
       },
       position: (210, 29),
      },
      position: (210, 24),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "attrNamesToStr",
        position: (212, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "a",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "trace",
        position: (213, 5),
       },
       arguments: [
        BinaryOperation {
         operator: Addition,
         operands: [
          BinaryOperation {
           operator: Addition,
           operands: [
            BinaryOperation {
             operator: Addition,
             operands: [
              String {
               parts: [
                Raw {
                 content: "Warning: `attrNamesToStr` is deprecated ",
                 position: (213, 14),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "and will be removed in the next release. ",
                 position: (214, 14),
                },
               ],
              },
             ],
             position: (214, 11),
            },
            String {
             parts: [
              Raw {
               content: "Please use more specific concatenation ",
               position: (215, 14),
              },
             ],
            },
           ],
           position: (215, 11),
          },
          String {
           parts: [
            Raw {
             content: "for your uses (`lib.concat(Map)StringsSep`).",
             position: (216, 14),
            },
           ],
          },
         ],
         position: (216, 11),
        },
        FunctionApplication {
         function: Variable {
          identifier: "concatStringsSep",
          position: (217, 6),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "; ",
             position: (217, 24),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (217, 29),
           },
           arguments: [
            Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: String {
              parts: [
               Expression {
                expression: Variable {
                 identifier: "x",
                 position: (217, 40),
                },
               },
               Raw {
                content: "=",
                position: (217, 42),
               },
              ],
             },
             position: (217, 34),
            },
            FunctionApplication {
             function: Variable {
              identifier: "attrNames",
              position: (217, 47),
             },
             arguments: [
              Variable {
               identifier: "a",
               position: (217, 57),
              },
             ],
            },
           ],
          },
         ],
        },
       ],
      },
      position: (212, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "showVal",
        position: (219, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "trace",
       position: (220, 5),
      },
      arguments: [
       BinaryOperation {
        operator: Addition,
        operands: [
         BinaryOperation {
          operator: Addition,
          operands: [
           String {
            parts: [
             Raw {
              content: "Warning: `showVal` is deprecated ",
              position: (220, 14),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "and will be removed in the next release, ",
              position: (221, 14),
             },
            ],
           },
          ],
          position: (221, 11),
         },
         String {
          parts: [
           Raw {
            content: "please use `traceSeqN`",
            position: (222, 14),
           },
          ],
         },
        ],
        position: (222, 11),
       },
       LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "modify",
             position: (224, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "v",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "pr",
                 position: (225, 13),
                },
               ],
              },
              Function {
               argument: Some(
                "f",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "__pretty",
                     position: (225, 23),
                    },
                   ],
                  },
                  Variable {
                   identifier: "f",
                   position: (225, 34),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "val",
                     position: (225, 37),
                    },
                   ],
                  },
                  Variable {
                   identifier: "v",
                   position: (225, 43),
                  },
                 ),
                ],
                recursive: false,
                position: (225, 21),
               },
               position: (225, 18),
              },
             ),
            ],
            target: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isDerivation",
               position: (226, 17),
              },
              arguments: [
               Variable {
                identifier: "v",
                position: (226, 30),
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "pr",
               position: (226, 37),
              },
              arguments: [
               Function {
                argument: Some(
                 "drv",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: String {
                 parts: [
                  Raw {
                   content: "<δ:",
                   position: (227, 18),
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "drv",
                     position: (227, 23),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "name",
                       position: (227, 27),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: ":",
                   position: (227, 32),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "concatStringsSep",
                     position: (227, 35),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: ",",
                        position: (227, 53),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "attrNames",
                       position: (228, 35),
                      },
                      arguments: [
                       Variable {
                        identifier: "drv",
                        position: (228, 45),
                       },
                      ],
                     },
                    ],
                   },
                  },
                  Raw {
                   content: ">",
                   position: (228, 50),
                  },
                 ],
                },
                position: (227, 12),
               },
              ],
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: EqualTo,
               operands: [
                List {
                 elements: [],
                 position: (229, 17),
                },
                Variable {
                 identifier: "v",
                 position: (229, 25),
                },
               ],
               position: (229, 20),
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "pr",
                position: (229, 32),
               },
               arguments: [
                FunctionApplication {
                 function: Variable {
                  identifier: "const",
                  position: (229, 36),
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: "[]",
                     position: (229, 43),
                    },
                   ],
                  },
                 ],
                },
               ],
              },
              else_: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isList",
                 position: (230, 17),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (230, 25),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "pr",
                 position: (230, 32),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "l",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: String {
                   parts: [
                    Raw {
                     content: "[ ",
                     position: (230, 40),
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "go",
                       position: (230, 44),
                      },
                      arguments: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "head",
                         position: (230, 48),
                        },
                        arguments: [
                         Variable {
                          identifier: "l",
                          position: (230, 53),
                         },
                        ],
                       },
                      ],
                     },
                    },
                    Raw {
                     content: ", … ]",
                     position: (230, 56),
                    },
                   ],
                  },
                  position: (230, 36),
                 },
                ],
               },
               else_: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "isAttrs",
                  position: (231, 17),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (231, 25),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: Variable {
                  identifier: "pr",
                  position: (231, 32),
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "a",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: String {
                    parts: [
                     Raw {
                      content: "{ ",
                      position: (232, 16),
                     },
                     Expression {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "concatStringsSep",
                        position: (232, 21),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: ", ",
                           position: (232, 39),
                          },
                         ],
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "attrNames",
                          position: (232, 44),
                         },
                         arguments: [
                          Variable {
                           identifier: "a",
                           position: (232, 54),
                          },
                         ],
                        },
                       ],
                      },
                     },
                     Raw {
                      content: " }",
                      position: (232, 57),
                     },
                    ],
                   },
                   position: (232, 12),
                  },
                 ],
                },
                else_: Variable {
                 identifier: "v",
                 position: (233, 14),
                },
                position: (231, 14),
               },
               position: (230, 14),
              },
              position: (229, 14),
             },
             position: (226, 14),
            },
            position: (225, 9),
           },
           position: (224, 16),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "go",
             position: (234, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "x",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "generators",
              position: (234, 15),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "toPretty",
                position: (234, 26),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "allowPrettyValues",
                   position: (235, 11),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (235, 31),
                },
               ),
              ],
              recursive: false,
              position: (235, 9),
             },
             FunctionApplication {
              function: Variable {
               identifier: "modify",
               position: (236, 10),
              },
              arguments: [
               Variable {
                identifier: "x",
                position: (236, 17),
               },
              ],
             },
            ],
           },
           position: (234, 12),
          },
         ),
        ],
        target: Variable {
         identifier: "go",
         position: (237, 8),
        },
        position: (223, 6),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceXMLVal",
        position: (239, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "trace",
        position: (240, 5),
       },
       arguments: [
        BinaryOperation {
         operator: Addition,
         operands: [
          BinaryOperation {
           operator: Addition,
           operands: [
            String {
             parts: [
              Raw {
               content: "Warning: `traceXMLVal` is deprecated ",
               position: (240, 14),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "and will be removed in the next release. ",
               position: (241, 14),
              },
             ],
            },
           ],
           position: (241, 11),
          },
          String {
           parts: [
            Raw {
             content: "Please use `traceValFn builtins.toXML`.",
             position: (242, 14),
            },
           ],
          },
         ],
         position: (242, 11),
        },
        FunctionApplication {
         function: Variable {
          identifier: "trace",
          position: (243, 6),
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (243, 13),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "toXML",
               position: (243, 22),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (243, 28),
            },
           ],
          },
          Variable {
           identifier: "x",
           position: (243, 31),
          },
         ],
        },
       ],
      },
      position: (239, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceXMLValMarked",
        position: (244, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "str",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "trace",
         position: (245, 5),
        },
        arguments: [
         BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "Warning: `traceXMLValMarked` is deprecated ",
                position: (245, 14),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "and will be removed in the next release. ",
                position: (246, 14),
               },
              ],
             },
            ],
            position: (246, 11),
           },
           String {
            parts: [
             Raw {
              content: "Please use `traceValFn (x: str + builtins.toXML x)`.",
              position: (247, 14),
             },
            ],
           },
          ],
          position: (247, 11),
         },
         FunctionApplication {
          function: Variable {
           identifier: "trace",
           position: (248, 6),
          },
          arguments: [
           BinaryOperation {
            operator: Addition,
            operands: [
             Variable {
              identifier: "str",
              position: (248, 13),
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (248, 19),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "toXML",
                  position: (248, 28),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "x",
                position: (248, 34),
               },
              ],
             },
            ],
            position: (248, 17),
           },
           Variable {
            identifier: "x",
            position: (248, 37),
           },
          ],
         },
        ],
       },
       position: (244, 28),
      },
      position: (244, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceCall",
        position: (252, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "n",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "a",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "t",
              position: (252, 29),
             },
            ],
           },
           Function {
            argument: Some(
             "n2",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "x",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "traceShowValMarked",
               position: (252, 40),
              },
              arguments: [
               String {
                parts: [
                 Expression {
                  expression: Variable {
                   identifier: "n",
                   position: (252, 62),
                  },
                 },
                 Raw {
                  content: " ",
                  position: (252, 64),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "n2",
                   position: (252, 67),
                  },
                 },
                 Raw {
                  content: ":",
                  position: (252, 70),
                 },
                ],
               },
               Variable {
                identifier: "x",
                position: (252, 73),
               },
              ],
             },
             position: (252, 37),
            },
            position: (252, 33),
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "t",
           position: (252, 79),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "result",
              position: (252, 82),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (252, 91),
            },
            arguments: [
             FunctionApplication {
              function: Variable {
               identifier: "t",
               position: (252, 94),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "arg 1",
                  position: (252, 97),
                 },
                ],
               },
               Variable {
                identifier: "a",
                position: (252, 104),
               },
              ],
             },
            ],
           },
          ],
         },
         position: (252, 25),
        },
        position: (252, 22),
       },
       position: (252, 19),
      },
      position: (252, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceCall2",
        position: (253, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "n",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "a",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "b",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "t",
               position: (253, 32),
              },
             ],
            },
            Function {
             argument: Some(
              "n2",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: Function {
              argument: Some(
               "x",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "traceShowValMarked",
                position: (253, 43),
               },
               arguments: [
                String {
                 parts: [
                  Expression {
                   expression: Variable {
                    identifier: "n",
                    position: (253, 65),
                   },
                  },
                  Raw {
                   content: " ",
                   position: (253, 67),
                  },
                  Expression {
                   expression: Variable {
                    identifier: "n2",
                    position: (253, 70),
                   },
                  },
                  Raw {
                   content: ":",
                   position: (253, 73),
                  },
                 ],
                },
                Variable {
                 identifier: "x",
                 position: (253, 76),
                },
               ],
              },
              position: (253, 40),
             },
             position: (253, 36),
            },
           ),
          ],
          target: FunctionApplication {
           function: Variable {
            identifier: "t",
            position: (253, 82),
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "result",
               position: (253, 85),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "f",
              position: (253, 94),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "t",
                position: (253, 97),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "arg 1",
                   position: (253, 100),
                  },
                 ],
                },
                Variable {
                 identifier: "a",
                 position: (253, 107),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "t",
                position: (253, 111),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "arg 2",
                   position: (253, 114),
                  },
                 ],
                },
                Variable {
                 identifier: "b",
                 position: (253, 121),
                },
               ],
              },
             ],
            },
           ],
          },
          position: (253, 28),
         },
         position: (253, 25),
        },
        position: (253, 22),
       },
       position: (253, 19),
      },
      position: (253, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceCall3",
        position: (254, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "n",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "f",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "a",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "b",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "c",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "t",
                position: (254, 35),
               },
              ],
             },
             Function {
              argument: Some(
               "n2",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "x",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "traceShowValMarked",
                 position: (254, 46),
                },
                arguments: [
                 String {
                  parts: [
                   Expression {
                    expression: Variable {
                     identifier: "n",
                     position: (254, 68),
                    },
                   },
                   Raw {
                    content: " ",
                    position: (254, 70),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "n2",
                     position: (254, 73),
                    },
                   },
                   Raw {
                    content: ":",
                    position: (254, 76),
                   },
                  ],
                 },
                 Variable {
                  identifier: "x",
                  position: (254, 79),
                 },
                ],
               },
               position: (254, 43),
              },
              position: (254, 39),
             },
            ),
           ],
           target: FunctionApplication {
            function: Variable {
             identifier: "t",
             position: (254, 85),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "result",
                position: (254, 88),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "f",
               position: (254, 97),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "t",
                 position: (254, 100),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "arg 1",
                    position: (254, 103),
                   },
                  ],
                 },
                 Variable {
                  identifier: "a",
                  position: (254, 110),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "t",
                 position: (254, 114),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "arg 2",
                    position: (254, 117),
                   },
                  ],
                 },
                 Variable {
                  identifier: "b",
                  position: (254, 124),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "t",
                 position: (254, 128),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "arg 3",
                    position: (254, 131),
                   },
                  ],
                 },
                 Variable {
                  identifier: "c",
                  position: (254, 138),
                 },
                ],
               },
              ],
             },
            ],
           },
           position: (254, 31),
          },
          position: (254, 28),
         },
         position: (254, 25),
        },
        position: (254, 22),
       },
       position: (254, 19),
      },
      position: (254, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceValIfNot",
        position: (256, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "c",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "trace",
         position: (257, 5),
        },
        arguments: [
         BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "Warning: `traceValIfNot` is deprecated ",
                position: (257, 14),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "and will be removed in the next release. ",
                position: (258, 14),
               },
              ],
             },
            ],
            position: (258, 11),
           },
           String {
            parts: [
             Raw {
              content: "Please use `if/then/else` and `traceValSeq 1`.",
              position: (259, 14),
             },
            ],
           },
          ],
          position: (259, 11),
         },
         IfThenElse {
          predicate: FunctionApplication {
           function: Variable {
            identifier: "c",
            position: (260, 9),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (260, 11),
            },
           ],
          },
          then: Variable {
           identifier: "true",
           position: (260, 18),
          },
          else_: FunctionApplication {
           function: Variable {
            identifier: "traceSeq",
            position: (260, 28),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "showVal",
              position: (260, 38),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (260, 46),
              },
             ],
            },
            Variable {
             identifier: "false",
             position: (260, 49),
            },
           ],
          },
          position: (260, 6),
         },
        ],
       },
       position: (256, 22),
      },
      position: (256, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "addErrorContextToAttrs",
        position: (263, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "trace",
        position: (264, 5),
       },
       arguments: [
        BinaryOperation {
         operator: Addition,
         operands: [
          BinaryOperation {
           operator: Addition,
           operands: [
            String {
             parts: [
              Raw {
               content: "Warning: `addErrorContextToAttrs` is deprecated ",
               position: (264, 14),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "and will be removed in the next release. ",
               position: (265, 14),
              },
             ],
            },
           ],
           position: (265, 11),
          },
          String {
           parts: [
            Raw {
             content: "Please use `builtins.addErrorContext` directly.",
             position: (266, 14),
            },
           ],
          },
         ],
         position: (266, 11),
        },
        FunctionApplication {
         function: Variable {
          identifier: "mapAttrs",
          position: (267, 6),
         },
         arguments: [
          Function {
           argument: Some(
            "a",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "addErrorContext",
              position: (267, 22),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "while evaluating ",
                 position: (267, 39),
                },
                Expression {
                 expression: Variable {
                  identifier: "a",
                  position: (267, 58),
                 },
                },
               ],
              },
              Variable {
               identifier: "v",
               position: (267, 62),
              },
             ],
            },
            position: (267, 19),
           },
           position: (267, 16),
          },
          Variable {
           identifier: "attrs",
           position: (267, 65),
          },
         ],
        },
       ],
      },
      position: (263, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "traceCallXml",
        position: (274, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "a",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "trace",
        position: (275, 5),
       },
       arguments: [
        BinaryOperation {
         operator: Addition,
         operands: [
          BinaryOperation {
           operator: Addition,
           operands: [
            String {
             parts: [
              Raw {
               content: "Warning: `traceCallXml` is deprecated ",
               position: (275, 14),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "and will be removed in the next release. ",
               position: (276, 14),
              },
             ],
            },
           ],
           position: (276, 11),
          },
          String {
           parts: [
            Raw {
             content: "Please complain if you use the function regularly.",
             position: (277, 14),
            },
           ],
          },
         ],
         position: (277, 11),
        },
        IfThenElse {
         predicate: UnaryOperation {
          operator: Not,
          operand: FunctionApplication {
           function: Variable {
            identifier: "isInt",
            position: (278, 10),
           },
           arguments: [
            Variable {
             identifier: "a",
             position: (278, 16),
            },
           ],
          },
          position: (278, 9),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "traceCallXml",
           position: (279, 7),
          },
          arguments: [
           Int {
            value: 1,
            position: (279, 20),
           },
           String {
            parts: [
             Raw {
              content: "calling ",
              position: (279, 23),
             },
             Expression {
              expression: Variable {
               identifier: "a",
               position: (279, 33),
              },
             },
             Raw {
              content: "\n",
              position: (279, 35),
             },
            ],
           },
          ],
         },
         else_: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "nr",
               position: (281, 11),
              },
             ],
            },
            Variable {
             identifier: "a",
             position: (281, 16),
            },
           ),
          ],
          target: Function {
           argument: Some(
            "str",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "expr",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: FunctionApplication {
              function: Variable {
               identifier: "isFunction",
               position: (283, 14),
              },
              arguments: [
               Variable {
                identifier: "expr",
                position: (283, 25),
               },
              ],
             },
             then: Function {
              argument: Some(
               "arg",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "traceCallXml",
                position: (285, 15),
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (285, 29),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "add",
                     position: (285, 38),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Int {
                   value: 1,
                   position: (285, 42),
                  },
                  Variable {
                   identifier: "nr",
                   position: (285, 44),
                  },
                 ],
                },
                String {
                 parts: [
                  Expression {
                   expression: Variable {
                    identifier: "str",
                    position: (285, 51),
                   },
                  },
                  Raw {
                   content: "\n arg ",
                   position: (285, 55),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (285, 64),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "toString",
                        position: (285, 73),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Variable {
                      identifier: "nr",
                      position: (285, 82),
                     },
                    ],
                   },
                  },
                  Raw {
                   content: " is \n ",
                   position: (285, 85),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (285, 94),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "toXML",
                        position: (285, 103),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (285, 110),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "seq",
                          position: (285, 119),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "arg",
                        position: (285, 123),
                       },
                       Variable {
                        identifier: "arg",
                        position: (285, 127),
                       },
                      ],
                     },
                    ],
                   },
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "expr",
                  position: (285, 135),
                 },
                 arguments: [
                  Variable {
                   identifier: "arg",
                   position: (285, 140),
                  },
                 ],
                },
               ],
              },
              position: (284, 14),
             },
             else_: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "r",
                   position: (288, 17),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (288, 21),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "seq",
                     position: (288, 30),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "expr",
                   position: (288, 34),
                  },
                  Variable {
                   identifier: "expr",
                   position: (288, 39),
                  },
                 ],
                },
               ),
              ],
              target: FunctionApplication {
               function: Variable {
                identifier: "trace",
                position: (289, 16),
               },
               arguments: [
                String {
                 parts: [
                  Expression {
                   expression: Variable {
                    identifier: "str",
                    position: (289, 25),
                   },
                  },
                  Raw {
                   content: "\n result:\n",
                   position: (289, 29),
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (289, 43),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "toXML",
                        position: (289, 52),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Variable {
                      identifier: "r",
                      position: (289, 58),
                     },
                    ],
                   },
                  },
                 ],
                },
                Variable {
                 identifier: "r",
                 position: (289, 62),
                },
               ],
              },
              position: (288, 13),
             },
             position: (283, 11),
            },
            position: (282, 16),
           },
           position: (282, 11),
          },
          position: (281, 7),
         },
         position: (278, 6),
        },
       ],
      },
      position: (274, 18),
     },
    ),
   ],
   recursive: true,
   position: (38, 1),
  },
  position: (16, 1),
 },
 position: (15, 1),
}