---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pkg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "pkgs",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "pgadmin4",
         position: (6, 14),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (7, 16),
        },
        Raw {
         content: "pgadmin",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "_base",
        position: (9, 3),
       },
      ],
     },
     With {
      expression: Variable {
       identifier: "types",
       position: (9, 16),
      },
      target: List {
       elements: [
        Variable {
         identifier: "int",
         position: (9, 25),
        },
        Variable {
         identifier: "bool",
         position: (9, 29),
        },
        Variable {
         identifier: "str",
         position: (9, 34),
        },
       ],
       position: (9, 23),
      },
      position: (9, 11),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "base",
        position: (10, 3),
       },
      ],
     },
     With {
      expression: Variable {
       identifier: "types",
       position: (10, 15),
      },
      target: FunctionApplication {
       function: Variable {
        identifier: "oneOf",
        position: (10, 22),
       },
       arguments: [
        BinaryOperation {
         operator: Concatenation,
         operands: [
          List {
           elements: [
            FunctionApplication {
             function: Variable {
              identifier: "listOf",
              position: (10, 32),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "oneOf",
                position: (10, 40),
               },
               arguments: [
                Variable {
                 identifier: "_base",
                 position: (10, 46),
                },
               ],
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "attrsOf",
              position: (10, 55),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "oneOf",
                position: (10, 64),
               },
               arguments: [
                Variable {
                 identifier: "_base",
                 position: (10, 70),
                },
               ],
              },
             ],
            },
           ],
           position: (10, 29),
          },
          Variable {
           identifier: "_base",
           position: (10, 83),
          },
         ],
         position: (10, 80),
        },
       ],
      },
      position: (10, 10),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "formatAttrset",
        position: (12, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attr",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: String {
       parts: [
        Raw {
         content: "{",
         position: (13, 6),
        },
        Expression {
         expression: FunctionApplication {
          function: Variable {
           identifier: "concatStringsSep",
           position: (13, 9),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
              position: (13, 27),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (13, 32),
            },
            arguments: [
             Function {
              argument: Some(
               "key",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "value",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: String {
                parts: [
                 Expression {
                  expression: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (13, 63),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "toJSON",
                       position: (13, 72),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "key",
                     position: (13, 79),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: ": ",
                  position: (13, 83),
                 },
                 Expression {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "formatPyValue",
                    position: (13, 87),
                   },
                   arguments: [
                    Variable {
                     identifier: "value",
                     position: (13, 101),
                    },
                   ],
                  },
                 },
                 Raw {
                  content: ",",
                  position: (13, 107),
                 },
                ],
               },
               position: (13, 53),
              },
              position: (13, 48),
             },
             Variable {
              identifier: "attr",
              position: (13, 111),
             },
            ],
           },
          ],
         },
        },
        Raw {
         content: "}",
         position: (13, 117),
        },
       ],
      },
      position: (12, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "formatPyValue",
        position: (15, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "value",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (16, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "isString",
            position: (16, 17),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "value",
          position: (16, 26),
         },
        ],
       },
       then: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (16, 37),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "toJSON",
            position: (16, 46),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "value",
          position: (16, 53),
         },
        ],
       },
       else_: IfThenElse {
        predicate: HasProperty {
         expression: Variable {
          identifier: "value",
          position: (17, 13),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "_expr",
            position: (17, 21),
           },
          ],
         },
        },
        then: PropertyAccess {
         expression: Variable {
          identifier: "value",
          position: (17, 32),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "_expr",
            position: (17, 38),
           },
          ],
         },
         default: None,
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (18, 13),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "isInt",
              position: (18, 22),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "value",
            position: (18, 28),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (18, 39),
          },
          arguments: [
           Variable {
            identifier: "value",
            position: (18, 48),
           },
          ],
         },
         else_: IfThenElse {
          predicate: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (19, 13),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "isBool",
               position: (19, 22),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "value",
             position: (19, 29),
            },
           ],
          },
          then: IfThenElse {
           predicate: Variable {
            identifier: "value",
            position: (19, 44),
           },
           then: String {
            parts: [
             Raw {
              content: "True",
              position: (19, 56),
             },
            ],
           },
           else_: String {
            parts: [
             Raw {
              content: "False",
              position: (19, 68),
             },
            ],
           },
           position: (19, 41),
          },
          else_: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (20, 13),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isAttrs",
                position: (20, 22),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (20, 30),
             },
            ],
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "formatAttrset",
             position: (20, 42),
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (20, 56),
             },
            ],
           },
           else_: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (21, 13),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isList",
                 position: (21, 22),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "value",
               position: (21, 29),
              },
             ],
            },
            then: String {
             parts: [
              Raw {
               content: "[",
               position: (21, 41),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (21, 44),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (21, 62),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (21, 67),
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "v",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: String {
                     parts: [
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "formatPyValue",
                         position: (21, 78),
                        },
                        arguments: [
                         Variable {
                          identifier: "v",
                          position: (21, 92),
                         },
                        ],
                       },
                      },
                      Raw {
                       content: ",",
                       position: (21, 94),
                      },
                     ],
                    },
                    position: (21, 72),
                   },
                   Variable {
                    identifier: "value",
                    position: (21, 98),
                   },
                  ],
                 },
                ],
               },
              },
              Raw {
               content: "]",
               position: (21, 105),
              },
             ],
            },
            else_: FunctionApplication {
             function: Variable {
              identifier: "throw",
              position: (22, 10),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "Unrecognized type",
                 position: (22, 17),
                },
               ],
              },
             ],
            },
            position: (21, 10),
           },
           position: (20, 10),
          },
          position: (19, 10),
         },
         position: (18, 10),
        },
        position: (17, 10),
       },
       position: (16, 5),
      },
      position: (15, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "formatPy",
        position: (24, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatStringsSep",
        position: (25, 5),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "\n",
           position: (25, 23),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mapAttrsToList",
          position: (25, 28),
         },
         arguments: [
          Function {
           argument: Some(
            "key",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "value",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: String {
             parts: [
              Expression {
               expression: Variable {
                identifier: "key",
                position: (25, 59),
               },
              },
              Raw {
               content: " = ",
               position: (25, 63),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "formatPyValue",
                 position: (25, 68),
                },
                arguments: [
                 Variable {
                  identifier: "value",
                  position: (25, 82),
                 },
                ],
               },
              },
             ],
            },
            position: (25, 49),
           },
           position: (25, 44),
          },
          Variable {
           identifier: "attrs",
           position: (25, 91),
          },
         ],
        },
       ],
      },
      position: (24, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pyType",
        position: (27, 3),
       },
      ],
     },
     With {
      expression: Variable {
       identifier: "types",
       position: (27, 17),
      },
      target: FunctionApplication {
       function: Variable {
        identifier: "attrsOf",
        position: (27, 24),
       },
       arguments: [
        FunctionApplication {
         function: Variable {
          identifier: "oneOf",
          position: (27, 33),
         },
         arguments: [
          List {
           elements: [
            FunctionApplication {
             function: Variable {
              identifier: "attrsOf",
              position: (27, 42),
             },
             arguments: [
              Variable {
               identifier: "base",
               position: (27, 50),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "listOf",
              position: (27, 57),
             },
             arguments: [
              Variable {
               identifier: "base",
               position: (27, 64),
              },
             ],
            },
            Variable {
             identifier: "base",
             position: (27, 70),
            },
           ],
           position: (27, 39),
          },
         ],
        },
       ],
      },
      position: (27, 12),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (30, 3),
        },
        Raw {
         content: "services",
         position: (30, 11),
        },
        Raw {
         content: "pgadmin",
         position: (30, 20),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (31, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkEnableOption",
           position: (31, 14),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "PostgreSQL Admin 4",
              position: (31, 30),
             },
            ],
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "port",
            position: (33, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (33, 12),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (34, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Port for pgadmin4 to run on",
                 position: (34, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (35, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (35, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "port",
                  position: (35, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (36, 7),
                },
               ],
              },
              Int {
               value: 5050,
               position: (36, 17),
              },
             ),
            ],
            recursive: false,
            position: (33, 21),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "initialEmail",
            position: (39, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (39, 20),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (40, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Initial email for the pgAdmin account.",
                 position: (40, 22),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (41, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (41, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (41, 20),
                 },
                ],
               },
               default: None,
              },
             ),
            ],
            recursive: false,
            position: (39, 29),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "initialPasswordFile",
            position: (44, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (44, 27),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (45, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Initial password file for the pgAdmin account.\nNOTE: Should be string not a store path, to prevent the password from being world readable.\n",
                 position: (46, 1),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (49, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (49, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "path",
                  position: (49, 20),
                 },
                ],
               },
               default: None,
              },
             ),
            ],
            recursive: false,
            position: (44, 36),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "openFirewall",
            position: (52, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkEnableOption",
           position: (52, 20),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "firewall passthrough for pgadmin4",
              position: (52, 36),
             },
            ],
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "settings",
            position: (54, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (54, 16),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (55, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Settings for pgadmin4.\n<link xlink:href=\"https://www.pgadmin.org/docs/pgadmin4/development/config_py.html\">Documentation</link>.\n",
                 position: (56, 1),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (59, 7),
                },
               ],
              },
              Variable {
               identifier: "pyType",
               position: (59, 14),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (60, 7),
                },
               ],
              },
              Map {
               bindings: [],
               recursive: false,
               position: (60, 16),
              },
             ),
            ],
            recursive: false,
            position: (54, 25),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (30, 30),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (64, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (64, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (64, 18),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (64, 22),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "networking",
              position: (65, 5),
             },
             Raw {
              content: "firewall",
              position: (65, 16),
             },
             Raw {
              content: "allowedTCPPorts",
              position: (65, 25),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (65, 43),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (65, 49),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "openFirewall",
                 position: (65, 53),
                },
               ],
              },
              default: None,
             },
             List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (65, 69),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "port",
                   position: (65, 73),
                  },
                 ],
                },
                default: None,
               },
              ],
              position: (65, 67),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (67, 5),
             },
             Raw {
              content: "pgadmin",
              position: (67, 14),
             },
             Raw {
              content: "settings",
              position: (67, 22),
             },
            ],
           },
           BinaryOperation {
            operator: Update,
            operands: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "DEFAULT_SERVER_PORT",
                   position: (68, 7),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (68, 29),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "port",
                    position: (68, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "SERVER_MODE",
                   position: (69, 7),
                  },
                 ],
                },
                Variable {
                 identifier: "true",
                 position: (69, 21),
                },
               ),
              ],
              recursive: false,
              position: (67, 33),
             },
             FunctionApplication {
              function: Variable {
               identifier: "optionalAttrs",
               position: (70, 11),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (70, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "openFirewall",
                   position: (70, 29),
                  },
                 ],
                },
                default: None,
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "DEFAULT_SERVER",
                     position: (71, 7),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkDefault",
                    position: (71, 24),
                   },
                   arguments: [
                    String {
                     parts: [
                      Raw {
                       content: "::",
                       position: (71, 35),
                      },
                     ],
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (70, 42),
               },
              ],
             },
            ],
            position: (70, 7),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (74, 5),
             },
             Raw {
              content: "services",
              position: (74, 13),
             },
             Raw {
              content: "pgadmin",
              position: (74, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (75, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                   position: (75, 21),
                  },
                 ],
                },
               ],
               position: (75, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (76, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "network.target",
                   position: (76, 18),
                  },
                 ],
                },
               ],
               position: (76, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "requires",
                 position: (77, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "network.target",
                   position: (77, 21),
                  },
                 ],
                },
               ],
               position: (77, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wants",
                 position: (80, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "postgresql.service",
                   position: (80, 18),
                  },
                 ],
                },
               ],
               position: (80, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (82, 7),
                },
               ],
              },
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (82, 16),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "services",
                    position: (82, 23),
                   },
                   Raw {
                    content: "postgresql",
                    position: (82, 32),
                   },
                   Raw {
                    content: "package",
                    position: (82, 43),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (82, 51),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "coreutils",
                    position: (82, 56),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (82, 66),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "bash",
                    position: (82, 71),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (82, 14),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "preStart",
                 position: (84, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "# NOTE: this is idempotent (aka running it twice has no effect)\n(\n  # Email address:\n  echo ",
                 position: (85, 1),
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "escapeShellArg",
                   position: (88, 18),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (88, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "initialEmail",
                       position: (88, 37),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n  # file might not contain newline. echo hack fixes that.\n  PW=$(cat ",
                 position: (88, 50),
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "escapeShellArg",
                   position: (91, 22),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (91, 37),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "initialPasswordFile",
                       position: (91, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: ")\n\n  # Password:\n  echo \"$PW\"\n  # Retype password:\n  echo \"$PW\"\n) | ",
                 position: (91, 61),
                },
                Expression {
                 expression: Variable {
                  identifier: "pkg",
                  position: (97, 15),
                 },
                },
                Raw {
                 content: "/bin/pgadmin4-setup\n",
                 position: (97, 19),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "restartTriggers",
                 position: (100, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "/etc/pgadmin/config_system.py",
                   position: (101, 10),
                  },
                 ],
                },
               ],
               position: (100, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (104, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "User",
                    position: (105, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "pgadmin",
                    position: (105, 17),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "DynamicUser",
                    position: (106, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (106, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "LogsDirectory",
                    position: (107, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "pgadmin",
                    position: (107, 26),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "StateDirectory",
                    position: (108, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "pgadmin",
                    position: (108, 27),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ExecStart",
                    position: (109, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: Variable {
                     identifier: "pkg",
                     position: (109, 24),
                    },
                   },
                   Raw {
                    content: "/bin/pgadmin4",
                    position: (109, 28),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (104, 23),
              },
             ),
            ],
            recursive: false,
            position: (74, 32),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (113, 5),
             },
             Raw {
              content: "users",
              position: (113, 11),
             },
             Raw {
              content: "pgadmin",
              position: (113, 17),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "isSystemUser",
                 position: (114, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (114, 22),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (115, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "pgadmin",
                 position: (115, 16),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (113, 27),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "users",
              position: (118, 5),
             },
             Raw {
              content: "groups",
              position: (118, 11),
             },
             Raw {
              content: "pgadmin",
              position: (118, 18),
             },
            ],
           },
           Map {
            bindings: [],
            recursive: false,
            position: (118, 28),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (120, 5),
             },
             Raw {
              content: "etc",
              position: (120, 17),
             },
             Expression {
              expression: String {
               parts: [
                Raw {
                 content: "pgadmin/config_system.py",
                 position: (120, 22),
                },
               ],
              },
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "text",
                 position: (121, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "formatPy",
                position: (121, 14),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (121, 23),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "settings",
                    position: (121, 27),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "mode",
                 position: (122, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "0600",
                 position: (122, 15),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "user",
                 position: (123, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "pgadmin",
                 position: (123, 15),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "group",
                 position: (124, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "pgadmin",
                 position: (124, 16),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (120, 50),
           },
          ),
         ],
         recursive: false,
         position: (64, 30),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (29, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}