---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "files",
    default: Some(
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "configuration-common.nix",
          position: (50, 6),
         },
        ],
        position: (50, 5),
       },
       String {
        parts: [
         Raw {
          content: "configuration-nix.nix",
          position: (51, 6),
         },
        ],
        position: (51, 5),
       },
       String {
        parts: [
         Raw {
          content: "configuration-ghc-8.10.x.nix",
          position: (52, 6),
         },
        ],
        position: (52, 5),
       },
      ],
      position: (49, 11),
     },
    ),
   },
   DestructuredArgument {
    identifier: "nixpkgsPath",
    default: Some(
     Path {
      parts: [
       Raw {
        content: "../../..",
        position: (54, 17),
       },
      ],
      position: (54, 17),
     },
    ),
   },
   DestructuredArgument {
    identifier: "config",
    default: Some(
     Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "allowBroken",
           position: (55, 14),
          },
         ],
        },
        to: Variable {
         identifier: "true",
         position: (55, 28),
        },
       },
      ],
      recursive: false,
      position: (55, 12),
     },
    ),
   },
   DestructuredArgument {
    identifier: "skipEvalErrors",
    default: Some(
     Variable {
      identifier: "true",
      position: (56, 20),
     },
    ),
   },
   DestructuredArgument {
    identifier: "skipBinaryGHCs",
    default: Some(
     Variable {
      identifier: "true",
      position: (57, 20),
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "pkgs",
       position: (61, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: Variable {
      identifier: "import",
      position: (61, 10),
     },
     arguments: [
      Variable {
       identifier: "nixpkgsPath",
       position: (61, 17),
      },
      Map {
       bindings: [
        Inherit {
         from: None,
         attributes: [
          Raw {
           content: "config",
           position: (61, 39),
          },
         ],
        },
       ],
       recursive: false,
       position: (61, 29),
      },
     ],
    },
   },
   Inherit {
    from: Some(
     Variable {
      identifier: "pkgs",
      position: (62, 12),
     },
    ),
    attributes: [
     Raw {
      content: "lib",
      position: (62, 18),
     },
    ],
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "files'",
       position: (65, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (65, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "map",
         position: (65, 21),
        },
       ],
      },
      default: None,
     },
     arguments: [
      PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (65, 25),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "baseNameOf",
          position: (65, 34),
         },
        ],
       },
       default: None,
      },
      Parentheses {
       expression: IfThenElse {
        predicate: UnaryOperation {
         operator: Not,
         operand: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (66, 9),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "isList",
              position: (66, 18),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "files",
            position: (66, 25),
           },
          ],
         },
         position: (66, 8),
        },
        then: List {
         elements: [
          Variable {
           identifier: "files",
           position: (66, 38),
          },
         ],
         position: (66, 36),
        },
        else_: Variable {
         identifier: "files",
         position: (66, 51),
        },
        position: (66, 5),
       },
       position: (65, 45),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "setsForFile",
       position: (69, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "fileName",
     },
     definition: LetIn {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "configName",
           position: (72, 7),
          },
         ],
        },
        to: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (72, 20),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "head",
             position: (72, 29),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (73, 9),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "match",
                position: (73, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "configuration-(.+).nix",
                position: (73, 25),
               },
              ],
              position: (73, 24),
             },
             Variable {
              identifier: "fileName",
              position: (73, 49),
             },
            ],
           },
           position: (72, 34),
          },
         ],
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "configVersion",
           position: (76, 7),
          },
         ],
        },
        to: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (76, 23),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "concatStrings",
             position: (76, 27),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (77, 9),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "match",
                position: (77, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "ghc-([0-9]+).([0-9]+).x",
                position: (77, 25),
               },
              ],
              position: (77, 24),
             },
             Variable {
              identifier: "configName",
              position: (77, 50),
             },
            ],
           },
           position: (76, 41),
          },
         ],
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "setsForVersion",
           position: (80, 7),
          },
         ],
        },
        to: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (80, 25),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "map",
             position: (80, 34),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: Function {
            argument: Simple {
             identifier: "name",
            },
            definition: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (80, 45),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "haskell",
                position: (80, 50),
               },
               Raw {
                content: "packages",
                position: (80, 58),
               },
               Interpolation {
                expression: Variable {
                 identifier: "name",
                 position: (80, 69),
                },
               },
              ],
             },
             default: None,
            },
            position: (80, 39),
           },
           position: (80, 38),
          },
          Parentheses {
           expression: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (81, 9),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "filter",
                position: (81, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "setName",
               },
               definition: BinaryOperation {
                operator: LogicalAnd,
                operands: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (82, 11),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "hasPrefix",
                      position: (82, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "ghc",
                      position: (82, 26),
                     },
                     Interpolation {
                      expression: Variable {
                       identifier: "configVersion",
                       position: (82, 31),
                      },
                     },
                    ],
                    position: (82, 25),
                   },
                   Variable {
                    identifier: "setName",
                    position: (82, 47),
                   },
                  ],
                 },
                 Parentheses {
                  expression: BinaryOperation {
                   operator: Implication,
                   operands: [
                    Variable {
                     identifier: "skipBinaryGHCs",
                     position: (83, 15),
                    },
                    UnaryOperation {
                     operator: Not,
                     operand: Parentheses {
                      expression: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (83, 35),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "hasInfix",
                           position: (83, 39),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "Binary",
                           position: (83, 49),
                          },
                         ],
                         position: (83, 48),
                        },
                        Variable {
                         identifier: "setName",
                         position: (83, 57),
                        },
                       ],
                      },
                      position: (83, 34),
                     },
                     position: (83, 33),
                    },
                   ],
                   position: (83, 30),
                  },
                  position: (83, 14),
                 },
                ],
                position: (83, 11),
               },
               position: (81, 26),
              },
              position: (81, 25),
             },
             Parentheses {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (85, 11),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "attrNames",
                   position: (85, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (85, 30),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "haskell",
                    position: (85, 35),
                   },
                   Raw {
                    content: "packages",
                    position: (85, 43),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
              position: (84, 11),
             },
            ],
           },
           position: (80, 76),
          },
         ],
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "defaultSets",
           position: (89, 7),
          },
         ],
        },
        to: List {
         elements: [
          PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (89, 23),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "haskellPackages",
              position: (89, 28),
             },
            ],
           },
           default: None,
          },
         ],
         position: (89, 21),
        },
       },
      ],
      target: PropertyAccess {
       expression: Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Expression {
             ast: String {
              parts: [
               Raw {
                content: "common",
                position: (93, 8),
               },
              ],
              position: (93, 7),
             },
            },
           ],
          },
          to: Variable {
           identifier: "defaultSets",
           position: (93, 18),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Expression {
             ast: String {
              parts: [
               Raw {
                content: "nix",
                position: (94, 8),
               },
              ],
              position: (94, 7),
             },
            },
           ],
          },
          to: Variable {
           identifier: "defaultSets",
           position: (94, 15),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Expression {
             ast: String {
              parts: [
               Raw {
                content: "arm",
                position: (95, 8),
               },
              ],
              position: (95, 7),
             },
            },
           ],
          },
          to: Variable {
           identifier: "defaultSets",
           position: (95, 15),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Expression {
             ast: String {
              parts: [
               Raw {
                content: "darwin",
                position: (96, 8),
               },
              ],
              position: (96, 7),
             },
            },
           ],
          },
          to: Variable {
           identifier: "defaultSets",
           position: (96, 18),
          },
         },
        ],
        recursive: false,
        position: (90, 8),
       },
       attribute_path: AttributePath {
        parts: [
         Interpolation {
          expression: Variable {
           identifier: "configName",
           position: (97, 9),
          },
         },
        ],
       },
       default: Some(
        Variable {
         identifier: "setsForVersion",
         position: (97, 24),
        },
       ),
      },
      position: (70, 5),
     },
     position: (69, 17),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "availableHaskellPackages",
       position: (100, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (100, 30),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "listToAttrs",
         position: (100, 39),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Parentheses {
       expression: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (101, 5),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "map",
            position: (101, 14),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "attr",
           },
           definition: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (101, 25),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "nameValuePair",
                position: (101, 29),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "attr",
              position: (101, 43),
             },
             Variable {
              identifier: "null",
              position: (101, 48),
             },
            ],
           },
           position: (101, 19),
          },
          position: (101, 18),
         },
         Parentheses {
          expression: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (102, 7),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "attrNames",
               position: (102, 16),
              },
             ],
            },
            default: None,
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (102, 26),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "haskellPackages",
                position: (102, 31),
               },
              ],
             },
             default: None,
            },
           ],
          },
          position: (101, 54),
         },
        ],
       },
       position: (100, 51),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "overriddenAttrs",
       position: (108, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "fileName",
     },
     definition: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (108, 31),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "attrNames",
          position: (108, 40),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Parentheses {
        expression: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (109, 5),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "fix",
             position: (109, 9),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: Function {
            argument: Simple {
             identifier: "self",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "import",
              position: (110, 7),
             },
             arguments: [
              Parentheses {
               expression: BinaryOperation {
                operator: Addition,
                operands: [
                 Variable {
                  identifier: "nixpkgsPath",
                  position: (110, 15),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "/pkgs/development/haskell-modules/",
                    position: (110, 30),
                   },
                   Interpolation {
                    expression: Variable {
                     identifier: "fileName",
                     position: (110, 66),
                    },
                   },
                  ],
                  position: (110, 29),
                 },
                ],
                position: (110, 27),
               },
               position: (110, 14),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "haskellLib",
                    position: (111, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (111, 22),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "haskell",
                     position: (111, 27),
                    },
                    Raw {
                     content: "lib",
                     position: (111, 35),
                    },
                    Raw {
                     content: "compose",
                     position: (111, 39),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Inherit {
                 from: None,
                 attributes: [
                  Raw {
                   content: "pkgs",
                   position: (112, 17),
                  },
                 ],
                },
               ],
               recursive: false,
               position: (110, 78),
              },
              Variable {
               identifier: "self",
               position: (113, 9),
              },
              Variable {
               identifier: "availableHaskellPackages",
               position: (113, 14),
              },
             ],
            },
            position: (109, 14),
           },
           position: (109, 13),
          },
         ],
        },
        position: (108, 50),
       },
      ],
     },
     position: (108, 21),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "packages",
       position: (120, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (120, 14),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "filter",
         position: (120, 23),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Parentheses {
       expression: Function {
        argument: Simple {
         identifier: "v",
        },
        definition: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (121, 5),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "warnIf",
             position: (121, 9),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Parentheses {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "v",
             position: (121, 17),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "meta",
               position: (121, 19),
              },
              Raw {
               content: "broken",
               position: (121, 24),
              },
             ],
            },
            default: Some(
             Variable {
              identifier: "false",
              position: (121, 34),
             },
            ),
           },
           position: (121, 16),
          },
          String {
           parts: [
            Interpolation {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "v",
               position: (121, 44),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "pname",
                 position: (121, 46),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: " is marked as broken",
             position: (121, 52),
            },
           ],
           position: (121, 41),
          },
          Parentheses {
           expression: BinaryOperation {
            operator: LogicalAnd,
            operands: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "v",
                position: (122, 7),
               },
               Variable {
                identifier: "null",
                position: (122, 12),
               },
              ],
              position: (122, 9),
             },
             Parentheses {
              expression: BinaryOperation {
               operator: Implication,
               operands: [
                Variable {
                 identifier: "skipEvalErrors",
                 position: (123, 11),
                },
                PropertyAccess {
                 expression: Parentheses {
                  expression: FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "builtins",
                     position: (123, 30),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "tryEval",
                       position: (123, 39),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Parentheses {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "v",
                       position: (123, 48),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "outPath",
                         position: (123, 50),
                        },
                       ],
                      },
                      default: Some(
                       Variable {
                        identifier: "v",
                        position: (123, 61),
                       },
                      ),
                     },
                     position: (123, 47),
                    },
                   ],
                  },
                  position: (123, 29),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "success",
                    position: (123, 65),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (123, 26),
              },
              position: (123, 10),
             },
            ],
            position: (123, 7),
           },
           position: (121, 74),
          },
         ],
        },
        position: (120, 31),
       },
       position: (120, 30),
      },
      Parentheses {
       expression: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (126, 5),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "concatMap",
            position: (126, 9),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "fileName",
           },
           definition: LetIn {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "sets",
                 position: (128, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "setsForFile",
                position: (128, 16),
               },
               arguments: [
                Variable {
                 identifier: "fileName",
                 position: (128, 28),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "attrs",
                 position: (129, 9),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "overriddenAttrs",
                position: (129, 17),
               },
               arguments: [
                Variable {
                 identifier: "fileName",
                 position: (129, 33),
                },
               ],
              },
             },
            ],
            target: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (131, 9),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "concatMap",
                 position: (131, 13),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Parentheses {
               expression: Function {
                argument: Simple {
                 identifier: "set",
                },
                definition: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (131, 29),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "map",
                     position: (131, 38),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Parentheses {
                   expression: Function {
                    argument: Simple {
                     identifier: "attr",
                    },
                    definition: PropertyAccess {
                     expression: Variable {
                      identifier: "set",
                      position: (131, 49),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Interpolation {
                        expression: Variable {
                         identifier: "attr",
                         position: (131, 55),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                    position: (131, 43),
                   },
                   position: (131, 42),
                  },
                  Variable {
                   identifier: "attrs",
                   position: (131, 62),
                  },
                 ],
                },
                position: (131, 24),
               },
               position: (131, 23),
              },
              Variable {
               identifier: "sets",
               position: (131, 69),
              },
             ],
            },
            position: (127, 7),
           },
           position: (126, 20),
          },
          position: (126, 19),
         },
         Variable {
          identifier: "files'",
          position: (132, 7),
         },
        ],
       },
       position: (125, 5),
      },
     ],
    },
   },
  ],
  target: Variable {
   identifier: "packages",
   position: (136, 1),
  },
  position: (60, 1),
 },
 position: (49, 1),
}