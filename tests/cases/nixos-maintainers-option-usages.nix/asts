---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "testOptions",
    default: Some(
     List {
      elements: [],
      position: (7, 17),
     },
    ),
   },
   FunctionArgument {
    identifier: "testOption",
    default: Some(
     Variable {
      identifier: "null",
      position: (4, 16),
     },
    ),
   },
   FunctionArgument {
    identifier: "configuration",
    default: Some(
     FunctionApplication {
      function: Variable {
       identifier: "import",
       position: (1, 19),
      },
      arguments: [
       Path {
        parts: [
         Raw {
          content: "../lib/from-env.nix",
         },
        ],
        position: (1, 26),
       },
       String {
        parts: [
         Raw {
          content: "NIXOS_CONFIG",
         },
        ],
        position: (1, 46),
       },
       SearchNixPath {
        path: "nixos-config",
        position: (1, 61),
       },
      ],
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: FunctionApplication {
   function: Variable {
    identifier: "import",
    position: (45, 6),
   },
   arguments: [
    Path {
     parts: [
      Raw {
       content: "../../lib",
      },
     ],
     position: (45, 13),
    },
   ],
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "evalFun",
        position: (49, 3),
       },
      ],
     },
     Function {
      argument: None,
      arguments: FunctionArguments {
       arguments: [
        FunctionArgument {
         identifier: "specialArgs",
         default: Some(
          Map {
           bindings: [],
           recursive: false,
           position: (50, 19),
          },
         ),
        },
       ],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "import",
        position: (51, 6),
       },
       arguments: [
        Path {
         parts: [
          Raw {
           content: "../lib/eval-config.nix",
          },
         ],
         position: (51, 13),
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "modules",
              position: (52, 8),
             },
            ],
           },
           List {
            elements: [
             Variable {
              identifier: "configuration",
              position: (52, 20),
             },
            ],
            position: (52, 18),
           },
          ),
          Inherit(
           None,
           [
            Raw {
             content: "specialArgs",
             position: (53, 16),
            },
           ],
          ),
         ],
         recursive: false,
         position: (51, 36),
        },
       ],
      },
      position: (49, 13),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "eval",
        position: (56, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "evalFun",
       position: (56, 10),
      },
      arguments: [
       Map {
        bindings: [],
        recursive: false,
        position: (56, 18),
       },
      ],
     },
    ),
    Inherit(
     Some(
      Variable {
       identifier: "eval",
       position: (57, 12),
      },
     ),
     [
      Raw {
       content: "pkgs",
       position: (57, 18),
      },
     ],
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "excludedTestOptions",
        position: (59, 3),
       },
      ],
     },
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "_module.args",
         },
        ],
        position: (62, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.bonds",
         },
        ],
        position: (66, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.bridges",
         },
        ],
        position: (67, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.interfaces",
         },
        ],
        position: (68, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.macvlans",
         },
        ],
        position: (69, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.sits",
         },
        ],
        position: (70, 5),
       },
       String {
        parts: [
         Raw {
          content: "networking.vlans",
         },
        ],
        position: (71, 5),
       },
       String {
        parts: [
         Raw {
          content: "services.openssh.startWhenNeeded",
         },
        ],
        position: (72, 5),
       },
      ],
      position: (59, 25),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "excludedOptions",
        position: (77, 3),
       },
      ],
     },
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "boot.systemd.services",
         },
        ],
        position: (78, 5),
       },
       String {
        parts: [
         Raw {
          content: "systemd.services",
         },
        ],
        position: (79, 5),
       },
       String {
        parts: [
         Raw {
          content: "kde.extraPackages",
         },
        ],
        position: (80, 5),
       },
      ],
      position: (77, 21),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "excludeOptions",
        position: (82, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "list",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "filter",
        position: (83, 5),
       },
       arguments: [
        Function {
         argument: Some(
          "opt",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: UnaryOperation {
          operator: Not,
          operand: FunctionApplication {
           function: Variable {
            identifier: "elem",
            position: (83, 20),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "showOption",
              position: (83, 26),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "opt",
                position: (83, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "loc",
                  position: (83, 41),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            Variable {
             identifier: "excludedOptions",
             position: (83, 46),
            },
           ],
          },
          position: (83, 18),
         },
         position: (83, 13),
        },
        Variable {
         identifier: "list",
         position: (83, 64),
        },
       ],
      },
      position: (82, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "reportNewFailures",
        position: (86, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "old",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "new",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "filterChanges",
             position: (88, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "filter",
            position: (89, 9),
           },
           arguments: [
            Function {
             argument: None,
             arguments: FunctionArguments {
              arguments: [
               FunctionArgument {
                identifier: "snd",
                default: None,
               },
               FunctionArgument {
                identifier: "fst",
                default: None,
               },
              ],
              ellipsis: false,
             },
             definition: UnaryOperation {
              operator: Not,
              operand: BinaryOperation {
               operator: Implication,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "fst",
                  position: (90, 13),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "success",
                    position: (90, 17),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "snd",
                  position: (90, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "success",
                    position: (90, 32),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (90, 25),
              },
              position: (90, 11),
             },
             position: (89, 17),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "keepNames",
             position: (93, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (94, 9),
           },
           arguments: [
            Function {
             argument: None,
             arguments: FunctionArguments {
              arguments: [
               FunctionArgument {
                identifier: "snd",
                default: None,
               },
               FunctionArgument {
                identifier: "fst",
                default: None,
               },
              ],
              ellipsis: false,
             },
             definition: PropertyAccess {
              expression: Variable {
               identifier: "snd",
               position: (95, 46),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "name",
                 position: (95, 50),
                },
               ],
              },
              default: None,
             },
             position: (94, 14),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "tryCollectOptions",
             position: (104, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "moduleResult",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "forEach",
             position: (105, 9),
            },
            arguments: [
             FunctionApplication {
              function: Variable {
               identifier: "excludeOptions",
               position: (105, 18),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "collect",
                 position: (105, 34),
                },
                arguments: [
                 Variable {
                  identifier: "isOption",
                  position: (105, 42),
                 },
                 Variable {
                  identifier: "moduleResult",
                  position: (105, 51),
                 },
                ],
               },
              ],
             },
             Function {
              argument: Some(
               "opt",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: BinaryOperation {
               operator: Update,
               operands: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "name",
                      position: (106, 13),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "showOption",
                     position: (106, 20),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "opt",
                       position: (106, 31),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "loc",
                         position: (106, 35),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ),
                 ],
                 recursive: false,
                 position: (106, 11),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (106, 45),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "tryEval",
                     position: (106, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "strict",
                    position: (106, 63),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "opt",
                      position: (106, 70),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "value",
                        position: (106, 74),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
               ],
               position: (106, 42),
              },
              position: (105, 67),
             },
            ],
           },
           position: (104, 27),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "keepNames",
          position: (108, 8),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "filterChanges",
            position: (109, 10),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "zipLists",
              position: (110, 12),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "tryCollectOptions",
                position: (110, 22),
               },
               arguments: [
                Variable {
                 identifier: "old",
                 position: (110, 40),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "tryCollectOptions",
                position: (110, 46),
               },
               arguments: [
                Variable {
                 identifier: "new",
                 position: (110, 64),
                },
               ],
              },
             ],
            },
           ],
          },
         ],
        },
        position: (87, 5),
       },
       position: (86, 28),
      },
      position: (86, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "introspectionModules",
        position: (117, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "setIntrospection",
           position: (119, 7),
          },
         ],
        },
        Function {
         argument: Some(
          "opt",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "name",
               position: (120, 9),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "showOption",
              position: (120, 16),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "opt",
                position: (120, 27),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "loc",
                  position: (120, 31),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "path",
               position: (121, 9),
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "opt",
              position: (121, 16),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "loc",
                position: (121, 20),
               },
              ],
             },
             default: None,
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "config",
               position: (122, 9),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "setAttrByPath",
              position: (122, 18),
             },
             arguments: [
              Variable {
               identifier: "path",
               position: (122, 32),
              },
              FunctionApplication {
               function: Variable {
                identifier: "throw",
                position: (123, 12),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "Usage introspection of '",
                  },
                  Expression {
                   expression: Variable {
                    identifier: "name",
                    position: (123, 45),
                   },
                  },
                  Raw {
                   content: "' by forced failure.",
                  },
                 ],
                 position: (123, 18),
                },
               ],
              },
             ],
            },
           ),
          ],
          recursive: true,
          position: (119, 31),
         },
         position: (119, 26),
        },
       ),
      ],
      target: FunctionApplication {
       function: Variable {
        identifier: "map",
        position: (126, 7),
       },
       arguments: [
        Variable {
         identifier: "setIntrospection",
         position: (126, 11),
        },
        FunctionApplication {
         function: Variable {
          identifier: "collect",
          position: (126, 29),
         },
         arguments: [
          Variable {
           identifier: "isOption",
           position: (126, 37),
          },
          PropertyAccess {
           expression: Variable {
            identifier: "eval",
            position: (126, 46),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "options",
              position: (126, 51),
             },
            ],
           },
           default: None,
          },
         ],
        },
       ],
      },
      position: (118, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "overrideConfig",
        position: (128, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "thrower",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "recursiveUpdateUntil",
        position: (129, 5),
       },
       arguments: [
        Function {
         argument: Some(
          "path",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "old",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "new",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "path",
              position: (130, 7),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "thrower",
               position: (130, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (130, 23),
                },
               ],
              },
              default: None,
             },
            ],
            position: (130, 12),
           },
           position: (129, 38),
          },
          position: (129, 33),
         },
         position: (129, 27),
        },
        PropertyAccess {
         expression: Variable {
          identifier: "eval",
          position: (131, 7),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "config",
            position: (131, 12),
           },
          ],
         },
         default: None,
        },
        PropertyAccess {
         expression: Variable {
          identifier: "thrower",
          position: (131, 19),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "config",
            position: (131, 27),
           },
          ],
         },
         default: None,
        },
       ],
      },
      position: (128, 20),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "graph",
        position: (134, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "map",
       position: (135, 5),
      },
      arguments: [
       Function {
        argument: Some(
         "thrower",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "option",
              position: (136, 7),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "thrower",
             position: (136, 16),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "name",
               position: (136, 24),
              },
             ],
            },
            default: None,
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "usedBy",
              position: (137, 7),
             },
            ],
           },
           Assert {
            expression: FunctionApplication {
             function: Variable {
              identifier: "__trace",
              position: (137, 23),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "Investigate ",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "thrower",
                   position: (137, 46),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "name",
                     position: (137, 54),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               position: (137, 31),
              },
              Variable {
               identifier: "true",
               position: (137, 61),
              },
             ],
            },
            target: FunctionApplication {
             function: Variable {
              identifier: "reportNewFailures",
              position: (138, 9),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "eval",
                position: (138, 27),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "options",
                  position: (138, 32),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "evalFun",
                 position: (138, 41),
                },
                arguments: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "specialArgs",
                       position: (139, 11),
                      },
                     ],
                    },
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "config",
                          position: (140, 13),
                         },
                        ],
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "overrideConfig",
                         position: (140, 22),
                        },
                        arguments: [
                         Variable {
                          identifier: "thrower",
                          position: (140, 37),
                         },
                        ],
                       },
                      ),
                     ],
                     recursive: false,
                     position: (139, 25),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (138, 49),
                 },
                ],
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "options",
                  position: (142, 12),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            position: (137, 16),
           },
          ),
         ],
         recursive: false,
         position: (135, 19),
        },
        position: (135, 10),
       },
       Variable {
        identifier: "introspectionModules",
        position: (143, 8),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "displayOptionsGraph",
        position: (145, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "checkList",
           position: (147, 8),
          },
         ],
        },
        IfThenElse {
         predicate: BinaryOperation {
          operator: NotEqualTo,
          operands: [
           Variable {
            identifier: "testOption",
            position: (148, 13),
           },
           Variable {
            identifier: "null",
            position: (148, 27),
           },
          ],
          position: (148, 24),
         },
         then: List {
          elements: [
           Variable {
            identifier: "testOption",
            position: (148, 39),
           },
          ],
          position: (148, 37),
         },
         else_: Variable {
          identifier: "testOptions",
          position: (149, 15),
         },
         position: (148, 10),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "checkAll",
           position: (150, 8),
          },
         ],
        },
        BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "checkList",
           position: (150, 19),
          },
          List {
           elements: [],
           position: (150, 32),
          },
         ],
         position: (150, 29),
        },
       ),
      ],
      target: FunctionApplication {
       function: Variable {
        identifier: "flip",
        position: (152, 8),
       },
       arguments: [
        Variable {
         identifier: "filter",
         position: (152, 13),
        },
        Variable {
         identifier: "graph",
         position: (152, 20),
        },
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "option",
            default: None,
           },
          ],
          ellipsis: true,
         },
         definition: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           BinaryOperation {
            operator: LogicalOr,
            operands: [
             Variable {
              identifier: "checkAll",
              position: (153, 11),
             },
             FunctionApplication {
              function: Variable {
               identifier: "elem",
               position: (153, 23),
              },
              arguments: [
               Variable {
                identifier: "option",
                position: (153, 28),
               },
               Variable {
                identifier: "checkList",
                position: (153, 35),
               },
              ],
             },
            ],
            position: (153, 20),
           },
           UnaryOperation {
            operator: Not,
            operand: FunctionApplication {
             function: Variable {
              identifier: "elem",
              position: (154, 15),
             },
             arguments: [
              Variable {
               identifier: "option",
               position: (154, 20),
              },
              Variable {
               identifier: "excludedTestOptions",
               position: (154, 27),
              },
             ],
            },
            position: (154, 13),
           },
          ],
          position: (154, 10),
         },
         position: (152, 27),
        },
       ],
      },
      position: (146, 6),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "graphToDot",
        position: (157, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "graph",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: String {
       parts: [
        Raw {
         content: "digraph \"Option Usages\" {\n  ",
        },
        Expression {
         expression: FunctionApplication {
          function: Variable {
           identifier: "concatMapStrings",
           position: (159, 9),
          },
          arguments: [
           Function {
            argument: None,
            arguments: FunctionArguments {
             arguments: [
              FunctionArgument {
               identifier: "usedBy",
               default: None,
              },
              FunctionArgument {
               identifier: "option",
               default: None,
              },
             ],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "concatMapStrings",
              position: (160, 11),
             },
             arguments: [
              Function {
               argument: Some(
                "user",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: String {
                parts: [
                 Raw {
                  content: "            \"",
                 },
                 Expression {
                  expression: Variable {
                   identifier: "option",
                   position: (161, 16),
                  },
                 },
                 Raw {
                  content: "\" -> \"",
                 },
                 Expression {
                  expression: Variable {
                   identifier: "user",
                   position: (161, 31),
                  },
                 },
                 Raw {
                  content: "\"",
                 },
                ],
                position: (160, 35),
               },
               position: (160, 29),
              },
              Variable {
               identifier: "usedBy",
               position: (162, 13),
              },
             ],
            },
            position: (159, 27),
           },
           Variable {
            identifier: "displayOptionsGraph",
            position: (163, 11),
           },
          ],
         },
        },
        Raw {
         content: "\n}\n",
        },
       ],
       position: (157, 23),
      },
      position: (157, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "graphToText",
        position: (167, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "graph",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatMapStrings",
        position: (168, 5),
       },
       arguments: [
        Function {
         argument: None,
         arguments: FunctionArguments {
          arguments: [
           FunctionArgument {
            identifier: "usedBy",
            default: None,
           },
          ],
          ellipsis: true,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "concatMapStrings",
           position: (169, 9),
          },
          arguments: [
           Function {
            argument: Some(
             "user",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: String {
             parts: [
              Raw {
               content: "",
              },
              Expression {
               expression: Variable {
                identifier: "user",
                position: (170, 13),
               },
              },
              Raw {
               content: "\n",
              },
             ],
             position: (169, 33),
            },
            position: (169, 27),
           },
           Variable {
            identifier: "usedBy",
            position: (171, 13),
           },
          ],
         },
         position: (168, 23),
        },
        Variable {
         identifier: "displayOptionsGraph",
         position: (172, 9),
        },
       ],
      },
      position: (167, 17),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "dotContent",
         position: (177, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "graphToDot",
        position: (177, 16),
       },
       arguments: [
        Variable {
         identifier: "graph",
         position: (177, 27),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "dot",
         position: (178, 3),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (178, 9),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "writeTextFile",
           position: (178, 14),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "name",
              position: (179, 5),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "option_usages.dot",
             },
            ],
            position: (179, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (180, 5),
             },
            ],
           },
           Variable {
            identifier: "dotContent",
            position: (180, 12),
           },
          ),
         ],
         recursive: false,
         position: (178, 28),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "pdf",
         position: (183, 3),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (183, 9),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "texFunctions",
           position: (183, 14),
          },
          Raw {
           content: "dot2pdf",
           position: (183, 27),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "dotGraph",
              position: (184, 5),
             },
            ],
           },
           Variable {
            identifier: "dot",
            position: (184, 16),
           },
          ),
         ],
         recursive: false,
         position: (183, 35),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "txtContent",
         position: (187, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "graphToText",
        position: (187, 16),
       },
       arguments: [
        Variable {
         identifier: "graph",
         position: (187, 28),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "txt",
         position: (188, 3),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (188, 9),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "writeTextFile",
           position: (188, 14),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "name",
              position: (189, 5),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "option_usages.txt",
             },
            ],
            position: (189, 12),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "text",
              position: (190, 5),
             },
            ],
           },
           Variable {
            identifier: "txtContent",
            position: (190, 12),
           },
          ),
         ],
         recursive: false,
         position: (188, 28),
        },
       ],
      },
     ),
    ],
    recursive: true,
    position: (176, 1),
   },
   position: (47, 1),
  },
  position: (45, 1),
 },
 position: (1, 1),
}