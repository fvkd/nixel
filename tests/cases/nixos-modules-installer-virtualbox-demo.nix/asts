---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "imports",
        position: (6, 3),
       },
      ],
     },
     List {
      elements: [
       Path {
        parts: [
         Raw {
          content: "../virtualisation/virtualbox-image.nix",
          position: (7, 7),
         },
        ],
       },
       Path {
        parts: [
         Raw {
          content: "../installer/cd-dvd/channel.nix",
          position: (8, 7),
         },
        ],
       },
       Path {
        parts: [
         Raw {
          content: "../profiles/demo.nix",
          position: (9, 7),
         },
        ],
       },
       Path {
        parts: [
         Raw {
          content: "../profiles/clone-config.nix",
          position: (10, 7),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "boot",
        position: (14, 3),
       },
       Raw {
        content: "loader",
        position: (14, 8),
       },
       Raw {
        content: "grub",
        position: (14, 15),
       },
       Raw {
        content: "fsIdentifier",
        position: (14, 20),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "provided",
        position: (14, 36),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "users",
        position: (17, 3),
       },
       Raw {
        content: "users",
        position: (17, 9),
       },
       Raw {
        content: "demo",
        position: (17, 15),
       },
       Raw {
        content: "extraGroups",
        position: (17, 20),
       },
      ],
     },
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "vboxsf",
          position: (17, 37),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "services",
        position: (21, 3),
       },
       Raw {
        content: "xserver",
        position: (21, 12),
       },
       Raw {
        content: "videoDrivers",
        position: (21, 20),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkOverride",
       position: (21, 35),
      },
      arguments: [
       Int {
        value: 40,
        position: (21, 46),
       },
       List {
        elements: [
         String {
          parts: [
           Raw {
            content: "virtualbox",
            position: (21, 52),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "vmware",
            position: (21, 65),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "cirrus",
            position: (21, 74),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "vesa",
            position: (21, 83),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "modesetting",
            position: (21, 90),
           },
          ],
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "powerManagement",
        position: (23, 3),
       },
       Raw {
        content: "enable",
        position: (23, 19),
       },
      ],
     },
     Variable {
      identifier: "false",
      position: (23, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "system",
        position: (24, 3),
       },
       Raw {
        content: "stateVersion",
        position: (24, 10),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkDefault",
       position: (24, 25),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "18.03",
          position: (24, 36),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "installer",
        position: (26, 3),
       },
       Raw {
        content: "cloneConfigExtra",
        position: (26, 13),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "# Let demo build as a trusted user.\n# nix.settings.trusted-users = [ \"demo\" ];\n\n# Mount a VirtualBox shared folder.\n# This is configurable in the VirtualBox menu at\n# Machine / Settings / Shared Folders.\n# fileSystems.\"/mnt\" = {\n#   fsType = \"vboxsf\";\n#   device = \"nameofdevicetomount\";\n#   options = [ \"rw\" ];\n# };\n\n# By default, the NixOS VirtualBox demo image includes SDDM and Plasma.\n# If you prefer another desktop manager or display manager, you may want\n# to disable the default.\n# services.xserver.desktopManager.plasma5.enable = lib.mkForce false;\n# services.xserver.displayManager.sddm.enable = lib.mkForce false;\n\n# Enable GDM/GNOME by uncommenting above two lines and two lines below.\n# services.xserver.displayManager.gdm.enable = true;\n# services.xserver.desktopManager.gnome.enable = true;\n\n# Set your time zone.\n# time.timeZone = \"Europe/Amsterdam\";\n\n# List packages installed in system profile. To search, run:\n# \\$ nix search wget\n# environment.systemPackages = with pkgs; [\n#   wget vim\n# ];\n\n# Enable the OpenSSH daemon.\n# services.openssh.enable = true;\n",
        position: (27, 1),
       },
      ],
     },
    ),
   ],
   recursive: false,
  },
 },
}