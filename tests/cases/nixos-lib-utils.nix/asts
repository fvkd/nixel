---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (1, 29),
  },
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "copyFile",
        position: (6, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "filePath",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (6, 24),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "runCommand",
           position: (6, 29),
          },
         ],
        },
        default: None,
       },
       arguments: [
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (6, 41),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "unsafeDiscardStringContext",
             position: (6, 50),
            },
           ],
          },
          default: None,
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (6, 78),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "baseNameOf",
               position: (6, 87),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "filePath",
             position: (6, 98),
            },
           ],
          },
         ],
        },
        Map {
         bindings: [],
         recursive: false,
        },
        String {
         parts: [
          Raw {
           content: "cp ",
           position: (7, 1),
          },
          Expression {
           expression: Variable {
            identifier: "filePath",
            position: (7, 10),
           },
          },
          Raw {
           content: " $out\n",
           position: (7, 19),
          },
         ],
        },
       ],
      },
      position: (6, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pathsNeededForBoot",
        position: (13, 3),
       },
      ],
     },
     List {
      elements: [
       String {
        parts: [
         Raw {
          content: "/",
          position: (13, 27),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/nix",
          position: (13, 31),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/nix/store",
          position: (13, 38),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/var",
          position: (13, 51),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/var/log",
          position: (13, 58),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/var/lib",
          position: (13, 69),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/var/lib/nixos",
          position: (13, 80),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/etc",
          position: (13, 97),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "/usr",
          position: (13, 104),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "fsNeededForBoot",
        position: (14, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "fs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: LogicalOr,
       operands: [
        PropertyAccess {
         expression: Variable {
          identifier: "fs",
          position: (14, 25),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "neededForBoot",
            position: (14, 28),
           },
          ],
         },
         default: None,
        },
        FunctionApplication {
         function: Variable {
          identifier: "elem",
          position: (14, 45),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "fs",
            position: (14, 50),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "mountPoint",
              position: (14, 53),
             },
            ],
           },
           default: None,
          },
          Variable {
           identifier: "pathsNeededForBoot",
           position: (14, 64),
          },
         ],
        },
       ],
       position: (14, 42),
      },
      position: (14, 21),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "fsBefore",
        position: (17, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "a",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "b",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "normalisePath",
             position: (29, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "path",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: String {
            parts: [
             Expression {
              expression: Variable {
               identifier: "path",
               position: (29, 32),
              },
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (29, 39),
               },
               arguments: [
                UnaryOperation {
                 operator: Not,
                 operand: FunctionApplication {
                  function: Variable {
                   identifier: "hasSuffix",
                   position: (29, 57),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "/",
                      position: (29, 68),
                     },
                    ],
                   },
                   Variable {
                    identifier: "path",
                    position: (29, 71),
                   },
                  ],
                 },
                 position: (29, 55),
                },
                String {
                 parts: [
                  Raw {
                   content: "/",
                   position: (29, 79),
                  },
                 ],
                },
               ],
              },
             },
            ],
           },
           position: (29, 23),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "normalise",
             position: (30, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "mount",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: BinaryOperation {
            operator: Update,
            operands: [
             Variable {
              identifier: "mount",
              position: (30, 26),
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "device",
                   position: (30, 37),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "normalisePath",
                  position: (30, 46),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (30, 61),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "mount",
                      position: (30, 70),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "device",
                        position: (30, 76),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "mountPoint",
                   position: (31, 37),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "normalisePath",
                  position: (31, 50),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mount",
                    position: (31, 64),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "mountPoint",
                      position: (31, 70),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "depends",
                   position: (32, 37),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (32, 47),
                 },
                 arguments: [
                  Variable {
                   identifier: "normalisePath",
                   position: (32, 51),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mount",
                    position: (32, 65),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "depends",
                      position: (32, 71),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
              ],
              recursive: false,
             },
            ],
            position: (30, 32),
           },
           position: (30, 19),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "a'",
             position: (35, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "normalise",
            position: (35, 12),
           },
           arguments: [
            Variable {
             identifier: "a",
             position: (35, 22),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "b'",
             position: (36, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "normalise",
            position: (36, 12),
           },
           arguments: [
            Variable {
             identifier: "b",
             position: (36, 22),
            },
           ],
          },
         ),
        ],
        target: BinaryOperation {
         operator: LogicalOr,
         operands: [
          BinaryOperation {
           operator: LogicalOr,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (38, 8),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (38, 18),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mountPoint",
                  position: (38, 21),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "b'",
                position: (38, 32),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "device",
                  position: (38, 35),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (39, 8),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (39, 18),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mountPoint",
                  position: (39, 21),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "b'",
                position: (39, 32),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mountPoint",
                  position: (39, 35),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ],
           position: (39, 5),
          },
          FunctionApplication {
           function: Variable {
            identifier: "any",
            position: (40, 8),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (40, 13),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (40, 23),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "mountPoint",
                  position: (40, 26),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "b'",
              position: (40, 38),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "depends",
                position: (40, 41),
               },
              ],
             },
             default: None,
            },
           ],
          },
         ],
         position: (40, 5),
        },
        position: (18, 5),
       },
       position: (17, 17),
      },
      position: (17, 14),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "escapeSystemdPath",
        position: (44, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "s",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "replaceChars",
        position: (45, 4),
       },
       arguments: [
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "/",
             position: (45, 19),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "-",
             position: (45, 23),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: " ",
             position: (45, 27),
            },
           ],
          },
         ],
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "-",
             position: (45, 33),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "\\x2d",
             position: (45, 37),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "\\x20",
             position: (45, 45),
            },
           ],
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "removePrefix",
          position: (46, 5),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "/",
             position: (46, 19),
            },
           ],
          },
          Variable {
           identifier: "s",
           position: (46, 22),
          },
         ],
        },
       ],
      },
      position: (44, 23),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "toShellPath",
        position: (49, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "shell",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "types",
          position: (50, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "shellPackage",
            position: (50, 14),
           },
           Raw {
            content: "check",
            position: (50, 27),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "shell",
          position: (50, 33),
         },
        ],
       },
       then: String {
        parts: [
         Raw {
          content: "/run/current-system/sw",
          position: (51, 8),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "shell",
            position: (51, 32),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "shellPath",
              position: (51, 38),
             },
            ],
           },
           default: None,
          },
         },
        ],
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "types",
           position: (52, 13),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "package",
             position: (52, 19),
            },
            Raw {
             content: "check",
             position: (52, 27),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "shell",
           position: (52, 33),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "throw",
          position: (53, 7),
         },
         arguments: [
          String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "shell",
              position: (53, 16),
             },
            },
            Raw {
             content: " is not a shell package",
             position: (53, 22),
            },
           ],
          },
         ],
        },
        else_: Variable {
         identifier: "shell",
         position: (55, 7),
        },
        position: (52, 10),
       },
       position: (50, 5),
      },
      position: (49, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "recursiveGetAttrWithJqPrefix",
        position: (79, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "item",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "attr",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "recurse",
             position: (81, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "prefix",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "item",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: IfThenElse {
             predicate: HasProperty {
              expression: Variable {
               identifier: "item",
               position: (82, 12),
              },
              attribute_path: AttributePath {
               attributes: [
                Expression {
                 expression: Variable {
                  identifier: "attr",
                  position: (82, 21),
                 },
                },
               ],
              },
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "nameValuePair",
               position: (83, 11),
              },
              arguments: [
               Variable {
                identifier: "prefix",
                position: (83, 25),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "item",
                 position: (83, 32),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "attr",
                    position: (83, 39),
                   },
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "isAttrs",
                position: (84, 17),
               },
               arguments: [
                Variable {
                 identifier: "item",
                 position: (84, 25),
                },
               ],
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "map",
                position: (85, 11),
               },
               arguments: [
                Function {
                 argument: Some(
                  "name",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "recurse",
                   position: (85, 22),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: Addition,
                    operands: [
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       Variable {
                        identifier: "prefix",
                        position: (85, 31),
                       },
                       String {
                        parts: [
                         Raw {
                          content: ".",
                          position: (85, 41),
                         },
                        ],
                       },
                      ],
                      position: (85, 38),
                     },
                     Variable {
                      identifier: "name",
                      position: (85, 46),
                     },
                    ],
                    position: (85, 44),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "item",
                     position: (85, 52),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Expression {
                       expression: Variable {
                        identifier: "name",
                        position: (85, 59),
                       },
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                 position: (85, 16),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "attrNames",
                  position: (85, 67),
                 },
                 arguments: [
                  Variable {
                   identifier: "item",
                   position: (85, 77),
                  },
                 ],
                },
               ],
              },
              else_: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isList",
                 position: (86, 17),
                },
                arguments: [
                 Variable {
                  identifier: "item",
                  position: (86, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "imap0",
                 position: (87, 11),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "index",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "item",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "recurse",
                     position: (87, 31),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       Variable {
                        identifier: "prefix",
                        position: (87, 40),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "[",
                          position: (87, 50),
                         },
                         Expression {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "toString",
                            position: (87, 53),
                           },
                           arguments: [
                            Variable {
                             identifier: "index",
                             position: (87, 62),
                            },
                           ],
                          },
                         },
                         Raw {
                          content: "]",
                          position: (87, 68),
                         },
                        ],
                       },
                      ],
                      position: (87, 47),
                     },
                     Variable {
                      identifier: "item",
                      position: (87, 72),
                     },
                    ],
                   },
                   position: (87, 25),
                  },
                  position: (87, 18),
                 },
                 Variable {
                  identifier: "item",
                  position: (87, 78),
                 },
                ],
               },
               else_: List {
                elements: [],
               },
               position: (86, 14),
              },
              position: (84, 14),
             },
             position: (82, 9),
            },
            position: (81, 25),
           },
           position: (81, 17),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "listToAttrs",
          position: (90, 8),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "flatten",
            position: (90, 21),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "recurse",
              position: (90, 30),
             },
             arguments: [
              String {
               parts: [],
              },
              Variable {
               identifier: "item",
               position: (90, 41),
              },
             ],
            },
           ],
          },
         ],
        },
        position: (80, 5),
       },
       position: (79, 40),
      },
      position: (79, 34),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "genJqSecretsReplacementSnippet",
        position: (141, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "genJqSecretsReplacementSnippet'",
       position: (141, 36),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "_secret",
          position: (141, 69),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "genJqSecretsReplacementSnippet'",
        position: (145, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "attr",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "output",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "secrets",
              position: (147, 7),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "recursiveGetAttrWithJqPrefix",
             position: (147, 17),
            },
            arguments: [
             Variable {
              identifier: "set",
              position: (147, 46),
             },
             Variable {
              identifier: "attr",
              position: (147, 50),
             },
            ],
           },
          ),
         ],
         target: BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             BinaryOperation {
              operator: Addition,
              operands: [
               BinaryOperation {
                operator: Addition,
                operands: [
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "if [[ -h ",
                      position: (149, 1),
                     },
                     Raw {
                      content: "'",
                      position: (149, 16),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "output",
                       position: (149, 19),
                      },
                     },
                     Raw {
                      content: "' ]]; then\n  rm ",
                      position: (149, 26),
                     },
                     Raw {
                      content: "'",
                      position: (150, 12),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "output",
                       position: (150, 15),
                      },
                     },
                     Raw {
                      content: "'\nfi\n\ninherit_errexit_enabled=0\nshopt -pq inherit_errexit && inherit_errexit_enabled=1\nshopt -s inherit_errexit\n",
                      position: (150, 22),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "concatStringsSep",
                     position: (157, 7),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "\n",
                        position: (158, 10),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "imap1",
                       position: (159, 10),
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "index",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: Function {
                         argument: Some(
                          "name",
                         ),
                         arguments: FunctionArguments {
                          arguments: [],
                          ellipsis: false,
                         },
                         definition: String {
                          parts: [
                           Raw {
                            content: "secret",
                            position: (160, 1),
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "toString",
                              position: (160, 27),
                             },
                             arguments: [
                              Variable {
                               identifier: "index",
                               position: (160, 36),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "=$(<",
                            position: (160, 42),
                           },
                           Raw {
                            content: "'",
                            position: (160, 46),
                           },
                           Expression {
                            expression: PropertyAccess {
                             expression: Variable {
                              identifier: "secrets",
                              position: (160, 49),
                             },
                             attribute_path: AttributePath {
                              attributes: [
                               Expression {
                                expression: Variable {
                                 identifier: "name",
                                 position: (160, 59),
                                },
                               },
                              ],
                             },
                             default: None,
                            },
                           },
                           Raw {
                            content: "')\nexport secret",
                            position: (160, 65),
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "toString",
                              position: (161, 34),
                             },
                             arguments: [
                              Variable {
                               identifier: "index",
                               position: (161, 43),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "\n",
                            position: (161, 49),
                           },
                          ],
                         },
                         position: (159, 24),
                        },
                        position: (159, 17),
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "attrNames",
                         position: (163, 17),
                        },
                        arguments: [
                         Variable {
                          identifier: "secrets",
                          position: (163, 27),
                         },
                        ],
                       },
                      ],
                     },
                    ],
                   },
                  ],
                  position: (157, 5),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (164, 8),
                   },
                  ],
                 },
                ],
                position: (164, 5),
               },
               String {
                parts: [
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (165, 10),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "jq",
                      position: (165, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/bin/jq >'",
                  position: (165, 18),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "output",
                   position: (165, 30),
                  },
                 },
                 Raw {
                  content: "' '",
                  position: (165, 37),
                 },
                ],
               },
              ],
              position: (165, 5),
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (166, 7),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: " | ",
                  position: (167, 8),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "imap1",
                 position: (168, 8),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "index",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "name",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: String {
                    parts: [
                     Expression {
                      expression: Variable {
                       identifier: "name",
                       position: (168, 32),
                      },
                     },
                     Raw {
                      content: " = $ENV.secret",
                      position: (168, 37),
                     },
                     Expression {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (168, 53),
                       },
                       arguments: [
                        Variable {
                         identifier: "index",
                         position: (168, 62),
                        },
                       ],
                      },
                     },
                    ],
                   },
                   position: (168, 22),
                  },
                  position: (168, 15),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "attrNames",
                   position: (169, 15),
                  },
                  arguments: [
                   Variable {
                    identifier: "secrets",
                    position: (169, 25),
                   },
                  ],
                 },
                ],
               },
              ],
             },
            ],
            position: (166, 5),
           },
           String {
            parts: [
             Raw {
              content: "' <<'EOF'\n",
              position: (171, 1),
             },
             Expression {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (172, 9),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "toJSON",
                   position: (172, 18),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "set",
                 position: (172, 25),
                },
               ],
              },
             },
             Raw {
              content: "\nEOF\n(( ! $inherit_errexit_enabled )) && shopt -u inherit_errexit\n",
              position: (172, 29),
             },
            ],
           },
          ],
          position: (170, 5),
         },
         position: (146, 5),
        },
        position: (145, 48),
       },
       position: (145, 43),
      },
      position: (145, 37),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "systemdUtils",
        position: (177, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "lib",
           position: (178, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "import",
          position: (178, 11),
         },
         arguments: [
          Path {
           parts: [
            Raw {
             content: "./systemd-lib.nix",
             position: (178, 18),
            },
           ],
          },
          Map {
           bindings: [
            Inherit(
             None,
             [
              Raw {
               content: "lib",
               position: (178, 46),
              },
              Raw {
               content: "config",
               position: (178, 50),
              },
              Raw {
               content: "pkgs",
               position: (178, 57),
              },
             ],
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "unitOptions",
           position: (179, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "import",
          position: (179, 19),
         },
         arguments: [
          Path {
           parts: [
            Raw {
             content: "./systemd-unit-options.nix",
             position: (179, 26),
            },
           ],
          },
          Map {
           bindings: [
            Inherit(
             None,
             [
              Raw {
               content: "lib",
               position: (179, 63),
              },
              Raw {
               content: "systemdUtils",
               position: (179, 67),
              },
             ],
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
   ],
   recursive: true,
  },
  position: (1, 24),
 },
 position: (1, 1),
}