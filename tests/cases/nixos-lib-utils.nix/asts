---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (1, 29),
  },
  target: Map {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "copyFile",
        position: (6, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "filePath",
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (6, 24),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "runCommand",
           position: (6, 29),
          },
         ],
        },
        default: None,
       },
       arguments: [
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (6, 41),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "unsafeDiscardStringContext",
             position: (6, 50),
            },
           ],
          },
          default: None,
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (6, 78),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "baseNameOf",
               position: (6, 87),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "filePath",
             position: (6, 98),
            },
           ],
          },
         ],
        },
        Map {
         bindings: [],
         recursive: false,
         position: (6, 109),
        },
        String {
         parts: [
          Raw {
           content: "cp ",
           position: (7, 1),
          },
          Expression {
           expression: Variable {
            identifier: "filePath",
            position: (7, 10),
           },
          },
          Raw {
           content: " $out\n",
           position: (7, 19),
          },
         ],
         position: (6, 112),
        },
       ],
      },
      position: (6, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "pathsNeededForBoot",
        position: (13, 3),
       },
      ],
     },
     to: List {
      elements: [
       String {
        parts: [
         Raw {
          content: "/",
          position: (13, 27),
         },
        ],
        position: (13, 26),
       },
       String {
        parts: [
         Raw {
          content: "/nix",
          position: (13, 31),
         },
        ],
        position: (13, 30),
       },
       String {
        parts: [
         Raw {
          content: "/nix/store",
          position: (13, 38),
         },
        ],
        position: (13, 37),
       },
       String {
        parts: [
         Raw {
          content: "/var",
          position: (13, 51),
         },
        ],
        position: (13, 50),
       },
       String {
        parts: [
         Raw {
          content: "/var/log",
          position: (13, 58),
         },
        ],
        position: (13, 57),
       },
       String {
        parts: [
         Raw {
          content: "/var/lib",
          position: (13, 69),
         },
        ],
        position: (13, 68),
       },
       String {
        parts: [
         Raw {
          content: "/var/lib/nixos",
          position: (13, 80),
         },
        ],
        position: (13, 79),
       },
       String {
        parts: [
         Raw {
          content: "/etc",
          position: (13, 97),
         },
        ],
        position: (13, 96),
       },
       String {
        parts: [
         Raw {
          content: "/usr",
          position: (13, 104),
         },
        ],
        position: (13, 103),
       },
      ],
      position: (13, 24),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "fsNeededForBoot",
        position: (14, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "fs",
      },
      definition: BinaryOperation {
       operator: LogicalOr,
       operands: [
        PropertyAccess {
         expression: Variable {
          identifier: "fs",
          position: (14, 25),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "neededForBoot",
            position: (14, 28),
           },
          ],
         },
         default: None,
        },
        FunctionApplication {
         function: Variable {
          identifier: "elem",
          position: (14, 45),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "fs",
            position: (14, 50),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "mountPoint",
              position: (14, 53),
             },
            ],
           },
           default: None,
          },
          Variable {
           identifier: "pathsNeededForBoot",
           position: (14, 64),
          },
         ],
        },
       ],
       position: (14, 42),
      },
      position: (14, 21),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "fsBefore",
        position: (17, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "a",
      },
      definition: Function {
       argument: Simple {
        identifier: "b",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "normalisePath",
             position: (29, 7),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "path",
           },
           definition: String {
            parts: [
             Expression {
              expression: Variable {
               identifier: "path",
               position: (29, 32),
              },
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (29, 39),
               },
               arguments: [
                UnaryOperation {
                 operator: Not,
                 operand: FunctionApplication {
                  function: Variable {
                   identifier: "hasSuffix",
                   position: (29, 57),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "/",
                      position: (29, 68),
                     },
                    ],
                    position: (29, 67),
                   },
                   Variable {
                    identifier: "path",
                    position: (29, 71),
                   },
                  ],
                 },
                 position: (29, 55),
                },
                String {
                 parts: [
                  Raw {
                   content: "/",
                   position: (29, 79),
                  },
                 ],
                 position: (29, 78),
                },
               ],
              },
             },
            ],
            position: (29, 29),
           },
           position: (29, 23),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "normalise",
             position: (30, 7),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "mount",
           },
           definition: BinaryOperation {
            operator: Update,
            operands: [
             Variable {
              identifier: "mount",
              position: (30, 26),
             },
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "device",
                   position: (30, 37),
                  },
                 ],
                },
                to: FunctionApplication {
                 function: Variable {
                  identifier: "normalisePath",
                  position: (30, 46),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (30, 61),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "mount",
                      position: (30, 70),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "device",
                        position: (30, 76),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                  },
                 ],
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "mountPoint",
                   position: (31, 37),
                  },
                 ],
                },
                to: FunctionApplication {
                 function: Variable {
                  identifier: "normalisePath",
                  position: (31, 50),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mount",
                    position: (31, 64),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "mountPoint",
                      position: (31, 70),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "depends",
                   position: (32, 37),
                  },
                 ],
                },
                to: FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (32, 47),
                 },
                 arguments: [
                  Variable {
                   identifier: "normalisePath",
                   position: (32, 51),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mount",
                    position: (32, 65),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "depends",
                      position: (32, 71),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
              ],
              recursive: false,
              position: (30, 35),
             },
            ],
            position: (30, 32),
           },
           position: (30, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "a'",
             position: (35, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "normalise",
            position: (35, 12),
           },
           arguments: [
            Variable {
             identifier: "a",
             position: (35, 22),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "b'",
             position: (36, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "normalise",
            position: (36, 12),
           },
           arguments: [
            Variable {
             identifier: "b",
             position: (36, 22),
            },
           ],
          },
         },
        ],
        target: BinaryOperation {
         operator: LogicalOr,
         operands: [
          BinaryOperation {
           operator: LogicalOr,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (38, 8),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (38, 18),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "mountPoint",
                  position: (38, 21),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "b'",
                position: (38, 32),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "device",
                  position: (38, 35),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (39, 8),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (39, 18),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "mountPoint",
                  position: (39, 21),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "b'",
                position: (39, 32),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "mountPoint",
                  position: (39, 35),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ],
           position: (39, 5),
          },
          FunctionApplication {
           function: Variable {
            identifier: "any",
            position: (40, 8),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "hasPrefix",
              position: (40, 13),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "a'",
                position: (40, 23),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "mountPoint",
                  position: (40, 26),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "b'",
              position: (40, 38),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "depends",
                position: (40, 41),
               },
              ],
             },
             default: None,
            },
           ],
          },
         ],
         position: (40, 5),
        },
        position: (18, 5),
       },
       position: (17, 17),
      },
      position: (17, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "escapeSystemdPath",
        position: (44, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "s",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "replaceChars",
        position: (45, 4),
       },
       arguments: [
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "/",
             position: (45, 19),
            },
           ],
           position: (45, 18),
          },
          String {
           parts: [
            Raw {
             content: "-",
             position: (45, 23),
            },
           ],
           position: (45, 22),
          },
          String {
           parts: [
            Raw {
             content: " ",
             position: (45, 27),
            },
           ],
           position: (45, 26),
          },
         ],
         position: (45, 17),
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "-",
             position: (45, 33),
            },
           ],
           position: (45, 32),
          },
          String {
           parts: [
            Raw {
             content: "\\x2d",
             position: (45, 37),
            },
           ],
           position: (45, 36),
          },
          String {
           parts: [
            Raw {
             content: "\\x20",
             position: (45, 45),
            },
           ],
           position: (45, 44),
          },
         ],
         position: (45, 31),
        },
        FunctionApplication {
         function: Variable {
          identifier: "removePrefix",
          position: (46, 5),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "/",
             position: (46, 19),
            },
           ],
           position: (46, 18),
          },
          Variable {
           identifier: "s",
           position: (46, 22),
          },
         ],
        },
       ],
      },
      position: (44, 23),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "escapeSystemdExecArg",
        position: (55, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "arg",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "s",
            position: (57, 7),
           },
          ],
         },
         to: IfThenElse {
          predicate: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (57, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "isPath",
               position: (57, 23),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "arg",
             position: (57, 30),
            },
           ],
          },
          then: String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "arg",
              position: (57, 42),
             },
            },
           ],
           position: (57, 39),
          },
          else_: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (58, 17),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "isString",
                position: (58, 26),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "arg",
              position: (58, 35),
             },
            ],
           },
           then: Variable {
            identifier: "arg",
            position: (58, 44),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: LogicalOr,
             operands: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (59, 17),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "isInt",
                   position: (59, 26),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "arg",
                 position: (59, 32),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (59, 39),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "isFloat",
                   position: (59, 48),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "arg",
                 position: (59, 56),
                },
               ],
              },
             ],
             position: (59, 36),
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "toString",
              position: (59, 65),
             },
             arguments: [
              Variable {
               identifier: "arg",
               position: (59, 74),
              },
             ],
            },
            else_: FunctionApplication {
             function: Variable {
              identifier: "throw",
              position: (60, 14),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "escapeSystemdExecArg only allows strings, paths and numbers",
                 position: (60, 21),
                },
               ],
               position: (60, 20),
              },
             ],
            },
            position: (59, 14),
           },
           position: (58, 14),
          },
          position: (57, 11),
         },
        },
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "replaceChars",
         position: (62, 7),
        },
        arguments: [
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "%",
              position: (62, 23),
             },
            ],
            position: (62, 22),
           },
           String {
            parts: [
             Raw {
              content: "$",
              position: (62, 27),
             },
            ],
            position: (62, 26),
           },
          ],
          position: (62, 20),
         },
         List {
          elements: [
           String {
            parts: [
             Raw {
              content: "%%",
              position: (62, 35),
             },
            ],
            position: (62, 34),
           },
           String {
            parts: [
             Raw {
              content: "$$",
              position: (62, 40),
             },
            ],
            position: (62, 39),
           },
          ],
          position: (62, 32),
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (62, 47),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "toJSON",
              position: (62, 56),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "s",
            position: (62, 63),
           },
          ],
         },
        ],
       },
       position: (56, 5),
      },
      position: (55, 26),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "escapeSystemdExecArgs",
        position: (66, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "concatMapStringsSep",
       position: (66, 27),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: " ",
          position: (66, 48),
         },
        ],
        position: (66, 47),
       },
       Variable {
        identifier: "escapeSystemdExecArg",
        position: (66, 51),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "toShellPath",
        position: (69, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "shell",
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "types",
          position: (70, 8),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "shellPackage",
            position: (70, 14),
           },
           Raw {
            content: "check",
            position: (70, 27),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Variable {
          identifier: "shell",
          position: (70, 33),
         },
        ],
       },
       then: String {
        parts: [
         Raw {
          content: "/run/current-system/sw",
          position: (71, 8),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "shell",
            position: (71, 32),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "shellPath",
              position: (71, 38),
             },
            ],
           },
           default: None,
          },
         },
        ],
        position: (71, 7),
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "types",
           position: (72, 13),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "package",
             position: (72, 19),
            },
            Raw {
             content: "check",
             position: (72, 27),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "shell",
           position: (72, 33),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "throw",
          position: (73, 7),
         },
         arguments: [
          String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "shell",
              position: (73, 16),
             },
            },
            Raw {
             content: " is not a shell package",
             position: (73, 22),
            },
           ],
           position: (73, 13),
          },
         ],
        },
        else_: Variable {
         identifier: "shell",
         position: (75, 7),
        },
        position: (72, 10),
       },
       position: (70, 5),
      },
      position: (69, 17),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "recursiveGetAttrWithJqPrefix",
        position: (99, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "item",
      },
      definition: Function {
       argument: Simple {
        identifier: "attr",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "recurse",
             position: (101, 7),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "prefix",
           },
           definition: Function {
            argument: Simple {
             identifier: "item",
            },
            definition: IfThenElse {
             predicate: HasProperty {
              expression: Variable {
               identifier: "item",
               position: (102, 12),
              },
              attribute_path: AttributePath {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "attr",
                  position: (102, 21),
                 },
                },
               ],
              },
              position: (102, 17),
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "nameValuePair",
               position: (103, 11),
              },
              arguments: [
               Variable {
                identifier: "prefix",
                position: (103, 25),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "item",
                 position: (103, 32),
                },
                attribute_path: AttributePath {
                 parts: [
                  Expression {
                   expression: Variable {
                    identifier: "attr",
                    position: (103, 39),
                   },
                  },
                 ],
                },
                default: None,
               },
              ],
             },
             else_: IfThenElse {
              predicate: FunctionApplication {
               function: Variable {
                identifier: "isAttrs",
                position: (104, 17),
               },
               arguments: [
                Variable {
                 identifier: "item",
                 position: (104, 25),
                },
               ],
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "map",
                position: (105, 11),
               },
               arguments: [
                Function {
                 argument: Simple {
                  identifier: "name",
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "recurse",
                   position: (105, 22),
                  },
                  arguments: [
                   BinaryOperation {
                    operator: Addition,
                    operands: [
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       Variable {
                        identifier: "prefix",
                        position: (105, 31),
                       },
                       String {
                        parts: [
                         Raw {
                          content: ".",
                          position: (105, 41),
                         },
                        ],
                        position: (105, 40),
                       },
                      ],
                      position: (105, 38),
                     },
                     Variable {
                      identifier: "name",
                      position: (105, 46),
                     },
                    ],
                    position: (105, 44),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "item",
                     position: (105, 52),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Expression {
                       expression: Variable {
                        identifier: "name",
                        position: (105, 59),
                       },
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                 position: (105, 16),
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "attrNames",
                  position: (105, 67),
                 },
                 arguments: [
                  Variable {
                   identifier: "item",
                   position: (105, 77),
                  },
                 ],
                },
               ],
              },
              else_: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isList",
                 position: (106, 17),
                },
                arguments: [
                 Variable {
                  identifier: "item",
                  position: (106, 24),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "imap0",
                 position: (107, 11),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "index",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "item",
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "recurse",
                     position: (107, 31),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: Addition,
                      operands: [
                       Variable {
                        identifier: "prefix",
                        position: (107, 40),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "[",
                          position: (107, 50),
                         },
                         Expression {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "toString",
                            position: (107, 53),
                           },
                           arguments: [
                            Variable {
                             identifier: "index",
                             position: (107, 62),
                            },
                           ],
                          },
                         },
                         Raw {
                          content: "]",
                          position: (107, 68),
                         },
                        ],
                        position: (107, 49),
                       },
                      ],
                      position: (107, 47),
                     },
                     Variable {
                      identifier: "item",
                      position: (107, 72),
                     },
                    ],
                   },
                   position: (107, 25),
                  },
                  position: (107, 18),
                 },
                 Variable {
                  identifier: "item",
                  position: (107, 78),
                 },
                ],
               },
               else_: List {
                elements: [],
                position: (109, 11),
               },
               position: (106, 14),
              },
              position: (104, 14),
             },
             position: (102, 9),
            },
            position: (101, 25),
           },
           position: (101, 17),
          },
         },
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "listToAttrs",
          position: (110, 8),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "flatten",
            position: (110, 21),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "recurse",
              position: (110, 30),
             },
             arguments: [
              String {
               parts: [],
               position: (110, 38),
              },
              Variable {
               identifier: "item",
               position: (110, 41),
              },
             ],
            },
           ],
          },
         ],
        },
        position: (100, 5),
       },
       position: (99, 40),
      },
      position: (99, 34),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "genJqSecretsReplacementSnippet",
        position: (161, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "genJqSecretsReplacementSnippet'",
       position: (161, 36),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "_secret",
          position: (161, 69),
         },
        ],
        position: (161, 68),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "genJqSecretsReplacementSnippet'",
        position: (165, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "attr",
      },
      definition: Function {
       argument: Simple {
        identifier: "set",
       },
       definition: Function {
        argument: Simple {
         identifier: "output",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "secrets",
              position: (167, 7),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "recursiveGetAttrWithJqPrefix",
             position: (167, 17),
            },
            arguments: [
             Variable {
              identifier: "set",
              position: (167, 46),
             },
             Variable {
              identifier: "attr",
              position: (167, 50),
             },
            ],
           },
          },
         ],
         target: BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             BinaryOperation {
              operator: Addition,
              operands: [
               BinaryOperation {
                operator: Addition,
                operands: [
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "if [[ -h ",
                      position: (169, 1),
                     },
                     Raw {
                      content: "'",
                      position: (169, 16),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "output",
                       position: (169, 19),
                      },
                     },
                     Raw {
                      content: "' ]]; then\n  rm ",
                      position: (169, 26),
                     },
                     Raw {
                      content: "'",
                      position: (170, 12),
                     },
                     Expression {
                      expression: Variable {
                       identifier: "output",
                       position: (170, 15),
                      },
                     },
                     Raw {
                      content: "'\nfi\n\ninherit_errexit_enabled=0\nshopt -pq inherit_errexit && inherit_errexit_enabled=1\nshopt -s inherit_errexit\n",
                      position: (170, 22),
                     },
                    ],
                    position: (168, 8),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "concatStringsSep",
                     position: (177, 7),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "\n",
                        position: (178, 10),
                       },
                      ],
                      position: (178, 9),
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "imap1",
                       position: (179, 10),
                      },
                      arguments: [
                       Function {
                        argument: Simple {
                         identifier: "index",
                        },
                        definition: Function {
                         argument: Simple {
                          identifier: "name",
                         },
                         definition: String {
                          parts: [
                           Raw {
                            content: "secret",
                            position: (180, 1),
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "toString",
                              position: (180, 27),
                             },
                             arguments: [
                              Variable {
                               identifier: "index",
                               position: (180, 36),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "=$(<",
                            position: (180, 42),
                           },
                           Raw {
                            content: "'",
                            position: (180, 46),
                           },
                           Expression {
                            expression: PropertyAccess {
                             expression: Variable {
                              identifier: "secrets",
                              position: (180, 49),
                             },
                             attribute_path: AttributePath {
                              parts: [
                               Expression {
                                expression: Variable {
                                 identifier: "name",
                                 position: (180, 59),
                                },
                               },
                              ],
                             },
                             default: None,
                            },
                           },
                           Raw {
                            content: "')\nexport secret",
                            position: (180, 65),
                           },
                           Expression {
                            expression: FunctionApplication {
                             function: Variable {
                              identifier: "toString",
                              position: (181, 34),
                             },
                             arguments: [
                              Variable {
                               identifier: "index",
                               position: (181, 43),
                              },
                             ],
                            },
                           },
                           Raw {
                            content: "\n",
                            position: (181, 49),
                           },
                          ],
                          position: (179, 30),
                         },
                         position: (179, 24),
                        },
                        position: (179, 17),
                       },
                       FunctionApplication {
                        function: Variable {
                         identifier: "attrNames",
                         position: (183, 17),
                        },
                        arguments: [
                         Variable {
                          identifier: "secrets",
                          position: (183, 27),
                         },
                        ],
                       },
                      ],
                     },
                    ],
                   },
                  ],
                  position: (177, 5),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "\n",
                    position: (184, 8),
                   },
                  ],
                  position: (184, 7),
                 },
                ],
                position: (184, 5),
               },
               String {
                parts: [
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (185, 10),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "jq",
                      position: (185, 15),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/bin/jq >'",
                  position: (185, 18),
                 },
                 Expression {
                  expression: Variable {
                   identifier: "output",
                   position: (185, 30),
                  },
                 },
                 Raw {
                  content: "' '",
                  position: (185, 37),
                 },
                ],
                position: (185, 7),
               },
              ],
              position: (185, 5),
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (186, 7),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: " | ",
                  position: (187, 8),
                 },
                ],
                position: (187, 7),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "imap1",
                 position: (188, 8),
                },
                arguments: [
                 Function {
                  argument: Simple {
                   identifier: "index",
                  },
                  definition: Function {
                   argument: Simple {
                    identifier: "name",
                   },
                   definition: String {
                    parts: [
                     Expression {
                      expression: Variable {
                       identifier: "name",
                       position: (188, 32),
                      },
                     },
                     Raw {
                      content: " = $ENV.secret",
                      position: (188, 37),
                     },
                     Expression {
                      expression: FunctionApplication {
                       function: Variable {
                        identifier: "toString",
                        position: (188, 53),
                       },
                       arguments: [
                        Variable {
                         identifier: "index",
                         position: (188, 62),
                        },
                       ],
                      },
                     },
                    ],
                    position: (188, 28),
                   },
                   position: (188, 22),
                  },
                  position: (188, 15),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "attrNames",
                   position: (189, 15),
                  },
                  arguments: [
                   Variable {
                    identifier: "secrets",
                    position: (189, 25),
                   },
                  ],
                 },
                ],
               },
              ],
             },
            ],
            position: (186, 5),
           },
           String {
            parts: [
             Raw {
              content: "' <<'EOF'\n",
              position: (191, 1),
             },
             Expression {
              expression: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (192, 9),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "toJSON",
                   position: (192, 18),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "set",
                 position: (192, 25),
                },
               ],
              },
             },
             Raw {
              content: "\nEOF\n(( ! $inherit_errexit_enabled )) && shopt -u inherit_errexit\n",
              position: (192, 29),
             },
            ],
            position: (190, 7),
           },
          ],
          position: (190, 5),
         },
         position: (166, 5),
        },
        position: (165, 48),
       },
       position: (165, 43),
      },
      position: (165, 37),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "systemdUtils",
        position: (197, 3),
       },
      ],
     },
     to: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "lib",
           position: (198, 5),
          },
         ],
        },
        to: FunctionApplication {
         function: Variable {
          identifier: "import",
          position: (198, 11),
         },
         arguments: [
          Path {
           parts: [
            Raw {
             content: "./systemd-lib.nix",
             position: (198, 18),
            },
           ],
           position: (198, 18),
          },
          Map {
           bindings: [
            Inherit {
             from: None,
             attributes: [
              Raw {
               content: "lib",
               position: (198, 46),
              },
              Raw {
               content: "config",
               position: (198, 50),
              },
              Raw {
               content: "pkgs",
               position: (198, 57),
              },
             ],
            },
           ],
           recursive: false,
           position: (198, 36),
          },
         ],
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "unitOptions",
           position: (199, 5),
          },
         ],
        },
        to: FunctionApplication {
         function: Variable {
          identifier: "import",
          position: (199, 19),
         },
         arguments: [
          Path {
           parts: [
            Raw {
             content: "./systemd-unit-options.nix",
             position: (199, 26),
            },
           ],
           position: (199, 26),
          },
          Map {
           bindings: [
            Inherit {
             from: None,
             attributes: [
              Raw {
               content: "lib",
               position: (199, 63),
              },
              Raw {
               content: "systemdUtils",
               position: (199, 67),
              },
             ],
            },
           ],
           recursive: false,
           position: (199, 53),
          },
         ],
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "types",
           position: (200, 5),
          },
         ],
        },
        to: FunctionApplication {
         function: Variable {
          identifier: "import",
          position: (200, 13),
         },
         arguments: [
          Path {
           parts: [
            Raw {
             content: "./systemd-types.nix",
             position: (200, 20),
            },
           ],
           position: (200, 20),
          },
          Map {
           bindings: [
            Inherit {
             from: None,
             attributes: [
              Raw {
               content: "lib",
               position: (200, 50),
              },
              Raw {
               content: "systemdUtils",
               position: (200, 54),
              },
             ],
            },
           ],
           recursive: false,
           position: (200, 40),
          },
         ],
        },
       },
      ],
      recursive: false,
      position: (197, 18),
     },
    },
   ],
   recursive: true,
   position: (3, 1),
  },
  position: (1, 24),
 },
 position: (1, 1),
}