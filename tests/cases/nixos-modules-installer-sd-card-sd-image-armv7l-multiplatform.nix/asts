---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "imports",
       position: (6, 3),
      },
     ],
    },
    List {
     elements: [
      Path {
       parts: [
        Raw {
         content: "../../profiles/base.nix",
        },
       ],
       position: (7, 5),
      },
      Path {
       parts: [
        Raw {
         content: "./sd-image.nix",
        },
       ],
       position: (8, 5),
      },
     ],
     position: (6, 13),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "boot",
       position: (11, 3),
      },
      Raw {
       content: "loader",
       position: (11, 8),
      },
      Raw {
       content: "grub",
       position: (11, 15),
      },
      Raw {
       content: "enable",
       position: (11, 20),
      },
     ],
    },
    Variable {
     identifier: "false",
     position: (11, 29),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "boot",
       position: (12, 3),
      },
      Raw {
       content: "loader",
       position: (12, 8),
      },
      Raw {
       content: "generic-extlinux-compatible",
       position: (12, 15),
      },
      Raw {
       content: "enable",
       position: (12, 43),
      },
     ],
    },
    Variable {
     identifier: "true",
     position: (12, 52),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "boot",
       position: (14, 3),
      },
      Raw {
       content: "consoleLogLevel",
       position: (14, 8),
      },
     ],
    },
    FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (14, 26),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "mkDefault",
         position: (14, 30),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Int {
       value: 7,
       position: (14, 40),
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "boot",
       position: (15, 3),
      },
      Raw {
       content: "kernelPackages",
       position: (15, 8),
      },
     ],
    },
    PropertyAccess {
     expression: Variable {
      identifier: "pkgs",
      position: (15, 25),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "linuxPackages_latest",
        position: (15, 30),
       },
      ],
     },
     default: None,
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "boot",
       position: (22, 3),
      },
      Raw {
       content: "kernelParams",
       position: (22, 8),
      },
     ],
    },
    List {
     elements: [
      String {
       parts: [
        Raw {
         content: "console=ttyS0,115200n8",
        },
       ],
       position: (22, 24),
      },
      String {
       parts: [
        Raw {
         content: "console=ttymxc0,115200n8",
        },
       ],
       position: (22, 49),
      },
      String {
       parts: [
        Raw {
         content: "console=ttyAMA0,115200n8",
        },
       ],
       position: (22, 76),
      },
      String {
       parts: [
        Raw {
         content: "console=ttyO0,115200n8",
        },
       ],
       position: (22, 103),
      },
      String {
       parts: [
        Raw {
         content: "console=ttySAC2,115200n8",
        },
       ],
       position: (22, 128),
      },
      String {
       parts: [
        Raw {
         content: "console=tty0",
        },
       ],
       position: (22, 155),
      },
     ],
     position: (22, 23),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "sdImage",
       position: (24, 3),
      },
     ],
    },
    Map {
     bindings: [
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "populateFirmwareCommands",
          position: (25, 5),
         },
        ],
       },
       LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "configTxt",
             position: (26, 7),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (26, 19),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "writeText",
               position: (26, 24),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "config.txt",
              },
             ],
             position: (26, 34),
            },
            String {
             parts: [
              Raw {
               content: "# Prevent the firmware from smashing the framebuffer setup done by the mainline kernel\n# when attempting to show low-voltage or overtemperature warnings.\navoid_warnings=1\n\n[pi2]\nkernel=u-boot-rpi2.bin\n\n[pi3]\nkernel=u-boot-rpi3.bin\n\n# U-Boot used to need this to work, regardless of whether UART is actually used or not.\n# TODO: check when/if this can be removed.\nenable_uart=1\n",
              },
             ],
             position: (26, 47),
            },
           ],
          },
         ),
        ],
        target: String {
         parts: [
          Raw {
           content: "(cd ",
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (42, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "raspberrypifw",
               position: (42, 20),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/share/raspberrypi/boot && cp bootcode.bin fixup*.dat start*.elf $NIX_BUILD_TOP/firmware/)\ncp ",
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (43, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "ubootRaspberryPi2",
               position: (43, 19),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/u-boot.bin firmware/u-boot-rpi2.bin\ncp ",
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (44, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "ubootRaspberryPi3_32bit",
               position: (44, 19),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/u-boot.bin firmware/u-boot-rpi3.bin\ncp ",
          },
          Expression {
           expression: Variable {
            identifier: "configTxt",
            position: (45, 14),
           },
          },
          Raw {
           content: " firmware/config.txt\n",
          },
         ],
         position: (41, 10),
        },
        position: (25, 32),
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "populateRootCommands",
          position: (47, 5),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "mkdir -p ./files/boot\n",
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (49, 9),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "boot",
              position: (49, 16),
             },
             Raw {
              content: "loader",
              position: (49, 21),
             },
             Raw {
              content: "generic-extlinux-compatible",
              position: (49, 28),
             },
             Raw {
              content: "populateCmd",
              position: (49, 56),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: " -c ",
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (49, 74),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "system",
              position: (49, 81),
             },
             Raw {
              content: "build",
              position: (49, 88),
             },
             Raw {
              content: "toplevel",
              position: (49, 94),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: " -d ./files/boot\n",
         },
        ],
        position: (47, 28),
       },
      ),
     ],
     recursive: false,
     position: (24, 13),
    },
   ),
  ],
  recursive: false,
  position: (5, 1),
 },
 position: (3, 1),
}