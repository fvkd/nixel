---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "options",
    default: None,
   },
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "prometheus",
         position: (6, 25),
        },
        Raw {
         content: "exporters",
         position: (6, 36),
        },
        Raw {
         content: "bird",
         position: (6, 46),
        },
       ],
      },
      default: None,
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "port",
         position: (9, 3),
        },
       ],
      },
      Int {
       value: 9324,
       position: (9, 10),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "extraOpts",
         position: (10, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "birdVersion",
            position: (11, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (11, 19),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (12, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (12, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "enum",
                   position: (12, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                List {
                 elements: [
                  Int {
                   value: 1,
                   position: (12, 27),
                  },
                  Int {
                   value: 2,
                   position: (12, 29),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (13, 7),
                },
               ],
              },
              Int {
               value: 2,
               position: (13, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (14, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Specifies whether BIRD1 or BIRD2 is in use.\n",
                 position: (15, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "birdSocket",
            position: (18, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (18, 18),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (19, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (19, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "path",
                  position: (19, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (20, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "/var/run/bird.ctl",
                 position: (20, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (21, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Path to BIRD2 (or BIRD1 v4) socket.\n",
                 position: (22, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "newMetricFormat",
            position: (25, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (25, 23),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (26, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (26, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (26, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (27, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (27, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (28, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable the new more-generic metric format.\n",
                 position: (29, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "serviceOpts",
         position: (33, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "serviceConfig",
            position: (34, 5),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "SupplementaryGroups",
               position: (35, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "singleton",
              position: (35, 29),
             },
             arguments: [
              IfThenElse {
               predicate: BinaryOperation {
                operator: EqualTo,
                operands: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (35, 43),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "birdVersion",
                     position: (35, 47),
                    },
                   ],
                  },
                  default: None,
                 },
                 Int {
                  value: 1,
                  position: (35, 62),
                 },
                ],
               },
               then: String {
                parts: [
                 Raw {
                  content: "bird",
                  position: (35, 70),
                 },
                ],
               },
               else_: String {
                parts: [
                 Raw {
                  content: "bird2",
                  position: (35, 82),
                 },
                ],
               },
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "ExecStart",
               position: (36, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "",
               position: (37, 1),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (37, 11),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "prometheus-bird-exporter",
                   position: (37, 16),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "/bin/bird_exporter \\\n  -web.listen-address ",
               position: (37, 41),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (38, 33),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listenAddress",
                   position: (38, 37),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: ":",
               position: (38, 51),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (38, 54),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (38, 63),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "port",
                     position: (38, 67),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: " \\\n  -bird.socket ",
               position: (38, 72),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (39, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "birdSocket",
                   position: (39, 30),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: " \\\n  -bird.v2=",
               position: (39, 41),
              },
              Expression {
               expression: IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (40, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "birdVersion",
                      position: (40, 29),
                     },
                    ],
                   },
                   default: None,
                  },
                  Int {
                   value: 2,
                   position: (40, 44),
                  },
                 ],
                },
                then: String {
                 parts: [
                  Raw {
                   content: "true",
                   position: (40, 52),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "false",
                   position: (40, 64),
                  },
                 ],
                },
               },
              },
              Raw {
               content: " \\\n  -format.new=",
               position: (40, 71),
              },
              Expression {
               expression: IfThenElse {
                predicate: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (41, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "newMetricFormat",
                    position: (41, 32),
                   },
                  ],
                 },
                 default: None,
                },
                then: String {
                 parts: [
                  Raw {
                   content: "true",
                   position: (41, 54),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "false",
                   position: (41, 66),
                  },
                 ],
                },
               },
              },
              Raw {
               content: " \\\n  ",
               position: (41, 73),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (42, 13),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: " \\\n  ",
                    position: (42, 31),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (42, 40),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "extraFlags",
                     position: (42, 44),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: "\n",
               position: (42, 55),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "RestrictAddressFamilies",
               position: (44, 7),
              },
             ],
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "AF_UNIX",
                 position: (46, 10),
                },
               ],
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       recursive: false,
      },
     ),
    ],
    recursive: false,
   },
  },
 },
}