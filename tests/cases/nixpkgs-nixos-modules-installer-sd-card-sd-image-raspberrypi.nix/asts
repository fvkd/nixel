---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "imports",
       position: (6, 3),
      },
     ],
    },
    to: List {
     elements: [
      Path {
       parts: [
        Raw {
         content: "../../profiles/base.nix",
         position: (7, 5),
        },
       ],
       position: (7, 5),
      },
      Path {
       parts: [
        Raw {
         content: "./sd-image.nix",
         position: (8, 5),
        },
       ],
       position: (8, 5),
      },
     ],
     position: (6, 13),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "boot",
       position: (11, 3),
      },
      Raw {
       content: "loader",
       position: (11, 8),
      },
      Raw {
       content: "grub",
       position: (11, 15),
      },
      Raw {
       content: "enable",
       position: (11, 20),
      },
     ],
    },
    to: Variable {
     identifier: "false",
     position: (11, 29),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "boot",
       position: (12, 3),
      },
      Raw {
       content: "loader",
       position: (12, 8),
      },
      Raw {
       content: "generic-extlinux-compatible",
       position: (12, 15),
      },
      Raw {
       content: "enable",
       position: (12, 43),
      },
     ],
    },
    to: Variable {
     identifier: "true",
     position: (12, 52),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "boot",
       position: (14, 3),
      },
      Raw {
       content: "consoleLogLevel",
       position: (14, 8),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (14, 26),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "mkDefault",
         position: (14, 30),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Int {
       value: 7,
       position: (14, 40),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "boot",
       position: (15, 3),
      },
      Raw {
       content: "kernelPackages",
       position: (15, 8),
      },
     ],
    },
    to: PropertyAccess {
     expression: Variable {
      identifier: "pkgs",
      position: (15, 25),
     },
     attribute_path: AttributePath {
      parts: [
       Raw {
        content: "linuxKernel",
        position: (15, 30),
       },
       Raw {
        content: "packages",
        position: (15, 42),
       },
       Raw {
        content: "linux_rpi1",
        position: (15, 51),
       },
      ],
     },
     default: None,
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "sdImage",
       position: (17, 3),
      },
     ],
    },
    to: Map {
     bindings: [
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "populateFirmwareCommands",
          position: (18, 5),
         },
        ],
       },
       to: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "configTxt",
             position: (19, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (19, 19),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "writeText",
               position: (19, 24),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "config.txt",
               position: (19, 35),
              },
             ],
             position: (19, 34),
            },
            String {
             parts: [
              Raw {
               content: "# Prevent the firmware from smashing the framebuffer setup done by the mainline kernel\n# when attempting to show low-voltage or overtemperature warnings.\navoid_warnings=1\n\n[pi0]\nkernel=u-boot-rpi0.bin\n\n[pi1]\nkernel=u-boot-rpi1.bin\n",
               position: (20, 1),
              },
             ],
             position: (19, 47),
            },
           ],
          },
         },
        ],
        target: String {
         parts: [
          Raw {
           content: "(cd ",
           position: (31, 1),
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (31, 15),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "raspberrypifw",
               position: (31, 20),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/share/raspberrypi/boot && cp bootcode.bin fixup*.dat start*.elf $NIX_BUILD_TOP/firmware/)\ncp ",
           position: (31, 34),
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (32, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "ubootRaspberryPiZero",
               position: (32, 19),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/u-boot.bin firmware/u-boot-rpi0.bin\ncp ",
           position: (32, 40),
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (33, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "ubootRaspberryPi",
               position: (33, 19),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "/u-boot.bin firmware/u-boot-rpi1.bin\ncp ",
           position: (33, 36),
          },
          Expression {
           expression: Variable {
            identifier: "configTxt",
            position: (34, 14),
           },
          },
          Raw {
           content: " firmware/config.txt\n",
           position: (34, 24),
          },
         ],
         position: (30, 10),
        },
        position: (18, 32),
       },
      },
      Binding {
       from: AttributePath {
        parts: [
         Raw {
          content: "populateRootCommands",
          position: (36, 5),
         },
        ],
       },
       to: String {
        parts: [
         Raw {
          content: "mkdir -p ./files/boot\n",
          position: (37, 1),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (38, 9),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "boot",
              position: (38, 16),
             },
             Raw {
              content: "loader",
              position: (38, 21),
             },
             Raw {
              content: "generic-extlinux-compatible",
              position: (38, 28),
             },
             Raw {
              content: "populateCmd",
              position: (38, 56),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: " -c ",
          position: (38, 68),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (38, 74),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "system",
              position: (38, 81),
             },
             Raw {
              content: "build",
              position: (38, 88),
             },
             Raw {
              content: "toplevel",
              position: (38, 94),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: " -d ./files/boot\n",
          position: (38, 103),
         },
        ],
        position: (36, 28),
       },
      },
     ],
     recursive: false,
     position: (17, 13),
    },
   },
  ],
  recursive: false,
  position: (5, 1),
 },
 position: (3, 1),
}