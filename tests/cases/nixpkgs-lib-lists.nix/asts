---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (5, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "strings",
         position: (5, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "toInt",
      position: (5, 25),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (6, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "trivial",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "compare",
      position: (6, 25),
     },
     Raw {
      content: "min",
      position: (6, 33),
     },
    ],
   },
   Inherit {
    from: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (7, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "attrsets",
         position: (7, 16),
        },
       ],
      },
      default: None,
     },
    ),
    attributes: [
     Raw {
      content: "mapAttrs",
      position: (7, 26),
     },
    ],
   },
  ],
  target: Map {
   bindings: [
    Inherit {
     from: Some(
      Variable {
       identifier: "builtins",
       position: (11, 12),
      },
     ),
     attributes: [
      Raw {
       content: "head",
       position: (11, 22),
      },
      Raw {
       content: "tail",
       position: (11, 27),
      },
      Raw {
       content: "length",
       position: (11, 32),
      },
      Raw {
       content: "isList",
       position: (11, 39),
      },
      Raw {
       content: "elemAt",
       position: (11, 46),
      },
      Raw {
       content: "concatLists",
       position: (11, 53),
      },
      Raw {
       content: "filter",
       position: (11, 65),
      },
      Raw {
       content: "elem",
       position: (11, 72),
      },
      Raw {
       content: "genList",
       position: (11, 77),
      },
      Raw {
       content: "map",
       position: (11, 85),
      },
     ],
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "singleton",
        position: (23, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: List {
       elements: [
        Variable {
         identifier: "x",
         position: (23, 19),
        },
       ],
       position: (23, 18),
      },
      position: (23, 15),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "forEach",
        position: (36, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "xs",
      },
      definition: Function {
       argument: Simple {
        identifier: "f",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (36, 20),
        },
        arguments: [
         Variable {
          identifier: "f",
          position: (36, 24),
         },
         Variable {
          identifier: "xs",
          position: (36, 26),
         },
        ],
       },
       position: (36, 17),
      },
      position: (36, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "foldr",
        position: (53, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "op",
      },
      definition: Function {
       argument: Simple {
        identifier: "nul",
       },
       definition: Function {
        argument: Simple {
         identifier: "list",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "len",
              position: (55, 7),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (55, 13),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (55, 20),
             },
            ],
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "fold'",
              position: (56, 7),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "n",
            },
            definition: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               Variable {
                identifier: "n",
                position: (57, 12),
               },
               Variable {
                identifier: "len",
                position: (57, 17),
               },
              ],
              position: (57, 14),
             },
             then: Variable {
              identifier: "nul",
              position: (58, 14),
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "op",
               position: (59, 14),
              },
              arguments: [
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "elemAt",
                  position: (59, 18),
                 },
                 arguments: [
                  Variable {
                   identifier: "list",
                   position: (59, 25),
                  },
                  Variable {
                   identifier: "n",
                   position: (59, 30),
                  },
                 ],
                },
                position: (59, 17),
               },
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "fold'",
                  position: (59, 34),
                 },
                 arguments: [
                  Parentheses {
                   expression: BinaryOperation {
                    operator: Addition,
                    operands: [
                     Variable {
                      identifier: "n",
                      position: (59, 41),
                     },
                     Int {
                      value: 1,
                      position: (59, 45),
                     },
                    ],
                    position: (59, 43),
                   },
                   position: (59, 40),
                  },
                 ],
                },
                position: (59, 33),
               },
              ],
             },
             position: (57, 9),
            },
            position: (56, 15),
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "fold'",
           position: (60, 8),
          },
          arguments: [
           Int {
            value: 0,
            position: (60, 14),
           },
          ],
         },
         position: (54, 5),
        },
        position: (53, 20),
       },
       position: (53, 15),
      },
      position: (53, 11),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "fold",
        position: (64, 3),
       },
      ],
     },
     to: Variable {
      identifier: "foldr",
      position: (64, 10),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "foldl",
        position: (81, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "op",
      },
      definition: Function {
       argument: Simple {
        identifier: "nul",
       },
       definition: Function {
        argument: Simple {
         identifier: "list",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "foldl'",
              position: (83, 7),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "n",
            },
            definition: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               Variable {
                identifier: "n",
                position: (84, 12),
               },
               UnaryOperation {
                operator: Negate,
                operand: Int {
                 value: 1,
                 position: (84, 18),
                },
                position: (84, 17),
               },
              ],
              position: (84, 14),
             },
             then: Variable {
              identifier: "nul",
              position: (85, 14),
             },
             else_: FunctionApplication {
              function: Variable {
               identifier: "op",
               position: (86, 14),
              },
              arguments: [
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "foldl'",
                  position: (86, 18),
                 },
                 arguments: [
                  Parentheses {
                   expression: BinaryOperation {
                    operator: Subtraction,
                    operands: [
                     Variable {
                      identifier: "n",
                      position: (86, 26),
                     },
                     Int {
                      value: 1,
                      position: (86, 30),
                     },
                    ],
                    position: (86, 28),
                   },
                   position: (86, 25),
                  },
                 ],
                },
                position: (86, 17),
               },
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "elemAt",
                  position: (86, 35),
                 },
                 arguments: [
                  Variable {
                   identifier: "list",
                   position: (86, 42),
                  },
                  Variable {
                   identifier: "n",
                   position: (86, 47),
                  },
                 ],
                },
                position: (86, 34),
               },
              ],
             },
             position: (84, 9),
            },
            position: (83, 16),
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "foldl'",
           position: (87, 8),
          },
          arguments: [
           Parentheses {
            expression: BinaryOperation {
             operator: Subtraction,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "length",
                position: (87, 16),
               },
               arguments: [
                Variable {
                 identifier: "list",
                 position: (87, 23),
                },
               ],
              },
              Int {
               value: 1,
               position: (87, 30),
              },
             ],
             position: (87, 28),
            },
            position: (87, 15),
           },
          ],
         },
         position: (82, 5),
        },
        position: (81, 20),
       },
       position: (81, 15),
      },
      position: (81, 11),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "foldl'",
        position: (97, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (97, 12),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "foldl'",
         position: (97, 21),
        },
       ],
      },
      default: Some(
       Variable {
        identifier: "foldl",
        position: (97, 31),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "imap0",
        position: (107, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "list",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "genList",
         position: (107, 20),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "n",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (107, 32),
            },
            arguments: [
             Variable {
              identifier: "n",
              position: (107, 34),
             },
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "elemAt",
                position: (107, 37),
               },
               arguments: [
                Variable {
                 identifier: "list",
                 position: (107, 44),
                },
                Variable {
                 identifier: "n",
                 position: (107, 49),
                },
               ],
              },
              position: (107, 36),
             },
            ],
           },
           position: (107, 29),
          },
          position: (107, 28),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "length",
            position: (107, 54),
           },
           arguments: [
            Variable {
             identifier: "list",
             position: (107, 61),
            },
           ],
          },
          position: (107, 53),
         },
        ],
       },
       position: (107, 14),
      },
      position: (107, 11),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "imap1",
        position: (117, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "list",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "genList",
         position: (117, 20),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "n",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (117, 32),
            },
            arguments: [
             Parentheses {
              expression: BinaryOperation {
               operator: Addition,
               operands: [
                Variable {
                 identifier: "n",
                 position: (117, 35),
                },
                Int {
                 value: 1,
                 position: (117, 39),
                },
               ],
               position: (117, 37),
              },
              position: (117, 34),
             },
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "elemAt",
                position: (117, 43),
               },
               arguments: [
                Variable {
                 identifier: "list",
                 position: (117, 50),
                },
                Variable {
                 identifier: "n",
                 position: (117, 55),
                },
               ],
              },
              position: (117, 42),
             },
            ],
           },
           position: (117, 29),
          },
          position: (117, 28),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "length",
            position: (117, 60),
           },
           arguments: [
            Variable {
             identifier: "list",
             position: (117, 67),
            },
           ],
          },
          position: (117, 59),
         },
        ],
       },
       position: (117, 14),
      },
      position: (117, 11),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "concatMap",
        position: (127, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (127, 15),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "concatMap",
         position: (127, 24),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "f",
         },
         definition: Function {
          argument: Simple {
           identifier: "list",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "concatLists",
            position: (127, 47),
           },
           arguments: [
            Parentheses {
             expression: FunctionApplication {
              function: Variable {
               identifier: "map",
               position: (127, 60),
              },
              arguments: [
               Variable {
                identifier: "f",
                position: (127, 64),
               },
               Variable {
                identifier: "list",
                position: (127, 66),
               },
              ],
             },
             position: (127, 59),
            },
           ],
          },
          position: (127, 41),
         },
         position: (127, 38),
        },
        position: (127, 37),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "flatten",
        position: (138, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "isList",
         position: (139, 8),
        },
        arguments: [
         Variable {
          identifier: "x",
          position: (139, 15),
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "concatMap",
         position: (140, 10),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "y",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "flatten",
             position: (140, 24),
            },
            arguments: [
             Variable {
              identifier: "y",
              position: (140, 32),
             },
            ],
           },
           position: (140, 21),
          },
          position: (140, 20),
         },
         Variable {
          identifier: "x",
          position: (140, 35),
         },
        ],
       },
       else_: List {
        elements: [
         Variable {
          identifier: "x",
          position: (141, 11),
         },
        ],
        position: (141, 10),
       },
       position: (139, 5),
      },
      position: (138, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "remove",
        position: (151, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "e",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "filter",
        position: (153, 8),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "x",
          },
          definition: BinaryOperation {
           operator: NotEqualTo,
           operands: [
            Variable {
             identifier: "x",
             position: (153, 19),
            },
            Variable {
             identifier: "e",
             position: (153, 24),
            },
           ],
           position: (153, 21),
          },
          position: (153, 16),
         },
         position: (153, 15),
        },
       ],
      },
      position: (153, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "findSingle",
        position: (169, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "default",
       },
       definition: Function {
        argument: Simple {
         identifier: "multiple",
        },
        definition: Function {
         argument: Simple {
          identifier: "list",
         },
         definition: LetIn {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "found",
               position: (178, 9),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "filter",
              position: (178, 17),
             },
             arguments: [
              Variable {
               identifier: "pred",
               position: (178, 24),
              },
              Variable {
               identifier: "list",
               position: (178, 29),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "len",
               position: (178, 35),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "length",
              position: (178, 41),
             },
             arguments: [
              Variable {
               identifier: "found",
               position: (178, 48),
              },
             ],
            },
           },
          ],
          target: IfThenElse {
           predicate: BinaryOperation {
            operator: EqualTo,
            operands: [
             Variable {
              identifier: "len",
              position: (179, 11),
             },
             Int {
              value: 0,
              position: (179, 18),
             },
            ],
            position: (179, 15),
           },
           then: Variable {
            identifier: "default",
            position: (179, 25),
           },
           else_: IfThenElse {
            predicate: BinaryOperation {
             operator: NotEqualTo,
             operands: [
              Variable {
               identifier: "len",
               position: (180, 15),
              },
              Int {
               value: 1,
               position: (180, 22),
              },
             ],
             position: (180, 19),
            },
            then: Variable {
             identifier: "multiple",
             position: (180, 29),
            },
            else_: FunctionApplication {
             function: Variable {
              identifier: "head",
              position: (181, 12),
             },
             arguments: [
              Variable {
               identifier: "found",
               position: (181, 17),
              },
             ],
            },
            position: (180, 12),
           },
           position: (179, 8),
          },
          position: (178, 5),
         },
         position: (177, 5),
        },
        position: (175, 5),
       },
       position: (173, 5),
      },
      position: (171, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "findFirst",
        position: (194, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: Function {
       argument: Simple {
        identifier: "default",
       },
       definition: Function {
        argument: Simple {
         identifier: "list",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "found",
              position: (201, 9),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "filter",
             position: (201, 17),
            },
            arguments: [
             Variable {
              identifier: "pred",
              position: (201, 24),
             },
             Variable {
              identifier: "list",
              position: (201, 29),
             },
            ],
           },
          },
         ],
         target: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "found",
             position: (202, 11),
            },
            List {
             elements: [],
             position: (202, 20),
            },
           ],
           position: (202, 17),
          },
          then: Variable {
           identifier: "default",
           position: (202, 28),
          },
          else_: FunctionApplication {
           function: Variable {
            identifier: "head",
            position: (202, 41),
           },
           arguments: [
            Variable {
             identifier: "found",
             position: (202, 46),
            },
           ],
          },
          position: (202, 8),
         },
         position: (201, 5),
        },
        position: (200, 5),
       },
       position: (198, 5),
      },
      position: (196, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "any",
        position: (215, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (215, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "any",
         position: (215, 18),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "pred",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "foldr",
           position: (215, 32),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "x",
             },
             definition: Function {
              argument: Simple {
               identifier: "y",
              },
              definition: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "pred",
                 position: (215, 48),
                },
                arguments: [
                 Variable {
                  identifier: "x",
                  position: (215, 53),
                 },
                ],
               },
               then: Variable {
                identifier: "true",
                position: (215, 60),
               },
               else_: Variable {
                identifier: "y",
                position: (215, 70),
               },
               position: (215, 45),
              },
              position: (215, 42),
             },
             position: (215, 39),
            },
            position: (215, 38),
           },
           Variable {
            identifier: "false",
            position: (215, 73),
           },
          ],
         },
         position: (215, 26),
        },
        position: (215, 25),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "all",
        position: (228, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (228, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "all",
         position: (228, 18),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "pred",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "foldr",
           position: (228, 32),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "x",
             },
             definition: Function {
              argument: Simple {
               identifier: "y",
              },
              definition: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "pred",
                 position: (228, 48),
                },
                arguments: [
                 Variable {
                  identifier: "x",
                  position: (228, 53),
                 },
                ],
               },
               then: Variable {
                identifier: "y",
                position: (228, 60),
               },
               else_: Variable {
                identifier: "false",
                position: (228, 67),
               },
               position: (228, 45),
              },
              position: (228, 42),
             },
             position: (228, 39),
            },
            position: (228, 38),
           },
           Variable {
            identifier: "true",
            position: (228, 74),
           },
          ],
         },
         position: (228, 26),
        },
        position: (228, 25),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "count",
        position: (239, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "pred",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "foldl'",
        position: (241, 11),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "c",
          },
          definition: Function {
           argument: Simple {
            identifier: "x",
           },
           definition: IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "pred",
              position: (241, 28),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (241, 33),
              },
             ],
            },
            then: BinaryOperation {
             operator: Addition,
             operands: [
              Variable {
               identifier: "c",
               position: (241, 40),
              },
              Int {
               value: 1,
               position: (241, 44),
              },
             ],
             position: (241, 42),
            },
            else_: Variable {
             identifier: "c",
             position: (241, 51),
            },
            position: (241, 25),
           },
           position: (241, 22),
          },
          position: (241, 19),
         },
         position: (241, 18),
        },
        Int {
         value: 0,
         position: (241, 54),
        },
       ],
      },
      position: (241, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optional",
        position: (255, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "cond",
      },
      definition: Function {
       argument: Simple {
        identifier: "elem",
       },
       definition: IfThenElse {
        predicate: Variable {
         identifier: "cond",
         position: (255, 29),
        },
        then: List {
         elements: [
          Variable {
           identifier: "elem",
           position: (255, 40),
          },
         ],
         position: (255, 39),
        },
        else_: List {
         elements: [],
         position: (255, 51),
        },
        position: (255, 26),
       },
       position: (255, 20),
      },
      position: (255, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optionals",
        position: (267, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "cond",
      },
      definition: Function {
       argument: Simple {
        identifier: "elems",
       },
       definition: IfThenElse {
        predicate: Variable {
         identifier: "cond",
         position: (271, 15),
        },
        then: Variable {
         identifier: "elems",
         position: (271, 25),
        },
        else_: List {
         elements: [],
         position: (271, 36),
        },
        position: (271, 12),
       },
       position: (271, 5),
      },
      position: (269, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "toList",
        position: (284, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "isList",
         position: (284, 18),
        },
        arguments: [
         Variable {
          identifier: "x",
          position: (284, 25),
         },
        ],
       },
       then: Variable {
        identifier: "x",
        position: (284, 32),
       },
       else_: List {
        elements: [
         Variable {
          identifier: "x",
          position: (284, 40),
         },
        ],
        position: (284, 39),
       },
       position: (284, 15),
      },
      position: (284, 12),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "range",
        position: (296, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "first",
      },
      definition: Function {
       argument: Simple {
        identifier: "last",
       },
       definition: IfThenElse {
        predicate: BinaryOperation {
         operator: GreaterThan,
         operands: [
          Variable {
           identifier: "first",
           position: (301, 8),
          },
          Variable {
           identifier: "last",
           position: (301, 16),
          },
         ],
         position: (301, 14),
        },
        then: List {
         elements: [],
         position: (302, 7),
        },
        else_: FunctionApplication {
         function: Variable {
          identifier: "genList",
          position: (304, 7),
         },
         arguments: [
          Parentheses {
           expression: Function {
            argument: Simple {
             identifier: "n",
            },
            definition: BinaryOperation {
             operator: Addition,
             operands: [
              Variable {
               identifier: "first",
               position: (304, 19),
              },
              Variable {
               identifier: "n",
               position: (304, 27),
              },
             ],
             position: (304, 25),
            },
            position: (304, 16),
           },
           position: (304, 15),
          },
          Parentheses {
           expression: BinaryOperation {
            operator: Addition,
            operands: [
             BinaryOperation {
              operator: Subtraction,
              operands: [
               Variable {
                identifier: "last",
                position: (304, 31),
               },
               Variable {
                identifier: "first",
                position: (304, 38),
               },
              ],
              position: (304, 36),
             },
             Int {
              value: 1,
              position: (304, 46),
             },
            ],
            position: (304, 44),
           },
           position: (304, 30),
          },
         ],
        },
        position: (301, 5),
       },
       position: (300, 5),
      },
      position: (298, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "partition",
        position: (315, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (315, 15),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "partition",
         position: (315, 24),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "pred",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "foldr",
           position: (316, 5),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "h",
             },
             definition: Function {
              argument: Simple {
               identifier: "t",
              },
              definition: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "pred",
                 position: (317, 10),
                },
                arguments: [
                 Variable {
                  identifier: "h",
                  position: (317, 15),
                 },
                ],
               },
               then: Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "right",
                     position: (318, 14),
                    },
                   ],
                  },
                  to: BinaryOperation {
                   operator: Concatenation,
                   operands: [
                    List {
                     elements: [
                      Variable {
                       identifier: "h",
                       position: (318, 23),
                      },
                     ],
                     position: (318, 22),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "t",
                      position: (318, 29),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "right",
                        position: (318, 31),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (318, 26),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "wrong",
                     position: (318, 38),
                    },
                   ],
                  },
                  to: PropertyAccess {
                   expression: Variable {
                    identifier: "t",
                    position: (318, 46),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "wrong",
                      position: (318, 48),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                ],
                recursive: false,
                position: (318, 12),
               },
               else_: Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "right",
                     position: (319, 14),
                    },
                   ],
                  },
                  to: PropertyAccess {
                   expression: Variable {
                    identifier: "t",
                    position: (319, 22),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "right",
                      position: (319, 24),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "wrong",
                     position: (319, 31),
                    },
                   ],
                  },
                  to: BinaryOperation {
                   operator: Concatenation,
                   operands: [
                    List {
                     elements: [
                      Variable {
                       identifier: "h",
                       position: (319, 40),
                      },
                     ],
                     position: (319, 39),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "t",
                      position: (319, 46),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "wrong",
                        position: (319, 48),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (319, 43),
                  },
                 },
                ],
                recursive: false,
                position: (319, 12),
               },
               position: (317, 7),
              },
              position: (316, 15),
             },
             position: (316, 12),
            },
            position: (316, 11),
           },
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "right",
                 position: (320, 9),
                },
               ],
              },
              to: List {
               elements: [],
               position: (320, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "wrong",
                 position: (320, 21),
                },
               ],
              },
              to: List {
               elements: [],
               position: (320, 29),
              },
             },
            ],
            recursive: false,
            position: (320, 7),
           },
          ],
         },
         position: (315, 38),
        },
        position: (315, 37),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "groupBy'",
        position: (344, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "op",
      },
      definition: Function {
       argument: Simple {
        identifier: "nul",
       },
       definition: Function {
        argument: Simple {
         identifier: "pred",
        },
        definition: Function {
         argument: Simple {
          identifier: "lst",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "mapAttrs",
           position: (344, 34),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "name",
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "foldl",
               position: (344, 50),
              },
              arguments: [
               Variable {
                identifier: "op",
                position: (344, 56),
               },
               Variable {
                identifier: "nul",
                position: (344, 59),
               },
              ],
             },
             position: (344, 44),
            },
            position: (344, 43),
           },
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "groupBy",
              position: (344, 65),
             },
             arguments: [
              Variable {
               identifier: "pred",
               position: (344, 73),
              },
              Variable {
               identifier: "lst",
               position: (344, 78),
              },
             ],
            },
            position: (344, 64),
           },
          ],
         },
         position: (344, 29),
        },
        position: (344, 23),
       },
       position: (344, 18),
      },
      position: (344, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "groupBy",
        position: (346, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (346, 13),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "groupBy",
         position: (346, 22),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "pred",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "foldl'",
           position: (347, 11),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "r",
             },
             definition: Function {
              argument: Simple {
               identifier: "e",
              },
              definition: LetIn {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "key",
                    position: (349, 10),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "pred",
                   position: (349, 16),
                  },
                  arguments: [
                   Variable {
                    identifier: "e",
                    position: (349, 21),
                   },
                  ],
                 },
                },
               ],
               target: BinaryOperation {
                operator: Update,
                operands: [
                 Variable {
                  identifier: "r",
                  position: (351, 10),
                 },
                 Map {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Expression {
                       expression: Variable {
                        identifier: "key",
                        position: (351, 19),
                       },
                      },
                     ],
                    },
                    to: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      Parentheses {
                       expression: PropertyAccess {
                        expression: Variable {
                         identifier: "r",
                         position: (351, 27),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Expression {
                           expression: Variable {
                            identifier: "key",
                            position: (351, 31),
                           },
                          },
                         ],
                        },
                        default: Some(
                         List {
                          elements: [],
                          position: (351, 39),
                         },
                        ),
                       },
                       position: (351, 26),
                      },
                      List {
                       elements: [
                        Variable {
                         identifier: "e",
                         position: (351, 47),
                        },
                       ],
                       position: (351, 46),
                      },
                     ],
                     position: (351, 43),
                    },
                   },
                  ],
                  recursive: false,
                  position: (351, 15),
                 },
                ],
                position: (351, 12),
               },
               position: (348, 8),
              },
              position: (347, 22),
             },
             position: (347, 19),
            },
            position: (347, 18),
           },
           Map {
            bindings: [],
            recursive: false,
            position: (352, 7),
           },
          ],
         },
         position: (347, 5),
        },
        position: (346, 33),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipListsWith",
        position: (364, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "fst",
       },
       definition: Function {
        argument: Simple {
         identifier: "snd",
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "genList",
          position: (371, 5),
         },
         arguments: [
          Parentheses {
           expression: Function {
            argument: Simple {
             identifier: "n",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "f",
              position: (372, 11),
             },
             arguments: [
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "elemAt",
                 position: (372, 14),
                },
                arguments: [
                 Variable {
                  identifier: "fst",
                  position: (372, 21),
                 },
                 Variable {
                  identifier: "n",
                  position: (372, 25),
                 },
                ],
               },
               position: (372, 13),
              },
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "elemAt",
                 position: (372, 29),
                },
                arguments: [
                 Variable {
                  identifier: "snd",
                  position: (372, 36),
                 },
                 Variable {
                  identifier: "n",
                  position: (372, 40),
                 },
                ],
               },
               position: (372, 28),
              },
             ],
            },
            position: (372, 8),
           },
           position: (372, 7),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "min",
             position: (372, 45),
            },
            arguments: [
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "length",
                position: (372, 50),
               },
               arguments: [
                Variable {
                 identifier: "fst",
                 position: (372, 57),
                },
               ],
              },
              position: (372, 49),
             },
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "length",
                position: (372, 63),
               },
               arguments: [
                Variable {
                 identifier: "snd",
                 position: (372, 70),
                },
               ],
              },
              position: (372, 62),
             },
            ],
           },
           position: (372, 44),
          },
         ],
        },
        position: (370, 5),
       },
       position: (368, 5),
      },
      position: (366, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "zipLists",
        position: (383, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "zipListsWith",
       position: (383, 14),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "fst",
         },
         definition: Function {
          argument: Simple {
           identifier: "snd",
          },
          definition: Map {
           bindings: [
            Inherit {
             from: None,
             attributes: [
              Raw {
               content: "fst",
               position: (383, 48),
              },
              Raw {
               content: "snd",
               position: (383, 52),
              },
             ],
            },
           ],
           recursive: false,
           position: (383, 38),
          },
          position: (383, 33),
         },
         position: (383, 28),
        },
        position: (383, 27),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "reverseList",
        position: (394, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "xs",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "l",
            position: (395, 9),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "length",
           position: (395, 13),
          },
          arguments: [
           Variable {
            identifier: "xs",
            position: (395, 20),
           },
          ],
         },
        },
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "genList",
         position: (395, 27),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "n",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "elemAt",
             position: (395, 39),
            },
            arguments: [
             Variable {
              identifier: "xs",
              position: (395, 46),
             },
             Parentheses {
              expression: BinaryOperation {
               operator: Subtraction,
               operands: [
                BinaryOperation {
                 operator: Subtraction,
                 operands: [
                  Variable {
                   identifier: "l",
                   position: (395, 50),
                  },
                  Variable {
                   identifier: "n",
                   position: (395, 54),
                  },
                 ],
                 position: (395, 52),
                },
                Int {
                 value: 1,
                 position: (395, 58),
                },
               ],
               position: (395, 56),
              },
              position: (395, 49),
             },
            ],
           },
           position: (395, 36),
          },
          position: (395, 35),
         },
         Variable {
          identifier: "l",
          position: (395, 62),
         },
        ],
       },
       position: (395, 5),
      },
      position: (394, 17),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "listDfs",
        position: (416, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "stopOnCycles",
      },
      definition: Function {
       argument: Simple {
        identifier: "before",
       },
       definition: Function {
        argument: Simple {
         identifier: "list",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "dfs'",
              position: (418, 7),
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "us",
            },
            definition: Function {
             argument: Simple {
              identifier: "visited",
             },
             definition: Function {
              argument: Simple {
               identifier: "rest",
              },
              definition: LetIn {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "c",
                    position: (420, 11),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "filter",
                   position: (420, 15),
                  },
                  arguments: [
                   Parentheses {
                    expression: Function {
                     argument: Simple {
                      identifier: "x",
                     },
                     definition: FunctionApplication {
                      function: Variable {
                       identifier: "before",
                       position: (420, 26),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (420, 33),
                       },
                       Variable {
                        identifier: "us",
                        position: (420, 35),
                       },
                      ],
                     },
                     position: (420, 23),
                    },
                    position: (420, 22),
                   },
                   Variable {
                    identifier: "visited",
                    position: (420, 39),
                   },
                  ],
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "b",
                    position: (421, 11),
                   },
                  ],
                 },
                 to: FunctionApplication {
                  function: Variable {
                   identifier: "partition",
                   position: (421, 15),
                  },
                  arguments: [
                   Parentheses {
                    expression: Function {
                     argument: Simple {
                      identifier: "x",
                     },
                     definition: FunctionApplication {
                      function: Variable {
                       identifier: "before",
                       position: (421, 29),
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (421, 36),
                       },
                       Variable {
                        identifier: "us",
                        position: (421, 38),
                       },
                      ],
                     },
                     position: (421, 26),
                    },
                    position: (421, 25),
                   },
                   Variable {
                    identifier: "rest",
                    position: (421, 42),
                   },
                  ],
                 },
                },
               ],
               target: IfThenElse {
                predicate: BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  Variable {
                   identifier: "stopOnCycles",
                   position: (422, 15),
                  },
                  Parentheses {
                   expression: BinaryOperation {
                    operator: GreaterThan,
                    operands: [
                     FunctionApplication {
                      function: Variable {
                       identifier: "length",
                       position: (422, 32),
                      },
                      arguments: [
                       Variable {
                        identifier: "c",
                        position: (422, 39),
                       },
                      ],
                     },
                     Int {
                      value: 0,
                      position: (422, 43),
                     },
                    ],
                    position: (422, 41),
                   },
                   position: (422, 31),
                  },
                 ],
                 position: (422, 28),
                },
                then: Map {
                 bindings: [
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "cycle",
                      position: (423, 19),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "us",
                    position: (423, 27),
                   },
                  },
                  Binding {
                   from: AttributePath {
                    parts: [
                     Raw {
                      content: "loops",
                      position: (423, 31),
                     },
                    ],
                   },
                   to: Variable {
                    identifier: "c",
                    position: (423, 39),
                   },
                  },
                  Inherit {
                   from: None,
                   attributes: [
                    Raw {
                     content: "visited",
                     position: (423, 50),
                    },
                    Raw {
                     content: "rest",
                     position: (423, 58),
                    },
                   ],
                  },
                 ],
                 recursive: false,
                 position: (423, 17),
                },
                else_: IfThenElse {
                 predicate: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "length",
                     position: (424, 20),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "b",
                       position: (424, 27),
                      },
                      attribute_path: AttributePath {
                       parts: [
                        Raw {
                         content: "right",
                         position: (424, 29),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                   Int {
                    value: 0,
                    position: (424, 38),
                   },
                  ],
                  position: (424, 35),
                 },
                 then: Map {
                  bindings: [
                   Binding {
                    from: AttributePath {
                     parts: [
                      Raw {
                       content: "minimal",
                       position: (426, 24),
                      },
                     ],
                    },
                    to: Variable {
                     identifier: "us",
                     position: (426, 34),
                    },
                   },
                   Inherit {
                    from: None,
                    attributes: [
                     Raw {
                      content: "visited",
                      position: (426, 46),
                     },
                     Raw {
                      content: "rest",
                      position: (426, 54),
                     },
                    ],
                   },
                  ],
                  recursive: false,
                  position: (426, 22),
                 },
                 else_: FunctionApplication {
                  function: Variable {
                   identifier: "dfs'",
                   position: (428, 22),
                  },
                  arguments: [
                   Parentheses {
                    expression: FunctionApplication {
                     function: Variable {
                      identifier: "head",
                      position: (428, 28),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "b",
                        position: (428, 33),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "right",
                          position: (428, 35),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                    position: (428, 27),
                   },
                   Parentheses {
                    expression: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      List {
                       elements: [
                        Variable {
                         identifier: "us",
                         position: (429, 30),
                        },
                       ],
                       position: (429, 28),
                      },
                      Variable {
                       identifier: "visited",
                       position: (429, 38),
                      },
                     ],
                     position: (429, 35),
                    },
                    position: (429, 27),
                   },
                   Parentheses {
                    expression: BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      FunctionApplication {
                       function: Variable {
                        identifier: "tail",
                        position: (430, 28),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "b",
                          position: (430, 33),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "right",
                            position: (430, 35),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "b",
                        position: (430, 44),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "wrong",
                          position: (430, 46),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                     position: (430, 41),
                    },
                    position: (430, 27),
                   },
                  ],
                 },
                 position: (424, 17),
                },
                position: (422, 12),
               },
               position: (419, 9),
              },
              position: (418, 27),
             },
             position: (418, 18),
            },
            position: (418, 14),
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "dfs'",
           position: (431, 8),
          },
          arguments: [
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "head",
              position: (431, 14),
             },
             arguments: [
              Variable {
               identifier: "list",
               position: (431, 19),
              },
             ],
            },
            position: (431, 13),
           },
           List {
            elements: [],
            position: (431, 25),
           },
           Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "tail",
              position: (431, 29),
             },
             arguments: [
              Variable {
               identifier: "list",
               position: (431, 34),
              },
             ],
            },
            position: (431, 28),
           },
          ],
         },
         position: (417, 5),
        },
        position: (416, 35),
       },
       position: (416, 27),
      },
      position: (416, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "toposort",
        position: (455, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "before",
      },
      definition: Function {
       argument: Simple {
        identifier: "list",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "dfsthis",
             position: (457, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "listDfs",
            position: (457, 17),
           },
           arguments: [
            Variable {
             identifier: "true",
             position: (457, 25),
            },
            Variable {
             identifier: "before",
             position: (457, 30),
            },
            Variable {
             identifier: "list",
             position: (457, 37),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "toporest",
             position: (458, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "toposort",
            position: (458, 18),
           },
           arguments: [
            Variable {
             identifier: "before",
             position: (458, 27),
            },
            Parentheses {
             expression: BinaryOperation {
              operator: Concatenation,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "dfsthis",
                 position: (458, 35),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "visited",
                   position: (458, 43),
                  },
                 ],
                },
                default: None,
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "dfsthis",
                 position: (458, 54),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "rest",
                   position: (458, 62),
                  },
                 ],
                },
                default: None,
               },
              ],
              position: (458, 51),
             },
             position: (458, 34),
            },
           ],
          },
         },
        ],
        target: IfThenElse {
         predicate: BinaryOperation {
          operator: LessThan,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (460, 10),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (460, 17),
             },
            ],
           },
           Int {
            value: 2,
            position: (460, 24),
           },
          ],
          position: (460, 22),
         },
         then: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "result",
               position: (462, 14),
              },
             ],
            },
            to: Variable {
             identifier: "list",
             position: (462, 24),
            },
           },
          ],
          recursive: false,
          position: (462, 12),
         },
         else_: IfThenElse {
          predicate: HasProperty {
           expression: Variable {
            identifier: "dfsthis",
            position: (463, 15),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "cycle",
              position: (463, 25),
             },
            ],
           },
           position: (463, 23),
          },
          then: Map {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "cycle",
                position: (465, 19),
               },
              ],
             },
             to: FunctionApplication {
              function: Variable {
               identifier: "reverseList",
               position: (465, 27),
              },
              arguments: [
               Parentheses {
                expression: BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  List {
                   elements: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "dfsthis",
                      position: (465, 42),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "cycle",
                        position: (465, 50),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (465, 40),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "dfsthis",
                    position: (465, 61),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "visited",
                      position: (465, 69),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (465, 58),
                },
                position: (465, 39),
               },
              ],
             },
            },
            Inherit {
             from: Some(
              Variable {
               identifier: "dfsthis",
               position: (466, 28),
              },
             ),
             attributes: [
              Raw {
               content: "loops",
               position: (466, 37),
              },
             ],
            },
           ],
           recursive: false,
           position: (465, 17),
          },
          else_: IfThenElse {
           predicate: HasProperty {
            expression: Variable {
             identifier: "toporest",
             position: (467, 20),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "cycle",
               position: (467, 31),
              },
             ],
            },
            position: (467, 29),
           },
           then: Variable {
            identifier: "toporest",
            position: (469, 22),
           },
           else_: Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "result",
                 position: (472, 24),
                },
               ],
              },
              to: BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "dfsthis",
                    position: (472, 35),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "minimal",
                      position: (472, 43),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (472, 33),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "toporest",
                  position: (472, 56),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "result",
                    position: (472, 65),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (472, 53),
              },
             },
            ],
            recursive: false,
            position: (472, 22),
           },
           position: (467, 17),
          },
          position: (463, 12),
         },
         position: (460, 7),
        },
        position: (456, 5),
       },
       position: (455, 22),
      },
      position: (455, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "sort",
        position: (483, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (483, 10),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "sort",
         position: (483, 19),
        },
       ],
      },
      default: Some(
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "strictLess",
         },
         definition: Function {
          argument: Simple {
           identifier: "list",
          },
          definition: LetIn {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "len",
                position: (486, 7),
               },
              ],
             },
             to: FunctionApplication {
              function: Variable {
               identifier: "length",
               position: (486, 13),
              },
              arguments: [
               Variable {
                identifier: "list",
                position: (486, 20),
               },
              ],
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "first",
                position: (487, 7),
               },
              ],
             },
             to: FunctionApplication {
              function: Variable {
               identifier: "head",
               position: (487, 15),
              },
              arguments: [
               Variable {
                identifier: "list",
                position: (487, 20),
               },
              ],
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "pivot'",
                position: (488, 7),
               },
              ],
             },
             to: Function {
              argument: Simple {
               identifier: "n",
              },
              definition: Function {
               argument: Destructured {
                identifier: LeftAt(
                 "acc",
                ),
                arguments: [
                 DestructuredArgument {
                  identifier: "left",
                  default: None,
                 },
                 DestructuredArgument {
                  identifier: "right",
                  default: None,
                 },
                ],
                ellipsis: false,
               },
               definition: LetIn {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "el",
                     position: (488, 44),
                    },
                   ],
                  },
                  to: FunctionApplication {
                   function: Variable {
                    identifier: "elemAt",
                    position: (488, 49),
                   },
                   arguments: [
                    Variable {
                     identifier: "list",
                     position: (488, 56),
                    },
                    Variable {
                     identifier: "n",
                     position: (488, 61),
                    },
                   ],
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "next",
                     position: (488, 64),
                    },
                   ],
                  },
                  to: FunctionApplication {
                   function: Variable {
                    identifier: "pivot'",
                    position: (488, 71),
                   },
                   arguments: [
                    Parentheses {
                     expression: BinaryOperation {
                      operator: Addition,
                      operands: [
                       Variable {
                        identifier: "n",
                        position: (488, 79),
                       },
                       Int {
                        value: 1,
                        position: (488, 83),
                       },
                      ],
                      position: (488, 81),
                     },
                     position: (488, 78),
                    },
                   ],
                  },
                 },
                ],
                target: IfThenElse {
                 predicate: BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   Variable {
                    identifier: "n",
                    position: (489, 12),
                   },
                   Variable {
                    identifier: "len",
                    position: (489, 17),
                   },
                  ],
                  position: (489, 14),
                 },
                 then: Variable {
                  identifier: "acc",
                  position: (490, 16),
                 },
                 else_: IfThenElse {
                  predicate: FunctionApplication {
                   function: Variable {
                    identifier: "strictLess",
                    position: (491, 17),
                   },
                   arguments: [
                    Variable {
                     identifier: "first",
                     position: (491, 28),
                    },
                    Variable {
                     identifier: "el",
                     position: (491, 34),
                    },
                   ],
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "next",
                    position: (492, 16),
                   },
                   arguments: [
                    Map {
                     bindings: [
                      Inherit {
                       from: None,
                       attributes: [
                        Raw {
                         content: "left",
                         position: (492, 31),
                        },
                       ],
                      },
                      Binding {
                       from: AttributePath {
                        parts: [
                         Raw {
                          content: "right",
                          position: (492, 37),
                         },
                        ],
                       },
                       to: BinaryOperation {
                        operator: Concatenation,
                        operands: [
                         List {
                          elements: [
                           Variable {
                            identifier: "el",
                            position: (492, 47),
                           },
                          ],
                          position: (492, 45),
                         },
                         Variable {
                          identifier: "right",
                          position: (492, 55),
                         },
                        ],
                        position: (492, 52),
                       },
                      },
                     ],
                     recursive: false,
                     position: (492, 21),
                    },
                   ],
                  },
                  else_: FunctionApplication {
                   function: Variable {
                    identifier: "next",
                    position: (494, 11),
                   },
                   arguments: [
                    Map {
                     bindings: [
                      Binding {
                       from: AttributePath {
                        parts: [
                         Raw {
                          content: "left",
                          position: (494, 18),
                         },
                        ],
                       },
                       to: BinaryOperation {
                        operator: Concatenation,
                        operands: [
                         List {
                          elements: [
                           Variable {
                            identifier: "el",
                            position: (494, 27),
                           },
                          ],
                          position: (494, 25),
                         },
                         Variable {
                          identifier: "left",
                          position: (494, 35),
                         },
                        ],
                        position: (494, 32),
                       },
                      },
                      Inherit {
                       from: None,
                       attributes: [
                        Raw {
                         content: "right",
                         position: (494, 49),
                        },
                       ],
                      },
                     ],
                     recursive: false,
                     position: (494, 16),
                    },
                   ],
                  },
                  position: (491, 14),
                 },
                 position: (489, 9),
                },
                position: (488, 40),
               },
               position: (488, 19),
              },
              position: (488, 16),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "pivot",
                position: (495, 7),
               },
              ],
             },
             to: FunctionApplication {
              function: Variable {
               identifier: "pivot'",
               position: (495, 15),
              },
              arguments: [
               Int {
                value: 1,
                position: (495, 22),
               },
               Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "left",
                     position: (495, 26),
                    },
                   ],
                  },
                  to: List {
                   elements: [],
                   position: (495, 33),
                  },
                 },
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "right",
                     position: (495, 37),
                    },
                   ],
                  },
                  to: List {
                   elements: [],
                   position: (495, 45),
                  },
                 },
                ],
                recursive: false,
                position: (495, 24),
               },
              ],
             },
            },
           ],
           target: IfThenElse {
            predicate: BinaryOperation {
             operator: LessThan,
             operands: [
              Variable {
               identifier: "len",
               position: (497, 10),
              },
              Int {
               value: 2,
               position: (497, 16),
              },
             ],
             position: (497, 14),
            },
            then: Variable {
             identifier: "list",
             position: (497, 23),
            },
            else_: BinaryOperation {
             operator: Concatenation,
             operands: [
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "sort",
                 position: (498, 13),
                },
                arguments: [
                 Variable {
                  identifier: "strictLess",
                  position: (498, 18),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pivot",
                   position: (498, 29),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "left",
                     position: (498, 35),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               position: (498, 12),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  Variable {
                   identifier: "first",
                   position: (498, 47),
                  },
                 ],
                 position: (498, 45),
                },
                Parentheses {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "sort",
                   position: (498, 60),
                  },
                  arguments: [
                   Variable {
                    identifier: "strictLess",
                    position: (498, 65),
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "pivot",
                     position: (498, 76),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "right",
                       position: (498, 82),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                 position: (498, 59),
                },
               ],
               position: (498, 55),
              },
             ],
             position: (498, 41),
            },
            position: (497, 7),
           },
           position: (485, 5),
          },
          position: (484, 17),
         },
         position: (484, 5),
        },
        position: (483, 27),
       },
      ),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "compareLists",
        position: (512, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "cmp",
      },
      definition: Function {
       argument: Simple {
        identifier: "a",
       },
       definition: Function {
        argument: Simple {
         identifier: "b",
        },
        definition: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "a",
            position: (513, 8),
           },
           List {
            elements: [],
            position: (513, 13),
           },
          ],
          position: (513, 10),
         },
         then: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "b",
             position: (514, 13),
            },
            List {
             elements: [],
             position: (514, 18),
            },
           ],
           position: (514, 15),
          },
          then: Int {
           value: 0,
           position: (515, 15),
          },
          else_: UnaryOperation {
           operator: Negate,
           operand: Int {
            value: 1,
            position: (516, 16),
           },
           position: (516, 15),
          },
          position: (514, 10),
         },
         else_: IfThenElse {
          predicate: BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "b",
             position: (517, 13),
            },
            List {
             elements: [],
             position: (517, 18),
            },
           ],
           position: (517, 15),
          },
          then: Int {
           value: 1,
           position: (518, 15),
          },
          else_: LetIn {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "rel",
                position: (519, 19),
               },
              ],
             },
             to: FunctionApplication {
              function: Variable {
               identifier: "cmp",
               position: (519, 25),
              },
              arguments: [
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "head",
                  position: (519, 30),
                 },
                 arguments: [
                  Variable {
                   identifier: "a",
                   position: (519, 35),
                  },
                 ],
                },
                position: (519, 29),
               },
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "head",
                  position: (519, 39),
                 },
                 arguments: [
                  Variable {
                   identifier: "b",
                   position: (519, 44),
                  },
                 ],
                },
                position: (519, 38),
               },
              ],
             },
            },
           ],
           target: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "rel",
               position: (520, 18),
              },
              Int {
               value: 0,
               position: (520, 25),
              },
             ],
             position: (520, 22),
            },
            then: FunctionApplication {
             function: Variable {
              identifier: "compareLists",
              position: (521, 20),
             },
             arguments: [
              Variable {
               identifier: "cmp",
               position: (521, 33),
              },
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (521, 38),
                },
                arguments: [
                 Variable {
                  identifier: "a",
                  position: (521, 43),
                 },
                ],
               },
               position: (521, 37),
              },
              Parentheses {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "tail",
                 position: (521, 47),
                },
                arguments: [
                 Variable {
                  identifier: "b",
                  position: (521, 52),
                 },
                ],
               },
               position: (521, 46),
              },
             ],
            },
            else_: Variable {
             identifier: "rel",
             position: (522, 20),
            },
            position: (520, 15),
           },
           position: (519, 15),
          },
          position: (517, 10),
         },
         position: (513, 5),
        },
        position: (512, 26),
       },
       position: (512, 23),
      },
      position: (512, 18),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "naturalSort",
        position: (535, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "lst",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "vectorise",
            position: (537, 7),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "s",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (537, 22),
           },
           arguments: [
            Parentheses {
             expression: Function {
              argument: Simple {
               identifier: "x",
              },
              definition: IfThenElse {
               predicate: FunctionApplication {
                function: Variable {
                 identifier: "isList",
                 position: (537, 33),
                },
                arguments: [
                 Variable {
                  identifier: "x",
                  position: (537, 40),
                 },
                ],
               },
               then: FunctionApplication {
                function: Variable {
                 identifier: "toInt",
                 position: (537, 47),
                },
                arguments: [
                 Parentheses {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "head",
                    position: (537, 54),
                   },
                   arguments: [
                    Variable {
                     identifier: "x",
                     position: (537, 59),
                    },
                   ],
                  },
                  position: (537, 53),
                 },
                ],
               },
               else_: Variable {
                identifier: "x",
                position: (537, 67),
               },
               position: (537, 30),
              },
              position: (537, 27),
             },
             position: (537, 26),
            },
            Parentheses {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "builtins",
                position: (537, 71),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "split",
                  position: (537, 80),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "(0|[1-9][0-9]*)",
                  position: (537, 87),
                 },
                ],
                position: (537, 86),
               },
               Variable {
                identifier: "s",
                position: (537, 104),
               },
              ],
             },
             position: (537, 70),
            },
           ],
          },
          position: (537, 19),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "prepared",
            position: (538, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (538, 18),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "x",
             },
             definition: List {
              elements: [
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "vectorise",
                  position: (538, 29),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (538, 39),
                  },
                 ],
                },
                position: (538, 28),
               },
               Variable {
                identifier: "x",
                position: (538, 42),
               },
              ],
              position: (538, 26),
             },
             position: (538, 23),
            },
            position: (538, 22),
           },
           Variable {
            identifier: "lst",
            position: (538, 47),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "less",
            position: (539, 7),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "a",
          },
          definition: Function {
           argument: Simple {
            identifier: "b",
           },
           definition: BinaryOperation {
            operator: LessThan,
            operands: [
             Parentheses {
              expression: FunctionApplication {
               function: Variable {
                identifier: "compareLists",
                position: (539, 21),
               },
               arguments: [
                Variable {
                 identifier: "compare",
                 position: (539, 34),
                },
                Parentheses {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "head",
                   position: (539, 43),
                  },
                  arguments: [
                   Variable {
                    identifier: "a",
                    position: (539, 48),
                   },
                  ],
                 },
                 position: (539, 42),
                },
                Parentheses {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "head",
                   position: (539, 52),
                  },
                  arguments: [
                   Variable {
                    identifier: "b",
                    position: (539, 57),
                   },
                  ],
                 },
                 position: (539, 51),
                },
               ],
              },
              position: (539, 20),
             },
             Int {
              value: 0,
              position: (539, 63),
             },
            ],
            position: (539, 61),
           },
           position: (539, 17),
          },
          position: (539, 14),
         },
        },
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "map",
         position: (541, 7),
        },
        arguments: [
         Parentheses {
          expression: Function {
           argument: Simple {
            identifier: "x",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "elemAt",
             position: (541, 15),
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (541, 22),
             },
             Int {
              value: 1,
              position: (541, 24),
             },
            ],
           },
           position: (541, 12),
          },
          position: (541, 11),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "sort",
            position: (541, 28),
           },
           arguments: [
            Variable {
             identifier: "less",
             position: (541, 33),
            },
            Variable {
             identifier: "prepared",
             position: (541, 38),
            },
           ],
          },
          position: (541, 27),
         },
        ],
       },
       position: (536, 5),
      },
      position: (535, 17),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "take",
        position: (553, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "count",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "sublist",
        position: (555, 12),
       },
       arguments: [
        Int {
         value: 0,
         position: (555, 20),
        },
        Variable {
         identifier: "count",
         position: (555, 22),
        },
       ],
      },
      position: (555, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "drop",
        position: (567, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "count",
      },
      definition: Function {
       argument: Simple {
        identifier: "list",
       },
       definition: FunctionApplication {
        function: Variable {
         identifier: "sublist",
         position: (571, 11),
        },
        arguments: [
         Variable {
          identifier: "count",
          position: (571, 19),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "length",
            position: (571, 26),
           },
           arguments: [
            Variable {
             identifier: "list",
             position: (571, 33),
            },
           ],
          },
          position: (571, 25),
         },
         Variable {
          identifier: "list",
          position: (571, 39),
         },
        ],
       },
       position: (571, 5),
      },
      position: (569, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "sublist",
        position: (584, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "start",
      },
      definition: Function {
       argument: Simple {
        identifier: "count",
       },
       definition: Function {
        argument: Simple {
         identifier: "list",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "len",
              position: (591, 9),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (591, 15),
            },
            arguments: [
             Variable {
              identifier: "list",
              position: (591, 22),
             },
            ],
           },
          },
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "genList",
           position: (592, 5),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "n",
             },
             definition: FunctionApplication {
              function: Variable {
               identifier: "elemAt",
               position: (593, 11),
              },
              arguments: [
               Variable {
                identifier: "list",
                position: (593, 18),
               },
               Parentheses {
                expression: BinaryOperation {
                 operator: Addition,
                 operands: [
                  Variable {
                   identifier: "n",
                   position: (593, 24),
                  },
                  Variable {
                   identifier: "start",
                   position: (593, 28),
                  },
                 ],
                 position: (593, 26),
                },
                position: (593, 23),
               },
              ],
             },
             position: (593, 8),
            },
            position: (593, 7),
           },
           Parentheses {
            expression: IfThenElse {
             predicate: BinaryOperation {
              operator: GreaterThanOrEqualTo,
              operands: [
               Variable {
                identifier: "start",
                position: (594, 11),
               },
               Variable {
                identifier: "len",
                position: (594, 20),
               },
              ],
              position: (594, 17),
             },
             then: Int {
              value: 0,
              position: (594, 29),
             },
             else_: IfThenElse {
              predicate: BinaryOperation {
               operator: GreaterThan,
               operands: [
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  Variable {
                   identifier: "start",
                   position: (595, 16),
                  },
                  Variable {
                   identifier: "count",
                   position: (595, 24),
                  },
                 ],
                 position: (595, 22),
                },
                Variable {
                 identifier: "len",
                 position: (595, 32),
                },
               ],
               position: (595, 30),
              },
              then: BinaryOperation {
               operator: Subtraction,
               operands: [
                Variable {
                 identifier: "len",
                 position: (595, 41),
                },
                Variable {
                 identifier: "start",
                 position: (595, 47),
                },
               ],
               position: (595, 45),
              },
              else_: Variable {
               identifier: "count",
               position: (596, 13),
              },
              position: (595, 13),
             },
             position: (594, 8),
            },
            position: (594, 7),
           },
          ],
         },
         position: (591, 5),
        },
        position: (590, 5),
       },
       position: (588, 5),
      },
      position: (586, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "last",
        position: (608, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "list",
      },
      definition: Assert {
       expression: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (609, 12),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "assertMsg",
            position: (609, 16),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Parentheses {
          expression: BinaryOperation {
           operator: NotEqualTo,
           operands: [
            Variable {
             identifier: "list",
             position: (609, 27),
            },
            List {
             elements: [],
             position: (609, 35),
            },
           ],
           position: (609, 32),
          },
          position: (609, 26),
         },
         String {
          parts: [
           Raw {
            content: "lists.last: list must not be empty!",
            position: (609, 40),
           },
          ],
          position: (609, 39),
         },
        ],
       },
       target: FunctionApplication {
        function: Variable {
         identifier: "elemAt",
         position: (610, 5),
        },
        arguments: [
         Variable {
          identifier: "list",
          position: (610, 12),
         },
         Parentheses {
          expression: BinaryOperation {
           operator: Subtraction,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "length",
              position: (610, 18),
             },
             arguments: [
              Variable {
               identifier: "list",
               position: (610, 25),
              },
             ],
            },
            Int {
             value: 1,
             position: (610, 32),
            },
           ],
           position: (610, 30),
          },
          position: (610, 17),
         },
        ],
       },
       position: (609, 5),
      },
      position: (608, 10),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "init",
        position: (622, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "list",
      },
      definition: Assert {
       expression: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (623, 12),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "assertMsg",
            position: (623, 16),
           },
          ],
         },
         default: None,
        },
        arguments: [
         Parentheses {
          expression: BinaryOperation {
           operator: NotEqualTo,
           operands: [
            Variable {
             identifier: "list",
             position: (623, 27),
            },
            List {
             elements: [],
             position: (623, 35),
            },
           ],
           position: (623, 32),
          },
          position: (623, 26),
         },
         String {
          parts: [
           Raw {
            content: "lists.init: list must not be empty!",
            position: (623, 40),
           },
          ],
          position: (623, 39),
         },
        ],
       },
       target: FunctionApplication {
        function: Variable {
         identifier: "take",
         position: (624, 5),
        },
        arguments: [
         Parentheses {
          expression: BinaryOperation {
           operator: Subtraction,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "length",
              position: (624, 11),
             },
             arguments: [
              Variable {
               identifier: "list",
               position: (624, 18),
              },
             ],
            },
            Int {
             value: 1,
             position: (624, 25),
            },
           ],
           position: (624, 23),
          },
          position: (624, 10),
         },
         Variable {
          identifier: "list",
          position: (624, 28),
         },
        ],
       },
       position: (623, 5),
      },
      position: (622, 10),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "crossLists",
        position: (633, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "builtins",
        position: (633, 16),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "trace",
          position: (633, 25),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "lib.crossLists is deprecated, use lib.cartesianProductOfSets instead",
          position: (634, 6),
         },
        ],
        position: (634, 5),
       },
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "f",
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "foldl",
           position: (635, 9),
          },
          arguments: [
           Parentheses {
            expression: Function {
             argument: Simple {
              identifier: "fs",
             },
             definition: Function {
              argument: Simple {
               identifier: "args",
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "concatMap",
                position: (635, 26),
               },
               arguments: [
                Parentheses {
                 expression: Function {
                  argument: Simple {
                   identifier: "f",
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "map",
                    position: (635, 40),
                   },
                   arguments: [
                    Variable {
                     identifier: "f",
                     position: (635, 44),
                    },
                    Variable {
                     identifier: "args",
                     position: (635, 46),
                    },
                   ],
                  },
                  position: (635, 37),
                 },
                 position: (635, 36),
                },
                Variable {
                 identifier: "fs",
                 position: (635, 52),
                },
               ],
              },
              position: (635, 20),
             },
             position: (635, 16),
            },
            position: (635, 15),
           },
           List {
            elements: [
             Variable {
              identifier: "f",
              position: (635, 57),
             },
            ],
            position: (635, 56),
           },
          ],
         },
         position: (635, 6),
        },
        position: (635, 5),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "unique",
        position: (646, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "foldl'",
       position: (646, 12),
      },
      arguments: [
       Parentheses {
        expression: Function {
         argument: Simple {
          identifier: "acc",
         },
         definition: Function {
          argument: Simple {
           identifier: "e",
          },
          definition: IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "elem",
             position: (646, 31),
            },
            arguments: [
             Variable {
              identifier: "e",
              position: (646, 36),
             },
             Variable {
              identifier: "acc",
              position: (646, 38),
             },
            ],
           },
           then: Variable {
            identifier: "acc",
            position: (646, 47),
           },
           else_: BinaryOperation {
            operator: Concatenation,
            operands: [
             Variable {
              identifier: "acc",
              position: (646, 56),
             },
             List {
              elements: [
               Variable {
                identifier: "e",
                position: (646, 65),
               },
              ],
              position: (646, 63),
             },
            ],
            position: (646, 60),
           },
           position: (646, 28),
          },
          position: (646, 25),
         },
         position: (646, 20),
        },
        position: (646, 19),
       },
       List {
        elements: [],
        position: (646, 70),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "intersectLists",
        position: (654, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "e",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "filter",
        position: (654, 23),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "x",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "elem",
            position: (654, 34),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (654, 39),
            },
            Variable {
             identifier: "e",
             position: (654, 41),
            },
           ],
          },
          position: (654, 31),
         },
         position: (654, 30),
        },
       ],
      },
      position: (654, 20),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "subtractLists",
        position: (662, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "e",
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "filter",
        position: (662, 22),
       },
       arguments: [
        Parentheses {
         expression: Function {
          argument: Simple {
           identifier: "x",
          },
          definition: UnaryOperation {
           operator: Not,
           operand: Parentheses {
            expression: FunctionApplication {
             function: Variable {
              identifier: "elem",
              position: (662, 35),
             },
             arguments: [
              Variable {
               identifier: "x",
               position: (662, 40),
              },
              Variable {
               identifier: "e",
               position: (662, 42),
              },
             ],
            },
            position: (662, 34),
           },
           position: (662, 33),
          },
          position: (662, 30),
         },
         position: (662, 29),
        },
       ],
      },
      position: (662, 19),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mutuallyExclusive",
        position: (667, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "a",
      },
      definition: Function {
       argument: Simple {
        identifier: "b",
       },
       definition: BinaryOperation {
        operator: LogicalOr,
        operands: [
         BinaryOperation {
          operator: EqualTo,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "length",
             position: (667, 29),
            },
            arguments: [
             Variable {
              identifier: "a",
              position: (667, 36),
             },
            ],
           },
           Int {
            value: 0,
            position: (667, 41),
           },
          ],
          position: (667, 38),
         },
         UnaryOperation {
          operator: Not,
          operand: Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "any",
             position: (667, 48),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "x",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "elem",
                 position: (667, 56),
                },
                arguments: [
                 Variable {
                  identifier: "x",
                  position: (667, 61),
                 },
                 Variable {
                  identifier: "a",
                  position: (667, 63),
                 },
                ],
               },
               position: (667, 53),
              },
              position: (667, 52),
             },
             Variable {
              identifier: "b",
              position: (667, 66),
             },
            ],
           },
           position: (667, 47),
          },
          position: (667, 46),
         },
        ],
        position: (667, 43),
       },
       position: (667, 26),
      },
      position: (667, 23),
     },
    },
   ],
   recursive: true,
   position: (9, 1),
  },
  position: (4, 1),
 },
 position: (3, 1),
}