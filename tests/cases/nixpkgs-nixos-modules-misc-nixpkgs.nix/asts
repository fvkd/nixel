---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "options",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "nixpkgs",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "opt",
        position: (7, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "options",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "nixpkgs",
         position: (7, 17),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "isConfig",
        position: (9, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: BinaryOperation {
       operator: LogicalOr,
       operands: [
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (10, 5),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "isAttrs",
             position: (10, 14),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (10, 22),
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (10, 27),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "isFunction",
             position: (10, 31),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (10, 42),
          },
         ],
        },
       ],
       position: (10, 24),
      },
      position: (9, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "optCall",
        position: (12, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "f",
      },
      definition: Function {
       argument: Simple {
        identifier: "x",
       },
       definition: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (13, 8),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "isFunction",
             position: (13, 12),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "f",
           position: (13, 23),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "f",
          position: (14, 10),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (14, 12),
          },
         ],
        },
        else_: Variable {
         identifier: "f",
         position: (15, 10),
        },
        position: (13, 5),
       },
       position: (12, 16),
      },
      position: (12, 13),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "mergeConfig",
        position: (17, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "lhs_",
      },
      definition: Function {
       argument: Simple {
        identifier: "rhs_",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "lhs",
             position: (19, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "optCall",
            position: (19, 13),
           },
           arguments: [
            Variable {
             identifier: "lhs_",
             position: (19, 21),
            },
            Map {
             bindings: [
              Inherit {
               from: None,
               attributes: [
                Raw {
                 content: "pkgs",
                 position: (19, 36),
                },
               ],
              },
             ],
             recursive: false,
             position: (19, 26),
            },
           ],
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "rhs",
             position: (20, 7),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "optCall",
            position: (20, 13),
           },
           arguments: [
            Variable {
             identifier: "rhs_",
             position: (20, 21),
            },
            Map {
             bindings: [
              Inherit {
               from: None,
               attributes: [
                Raw {
                 content: "pkgs",
                 position: (20, 36),
                },
               ],
              },
             ],
             recursive: false,
             position: (20, 26),
            },
           ],
          },
         },
        ],
        target: BinaryOperation {
         operator: Update,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "recursiveUpdate",
            position: (22, 5),
           },
           arguments: [
            Variable {
             identifier: "lhs",
             position: (22, 21),
            },
            Variable {
             identifier: "rhs",
             position: (22, 25),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: Variable {
              identifier: "optionalAttrs",
              position: (23, 5),
             },
             arguments: [
              Parentheses {
               expression: HasProperty {
                expression: Variable {
                 identifier: "lhs",
                 position: (23, 20),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "packageOverrides",
                   position: (23, 26),
                  },
                 ],
                },
                position: (23, 24),
               },
               position: (23, 19),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "packageOverrides",
                    position: (24, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "pkgs",
                  },
                  definition: BinaryOperation {
                   operator: Update,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "optCall",
                      position: (25, 9),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "lhs",
                        position: (25, 17),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "packageOverrides",
                          position: (25, 21),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "pkgs",
                       position: (25, 38),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "optCall",
                      position: (26, 9),
                     },
                     arguments: [
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "attrByPath",
                         position: (26, 18),
                        },
                        arguments: [
                         List {
                          elements: [
                           String {
                            parts: [
                             Raw {
                              content: "packageOverrides",
                              position: (26, 31),
                             },
                            ],
                            position: (26, 30),
                           },
                          ],
                          position: (26, 29),
                         },
                         Parentheses {
                          expression: Map {
                           bindings: [],
                           recursive: false,
                           position: (26, 51),
                          },
                          position: (26, 50),
                         },
                         Variable {
                          identifier: "rhs",
                          position: (26, 55),
                         },
                        ],
                       },
                       position: (26, 17),
                      },
                      Variable {
                       identifier: "pkgs",
                       position: (26, 60),
                      },
                     ],
                    },
                   ],
                   position: (25, 43),
                  },
                  position: (24, 26),
                 },
                },
               ],
               recursive: false,
               position: (23, 44),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "optionalAttrs",
              position: (28, 5),
             },
             arguments: [
              Parentheses {
               expression: HasProperty {
                expression: Variable {
                 identifier: "lhs",
                 position: (28, 20),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "perlPackageOverrides",
                   position: (28, 26),
                  },
                 ],
                },
                position: (28, 24),
               },
               position: (28, 19),
              },
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "perlPackageOverrides",
                    position: (29, 7),
                   },
                  ],
                 },
                 to: Function {
                  argument: Simple {
                   identifier: "pkgs",
                  },
                  definition: BinaryOperation {
                   operator: Update,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "optCall",
                      position: (30, 9),
                     },
                     arguments: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "lhs",
                        position: (30, 17),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "perlPackageOverrides",
                          position: (30, 21),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "pkgs",
                       position: (30, 42),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "optCall",
                      position: (31, 9),
                     },
                     arguments: [
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "attrByPath",
                         position: (31, 18),
                        },
                        arguments: [
                         List {
                          elements: [
                           String {
                            parts: [
                             Raw {
                              content: "perlPackageOverrides",
                              position: (31, 31),
                             },
                            ],
                            position: (31, 30),
                           },
                          ],
                          position: (31, 29),
                         },
                         Parentheses {
                          expression: Map {
                           bindings: [],
                           recursive: false,
                           position: (31, 55),
                          },
                          position: (31, 54),
                         },
                         Variable {
                          identifier: "rhs",
                          position: (31, 59),
                         },
                        ],
                       },
                       position: (31, 17),
                      },
                      Variable {
                       identifier: "pkgs",
                       position: (31, 64),
                      },
                     ],
                    },
                   ],
                   position: (30, 47),
                  },
                  position: (29, 30),
                 },
                },
               ],
               recursive: false,
               position: (28, 48),
              },
             ],
            },
           ],
           position: (27, 7),
          },
         ],
         position: (22, 29),
        },
        position: (18, 5),
       },
       position: (17, 23),
      },
      position: (17, 17),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "configType",
        position: (34, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "mkOptionType",
       position: (34, 16),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (35, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixpkgs-config",
             position: (35, 13),
            },
           ],
           position: (35, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "description",
             position: (36, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixpkgs config",
             position: (36, 20),
            },
           ],
           position: (36, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "check",
             position: (37, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "x",
           },
           definition: LetIn {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "traceXIfNot",
                 position: (38, 11),
                },
               ],
              },
              to: Function {
               argument: Simple {
                identifier: "c",
               },
               definition: IfThenElse {
                predicate: FunctionApplication {
                 function: Variable {
                  identifier: "c",
                  position: (39, 16),
                 },
                 arguments: [
                  Variable {
                   identifier: "x",
                   position: (39, 18),
                  },
                 ],
                },
                then: Variable {
                 identifier: "true",
                 position: (39, 25),
                },
                else_: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (40, 18),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "traceSeqN",
                     position: (40, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Int {
                   value: 1,
                   position: (40, 32),
                  },
                  Variable {
                   identifier: "x",
                   position: (40, 34),
                  },
                  Variable {
                   identifier: "false",
                   position: (40, 36),
                  },
                 ],
                },
                position: (39, 13),
               },
               position: (38, 25),
              },
             },
            ],
            target: FunctionApplication {
             function: Variable {
              identifier: "traceXIfNot",
              position: (41, 10),
             },
             arguments: [
              Variable {
               identifier: "isConfig",
               position: (41, 22),
              },
             ],
            },
            position: (38, 7),
           },
           position: (37, 13),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "merge",
             position: (42, 5),
            },
           ],
          },
          to: Function {
           argument: Simple {
            identifier: "args",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "foldr",
             position: (42, 19),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "def",
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "mergeConfig",
                 position: (42, 31),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "def",
                   position: (42, 43),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "value",
                     position: (42, 47),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               position: (42, 26),
              },
              position: (42, 25),
             },
             Map {
              bindings: [],
              recursive: false,
              position: (42, 54),
             },
            ],
           },
           position: (42, 13),
          },
         },
        ],
        recursive: false,
        position: (34, 29),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "overlayType",
        position: (45, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "mkOptionType",
       position: (45, 17),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (46, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixpkgs-overlay",
             position: (46, 13),
            },
           ],
           position: (46, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "description",
             position: (47, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixpkgs overlay",
             position: (47, 20),
            },
           ],
           position: (47, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "check",
             position: (48, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (48, 13),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "isFunction",
              position: (48, 17),
             },
            ],
           },
           default: None,
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "merge",
             position: (49, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (49, 13),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "mergeOneOption",
              position: (49, 17),
             },
            ],
           },
           default: None,
          },
         },
        ],
        recursive: false,
        position: (45, 30),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "pkgsType",
        position: (52, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "mkOptionType",
       position: (52, 14),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (53, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixpkgs",
             position: (53, 13),
            },
           ],
           position: (53, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "description",
             position: (54, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "An evaluation of Nixpkgs; the top level attribute set of packages",
             position: (54, 20),
            },
           ],
           position: (54, 19),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "check",
             position: (55, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (55, 13),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "isAttrs",
              position: (55, 22),
             },
            ],
           },
           default: None,
          },
         },
        ],
        recursive: false,
        position: (52, 27),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "defaultPkgs",
        position: (58, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "import",
       position: (58, 17),
      },
      arguments: [
       Path {
        parts: [
         Raw {
          content: "../../..",
          position: (58, 24),
         },
        ],
        position: (58, 24),
       },
       Map {
        bindings: [
         Inherit {
          from: Some(
           Variable {
            identifier: "cfg",
            position: (59, 14),
           },
          ),
          attributes: [
           Raw {
            content: "config",
            position: (59, 19),
           },
           Raw {
            content: "overlays",
            position: (59, 26),
           },
           Raw {
            content: "localSystem",
            position: (59, 35),
           },
           Raw {
            content: "crossSystem",
            position: (59, 47),
           },
          ],
         },
        ],
        recursive: false,
        position: (58, 33),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "finalPkgs",
        position: (62, 3),
       },
      ],
     },
     to: IfThenElse {
      predicate: PropertyAccess {
       expression: Variable {
        identifier: "opt",
        position: (62, 18),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "pkgs",
          position: (62, 22),
         },
         Raw {
          content: "isDefined",
          position: (62, 27),
         },
        ],
       },
       default: None,
      },
      then: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (62, 42),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "pkgs",
           position: (62, 46),
          },
          Raw {
           content: "appendOverlays",
           position: (62, 51),
          },
         ],
        },
        default: None,
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (62, 66),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "overlays",
            position: (62, 70),
           },
          ],
         },
         default: None,
        },
       ],
      },
      else_: Variable {
       identifier: "defaultPkgs",
       position: (62, 84),
      },
      position: (62, 15),
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "imports",
         position: (67, 3),
        },
       ],
      },
      to: List {
       elements: [
        Path {
         parts: [
          Raw {
           content: "./assertions.nix",
           position: (68, 5),
          },
         ],
         position: (68, 5),
        },
        Path {
         parts: [
          Raw {
           content: "./meta.nix",
           position: (69, 5),
          },
         ],
         position: (69, 5),
        },
       ],
       position: (67, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (72, 3),
        },
        Raw {
         content: "nixpkgs",
         position: (72, 11),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "pkgs",
            position: (74, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (74, 12),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (75, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (75, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "import \"",
                   position: (76, 1),
                  },
                  Raw {
                   content: "$",
                   position: (76, 17),
                  },
                  Raw {
                   content: "{nixos}/..\" {\n  inherit (cfg) config overlays localSystem crossSystem;\n}\n",
                   position: (76, 20),
                  },
                 ],
                 position: (75, 39),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (80, 7),
                },
               ],
              },
              to: Variable {
               identifier: "pkgsType",
               position: (80, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (81, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (81, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "import <nixpkgs> {}",
                   position: (81, 36),
                  },
                 ],
                 position: (81, 35),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (82, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "If set, the pkgs argument to all NixOS modules is the value of\nthis option, extended with <code>nixpkgs.overlays</code>, if\nthat is also set. Either <code>nixpkgs.crossSystem</code> or\n<code>nixpkgs.localSystem</code> will be used in an assertion\nto check that the NixOS and Nixpkgs architectures match. Any\nother options in <code>nixpkgs.*</code>, notably <code>config</code>,\nwill be ignored.\n\nIf unset, the pkgs argument to all NixOS modules is determined\nas shown in the default value for this option.\n\nThe default value imports the Nixpkgs source files\nrelative to the location of this NixOS module, because\nNixOS and Nixpkgs are distributed together for consistency,\nso the <code>nixos</code> in the default value is in fact a\nrelative path. The <code>config</code>, <code>overlays</code>,\n<code>localSystem</code>, and <code>crossSystem</code> come\nfrom this option's siblings.\n\nThis option can be used by applications like NixOps to increase\nthe performance of evaluation, or to create packages that depend\non a container that should be built with the exact same evaluation\nof Nixpkgs, for example. Applications like this should set\ntheir default value using <code>lib.mkDefault</code>, so\nuser-provided configuration can override it without using\n<code>lib</code>.\n\nNote that using a distinct version of Nixpkgs with NixOS may\nbe an unexpected source of problems. Use this option with care.\n",
                 position: (83, 1),
                },
               ],
               position: (82, 21),
              },
             },
            ],
            recursive: false,
            position: (74, 21),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "config",
            position: (115, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (115, 14),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (116, 7),
                },
               ],
              },
              to: Map {
               bindings: [],
               recursive: false,
               position: (116, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (117, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (117, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "{ allowBroken = true; allowUnfree = true; }\n",
                   position: (119, 1),
                  },
                 ],
                 position: (118, 9),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (121, 7),
                },
               ],
              },
              to: Variable {
               identifier: "configType",
               position: (121, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (122, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "The configuration of the Nix Packages collection.  (For\ndetails, see the Nixpkgs documentation.)  It allows you to set\npackage configuration options.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n",
                 position: (123, 1),
                },
               ],
               position: (122, 21),
              },
             },
            ],
            recursive: false,
            position: (115, 23),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "overlays",
            position: (131, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (131, 16),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (132, 7),
                },
               ],
              },
              to: List {
               elements: [],
               position: (132, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (133, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (133, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "[\n  (self: super: {\n    openssh = super.openssh.override {\n      hpnSupport = true;\n      kerberos = self.libkrb5;\n    };\n  })\n]\n",
                   position: (135, 1),
                  },
                 ],
                 position: (134, 9),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (144, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (144, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "listOf",
                   position: (144, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "overlayType",
                 position: (144, 27),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (145, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "List of overlays to use with the Nix Packages collection.\n(For details, see the Nixpkgs documentation.)  It allows\nyou to override packages globally. Each function in the list\ntakes as an argument the <emphasis>original</emphasis> Nixpkgs.\nThe first argument should be used for finding dependencies, and\nthe second should be used for overriding recipes.\n\nIf <code>nixpkgs.pkgs</code> is set, overlays specified here\nwill be applied after the overlays that were already present\nin <code>nixpkgs.pkgs</code>.\n",
                 position: (146, 1),
                },
               ],
               position: (145, 21),
              },
             },
            ],
            recursive: false,
            position: (131, 25),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "localSystem",
            position: (159, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (159, 19),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (160, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (160, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "attrs",
                  position: (160, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (161, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Inherit {
                 from: Some(
                  Variable {
                   identifier: "cfg",
                   position: (161, 28),
                  },
                 ),
                 attributes: [
                  Raw {
                   content: "system",
                   position: (161, 33),
                  },
                 ],
                },
               ],
               recursive: false,
               position: (161, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (162, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "system",
                    position: (162, 19),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "aarch64-linux",
                    position: (162, 29),
                   },
                  ],
                  position: (162, 28),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "config",
                    position: (162, 45),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "aarch64-unknown-linux-gnu",
                    position: (162, 55),
                   },
                  ],
                  position: (162, 54),
                 },
                },
               ],
               recursive: false,
               position: (162, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "apply",
                 position: (165, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (165, 15),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "systems",
                  position: (165, 19),
                 },
                 Raw {
                  content: "elaborate",
                  position: (165, 27),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (166, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (166, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "(import \"",
                   position: (167, 11),
                  },
                  Raw {
                   content: "$",
                   position: (167, 20),
                  },
                  Raw {
                   content: "{nixos}/../lib\").lib.systems.examples.aarch64-multiplatform",
                   position: (167, 23),
                  },
                 ],
                 position: (167, 9),
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (168, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Specifies the platform on which NixOS should be built. When\n<code>nixpkgs.crossSystem</code> is unset, it also specifies\nthe platform <emphasis>for</emphasis> which NixOS should be\nbuilt.  If this option is unset, it defaults to the platform\ntype of the machine where evaluation happens. Specifying this\noption is useful when doing distributed multi-platform\ndeployment, or when building virtual machines. See its\ndescription in the Nixpkgs manual for more details.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n",
                 position: (169, 1),
                },
               ],
               position: (168, 21),
              },
             },
            ],
            recursive: false,
            position: (159, 28),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "crossSystem",
            position: (182, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (182, 19),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (183, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (183, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "nullOr",
                   position: (183, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (183, 27),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "attrs",
                    position: (183, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (184, 7),
                },
               ],
              },
              to: Variable {
               identifier: "null",
               position: (184, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (185, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "system",
                    position: (185, 19),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "aarch64-linux",
                    position: (185, 29),
                   },
                  ],
                  position: (185, 28),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "config",
                    position: (185, 45),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "aarch64-unknown-linux-gnu",
                    position: (185, 55),
                   },
                  ],
                  position: (185, 54),
                 },
                },
               ],
               recursive: false,
               position: (185, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (186, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Specifies the platform for which NixOS should be\nbuilt. Specify this only if it is different from\n<code>nixpkgs.localSystem</code>, the platform\n<emphasis>on</emphasis> which NixOS should be built. In other\nwords, specify this to cross-compile NixOS. Otherwise it\nshould be set as null, the default. See its description in the\nNixpkgs manual for more details.\n\nIgnored when <code>nixpkgs.pkgs</code> is set.\n",
                 position: (187, 1),
                },
               ],
               position: (186, 21),
              },
             },
            ],
            recursive: false,
            position: (182, 28),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "system",
            position: (199, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (199, 14),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (200, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (200, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (200, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (201, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "i686-linux",
                 position: (201, 18),
                },
               ],
               position: (201, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (202, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Specifies the Nix platform type on which NixOS should be built.\nIt is better to specify <code>nixpkgs.localSystem</code> instead.\n<programlisting>\n{\n  nixpkgs.system = ..;\n}\n</programlisting>\nis the same as\n<programlisting>\n{\n  nixpkgs.localSystem.system = ..;\n}\n</programlisting>\nSee <code>nixpkgs.localSystem</code> for more information.\n\nIgnored when <code>nixpkgs.localSystem</code> is set.\nIgnored when <code>nixpkgs.pkgs</code> is set.\n",
                 position: (203, 1),
                },
               ],
               position: (202, 21),
              },
             },
            ],
            recursive: false,
            position: (199, 23),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "initialSystem",
            position: (223, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (223, 21),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (224, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (224, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (224, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "internal",
                 position: (225, 7),
                },
               ],
              },
              to: Variable {
               identifier: "true",
               position: (225, 18),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (226, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Preserved value of <literal>system</literal> passed to <literal>eval-config.nix</literal>.\n",
                 position: (227, 1),
                },
               ],
               position: (226, 21),
              },
             },
            ],
            recursive: false,
            position: (223, 30),
           },
          ],
         },
        },
       ],
       recursive: false,
       position: (72, 21),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (232, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "_module",
            position: (233, 5),
           },
           Raw {
            content: "args",
            position: (233, 13),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "pkgs",
               position: (234, 7),
              },
             ],
            },
            to: Variable {
             identifier: "finalPkgs",
             position: (234, 14),
            },
           },
          ],
          recursive: false,
          position: (233, 20),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "assertions",
            position: (237, 5),
           },
          ],
         },
         to: List {
          elements: [
           Parentheses {
            expression: LetIn {
             bindings: [
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "nixosExpectedSystem",
                  position: (240, 11),
                 },
                ],
               },
               to: IfThenElse {
                predicate: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (241, 16),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "nixpkgs",
                      position: (241, 23),
                     },
                     Raw {
                      content: "crossSystem",
                      position: (241, 31),
                     },
                    ],
                   },
                   default: None,
                  },
                  Variable {
                   identifier: "null",
                   position: (241, 46),
                  },
                 ],
                 position: (241, 43),
                },
                then: PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (242, 18),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "nixpkgs",
                    position: (242, 25),
                   },
                   Raw {
                    content: "crossSystem",
                    position: (242, 33),
                   },
                   Raw {
                    content: "system",
                    position: (242, 45),
                   },
                  ],
                 },
                 default: Some(
                  Parentheses {
                   expression: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "lib",
                      position: (242, 56),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "systems",
                        position: (242, 60),
                       },
                       Raw {
                        content: "parse",
                        position: (242, 68),
                       },
                       Raw {
                        content: "doubleFromSystem",
                        position: (242, 74),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Parentheses {
                      expression: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (242, 92),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "systems",
                           position: (242, 96),
                          },
                          Raw {
                           content: "parse",
                           position: (242, 104),
                          },
                          Raw {
                           content: "mkSystemFromString",
                           position: (242, 110),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "config",
                          position: (242, 129),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "nixpkgs",
                            position: (242, 136),
                           },
                           Raw {
                            content: "crossSystem",
                            position: (242, 144),
                           },
                           Raw {
                            content: "config",
                            position: (242, 156),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                      position: (242, 91),
                     },
                    ],
                   },
                   position: (242, 55),
                  },
                 ),
                },
                else_: PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (243, 18),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "nixpkgs",
                    position: (243, 25),
                   },
                   Raw {
                    content: "localSystem",
                    position: (243, 33),
                   },
                   Raw {
                    content: "system",
                    position: (243, 45),
                   },
                  ],
                 },
                 default: Some(
                  Parentheses {
                   expression: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "lib",
                      position: (243, 56),
                     },
                     attribute_path: AttributePath {
                      parts: [
                       Raw {
                        content: "systems",
                        position: (243, 60),
                       },
                       Raw {
                        content: "parse",
                        position: (243, 68),
                       },
                       Raw {
                        content: "doubleFromSystem",
                        position: (243, 74),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Parentheses {
                      expression: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "lib",
                         position: (243, 92),
                        },
                        attribute_path: AttributePath {
                         parts: [
                          Raw {
                           content: "systems",
                           position: (243, 96),
                          },
                          Raw {
                           content: "parse",
                           position: (243, 104),
                          },
                          Raw {
                           content: "mkSystemFromString",
                           position: (243, 110),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "config",
                          position: (243, 129),
                         },
                         attribute_path: AttributePath {
                          parts: [
                           Raw {
                            content: "nixpkgs",
                            position: (243, 136),
                           },
                           Raw {
                            content: "localSystem",
                            position: (243, 144),
                           },
                           Raw {
                            content: "config",
                            position: (243, 156),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                      },
                      position: (243, 91),
                     },
                    ],
                   },
                   position: (243, 55),
                  },
                 ),
                },
                position: (241, 13),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "nixosOption",
                  position: (244, 11),
                 },
                ],
               },
               to: IfThenElse {
                predicate: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (245, 16),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "nixpkgs",
                      position: (245, 23),
                     },
                     Raw {
                      content: "crossSystem",
                      position: (245, 31),
                     },
                    ],
                   },
                   default: None,
                  },
                  Variable {
                   identifier: "null",
                   position: (245, 46),
                  },
                 ],
                 position: (245, 43),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "nixpkgs.crossSystem",
                   position: (246, 19),
                  },
                 ],
                 position: (246, 18),
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "nixpkgs.localSystem",
                   position: (247, 19),
                  },
                 ],
                 position: (247, 18),
                },
                position: (245, 13),
               },
              },
              Binding {
               from: AttributePath {
                parts: [
                 Raw {
                  content: "pkgsSystem",
                  position: (248, 11),
                 },
                ],
               },
               to: PropertyAccess {
                expression: Variable {
                 identifier: "finalPkgs",
                 position: (248, 24),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "stdenv",
                   position: (248, 34),
                  },
                  Raw {
                   content: "targetPlatform",
                   position: (248, 41),
                  },
                  Raw {
                   content: "system",
                   position: (248, 56),
                  },
                 ],
                },
                default: None,
               },
              },
             ],
             target: Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "assertion",
                   position: (250, 11),
                  },
                 ],
                },
                to: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "nixosExpectedSystem",
                   position: (250, 23),
                  },
                  Variable {
                   identifier: "pkgsSystem",
                   position: (250, 46),
                  },
                 ],
                 position: (250, 43),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "message",
                   position: (251, 11),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "The NixOS nixpkgs.pkgs option was set to a Nixpkgs invocation that compiles to target system ",
                   position: (251, 22),
                  },
                  Interpolation {
                   expression: Variable {
                    identifier: "pkgsSystem",
                    position: (251, 117),
                   },
                  },
                  Raw {
                   content: " but NixOS was configured for system ",
                   position: (251, 128),
                  },
                  Interpolation {
                   expression: Variable {
                    identifier: "nixosExpectedSystem",
                    position: (251, 167),
                   },
                  },
                  Raw {
                   content: " via NixOS option ",
                   position: (251, 187),
                  },
                  Interpolation {
                   expression: Variable {
                    identifier: "nixosOption",
                    position: (251, 207),
                   },
                  },
                  Raw {
                   content: ". The NixOS system settings must match the Nixpkgs target system.",
                   position: (251, 219),
                  },
                 ],
                 position: (251, 21),
                },
               },
              ],
              recursive: false,
              position: (249, 12),
             },
             position: (239, 9),
            },
            position: (238, 7),
           },
          ],
          position: (237, 18),
         },
        },
       ],
       recursive: false,
       position: (232, 12),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "meta",
         position: (258, 3),
        },
        Raw {
         content: "buildDocsInSandbox",
         position: (258, 8),
        },
       ],
      },
      to: Variable {
       identifier: "false",
       position: (258, 29),
      },
     },
    ],
    recursive: false,
    position: (66, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}