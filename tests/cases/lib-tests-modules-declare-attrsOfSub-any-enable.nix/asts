---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: LetIn {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "submod",
       position: (4, 3),
      },
     ],
    },
    to: Function {
     argument: Destructured {
      identifier: None,
      arguments: [],
      ellipsis: true,
     },
     definition: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "options",
           position: (5, 5),
          },
         ],
        },
        to: Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "enable",
              position: (6, 7),
             },
            ],
           },
           to: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (6, 16),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "mkOption",
                position: (6, 20),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Map {
              bindings: [
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "default",
                   position: (7, 9),
                  },
                 ],
                },
                to: Variable {
                 identifier: "false",
                 position: (7, 19),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "example",
                   position: (8, 9),
                  },
                 ],
                },
                to: Variable {
                 identifier: "true",
                 position: (8, 19),
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "type",
                   position: (9, 9),
                  },
                 ],
                },
                to: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (9, 16),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "types",
                    position: (9, 20),
                   },
                   Raw {
                    content: "bool",
                    position: (9, 26),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Binding {
                from: AttributePath {
                 parts: [
                  Raw {
                   content: "description",
                   position: (10, 9),
                  },
                 ],
                },
                to: String {
                 parts: [
                  Raw {
                   content: "Some descriptive text\n",
                   position: (11, 1),
                  },
                 ],
                 position: (10, 23),
                },
               },
              ],
              recursive: false,
              position: (6, 29),
             },
            ],
           },
          },
         ],
         recursive: false,
         position: (5, 15),
        },
       },
      ],
      recursive: false,
      position: (4, 21),
     },
     position: (4, 12),
    },
   },
  ],
  target: Map {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "options",
        position: (19, 3),
       },
      ],
     },
     to: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "attrsOfSub",
           position: (20, 5),
          },
         ],
        },
        to: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (20, 18),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "mkOption",
             position: (20, 22),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Map {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "default",
                position: (21, 7),
               },
              ],
             },
             to: Map {
              bindings: [],
              recursive: false,
              position: (21, 17),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "example",
                position: (22, 7),
               },
              ],
             },
             to: Map {
              bindings: [],
              recursive: false,
              position: (22, 17),
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "type",
                position: (23, 7),
               },
              ],
             },
             to: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (23, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "types",
                  position: (23, 18),
                 },
                 Raw {
                  content: "attrsOf",
                  position: (23, 24),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (23, 33),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "types",
                    position: (23, 37),
                   },
                   Raw {
                    content: "submodule",
                    position: (23, 43),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 List {
                  elements: [
                   Variable {
                    identifier: "submod",
                    position: (23, 55),
                   },
                  ],
                  position: (23, 53),
                 },
                ],
               },
              ],
             },
            },
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "description",
                position: (24, 7),
               },
              ],
             },
             to: String {
              parts: [
               Raw {
                content: "Some descriptive text\n",
                position: (25, 1),
               },
              ],
              position: (24, 21),
             },
            },
           ],
           recursive: false,
           position: (20, 31),
          },
         ],
        },
       },
      ],
      recursive: false,
      position: (19, 13),
     },
    },
   ],
   recursive: false,
   position: (18, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}