---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (6, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "makeProg",
        position: (9, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "args",
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (9, 20),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "substituteAll",
           position: (9, 25),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Parentheses {
         expression: BinaryOperation {
          operator: Update,
          operands: [
           Variable {
            identifier: "args",
            position: (9, 40),
           },
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "dir",
                 position: (10, 5),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "bin",
                 position: (10, 12),
                },
               ],
               position: (10, 11),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "isExecutable",
                 position: (11, 5),
                },
               ],
              },
              to: Variable {
               identifier: "true",
               position: (11, 20),
              },
             },
            ],
            recursive: false,
            position: (9, 48),
           },
          ],
          position: (9, 45),
         },
         position: (9, 39),
        },
       ],
      },
      position: (9, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-build-vms",
        position: (14, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "makeProg",
       position: (14, 21),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (15, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixos-build-vms",
             position: (15, 13),
            },
           ],
           position: (15, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "src",
             position: (16, 5),
            },
           ],
          },
          to: Path {
           parts: [
            Raw {
             content: "./nixos-build-vms/nixos-build-vms.sh",
             position: (16, 11),
            },
           ],
           position: (16, 11),
          },
         },
         Inherit {
          from: Some(
           Variable {
            identifier: "pkgs",
            position: (17, 14),
           },
          ),
          attributes: [
           Raw {
            content: "runtimeShell",
            position: (17, 20),
           },
          ],
         },
        ],
        recursive: false,
        position: (14, 30),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-install",
        position: (20, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "makeProg",
       position: (20, 19),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (21, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixos-install",
             position: (21, 13),
            },
           ],
           position: (21, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "src",
             position: (22, 5),
            },
           ],
          },
          to: Path {
           parts: [
            Raw {
             content: "./nixos-install.sh",
             position: (22, 11),
            },
           ],
           position: (22, 11),
          },
         },
         Inherit {
          from: Some(
           Variable {
            identifier: "pkgs",
            position: (23, 14),
           },
          ),
          attributes: [
           Raw {
            content: "runtimeShell",
            position: (23, 20),
           },
          ],
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "nix",
             position: (24, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (24, 11),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "nix",
              position: (24, 18),
             },
             Raw {
              content: "package",
              position: (24, 22),
             },
             Raw {
              content: "out",
              position: (24, 30),
             },
            ],
           },
           default: None,
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "path",
             position: (25, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "makeBinPath",
            position: (25, 12),
           },
           arguments: [
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (26, 7),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "jq",
                  position: (26, 12),
                 },
                ],
               },
               default: None,
              },
              Variable {
               identifier: "nixos-enter",
               position: (27, 7),
              },
             ],
             position: (25, 24),
            },
           ],
          },
         },
        ],
        recursive: false,
        position: (20, 28),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-rebuild",
        position: (31, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (31, 19),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "nixos-rebuild",
          position: (31, 24),
         },
         Raw {
          content: "override",
          position: (31, 38),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "nix",
             position: (31, 49),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (31, 55),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "nix",
              position: (31, 62),
             },
             Raw {
              content: "package",
              position: (31, 66),
             },
             Raw {
              content: "out",
              position: (31, 74),
             },
            ],
           },
           default: None,
          },
         },
        ],
        recursive: false,
        position: (31, 47),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-generate-config",
        position: (33, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "makeProg",
       position: (33, 27),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (34, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixos-generate-config",
             position: (34, 13),
            },
           ],
           position: (34, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "src",
             position: (35, 5),
            },
           ],
          },
          to: Path {
           parts: [
            Raw {
             content: "./nixos-generate-config.pl",
             position: (35, 11),
            },
           ],
           position: (35, 11),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "perl",
             position: (36, 5),
            },
           ],
          },
          to: String {
           parts: [
            Expression {
             expression: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (36, 15),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "perl",
                  position: (36, 20),
                 },
                 Raw {
                  content: "withPackages",
                  position: (36, 25),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Parentheses {
                expression: Function {
                 argument: Simple {
                  identifier: "p",
                 },
                 definition: List {
                  elements: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "p",
                     position: (36, 44),
                    },
                    attribute_path: AttributePath {
                     parts: [
                      Raw {
                       content: "FileSlurp",
                       position: (36, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                  position: (36, 42),
                 },
                 position: (36, 39),
                },
                position: (36, 38),
               },
              ],
             },
            },
            Raw {
             content: "/bin/perl",
             position: (36, 59),
            },
           ],
           position: (36, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "detectvirt",
             position: (37, 5),
            },
           ],
          },
          to: String {
           parts: [
            Expression {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (37, 21),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "systemd",
                 position: (37, 26),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "/bin/systemd-detect-virt",
             position: (37, 34),
            },
           ],
           position: (37, 18),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "btrfs",
             position: (38, 5),
            },
           ],
          },
          to: String {
           parts: [
            Expression {
             expression: PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (38, 16),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "btrfs-progs",
                 position: (38, 21),
                },
               ],
              },
              default: None,
             },
            },
            Raw {
             content: "/bin/btrfs",
             position: (38, 33),
            },
           ],
           position: (38, 13),
          },
         },
         Inherit {
          from: Some(
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (39, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "system",
               position: (39, 21),
              },
              Raw {
               content: "nixos-generate-config",
               position: (39, 28),
              },
             ],
            },
            default: None,
           },
          ),
          attributes: [
           Raw {
            content: "configuration",
            position: (39, 51),
           },
           Raw {
            content: "desktopConfiguration",
            position: (39, 65),
           },
          ],
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "xserverEnabled",
             position: (40, 5),
            },
           ],
          },
          to: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (40, 22),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "services",
              position: (40, 29),
             },
             Raw {
              content: "xserver",
              position: (40, 38),
             },
             Raw {
              content: "enable",
              position: (40, 46),
             },
            ],
           },
           default: None,
          },
         },
        ],
        recursive: false,
        position: (33, 36),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-option",
        position: (43, 3),
       },
      ],
     },
     to: IfThenElse {
      predicate: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (44, 8),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "versionAtLeast",
           position: (44, 12),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Parentheses {
         expression: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (44, 28),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "getVersion",
              position: (44, 32),
             },
            ],
           },
           default: None,
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (44, 43),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "nix",
               position: (44, 50),
              },
              Raw {
               content: "package",
               position: (44, 54),
              },
             ],
            },
            default: None,
           },
          ],
         },
         position: (44, 27),
        },
        String {
         parts: [
          Raw {
           content: "2.4pre",
           position: (44, 64),
          },
         ],
         position: (44, 63),
        },
       ],
      },
      then: Variable {
       identifier: "null",
       position: (45, 10),
      },
      else_: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (46, 10),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "nixos-option",
          position: (46, 15),
         },
        ],
       },
       default: None,
      },
      position: (44, 5),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-version",
        position: (48, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "makeProg",
       position: (48, 19),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (49, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixos-version",
             position: (49, 13),
            },
           ],
           position: (49, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "src",
             position: (50, 5),
            },
           ],
          },
          to: Path {
           parts: [
            Raw {
             content: "./nixos-version.sh",
             position: (50, 11),
            },
           ],
           position: (50, 11),
          },
         },
         Inherit {
          from: Some(
           Variable {
            identifier: "pkgs",
            position: (51, 14),
           },
          ),
          attributes: [
           Raw {
            content: "runtimeShell",
            position: (51, 20),
           },
          ],
         },
         Inherit {
          from: Some(
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (52, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "system",
               position: (52, 21),
              },
              Raw {
               content: "nixos",
               position: (52, 28),
              },
             ],
            },
            default: None,
           },
          ),
          attributes: [
           Raw {
            content: "version",
            position: (52, 35),
           },
           Raw {
            content: "codeName",
            position: (52, 43),
           },
           Raw {
            content: "revision",
            position: (52, 52),
           },
          ],
         },
         Inherit {
          from: Some(
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (53, 14),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "system",
               position: (53, 21),
              },
             ],
            },
            default: None,
           },
          ),
          attributes: [
           Raw {
            content: "configurationRevision",
            position: (53, 29),
           },
          ],
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "json",
             position: (54, 5),
            },
           ],
          },
          to: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (54, 12),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "toJSON",
               position: (54, 21),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Parentheses {
             expression: BinaryOperation {
              operator: Update,
              operands: [
               Map {
                bindings: [
                 Binding {
                  from: AttributePath {
                   parts: [
                    Raw {
                     content: "nixosVersion",
                     position: (55, 7),
                    },
                   ],
                  },
                  to: PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (55, 22),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "system",
                      position: (55, 29),
                     },
                     Raw {
                      content: "nixos",
                      position: (55, 36),
                     },
                     Raw {
                      content: "version",
                      position: (55, 42),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                ],
                recursive: false,
                position: (54, 29),
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (56, 10),
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: NotEqualTo,
                     operands: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (56, 25),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "system",
                          position: (56, 32),
                         },
                         Raw {
                          content: "nixos",
                          position: (56, 39),
                         },
                         Raw {
                          content: "revision",
                          position: (56, 45),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "null",
                       position: (56, 57),
                      },
                     ],
                     position: (56, 54),
                    },
                    position: (56, 24),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "nixpkgsRevision",
                         position: (57, 7),
                        },
                       ],
                      },
                      to: PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (57, 25),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "system",
                          position: (57, 32),
                         },
                         Raw {
                          content: "nixos",
                          position: (57, 39),
                         },
                         Raw {
                          content: "revision",
                          position: (57, 45),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                    ],
                    recursive: false,
                    position: (56, 63),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "optionalAttrs",
                   position: (58, 10),
                  },
                  arguments: [
                   Parentheses {
                    expression: BinaryOperation {
                     operator: NotEqualTo,
                     operands: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (58, 25),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "system",
                          position: (58, 32),
                         },
                         Raw {
                          content: "configurationRevision",
                          position: (58, 39),
                         },
                        ],
                       },
                       default: None,
                      },
                      Variable {
                       identifier: "null",
                       position: (58, 64),
                      },
                     ],
                     position: (58, 61),
                    },
                    position: (58, 24),
                   },
                   Map {
                    bindings: [
                     Binding {
                      from: AttributePath {
                       parts: [
                        Raw {
                         content: "configurationRevision",
                         position: (59, 7),
                        },
                       ],
                      },
                      to: PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (59, 31),
                       },
                       attribute_path: AttributePath {
                        parts: [
                         Raw {
                          content: "system",
                          position: (59, 38),
                         },
                         Raw {
                          content: "configurationRevision",
                          position: (59, 45),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                    ],
                    recursive: false,
                    position: (58, 70),
                   },
                  ],
                 },
                ],
                position: (58, 7),
               },
              ],
              position: (56, 7),
             },
             position: (54, 28),
            },
           ],
          },
         },
        ],
        recursive: false,
        position: (48, 28),
       },
      ],
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "nixos-enter",
        position: (63, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "makeProg",
       position: (63, 17),
      },
      arguments: [
       Map {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "name",
             position: (64, 5),
            },
           ],
          },
          to: String {
           parts: [
            Raw {
             content: "nixos-enter",
             position: (64, 13),
            },
           ],
           position: (64, 12),
          },
         },
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "src",
             position: (65, 5),
            },
           ],
          },
          to: Path {
           parts: [
            Raw {
             content: "./nixos-enter.sh",
             position: (65, 11),
            },
           ],
           position: (65, 11),
          },
         },
         Inherit {
          from: Some(
           Variable {
            identifier: "pkgs",
            position: (66, 14),
           },
          ),
          attributes: [
           Raw {
            content: "runtimeShell",
            position: (66, 20),
           },
          ],
         },
        ],
        recursive: false,
        position: (63, 26),
       },
      ],
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (73, 3),
        },
        Raw {
         content: "system",
         position: (73, 11),
        },
        Raw {
         content: "nixos-generate-config",
         position: (73, 18),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "configuration",
            position: (74, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (74, 21),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "internal",
                 position: (75, 7),
                },
               ],
              },
              to: Variable {
               identifier: "true",
               position: (75, 18),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (76, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (76, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "str",
                  position: (76, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (77, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "The NixOS module that <literal>nixos-generate-config</literal>\nsaves to <literal>/etc/nixos/configuration.nix</literal>.\n\nThis is an internal option. No backward compatibility is guaranteed.\nUse at your own risk!\n\nNote that this string gets spliced into a Perl script. The perl\nvariable <literal>$bootLoaderConfig</literal> can be used to\nsplice in the boot loader configuration.\n",
                 position: (78, 1),
                },
               ],
               position: (77, 21),
              },
             },
            ],
            recursive: false,
            position: (74, 30),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "desktopConfiguration",
            position: (90, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (90, 28),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "internal",
                 position: (91, 7),
                },
               ],
              },
              to: Variable {
               identifier: "true",
               position: (91, 18),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (92, 7),
                },
               ],
              },
              to: FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (92, 14),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "listOf",
                   position: (92, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (92, 27),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "lines",
                    position: (92, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (93, 7),
                },
               ],
              },
              to: List {
               elements: [],
               position: (93, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (94, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Text to preseed the desktop configuration that <literal>nixos-generate-config</literal>\nsaves to <literal>/etc/nixos/configuration.nix</literal>.\n\nThis is an internal option. No backward compatibility is guaranteed.\nUse at your own risk!\n\nNote that this string gets spliced into a Perl script. The perl\nvariable <literal>$bootLoaderConfig</literal> can be used to\nsplice in the boot loader configuration.\n",
                 position: (95, 1),
                },
               ],
               position: (94, 21),
              },
             },
            ],
            recursive: false,
            position: (90, 37),
           },
          ],
         },
        },
       ],
       recursive: false,
       position: (73, 42),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (108, 3),
        },
        Raw {
         content: "system",
         position: (108, 11),
        },
        Raw {
         content: "disableInstallerTools",
         position: (108, 18),
        },
       ],
      },
      to: FunctionApplication {
       function: Variable {
        identifier: "mkOption",
        position: (108, 42),
       },
       arguments: [
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "internal",
              position: (109, 5),
             },
            ],
           },
           to: Variable {
            identifier: "true",
            position: (109, 16),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "type",
              position: (110, 5),
             },
            ],
           },
           to: PropertyAccess {
            expression: Variable {
             identifier: "types",
             position: (110, 12),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "bool",
               position: (110, 18),
              },
             ],
            },
            default: None,
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "default",
              position: (111, 5),
             },
            ],
           },
           to: Variable {
            identifier: "false",
            position: (111, 15),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "description",
              position: (112, 5),
             },
            ],
           },
           to: String {
            parts: [
             Raw {
              content: "Disable nixos-rebuild, nixos-generate-config, nixos-installer\nand other NixOS tools. This is useful to shrink embedded,\nread-only systems which are not expected to be rebuild or\nreconfigure themselves. Use at your own risk!\n",
              position: (113, 1),
             },
            ],
            position: (112, 19),
           },
          },
         ],
         recursive: false,
         position: (108, 51),
        },
       ],
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (120, 3),
        },
       ],
      },
      to: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (120, 12),
        },
        attribute_path: AttributePath {
         parts: [
          Raw {
           content: "mkIf",
           position: (120, 16),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Parentheses {
         expression: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (120, 22),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "nix",
               position: (120, 29),
              },
              Raw {
               content: "enable",
               position: (120, 33),
              },
             ],
            },
            default: None,
           },
           UnaryOperation {
            operator: Not,
            operand: PropertyAccess {
             expression: Variable {
              identifier: "config",
              position: (120, 44),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "system",
                position: (120, 51),
               },
               Raw {
                content: "disableInstallerTools",
                position: (120, 58),
               },
              ],
             },
             default: None,
            },
            position: (120, 43),
           },
          ],
          position: (120, 40),
         },
         position: (120, 21),
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "system",
              position: (122, 5),
             },
             Raw {
              content: "nixos-generate-config",
              position: (122, 12),
             },
             Raw {
              content: "configuration",
              position: (122, 34),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "mkDefault",
             position: (122, 50),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "# Edit this configuration file to define what should be installed on\n# your system.  Help is available in the configuration.nix(5) man page\n# and in the NixOS manual (accessible by running ‘nixos-help’).\n\n{ config, pkgs, ... }:\n\n{\n  imports =\n    [ # Include the results of the hardware scan.\n      ./hardware-configuration.nix\n    ];\n\n$bootLoaderConfig\n  # networking.hostName = \"nixos\"; # Define your hostname.\n  # Pick only one of the below networking options.\n  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.\n  # networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.\n\n  # Set your time zone.\n  # time.timeZone = \"Europe/Amsterdam\";\n\n  # Configure network proxy if necessary\n  # networking.proxy.default = \"http://user:password\\@proxy:port/\";\n  # networking.proxy.noProxy = \"127.0.0.1,localhost,internal.domain\";\n\n  # Select internationalisation properties.\n  # i18n.defaultLocale = \"en_US.UTF-8\";\n  # console = {\n  #   font = \"Lat2-Terminus16\";\n  #   keyMap = \"us\";\n  #   useXkbConfig = true; # use xkbOptions in tty.\n  # };\n\n$xserverConfig\n\n$desktopConfiguration\n  # Configure keymap in X11\n  # services.xserver.layout = \"us\";\n  # services.xserver.xkbOptions = {\n  #   \"eurosign:e\";\n  #   \"caps:escape\" # map caps to escape.\n  # };\n\n  # Enable CUPS to print documents.\n  # services.printing.enable = true;\n\n  # Enable sound.\n  # sound.enable = true;\n  # hardware.pulseaudio.enable = true;\n\n  # Enable touchpad support (enabled default in most desktopManager).\n  # services.xserver.libinput.enable = true;\n\n  # Define a user account. Don't forget to set a password with ‘passwd’.\n  # users.users.jane = {\n  #   isNormalUser = true;\n  #   extraGroups = [ \"wheel\" ]; # Enable ‘sudo’ for the user.\n  # };\n\n  # List packages installed in system profile. To search, run:\n  # \\$ nix search wget\n  # environment.systemPackages = with pkgs; [\n  #   vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.\n  #   wget\n  #   firefox\n  # ];\n\n  # Some programs need SUID wrappers, can be configured further or are\n  # started in user sessions.\n  # programs.mtr.enable = true;\n  # programs.gnupg.agent = {\n  #   enable = true;\n  #   enableSSHSupport = true;\n  # };\n\n  # List services that you want to enable:\n\n  # Enable the OpenSSH daemon.\n  # services.openssh.enable = true;\n\n  # Open ports in the firewall.\n  # networking.firewall.allowedTCPPorts = [ ... ];\n  # networking.firewall.allowedUDPPorts = [ ... ];\n  # Or disable the firewall altogether.\n  # networking.firewall.enable = false;\n\n  # This value determines the NixOS release from which the default\n  # settings for stateful data, like file locations and database versions\n  # on your system were taken. It‘s perfectly fine and recommended to leave\n  # this value at the release version of the first install of this system.\n  # Before changing this value read the documentation for this option\n  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).\n  system.stateVersion = \"",
                position: (123, 1),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (215, 34),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "system",
                    position: (215, 41),
                   },
                   Raw {
                    content: "nixos",
                    position: (215, 48),
                   },
                   Raw {
                    content: "release",
                    position: (215, 54),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "\"; # Did you read the comment?\n\n}\n",
                position: (215, 62),
               },
              ],
              position: (122, 60),
             },
            ],
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "environment",
              position: (220, 5),
             },
             Raw {
              content: "systemPackages",
              position: (220, 17),
             },
            ],
           },
           to: BinaryOperation {
            operator: Concatenation,
            operands: [
             List {
              elements: [
               Variable {
                identifier: "nixos-build-vms",
                position: (221, 9),
               },
               Variable {
                identifier: "nixos-install",
                position: (222, 9),
               },
               Variable {
                identifier: "nixos-rebuild",
                position: (223, 9),
               },
               Variable {
                identifier: "nixos-generate-config",
                position: (224, 9),
               },
               Variable {
                identifier: "nixos-version",
                position: (225, 9),
               },
               Variable {
                identifier: "nixos-enter",
                position: (226, 9),
               },
              ],
              position: (221, 7),
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (227, 12),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "optional",
                  position: (227, 16),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Parentheses {
                expression: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  Variable {
                   identifier: "nixos-option",
                   position: (227, 26),
                  },
                  Variable {
                   identifier: "null",
                   position: (227, 42),
                  },
                 ],
                 position: (227, 39),
                },
                position: (227, 25),
               },
               Variable {
                identifier: "nixos-option",
                position: (227, 48),
               },
              ],
             },
            ],
            position: (227, 9),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "system",
              position: (229, 5),
             },
             Raw {
              content: "build",
              position: (229, 12),
             },
            ],
           },
           to: Map {
            bindings: [
             Inherit {
              from: None,
              attributes: [
               Raw {
                content: "nixos-install",
                position: (230, 15),
               },
               Raw {
                content: "nixos-generate-config",
                position: (230, 29),
               },
               Raw {
                content: "nixos-option",
                position: (230, 51),
               },
               Raw {
                content: "nixos-rebuild",
                position: (230, 64),
               },
               Raw {
                content: "nixos-enter",
                position: (230, 78),
               },
              ],
             },
            ],
            recursive: false,
            position: (229, 20),
           },
          },
         ],
         recursive: false,
         position: (120, 81),
        },
       ],
      },
     },
    ],
    recursive: false,
    position: (71, 1),
   },
   position: (8, 1),
  },
  position: (6, 1),
 },
 position: (4, 1),
}