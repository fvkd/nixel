---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "options",
    default: None,
   },
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (6, 16),
        },
        Raw {
         content: "prometheus",
         position: (6, 25),
        },
        Raw {
         content: "exporters",
         position: (6, 36),
        },
        Raw {
         content: "mail",
         position: (6, 46),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configurationFile",
        position: (8, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (8, 23),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (8, 28),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "prometheus-mail-exporter.conf",
          position: (8, 39),
         },
        ],
       },
       FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "builtins",
          position: (8, 71),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "toJSON",
            position: (8, 80),
           },
          ],
         },
         default: None,
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "mapAttrs'",
           position: (10, 5),
          },
          arguments: [
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "value",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: IfThenElse {
              predicate: BinaryOperation {
               operator: EqualTo,
               operands: [
                Variable {
                 identifier: "name",
                 position: (11, 10),
                },
                String {
                 parts: [
                  Raw {
                   content: "servers",
                   position: (11, 19),
                  },
                 ],
                },
               ],
              },
              then: FunctionApplication {
               function: Variable {
                identifier: "nameValuePair",
                position: (12, 12),
               },
               arguments: [
                FunctionApplication {
                 function: Variable {
                  identifier: "toLower",
                  position: (12, 27),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (12, 35),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (13, 11),
                 },
                 arguments: [
                  Function {
                   argument: Some(
                    "srv",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "mapAttrs'",
                     position: (13, 22),
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "n",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: Function {
                       argument: Some(
                        "v",
                       ),
                       arguments: FunctionArguments {
                        arguments: [],
                        ellipsis: false,
                       },
                       definition: FunctionApplication {
                        function: Variable {
                         identifier: "nameValuePair",
                         position: (13, 39),
                        },
                        arguments: [
                         FunctionApplication {
                          function: Variable {
                           identifier: "toLower",
                           position: (13, 54),
                          },
                          arguments: [
                           Variable {
                            identifier: "n",
                            position: (13, 62),
                           },
                          ],
                         },
                         Variable {
                          identifier: "v",
                          position: (13, 65),
                         },
                        ],
                       },
                      },
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "filterAttrs",
                       position: (14, 12),
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "n",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: Function {
                         argument: Some(
                          "v",
                         ),
                         arguments: FunctionArguments {
                          arguments: [],
                          ellipsis: false,
                         },
                         definition: UnaryOperation {
                          operator: Not,
                          operand: BinaryOperation {
                           operator: LogicalOr,
                           operands: [
                            BinaryOperation {
                             operator: EqualTo,
                             operands: [
                              Variable {
                               identifier: "n",
                               position: (14, 33),
                              },
                              String {
                               parts: [
                                Raw {
                                 content: "_module",
                                 position: (14, 39),
                                },
                               ],
                              },
                             ],
                            },
                            BinaryOperation {
                             operator: EqualTo,
                             operands: [
                              Variable {
                               identifier: "v",
                               position: (14, 51),
                              },
                              Variable {
                               identifier: "null",
                               position: (14, 56),
                              },
                             ],
                            },
                           ],
                          },
                         },
                        },
                       },
                       Variable {
                        identifier: "srv",
                        position: (14, 63),
                       },
                      ],
                     },
                    ],
                   },
                  },
                  Variable {
                   identifier: "value",
                   position: (15, 13),
                  },
                 ],
                },
               ],
              },
              else_: FunctionApplication {
               function: Variable {
                identifier: "nameValuePair",
                position: (16, 12),
               },
               arguments: [
                FunctionApplication {
                 function: Variable {
                  identifier: "toLower",
                  position: (16, 27),
                 },
                 arguments: [
                  Variable {
                   identifier: "name",
                   position: (16, 35),
                  },
                 ],
                },
                Variable {
                 identifier: "value",
                 position: (16, 41),
                },
               ],
              },
             },
            },
           },
           FunctionApplication {
            function: Variable {
             identifier: "filterAttrs",
             position: (17, 8),
            },
            arguments: [
             Function {
              argument: Some(
               "n",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "_",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: UnaryOperation {
                operator: Not,
                operand: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "n",
                   position: (17, 29),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "_module",
                     position: (17, 35),
                    },
                   ],
                  },
                 ],
                },
               },
              },
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (17, 46),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "configuration",
                 position: (17, 50),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "serverOptions",
        position: (20, 3),
       },
       Raw {
        content: "options",
        position: (20, 17),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "name",
           position: (21, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (21, 12),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (22, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (22, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (22, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (23, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Value for label 'configname' which will be added to all metrics.\n",
                position: (24, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "server",
           position: (27, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (27, 14),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (28, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (28, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (28, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (29, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Hostname of the server that should be probed.\n",
                position: (30, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "port",
           position: (33, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (33, 12),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (34, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (34, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "int",
                 position: (34, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (35, 7),
               },
              ],
             },
             Int {
              value: 587,
              position: (35, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (36, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Port to use for SMTP.\n",
                position: (37, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "from",
           position: (40, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (40, 12),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (41, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (41, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (41, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (42, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "exporteruser@domain.tld",
                position: (42, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (43, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Content of 'From' Header for probing mails.\n",
                position: (44, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "to",
           position: (47, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (47, 10),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (48, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (48, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (48, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (49, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "exporteruser@domain.tld",
                position: (49, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (50, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Content of 'To' Header for probing mails.\n",
                position: (51, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "detectionDir",
           position: (54, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (54, 20),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (55, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (55, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "path",
                 position: (55, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (56, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "/var/spool/mail/exporteruser/new",
                position: (56, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (57, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Directory in which new mails for the exporter user are placed.\nNote that this needs to exist when the exporter starts.\n",
                position: (58, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "login",
           position: (62, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (62, 13),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (63, 7),
               },
              ],
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (63, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "nullOr",
                  position: (63, 20),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (63, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (63, 33),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (64, 7),
               },
              ],
             },
             Variable {
              identifier: "null",
              position: (64, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (65, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "exporteruser@domain.tld",
                position: (65, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (66, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Username to use for SMTP authentication.\n",
                position: (67, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "passphrase",
           position: (70, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (70, 18),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (71, 7),
               },
              ],
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (71, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "nullOr",
                  position: (71, 20),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (71, 27),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "str",
                   position: (71, 33),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (72, 7),
               },
              ],
             },
             Variable {
              identifier: "null",
              position: (72, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (73, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Password to use for SMTP authentication.\n",
                position: (74, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "exporterOptions",
        position: (79, 3),
       },
       Raw {
        content: "options",
        position: (79, 19),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "monitoringInterval",
           position: (80, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (80, 26),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (81, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (81, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (81, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (82, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "10s",
                position: (82, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (83, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Time interval between two probe attempts.\n",
                position: (84, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "mailCheckTimeout",
           position: (87, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (87, 24),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (88, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (88, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "str",
                 position: (88, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (89, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Timeout until mails are considered \"didn't make it\".\n",
                position: (90, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "disableFileDeletion",
           position: (93, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (93, 27),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (94, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (94, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "bool",
                 position: (94, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (95, 7),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (95, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (96, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Disables the exporter's function to delete probing mails.\n",
                position: (97, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "servers",
           position: (100, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (100, 15),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (101, 7),
               },
              ],
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (101, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "listOf",
                  position: (101, 20),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (101, 28),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "submodule",
                    position: (101, 34),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "serverOptions",
                  position: (101, 44),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (102, 7),
               },
              ],
             },
             List {
              elements: [],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (103, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "literalExpression",
               position: (103, 17),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "[ {\n  name = \"testserver\";\n  server = \"smtp.domain.tld\";\n  port = 587;\n  from = \"exporteruser@domain.tld\";\n  to = \"exporteruser@domain.tld\";\n  detectionDir = \"/path/to/Maildir/new\";\n} ]\n",
                  position: (104, 1),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (113, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "List of servers that should be probed.\n\n<emphasis>Note:</emphasis> if your mailserver has <citerefentry>\n<refentrytitle>rspamd</refentrytitle><manvolnum>8</manvolnum></citerefentry> configured,\nit can happen that emails from this exporter are marked as spam.\n\nIt's possible to work around the issue with a config like this:\n<programlisting>\n{\n  <link linkend=\"opt-services.rspamd.locals._name_.text\">services.rspamd.locals.\"multimap.conf\".text</link> = ",
                position: (114, 1),
               },
               Raw {
                content: "''",
                position: (123, 119),
               },
               Raw {
                content: "\n    ALLOWLIST_PROMETHEUS {\n      filter = \"email:domain:tld\";\n      type = \"from\";\n      map = \"",
                position: (123, 122),
               },
               Raw {
                content: "$",
                position: (127, 22),
               },
               Raw {
                content: "{pkgs.writeText \"allowmap\" \"domain.tld\"}\";\n      score = -100.0;\n    }\n  ",
                position: (127, 25),
               },
               Raw {
                content: "''",
                position: (130, 11),
               },
               Raw {
                content: ";\n}\n</programlisting>\n",
                position: (130, 14),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "port",
         position: (138, 3),
        },
       ],
      },
      Int {
       value: 9225,
       position: (138, 10),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "extraOpts",
         position: (139, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "configFile",
            position: (140, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (140, 18),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (141, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (141, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (141, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (141, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "path",
                    position: (141, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (142, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (142, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (143, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Specify the mailexporter configuration file to use.\n",
                 position: (144, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "configuration",
            position: (147, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (147, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (148, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (148, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (148, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (148, 28),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "submodule",
                     position: (148, 34),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "exporterOptions",
                   position: (148, 44),
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (149, 7),
                },
               ],
              },
              Variable {
               identifier: "null",
               position: (149, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (150, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Specify the mailexporter configuration file to use.\n",
                 position: (151, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "telemetryPath",
            position: (154, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (154, 21),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (155, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (155, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (155, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (156, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "/metrics",
                 position: (156, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (157, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Path under which to expose metrics.\n",
                 position: (158, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "serviceOpts",
         position: (162, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "serviceConfig",
            position: (163, 5),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "DynamicUser",
               position: (164, 7),
              },
             ],
            },
            Variable {
             identifier: "false",
             position: (164, 21),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "ExecStart",
               position: (165, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "",
               position: (166, 1),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (166, 11),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "prometheus-mail-exporter",
                   position: (166, 16),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "/bin/mailexporter \\\n  --web.listen-address ",
               position: (166, 41),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (167, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listenAddress",
                   position: (167, 38),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: ":",
               position: (167, 52),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (167, 55),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (167, 64),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "port",
                     position: (167, 68),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: " \\\n  --web.telemetry-path ",
               position: (167, 73),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (168, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "telemetryPath",
                   position: (168, 38),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: " \\\n  --config.file ",
               position: (168, 52),
              },
              Expression {
               expression: IfThenElse {
                predicate: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (170, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "configuration",
                      position: (170, 20),
                     },
                    ],
                   },
                   default: None,
                  },
                  Variable {
                   identifier: "null",
                   position: (170, 37),
                  },
                 ],
                },
                then: Variable {
                 identifier: "configurationFile",
                 position: (170, 47),
                },
                else_: FunctionApplication {
                 function: Variable {
                  identifier: "escapeShellArg",
                  position: (170, 71),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (170, 86),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "configFile",
                      position: (170, 90),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               },
              },
              Raw {
               content: " \\\n  ",
               position: (171, 12),
              },
              Expression {
               expression: FunctionApplication {
                function: Variable {
                 identifier: "concatStringsSep",
                 position: (172, 13),
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: " \\\n  ",
                    position: (172, 31),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (172, 40),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "extraFlags",
                     position: (172, 44),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              },
              Raw {
               content: "\n",
               position: (172, 55),
              },
             ],
            },
           ),
          ],
          recursive: false,
         },
        ),
       ],
       recursive: false,
      },
     ),
    ],
    recursive: false,
   },
  },
 },
}