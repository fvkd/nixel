---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "freeformType",
       position: (2, 3),
      },
     ],
    },
    to: With {
     expression: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (2, 23),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "types",
         position: (2, 27),
        },
       ],
      },
      default: None,
     },
     target: FunctionApplication {
      function: Variable {
       identifier: "lazyAttrsOf",
       position: (2, 34),
      },
      arguments: [
       Parentheses {
        expression: FunctionApplication {
         function: Variable {
          identifier: "either",
          position: (2, 47),
         },
         arguments: [
          Variable {
           identifier: "str",
           position: (2, 54),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "lazyAttrsOf",
             position: (2, 59),
            },
            arguments: [
             Variable {
              identifier: "str",
              position: (2, 71),
             },
            ],
           },
           position: (2, 58),
          },
         ],
        },
        position: (2, 46),
       },
      ],
     },
     position: (2, 18),
    },
   },
  ],
  recursive: false,
  position: (1, 15),
 },
 position: (1, 1),
}