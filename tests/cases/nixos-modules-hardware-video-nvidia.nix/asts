---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (5, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nvidia_x11",
        position: (8, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "drivers",
           position: (9, 5),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "config",
          position: (9, 15),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (9, 22),
           },
           Raw {
            content: "xserver",
            position: (9, 31),
           },
           Raw {
            content: "videoDrivers",
            position: (9, 39),
           },
          ],
         },
         default: None,
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "isDeprecated",
           position: (10, 5),
          },
         ],
        },
        Function {
         argument: Some(
          "str",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "hasPrefix",
             position: (10, 26),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "nvidia",
               },
              ],
              position: (10, 36),
             },
             Variable {
              identifier: "str",
              position: (10, 45),
             },
            ],
           },
           BinaryOperation {
            operator: NotEqualTo,
            operands: [
             Variable {
              identifier: "str",
              position: (10, 54),
             },
             String {
              parts: [
               Raw {
                content: "nvidia",
               },
              ],
              position: (10, 61),
             },
            ],
            position: (10, 58),
           },
          ],
          position: (10, 50),
         },
         position: (10, 20),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "hasDeprecated",
           position: (11, 5),
          },
         ],
        },
        Function {
         argument: Some(
          "drivers",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "any",
           position: (11, 30),
          },
          arguments: [
           Variable {
            identifier: "isDeprecated",
            position: (11, 34),
           },
           Variable {
            identifier: "drivers",
            position: (11, 47),
           },
          ],
         },
         position: (11, 21),
        },
       ),
      ],
      target: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "hasDeprecated",
         position: (12, 10),
        },
        arguments: [
         Variable {
          identifier: "drivers",
          position: (12, 24),
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "throw",
         position: (13, 5),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "Selecting an nvidia driver has been modified for NixOS 19.03. The version is now set using `hardware.nvidia.package`.\n",
           },
          ],
          position: (13, 11),
         },
        ],
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "elem",
          position: (16, 12),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "nvidia",
            },
           ],
           position: (16, 17),
          },
          Variable {
           identifier: "drivers",
           position: (16, 26),
          },
         ],
        },
        then: PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (16, 40),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "package",
            position: (16, 44),
           },
          ],
         },
         default: None,
        },
        else_: Variable {
         identifier: "null",
         position: (16, 57),
        },
        position: (16, 8),
       },
       position: (12, 6),
      },
      position: (8, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "enabled",
        position: (18, 3),
       },
      ],
     },
     BinaryOperation {
      operator: NotEqualTo,
      operands: [
       Variable {
        identifier: "nvidia_x11",
        position: (18, 13),
       },
       Variable {
        identifier: "null",
        position: (18, 27),
       },
      ],
      position: (18, 24),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (19, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (19, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "hardware",
         position: (19, 16),
        },
        Raw {
         content: "nvidia",
         position: (19, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "pCfg",
        position: (21, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (21, 10),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "prime",
         position: (21, 14),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "syncCfg",
        position: (22, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "pCfg",
       position: (22, 13),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "sync",
         position: (22, 18),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "offloadCfg",
        position: (23, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "pCfg",
       position: (23, 16),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "offload",
         position: (23, 21),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "primeEnabled",
        position: (24, 3),
       },
      ],
     },
     BinaryOperation {
      operator: LogicalOr,
      operands: [
       PropertyAccess {
        expression: Variable {
         identifier: "syncCfg",
         position: (24, 18),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "enable",
           position: (24, 26),
          },
         ],
        },
        default: None,
       },
       PropertyAccess {
        expression: Variable {
         identifier: "offloadCfg",
         position: (24, 36),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "enable",
           position: (24, 47),
          },
         ],
        },
        default: None,
       },
      ],
      position: (24, 33),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nvidiaPersistencedEnabled",
        position: (25, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (25, 32),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "nvidiaPersistenced",
         position: (25, 36),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nvidiaSettings",
        position: (26, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "cfg",
       position: (26, 20),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "nvidiaSettings",
         position: (26, 24),
        },
       ],
      },
      default: None,
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "imports",
         position: (30, 3),
        },
       ],
      },
      List {
       elements: [
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (32, 8),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (32, 32),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (32, 43),
            },
            String {
             parts: [
              Raw {
               content: "optimus_prime",
              },
             ],
             position: (32, 52),
            },
            String {
             parts: [
              Raw {
               content: "enable",
              },
             ],
             position: (32, 68),
            },
           ],
           position: (32, 30),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (32, 81),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (32, 92),
            },
            String {
             parts: [
              Raw {
               content: "prime",
              },
             ],
             position: (32, 101),
            },
            String {
             parts: [
              Raw {
               content: "sync",
              },
             ],
             position: (32, 109),
            },
            String {
             parts: [
              Raw {
               content: "enable",
              },
             ],
             position: (32, 116),
            },
           ],
           position: (32, 79),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (33, 8),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (33, 32),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (33, 43),
            },
            String {
             parts: [
              Raw {
               content: "optimus_prime",
              },
             ],
             position: (33, 52),
            },
            String {
             parts: [
              Raw {
               content: "allowExternalGpu",
              },
             ],
             position: (33, 68),
            },
           ],
           position: (33, 30),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (33, 91),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (33, 102),
            },
            String {
             parts: [
              Raw {
               content: "prime",
              },
             ],
             position: (33, 111),
            },
            String {
             parts: [
              Raw {
               content: "sync",
              },
             ],
             position: (33, 119),
            },
            String {
             parts: [
              Raw {
               content: "allowExternalGpu",
              },
             ],
             position: (33, 126),
            },
           ],
           position: (33, 89),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (34, 8),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (34, 32),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (34, 43),
            },
            String {
             parts: [
              Raw {
               content: "optimus_prime",
              },
             ],
             position: (34, 52),
            },
            String {
             parts: [
              Raw {
               content: "nvidiaBusId",
              },
             ],
             position: (34, 68),
            },
           ],
           position: (34, 30),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (34, 86),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (34, 97),
            },
            String {
             parts: [
              Raw {
               content: "prime",
              },
             ],
             position: (34, 106),
            },
            String {
             parts: [
              Raw {
               content: "nvidiaBusId",
              },
             ],
             position: (34, 114),
            },
           ],
           position: (34, 84),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRenamedOptionModule",
          position: (35, 8),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (35, 32),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (35, 43),
            },
            String {
             parts: [
              Raw {
               content: "optimus_prime",
              },
             ],
             position: (35, 52),
            },
            String {
             parts: [
              Raw {
               content: "intelBusId",
              },
             ],
             position: (35, 68),
            },
           ],
           position: (35, 30),
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "hardware",
              },
             ],
             position: (35, 85),
            },
            String {
             parts: [
              Raw {
               content: "nvidia",
              },
             ],
             position: (35, 96),
            },
            String {
             parts: [
              Raw {
               content: "prime",
              },
             ],
             position: (35, 105),
            },
            String {
             parts: [
              Raw {
               content: "intelBusId",
              },
             ],
             position: (35, 113),
            },
           ],
           position: (35, 83),
          },
         ],
        },
       ],
       position: (31, 5),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (38, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (39, 5),
           },
           Raw {
            content: "nvidia",
            position: (39, 14),
           },
           Raw {
            content: "powerManagement",
            position: (39, 21),
           },
           Raw {
            content: "enable",
            position: (39, 37),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (39, 46),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (40, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (40, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (40, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (41, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (41, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (42, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Experimental power management through systemd. For more information, see\nthe NVIDIA docs, on Chapter 21. Configuring Power Management Support.\n",
                },
               ],
               position: (42, 21),
              },
             ),
            ],
            recursive: false,
            position: (39, 55),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (48, 5),
           },
           Raw {
            content: "nvidia",
            position: (48, 14),
           },
           Raw {
            content: "powerManagement",
            position: (48, 21),
           },
           Raw {
            content: "finegrained",
            position: (48, 37),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (48, 51),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (49, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (49, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (49, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (50, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (50, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (51, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Experimental power management of PRIME offload. For more information, see\nthe NVIDIA docs, chapter 22. PCI-Express runtime power management.\n",
                },
               ],
               position: (51, 21),
              },
             ),
            ],
            recursive: false,
            position: (48, 60),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (57, 5),
           },
           Raw {
            content: "nvidia",
            position: (57, 14),
           },
           Raw {
            content: "modesetting",
            position: (57, 21),
           },
           Raw {
            content: "enable",
            position: (57, 33),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (57, 42),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (58, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (58, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (58, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (59, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (59, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (60, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable kernel modesetting when using the NVIDIA proprietary driver.\n\nEnabling this fixes screen tearing when using Optimus via PRIME (see\n<option>hardware.nvidia.prime.sync.enable</option>. This is not enabled\nby default because it is not officially supported by NVIDIA and would not\nwork with SLI.\n",
                },
               ],
               position: (60, 21),
              },
             ),
            ],
            recursive: false,
            position: (57, 51),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (70, 5),
           },
           Raw {
            content: "nvidia",
            position: (70, 14),
           },
           Raw {
            content: "prime",
            position: (70, 21),
           },
           Raw {
            content: "nvidiaBusId",
            position: (70, 27),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (70, 41),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (71, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (71, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (71, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (72, 7),
                },
               ],
              },
              String {
               parts: [],
               position: (72, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (73, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "PCI:1:0:0",
                },
               ],
               position: (73, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (74, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Bus ID of the NVIDIA GPU. You can find it using lspci; for example if lspci\nshows the NVIDIA GPU at \"01:00.0\", set this option to \"PCI:1:0:0\".\n",
                },
               ],
               position: (74, 21),
              },
             ),
            ],
            recursive: false,
            position: (70, 50),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (80, 5),
           },
           Raw {
            content: "nvidia",
            position: (80, 14),
           },
           Raw {
            content: "prime",
            position: (80, 21),
           },
           Raw {
            content: "intelBusId",
            position: (80, 27),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (80, 40),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (81, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (81, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (81, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (82, 7),
                },
               ],
              },
              String {
               parts: [],
               position: (82, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (83, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "PCI:0:2:0",
                },
               ],
               position: (83, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (84, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Bus ID of the Intel GPU. You can find it using lspci; for example if lspci\nshows the Intel GPU at \"00:02.0\", set this option to \"PCI:0:2:0\".\n",
                },
               ],
               position: (84, 21),
              },
             ),
            ],
            recursive: false,
            position: (80, 49),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (90, 5),
           },
           Raw {
            content: "nvidia",
            position: (90, 14),
           },
           Raw {
            content: "prime",
            position: (90, 21),
           },
           Raw {
            content: "amdgpuBusId",
            position: (90, 27),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (90, 41),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (91, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (91, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "str",
                  position: (91, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (92, 7),
                },
               ],
              },
              String {
               parts: [],
               position: (92, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (93, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "PCI:4:0:0",
                },
               ],
               position: (93, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (94, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Bus ID of the AMD APU. You can find it using lspci; for example if lspci\nshows the AMD APU at \"04:00.0\", set this option to \"PCI:4:0:0\".\n",
                },
               ],
               position: (94, 21),
              },
             ),
            ],
            recursive: false,
            position: (90, 50),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (100, 5),
           },
           Raw {
            content: "nvidia",
            position: (100, 14),
           },
           Raw {
            content: "prime",
            position: (100, 21),
           },
           Raw {
            content: "sync",
            position: (100, 27),
           },
           Raw {
            content: "enable",
            position: (100, 32),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (100, 41),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (101, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (101, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (101, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (102, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (102, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (103, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable NVIDIA Optimus support using the NVIDIA proprietary driver via PRIME.\nIf enabled, the NVIDIA GPU will be always on and used for all rendering,\nwhile enabling output to displays attached only to the integrated Intel GPU\nwithout a multiplexer.\n\nNote that this option only has any effect if the \"nvidia\" driver is specified\nin <option>services.xserver.videoDrivers</option>, and it should preferably\nbe the only driver there.\n\nIf this is enabled, then the bus IDs of the NVIDIA and Intel GPUs have to be\nspecified (<option>hardware.nvidia.prime.nvidiaBusId</option> and\n<option>hardware.nvidia.prime.intelBusId</option>).\n\nIf you enable this, you may want to also enable kernel modesetting for the\nNVIDIA driver (<option>hardware.nvidia.modesetting.enable</option>) in order\nto prevent tearing.\n\nNote that this configuration will only be successful when a display manager\nfor which the <option>services.xserver.displayManager.setupCommands</option>\noption is supported is used.\n",
                },
               ],
               position: (103, 21),
              },
             ),
            ],
            recursive: false,
            position: (100, 50),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (127, 5),
           },
           Raw {
            content: "nvidia",
            position: (127, 14),
           },
           Raw {
            content: "prime",
            position: (127, 21),
           },
           Raw {
            content: "sync",
            position: (127, 27),
           },
           Raw {
            content: "allowExternalGpu",
            position: (127, 32),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (127, 51),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (128, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (128, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (128, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (129, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (129, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (130, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Configure X to allow external NVIDIA GPUs when using optimus.\n",
                },
               ],
               position: (130, 21),
              },
             ),
            ],
            recursive: false,
            position: (127, 60),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (135, 5),
           },
           Raw {
            content: "nvidia",
            position: (135, 14),
           },
           Raw {
            content: "prime",
            position: (135, 21),
           },
           Raw {
            content: "offload",
            position: (135, 27),
           },
           Raw {
            content: "enable",
            position: (135, 35),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (135, 44),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (136, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (136, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (136, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (137, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (137, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (138, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable render offload support using the NVIDIA proprietary driver via PRIME.\n\nIf this is enabled, then the bus IDs of the NVIDIA and Intel GPUs have to be\nspecified (<option>hardware.nvidia.prime.nvidiaBusId</option> and\n<option>hardware.nvidia.prime.intelBusId</option>).\n",
                },
               ],
               position: (138, 21),
              },
             ),
            ],
            recursive: false,
            position: (135, 53),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (147, 5),
           },
           Raw {
            content: "nvidia",
            position: (147, 14),
           },
           Raw {
            content: "nvidiaSettings",
            position: (147, 21),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (147, 38),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (148, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (148, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (149, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (149, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (149, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (150, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Whether to add nvidia-settings, NVIDIA's GUI configuration tool, to\nsystemPackages.\n",
                },
               ],
               position: (150, 21),
              },
             ),
            ],
            recursive: false,
            position: (147, 47),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (156, 5),
           },
           Raw {
            content: "nvidia",
            position: (156, 14),
           },
           Raw {
            content: "nvidiaPersistenced",
            position: (156, 21),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (156, 42),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (157, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (157, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (158, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (158, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (158, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (159, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Update for NVIDA GPU headless mode, i.e. nvidia-persistenced. It ensures all\nGPUs stay awake even during headless mode.\n",
                },
               ],
               position: (159, 21),
              },
             ),
            ],
            recursive: false,
            position: (156, 51),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (165, 5),
           },
           Raw {
            content: "nvidia",
            position: (165, 14),
           },
           Raw {
            content: "package",
            position: (165, 21),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (165, 31),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "mkOption",
              position: (165, 35),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (166, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (166, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "types",
                  position: (166, 18),
                 },
                 Raw {
                  content: "package",
                  position: (166, 24),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (167, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (167, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "boot",
                  position: (167, 24),
                 },
                 Raw {
                  content: "kernelPackages",
                  position: (167, 29),
                 },
                 Raw {
                  content: "nvidiaPackages",
                  position: (167, 44),
                 },
                 Raw {
                  content: "stable",
                  position: (167, 59),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (168, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (168, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "config.boot.kernelPackages.nvidiaPackages.stable",
                  },
                 ],
                 position: (168, 39),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (169, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The NVIDIA X11 derivation to use.\n",
                },
               ],
               position: (169, 21),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (172, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (172, 17),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "config.boot.kernelPackages.nvidiaPackages.legacy_340",
                  },
                 ],
                 position: (172, 35),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (165, 44),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (38, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (176, 3),
        },
       ],
      },
      LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "igpuDriver",
            position: (177, 7),
           },
          ],
         },
         IfThenElse {
          predicate: BinaryOperation {
           operator: NotEqualTo,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "pCfg",
              position: (177, 23),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "intelBusId",
                position: (177, 28),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [],
             position: (177, 42),
            },
           ],
           position: (177, 39),
          },
          then: String {
           parts: [
            Raw {
             content: "modesetting",
            },
           ],
           position: (177, 50),
          },
          else_: String {
           parts: [
            Raw {
             content: "amdgpu",
            },
           ],
           position: (177, 69),
          },
          position: (177, 20),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "igpuBusId",
            position: (178, 7),
           },
          ],
         },
         IfThenElse {
          predicate: BinaryOperation {
           operator: NotEqualTo,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "pCfg",
              position: (178, 22),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "intelBusId",
                position: (178, 27),
               },
              ],
             },
             default: None,
            },
            String {
             parts: [],
             position: (178, 41),
            },
           ],
           position: (178, 38),
          },
          then: PropertyAccess {
           expression: Variable {
            identifier: "pCfg",
            position: (178, 49),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "intelBusId",
              position: (178, 54),
             },
            ],
           },
           default: None,
          },
          else_: PropertyAccess {
           expression: Variable {
            identifier: "pCfg",
            position: (178, 70),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "amdgpuBusId",
              position: (178, 75),
             },
            ],
           },
           default: None,
          },
          position: (178, 19),
         },
        ),
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "mkIf",
         position: (179, 6),
        },
        arguments: [
         Variable {
          identifier: "enabled",
          position: (179, 11),
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "assertions",
               position: (180, 5),
              },
             ],
            },
            List {
             elements: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (182, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Implication,
                  operands: [
                   Variable {
                    identifier: "primeEnabled",
                    position: (182, 21),
                   },
                   BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "pCfg",
                         position: (182, 37),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "intelBusId",
                           position: (182, 42),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [],
                        position: (182, 56),
                       },
                      ],
                      position: (182, 53),
                     },
                     BinaryOperation {
                      operator: EqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "pCfg",
                         position: (182, 62),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "amdgpuBusId",
                           position: (182, 67),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [],
                        position: (182, 82),
                       },
                      ],
                      position: (182, 79),
                     },
                    ],
                    position: (182, 59),
                   },
                  ],
                  position: (182, 34),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (183, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "You cannot configure both an Intel iGPU and an AMD APU. Pick the one corresponding to your processor.\n",
                   },
                  ],
                  position: (183, 19),
                 },
                ),
               ],
               recursive: false,
               position: (181, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (189, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Implication,
                  operands: [
                   Variable {
                    identifier: "primeEnabled",
                    position: (189, 21),
                   },
                   BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     BinaryOperation {
                      operator: NotEqualTo,
                      operands: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "pCfg",
                         position: (189, 37),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "nvidiaBusId",
                           position: (189, 42),
                          },
                         ],
                        },
                        default: None,
                       },
                       String {
                        parts: [],
                        position: (189, 57),
                       },
                      ],
                      position: (189, 54),
                     },
                     BinaryOperation {
                      operator: LogicalOr,
                      operands: [
                       BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "pCfg",
                           position: (189, 64),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "intelBusId",
                             position: (189, 69),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [],
                          position: (189, 83),
                         },
                        ],
                        position: (189, 80),
                       },
                       BinaryOperation {
                        operator: NotEqualTo,
                        operands: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "pCfg",
                           position: (189, 89),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "amdgpuBusId",
                             position: (189, 94),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [],
                          position: (189, 109),
                         },
                        ],
                        position: (189, 106),
                       },
                      ],
                      position: (189, 86),
                     },
                    ],
                    position: (189, 60),
                   },
                  ],
                  position: (189, 34),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (190, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "When NVIDIA PRIME is enabled, the GPU bus IDs must configured.\n",
                   },
                  ],
                  position: (190, 19),
                 },
                ),
               ],
               recursive: false,
               position: (188, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (196, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Implication,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "offloadCfg",
                     position: (196, 21),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "enable",
                       position: (196, 32),
                      },
                     ],
                    },
                    default: None,
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "versionAtLeast",
                     position: (196, 42),
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "nvidia_x11",
                       position: (196, 57),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "version",
                         position: (196, 68),
                        },
                       ],
                      },
                      default: None,
                     },
                     String {
                      parts: [
                       Raw {
                        content: "435.21",
                       },
                      ],
                      position: (196, 76),
                     },
                    ],
                   },
                  ],
                  position: (196, 39),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (197, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "NVIDIA PRIME render offload is currently only supported on versions >= 435.21.",
                   },
                  ],
                  position: (197, 19),
                 },
                ),
               ],
               recursive: false,
               position: (195, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (201, 9),
                   },
                  ],
                 },
                 UnaryOperation {
                  operator: Not,
                  operand: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "syncCfg",
                      position: (201, 23),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "enable",
                        position: (201, 31),
                       },
                      ],
                     },
                     default: None,
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "offloadCfg",
                      position: (201, 41),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "enable",
                        position: (201, 52),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (201, 38),
                  },
                  position: (201, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (202, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Only one NVIDIA PRIME solution may be used at a time.",
                   },
                  ],
                  position: (202, 19),
                 },
                ),
               ],
               recursive: false,
               position: (200, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (206, 9),
                   },
                  ],
                 },
                 UnaryOperation {
                  operator: Not,
                  operand: BinaryOperation {
                   operator: LogicalAnd,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "syncCfg",
                      position: (206, 23),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "enable",
                        position: (206, 31),
                       },
                      ],
                     },
                     default: None,
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (206, 41),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "powerManagement",
                        position: (206, 45),
                       },
                       Raw {
                        content: "finegrained",
                        position: (206, 61),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (206, 38),
                  },
                  position: (206, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (207, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Sync precludes powering down the NVIDIA GPU.",
                   },
                  ],
                  position: (207, 19),
                 },
                ),
               ],
               recursive: false,
               position: (205, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (211, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Implication,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (211, 21),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "powerManagement",
                       position: (211, 25),
                      },
                      Raw {
                       content: "finegrained",
                       position: (211, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                   PropertyAccess {
                    expression: Variable {
                     identifier: "offloadCfg",
                     position: (211, 56),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "enable",
                       position: (211, 67),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                  position: (211, 53),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (212, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Fine-grained power management requires offload to be enabled.",
                   },
                  ],
                  position: (212, 19),
                 },
                ),
               ],
               recursive: false,
               position: (210, 7),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (216, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Implication,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (216, 21),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "powerManagement",
                       position: (216, 25),
                      },
                      Raw {
                       content: "enable",
                       position: (216, 41),
                      },
                     ],
                    },
                    default: None,
                   },
                   BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (217, 11),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "pathExists",
                          position: (217, 20),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       BinaryOperation {
                        operator: Addition,
                        operands: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (217, 32),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "package",
                             position: (217, 36),
                            },
                            Raw {
                             content: "out",
                             position: (217, 44),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "/bin/nvidia-sleep.sh",
                           },
                          ],
                          position: (217, 50),
                         },
                        ],
                        position: (217, 48),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (218, 11),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "pathExists",
                          position: (218, 20),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       BinaryOperation {
                        operator: Addition,
                        operands: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (218, 32),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "package",
                             position: (218, 36),
                            },
                            Raw {
                             content: "out",
                             position: (218, 44),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "/lib/systemd/system-sleep/nvidia",
                           },
                          ],
                          position: (218, 50),
                         },
                        ],
                        position: (218, 48),
                       },
                      ],
                     },
                    ],
                    position: (217, 74),
                   },
                  ],
                  position: (216, 48),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (220, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Required files for driver based power management don't exist.",
                   },
                  ],
                  position: (220, 19),
                 },
                ),
               ],
               recursive: false,
               position: (215, 7),
              },
             ],
             position: (180, 18),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (238, 5),
              },
              Raw {
               content: "xserver",
               position: (238, 14),
              },
              Raw {
               content: "useGlamor",
               position: (238, 22),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkDefault",
              position: (238, 34),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "offloadCfg",
                position: (238, 44),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "enable",
                  position: (238, 55),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (240, 5),
              },
              Raw {
               content: "xserver",
               position: (240, 14),
              },
              Raw {
               content: "drivers",
               position: (240, 22),
              },
             ],
            },
            LetIn {
             bindings: [],
             target: BinaryOperation {
              operator: Concatenation,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "optional",
                 position: (241, 8),
                },
                arguments: [
                 Variable {
                  identifier: "primeEnabled",
                  position: (241, 17),
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "name",
                       position: (242, 7),
                      },
                     ],
                    },
                    Variable {
                     identifier: "igpuDriver",
                     position: (242, 14),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "display",
                       position: (243, 7),
                      },
                     ],
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "offloadCfg",
                      position: (243, 17),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "enable",
                        position: (243, 28),
                       },
                      ],
                     },
                     default: None,
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "modules",
                       position: (244, 7),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "optional",
                      position: (244, 17),
                     },
                     arguments: [
                      BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        Variable {
                         identifier: "igpuDriver",
                         position: (244, 27),
                        },
                        String {
                         parts: [
                          Raw {
                           content: "amdgpu",
                          },
                         ],
                         position: (244, 41),
                        },
                       ],
                       position: (244, 38),
                      },
                      List {
                       elements: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "pkgs",
                          position: (244, 53),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "xorg",
                            position: (244, 58),
                           },
                           Raw {
                            content: "xf86videoamdgpu",
                            position: (244, 63),
                           },
                          ],
                         },
                         default: None,
                        },
                       ],
                       position: (244, 51),
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "deviceSection",
                       position: (245, 7),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "BusID \"",
                      },
                      Expression {
                       expression: Variable {
                        identifier: "igpuBusId",
                        position: (246, 18),
                       },
                      },
                      Raw {
                       content: "\"\n",
                      },
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "optionalString",
                         position: (247, 11),
                        },
                        arguments: [
                         BinaryOperation {
                          operator: LogicalAnd,
                          operands: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "syncCfg",
                             position: (247, 27),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "enable",
                               position: (247, 35),
                              },
                             ],
                            },
                            default: None,
                           },
                           BinaryOperation {
                            operator: NotEqualTo,
                            operands: [
                             Variable {
                              identifier: "igpuDriver",
                              position: (247, 45),
                             },
                             String {
                              parts: [
                               Raw {
                                content: "amdgpu",
                               },
                              ],
                              position: (247, 59),
                             },
                            ],
                            position: (247, 56),
                           },
                          ],
                          position: (247, 42),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Option \"AccelMethod\" \"none\"",
                           },
                          ],
                          position: (247, 69),
                         },
                        ],
                       },
                      },
                      Raw {
                       content: "\n",
                      },
                     ],
                     position: (245, 23),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (241, 30),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "singleton",
                 position: (249, 10),
                },
                arguments: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "name",
                       position: (250, 7),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "nvidia",
                      },
                     ],
                     position: (250, 14),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "modules",
                       position: (251, 7),
                      },
                     ],
                    },
                    List {
                     elements: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "nvidia_x11",
                        position: (251, 19),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "bin",
                          position: (251, 30),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                     position: (251, 17),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "display",
                       position: (252, 7),
                      },
                     ],
                    },
                    UnaryOperation {
                     operator: Not,
                     operand: PropertyAccess {
                      expression: Variable {
                       identifier: "offloadCfg",
                       position: (252, 18),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "enable",
                         position: (252, 29),
                        },
                       ],
                      },
                      default: None,
                     },
                     position: (252, 17),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "deviceSection",
                       position: (253, 7),
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "optionalString",
                      position: (253, 23),
                     },
                     arguments: [
                      Variable {
                       identifier: "primeEnabled",
                       position: (253, 38),
                      },
                      String {
                       parts: [
                        Raw {
                         content: "BusID \"",
                        },
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "pCfg",
                           position: (255, 20),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "nvidiaBusId",
                             position: (255, 25),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: "\"\n",
                        },
                        Expression {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "optionalString",
                           position: (256, 13),
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "syncCfg",
                             position: (256, 28),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "allowExternalGpu",
                               position: (256, 36),
                              },
                             ],
                            },
                            default: None,
                           },
                           String {
                            parts: [
                             Raw {
                              content: "Option \"AllowExternalGpus\"",
                             },
                            ],
                            position: (256, 53),
                           },
                          ],
                         },
                        },
                        Raw {
                         content: "\n",
                        },
                        Expression {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "optionalString",
                           position: (257, 13),
                          },
                          arguments: [
                           PropertyAccess {
                            expression: Variable {
                             identifier: "cfg",
                             position: (257, 28),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "powerManagement",
                               position: (257, 32),
                              },
                              Raw {
                               content: "finegrained",
                               position: (257, 48),
                              },
                             ],
                            },
                            default: None,
                           },
                           String {
                            parts: [
                             Raw {
                              content: "Option \"NVreg_DynamicPowerManagement=0x02\"",
                             },
                            ],
                            position: (257, 60),
                           },
                          ],
                         },
                        },
                        Raw {
                         content: "\n",
                        },
                       ],
                       position: (254, 9),
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "screenSection",
                       position: (259, 7),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "Option \"RandRRotation\" \"on\"\n",
                      },
                      Expression {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "optionalString",
                         position: (262, 13),
                        },
                        arguments: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "syncCfg",
                           position: (262, 28),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "enable",
                             position: (262, 36),
                            },
                           ],
                          },
                          default: None,
                         },
                         String {
                          parts: [
                           Raw {
                            content: "Option \"AllowEmptyInitialConfiguration\"",
                           },
                          ],
                          position: (262, 43),
                         },
                        ],
                       },
                      },
                      Raw {
                       content: "\n",
                      },
                     ],
                     position: (260, 9),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (249, 20),
                 },
                ],
               },
              ],
              position: (249, 7),
             },
             position: (240, 32),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (266, 5),
              },
              Raw {
               content: "xserver",
               position: (266, 14),
              },
              Raw {
               content: "serverLayoutSection",
               position: (266, 22),
              },
             ],
            },
            BinaryOperation {
             operator: Addition,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (266, 44),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "syncCfg",
                  position: (266, 59),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enable",
                    position: (266, 67),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "Inactive \"Device-",
                  },
                  Expression {
                   expression: Variable {
                    identifier: "igpuDriver",
                    position: (267, 26),
                   },
                  },
                  Raw {
                   content: "[0]\"\n",
                  },
                 ],
                 position: (266, 74),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (268, 10),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "offloadCfg",
                  position: (268, 25),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "enable",
                    position: (268, 36),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "Option \"AllowNVIDIAGPUScreens\"\n",
                  },
                 ],
                 position: (268, 43),
                },
               ],
              },
             ],
             position: (268, 8),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (272, 5),
              },
              Raw {
               content: "xserver",
               position: (272, 14),
              },
              Raw {
               content: "displayManager",
               position: (272, 22),
              },
              Raw {
               content: "setupCommands",
               position: (272, 37),
              },
             ],
            },
            LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "sinkGpuProviderName",
                  position: (273, 7),
                 },
                ],
               },
               IfThenElse {
                predicate: BinaryOperation {
                 operator: EqualTo,
                 operands: [
                  Variable {
                   identifier: "igpuDriver",
                   position: (273, 32),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "amdgpu",
                    },
                   ],
                   position: (273, 46),
                  },
                 ],
                 position: (273, 43),
                },
                then: String {
                 parts: [
                  Raw {
                   content: "`",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (275, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "xorg",
                       position: (275, 18),
                      },
                      Raw {
                       content: "xrandr",
                       position: (275, 23),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/xrandr --listproviders | ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (275, 62),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "gnugrep",
                       position: (275, 67),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/grep -i AMD | ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (275, 96),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "gnused",
                       position: (275, 101),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/sed -n 's/^.*name://p'`",
                  },
                 ],
                 position: (275, 9),
                },
                else_: Variable {
                 identifier: "igpuDriver",
                 position: (277, 9),
                },
                position: (273, 29),
               },
              ),
             ],
             target: FunctionApplication {
              function: Variable {
               identifier: "optionalString",
               position: (278, 8),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "syncCfg",
                 position: (278, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "enable",
                   position: (278, 31),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "# Added by nvidia configuration module for Optimus/PRIME.\n",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (280, 9),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "xorg",
                      position: (280, 14),
                     },
                     Raw {
                      content: "xrandr",
                      position: (280, 19),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/bin/xrandr --setprovideroutputsource \"",
                 },
                 Expression {
                  expression: Variable {
                   identifier: "sinkGpuProviderName",
                   position: (280, 67),
                  },
                 },
                 Raw {
                  content: "\" NVIDIA-0\n",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (281, 9),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "xorg",
                      position: (281, 14),
                     },
                     Raw {
                      content: "xrandr",
                      position: (281, 19),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/bin/xrandr --auto\n",
                 },
                ],
                position: (278, 38),
               },
              ],
             },
             position: (272, 53),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "environment",
               position: (284, 5),
              },
              Raw {
               content: "etc",
               position: (284, 17),
              },
              Expression {
               expression: String {
                parts: [
                 Raw {
                  content: "nvidia/nvidia-application-profiles-rc",
                 },
                ],
                position: (284, 21),
               },
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkIf",
              position: (284, 63),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "nvidia_x11",
                position: (284, 68),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "useProfiles",
                  position: (284, 79),
                 },
                ],
               },
               default: None,
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "source",
                    position: (285, 7),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Expression {
                    expression: PropertyAccess {
                     expression: Variable {
                      identifier: "nvidia_x11",
                      position: (285, 19),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "bin",
                        position: (285, 30),
                       },
                      ],
                     },
                     default: None,
                    },
                   },
                   Raw {
                    content: "/share/nvidia/nvidia-application-profiles-rc",
                   },
                  ],
                  position: (285, 16),
                 },
                ),
               ],
               recursive: false,
               position: (284, 91),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "environment",
               position: (289, 5),
              },
              Raw {
               content: "etc",
               position: (289, 17),
              },
              Expression {
               expression: String {
                parts: [
                 Raw {
                  content: "egl/egl_external_platform.d",
                 },
                ],
                position: (289, 21),
               },
              },
              Raw {
               content: "source",
               position: (289, 51),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "/run/opengl-driver/share/egl/egl_external_platform.d/",
              },
             ],
             position: (290, 7),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "hardware",
               position: (292, 5),
              },
              Raw {
               content: "opengl",
               position: (292, 14),
              },
              Raw {
               content: "extraPackages",
               position: (292, 21),
              },
             ],
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "nvidia_x11",
                position: (293, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "out",
                  position: (293, 18),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (294, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "nvidia-vaapi-driver",
                  position: (294, 12),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (292, 37),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "hardware",
               position: (296, 5),
              },
              Raw {
               content: "opengl",
               position: (296, 14),
              },
              Raw {
               content: "extraPackages32",
               position: (296, 21),
              },
             ],
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "nvidia_x11",
                position: (297, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "lib32",
                  position: (297, 18),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (298, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "pkgsi686Linux",
                  position: (298, 12),
                 },
                 Raw {
                  content: "nvidia-vaapi-driver",
                  position: (298, 26),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (296, 39),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "environment",
               position: (301, 5),
              },
              Raw {
               content: "systemPackages",
               position: (301, 17),
              },
             ],
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "nvidia_x11",
                  position: (301, 36),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "bin",
                    position: (301, 47),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (301, 34),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                FunctionApplication {
                 function: Variable {
                  identifier: "optionals",
                  position: (302, 10),
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (302, 20),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "nvidiaSettings",
                      position: (302, 24),
                     },
                    ],
                   },
                   default: None,
                  },
                  List {
                   elements: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "nvidia_x11",
                      position: (302, 41),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "settings",
                        position: (302, 52),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (302, 39),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "optionals",
                  position: (303, 10),
                 },
                 arguments: [
                  Variable {
                   identifier: "nvidiaPersistencedEnabled",
                   position: (303, 20),
                  },
                  List {
                   elements: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "nvidia_x11",
                      position: (303, 48),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "persistenced",
                        position: (303, 59),
                       },
                      ],
                     },
                     default: None,
                    },
                   ],
                   position: (303, 46),
                  },
                 ],
                },
               ],
               position: (303, 7),
              },
             ],
             position: (302, 7),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "systemd",
               position: (305, 5),
              },
              Raw {
               content: "packages",
               position: (305, 13),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "optional",
              position: (305, 24),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (305, 33),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "powerManagement",
                  position: (305, 37),
                 },
                 Raw {
                  content: "enable",
                  position: (305, 53),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "nvidia_x11",
                position: (305, 60),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "out",
                  position: (305, 71),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "systemd",
               position: (307, 5),
              },
              Raw {
               content: "services",
               position: (307, 13),
              },
             ],
            },
            LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "baseNvidiaService",
                  position: (308, 7),
                 },
                ],
               },
               Function {
                argument: Some(
                 "state",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "description",
                      position: (309, 9),
                     },
                    ],
                   },
                   String {
                    parts: [
                     Raw {
                      content: "NVIDIA system ",
                     },
                     Expression {
                      expression: Variable {
                       identifier: "state",
                       position: (309, 40),
                      },
                     },
                     Raw {
                      content: " actions",
                     },
                    ],
                    position: (309, 23),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "path",
                      position: (311, 9),
                     },
                    ],
                   },
                   With {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (311, 21),
                    },
                    target: List {
                     elements: [
                      Variable {
                       identifier: "kbd",
                       position: (311, 29),
                      },
                     ],
                     position: (311, 27),
                    },
                    position: (311, 16),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "serviceConfig",
                      position: (312, 9),
                     },
                    ],
                   },
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "Type",
                         position: (313, 11),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "oneshot",
                        },
                       ],
                       position: (313, 18),
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "ExecStart",
                         position: (314, 11),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "nvidia_x11",
                           position: (314, 26),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "out",
                             position: (314, 37),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: "/bin/nvidia-sleep.sh '",
                        },
                        Expression {
                         expression: Variable {
                          identifier: "state",
                          position: (314, 65),
                         },
                        },
                        Raw {
                         content: "'",
                        },
                       ],
                       position: (314, 23),
                      },
                     ),
                    ],
                    recursive: false,
                    position: (312, 25),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (308, 34),
                },
                position: (308, 27),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "nvidiaService",
                  position: (318, 7),
                 },
                ],
               },
               Function {
                argument: Some(
                 "sleepState",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: BinaryOperation {
                 operator: Update,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "baseNvidiaService",
                    position: (318, 36),
                   },
                   arguments: [
                    Variable {
                     identifier: "sleepState",
                     position: (318, 54),
                    },
                   ],
                  },
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "before",
                        position: (319, 9),
                       },
                      ],
                     },
                     List {
                      elements: [
                       String {
                        parts: [
                         Raw {
                          content: "systemd-",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "sleepState",
                           position: (319, 31),
                          },
                         },
                         Raw {
                          content: ".service",
                         },
                        ],
                        position: (319, 20),
                       },
                      ],
                      position: (319, 18),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "requiredBy",
                        position: (320, 9),
                       },
                      ],
                     },
                     List {
                      elements: [
                       String {
                        parts: [
                         Raw {
                          content: "systemd-",
                         },
                         Expression {
                          expression: Variable {
                           identifier: "sleepState",
                           position: (320, 35),
                          },
                         },
                         Raw {
                          content: ".service",
                         },
                        ],
                        position: (320, 24),
                       },
                      ],
                      position: (320, 22),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (318, 69),
                  },
                 ],
                 position: (318, 66),
                },
                position: (318, 23),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "services",
                  position: (323, 7),
                 },
                ],
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "builtins",
                    position: (323, 19),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listToAttrs",
                      position: (323, 28),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "map",
                     position: (323, 41),
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "t",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: FunctionApplication {
                       function: Variable {
                        identifier: "nameValuePair",
                        position: (323, 49),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "nvidia-",
                          },
                          Expression {
                           expression: Variable {
                            identifier: "t",
                            position: (323, 73),
                           },
                          },
                         ],
                         position: (323, 63),
                        },
                        FunctionApplication {
                         function: Variable {
                          identifier: "nvidiaService",
                          position: (323, 78),
                         },
                         arguments: [
                          Variable {
                           identifier: "t",
                           position: (323, 92),
                          },
                         ],
                        },
                       ],
                      },
                      position: (323, 46),
                     },
                     List {
                      elements: [
                       String {
                        parts: [
                         Raw {
                          content: "hibernate",
                         },
                        ],
                        position: (323, 97),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "suspend",
                         },
                        ],
                        position: (323, 109),
                       },
                      ],
                      position: (323, 96),
                     },
                    ],
                   },
                  ],
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "nvidia-resume",
                       position: (325, 11),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Update,
                     operands: [
                      FunctionApplication {
                       function: Variable {
                        identifier: "baseNvidiaService",
                        position: (325, 28),
                       },
                       arguments: [
                        String {
                         parts: [
                          Raw {
                           content: "resume",
                          },
                         ],
                         position: (325, 46),
                        },
                       ],
                      },
                      Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "after",
                            position: (326, 13),
                           },
                          ],
                         },
                         List {
                          elements: [
                           String {
                            parts: [
                             Raw {
                              content: "systemd-suspend.service",
                             },
                            ],
                            position: (326, 23),
                           },
                           String {
                            parts: [
                             Raw {
                              content: "systemd-hibernate.service",
                             },
                            ],
                            position: (326, 49),
                           },
                          ],
                          position: (326, 21),
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "requiredBy",
                            position: (327, 13),
                           },
                          ],
                         },
                         List {
                          elements: [
                           String {
                            parts: [
                             Raw {
                              content: "systemd-suspend.service",
                             },
                            ],
                            position: (327, 28),
                           },
                           String {
                            parts: [
                             Raw {
                              content: "systemd-hibernate.service",
                             },
                            ],
                            position: (327, 54),
                           },
                          ],
                          position: (327, 26),
                         },
                        ),
                       ],
                       recursive: false,
                       position: (325, 59),
                      },
                     ],
                     position: (325, 56),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (324, 12),
                 },
                ],
                position: (324, 9),
               },
              ),
             ],
             target: BinaryOperation {
              operator: Update,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "optionalAttrs",
                 position: (330, 8),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (330, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "powerManagement",
                     position: (330, 26),
                    },
                    Raw {
                     content: "enable",
                     position: (330, 42),
                    },
                   ],
                  },
                  default: None,
                 },
                 Variable {
                  identifier: "services",
                  position: (330, 49),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optionalAttrs",
                 position: (331, 10),
                },
                arguments: [
                 Variable {
                  identifier: "nvidiaPersistencedEnabled",
                  position: (331, 24),
                 },
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Expression {
                       expression: String {
                        parts: [
                         Raw {
                          content: "nvidia-persistenced",
                         },
                        ],
                        position: (332, 9),
                       },
                      },
                     ],
                    },
                    FunctionApplication {
                     function: Variable {
                      identifier: "mkIf",
                      position: (332, 33),
                     },
                     arguments: [
                      Variable {
                       identifier: "nvidiaPersistencedEnabled",
                       position: (332, 38),
                      },
                      Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "description",
                            position: (333, 11),
                           },
                          ],
                         },
                         String {
                          parts: [
                           Raw {
                            content: "NVIDIA Persistence Daemon",
                           },
                          ],
                          position: (333, 25),
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "wantedBy",
                            position: (334, 11),
                           },
                          ],
                         },
                         List {
                          elements: [
                           String {
                            parts: [
                             Raw {
                              content: "multi-user.target",
                             },
                            ],
                            position: (334, 24),
                           },
                          ],
                          position: (334, 22),
                         },
                        ),
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "serviceConfig",
                            position: (335, 11),
                           },
                          ],
                         },
                         Map {
                          bindings: [
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "Type",
                               position: (336, 13),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Raw {
                               content: "forking",
                              },
                             ],
                             position: (336, 20),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "Restart",
                               position: (337, 13),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Raw {
                               content: "always",
                              },
                             ],
                             position: (337, 23),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "PIDFile",
                               position: (338, 13),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Raw {
                               content: "/var/run/nvidia-persistenced/nvidia-persistenced.pid",
                              },
                             ],
                             position: (338, 23),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "ExecStart",
                               position: (339, 13),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Expression {
                               expression: PropertyAccess {
                                expression: Variable {
                                 identifier: "nvidia_x11",
                                 position: (339, 28),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "persistenced",
                                   position: (339, 39),
                                  },
                                 ],
                                },
                                default: None,
                               },
                              },
                              Raw {
                               content: "/bin/nvidia-persistenced --verbose",
                              },
                             ],
                             position: (339, 25),
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "ExecStopPost",
                               position: (340, 13),
                              },
                             ],
                            },
                            String {
                             parts: [
                              Expression {
                               expression: PropertyAccess {
                                expression: Variable {
                                 identifier: "pkgs",
                                 position: (340, 31),
                                },
                                attribute_path: AttributePath {
                                 attributes: [
                                  Raw {
                                   content: "coreutils",
                                   position: (340, 36),
                                  },
                                 ],
                                },
                                default: None,
                               },
                              },
                              Raw {
                               content: "/bin/rm -rf /var/run/nvidia-persistenced",
                              },
                             ],
                             position: (340, 28),
                            },
                           ),
                          ],
                          recursive: false,
                          position: (335, 27),
                         },
                        ),
                       ],
                       recursive: false,
                       position: (332, 64),
                      },
                     ],
                    },
                   ),
                  ],
                  recursive: false,
                  position: (331, 50),
                 },
                ],
               },
              ],
              position: (331, 7),
             },
             position: (307, 24),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "systemd",
               position: (345, 5),
              },
              Raw {
               content: "tmpfiles",
               position: (345, 13),
              },
              Raw {
               content: "rules",
               position: (345, 22),
              },
             ],
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (345, 30),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (345, 39),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "virtualisation",
                    position: (345, 46),
                   },
                   Raw {
                    content: "docker",
                    position: (345, 61),
                   },
                   Raw {
                    content: "enableNvidia",
                    position: (345, 68),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "L+ /run/nvidia-docker/bin - - - - ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "nvidia_x11",
                     position: (346, 46),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "bin",
                       position: (346, 57),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/origBin",
                  },
                 ],
                 position: (346, 9),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (347, 10),
               },
               arguments: [
                BinaryOperation {
                 operator: LogicalAnd,
                 operands: [
                  BinaryOperation {
                   operator: NotEqualTo,
                   operands: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "nvidia_x11",
                      position: (347, 20),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "persistenced",
                        position: (347, 31),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "null",
                     position: (347, 47),
                    },
                   ],
                   position: (347, 44),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (347, 55),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "virtualisation",
                      position: (347, 62),
                     },
                     Raw {
                      content: "docker",
                      position: (347, 77),
                     },
                     Raw {
                      content: "enableNvidia",
                      position: (347, 84),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (347, 52),
                },
                String {
                 parts: [
                  Raw {
                   content: "L+ /run/nvidia-docker/extras/bin/nvidia-persistenced - - - - ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "nvidia_x11",
                     position: (348, 73),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "persistenced",
                       position: (348, 84),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/origBin/nvidia-persistenced",
                  },
                 ],
                 position: (348, 9),
                },
               ],
              },
             ],
             position: (347, 7),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "boot",
               position: (350, 5),
              },
              Raw {
               content: "extraModulePackages",
               position: (350, 10),
              },
             ],
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "nvidia_x11",
                position: (350, 34),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bin",
                  position: (350, 45),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (350, 32),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "boot",
               position: (353, 5),
              },
              Raw {
               content: "kernelModules",
               position: (353, 10),
              },
             ],
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "nvidia-uvm",
                  },
                 ],
                 position: (353, 28),
                },
               ],
               position: (353, 26),
              },
              FunctionApplication {
               function: Variable {
                identifier: "optionals",
                position: (354, 7),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (354, 17),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "services",
                    position: (354, 24),
                   },
                   Raw {
                    content: "xserver",
                    position: (354, 33),
                   },
                   Raw {
                    content: "enable",
                    position: (354, 41),
                   },
                  ],
                 },
                 default: None,
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "nvidia",
                    },
                   ],
                   position: (354, 50),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "nvidia_modeset",
                    },
                   ],
                   position: (354, 59),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "nvidia_drm",
                    },
                   ],
                   position: (354, 76),
                  },
                 ],
                 position: (354, 48),
                },
               ],
              },
             ],
             position: (353, 43),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "boot",
               position: (357, 5),
              },
              Raw {
               content: "kernelParams",
               position: (357, 10),
              },
             ],
            },
            BinaryOperation {
             operator: Concatenation,
             operands: [
              FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (357, 25),
               },
               arguments: [
                BinaryOperation {
                 operator: LogicalOr,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "offloadCfg",
                    position: (357, 35),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "enable",
                      position: (357, 46),
                     },
                    ],
                   },
                   default: None,
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (357, 56),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "modesetting",
                      position: (357, 60),
                     },
                     Raw {
                      content: "enable",
                      position: (357, 72),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (357, 53),
                },
                String {
                 parts: [
                  Raw {
                   content: "nvidia-drm.modeset=1",
                  },
                 ],
                 position: (357, 80),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "optional",
                position: (358, 10),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (358, 19),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "powerManagement",
                    position: (358, 23),
                   },
                   Raw {
                    content: "enable",
                    position: (358, 39),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "nvidia.NVreg_PreserveVideoMemoryAllocations=1",
                  },
                 ],
                 position: (358, 46),
                },
               ],
              },
             ],
             position: (358, 7),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (360, 5),
              },
              Raw {
               content: "udev",
               position: (360, 14),
              },
              Raw {
               content: "extraRules",
               position: (360, 19),
              },
             ],
            },
            BinaryOperation {
             operator: Addition,
             operands: [
              String {
               parts: [
                Raw {
                 content: "# Create /dev/nvidia-uvm when the nvidia-uvm module is loaded.\nKERNEL==\"nvidia\", RUN+=\"",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (363, 35),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "runtimeShell",
                     position: (363, 40),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: " -c 'mknod -m 666 /dev/nvidiactl c $$(grep nvidia-frontend /proc/devices | cut -d \\  -f 1) 255'\"\nKERNEL==\"nvidia_modeset\", RUN+=\"",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (364, 43),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "runtimeShell",
                     position: (364, 48),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: " -c 'mknod -m 666 /dev/nvidia-modeset c $$(grep nvidia-frontend /proc/devices | cut -d \\  -f 1) 254'\"\nKERNEL==\"card*\", SUBSYSTEM==\"drm\", DRIVERS==\"nvidia\", RUN+=\"",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (365, 71),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "runtimeShell",
                     position: (365, 76),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: " -c 'mknod -m 666 /dev/nvidia%n c $$(grep nvidia-frontend /proc/devices | cut -d \\  -f 1) %n'\"\nKERNEL==\"nvidia_uvm\", RUN+=\"",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (366, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "runtimeShell",
                     position: (366, 44),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: " -c 'mknod -m 666 /dev/nvidia-uvm c $$(grep nvidia-uvm /proc/devices | cut -d \\  -f 1) 0'\"\nKERNEL==\"nvidia_uvm\", RUN+=\"",
                },
                Expression {
                 expression: PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (367, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "runtimeShell",
                     position: (367, 44),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Raw {
                 content: " -c 'mknod -m 666 /dev/nvidia-uvm-tools c $$(grep nvidia-uvm /proc/devices | cut -d \\  -f 1) 0'\"\n",
                },
               ],
               position: (361, 7),
              },
              FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (368, 12),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (368, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "powerManagement",
                    position: (368, 31),
                   },
                   Raw {
                    content: "finegrained",
                    position: (368, 47),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [
                  Raw {
                   content: "# Remove NVIDIA USB xHCI Host Controller devices, if present\nACTION==\"add\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x0c0330\", ATTR{remove}=\"1\"\n\n# Remove NVIDIA USB Type-C UCSI devices, if present\nACTION==\"add\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x0c8000\", ATTR{remove}=\"1\"\n\n# Remove NVIDIA Audio devices, if present\nACTION==\"add\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x040300\", ATTR{remove}=\"1\"\n\n# Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind\nACTION==\"bind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030000\", TEST==\"power/control\", ATTR{power/control}=\"auto\"\nACTION==\"bind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030200\", TEST==\"power/control\", ATTR{power/control}=\"auto\"\n\n# Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind\nACTION==\"unbind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030000\", TEST==\"power/control\", ATTR{power/control}=\"on\"\nACTION==\"unbind\", SUBSYSTEM==\"pci\", ATTR{vendor}==\"0x10de\", ATTR{class}==\"0x030200\", TEST==\"power/control\", ATTR{power/control}=\"on\"\n",
                  },
                 ],
                 position: (368, 59),
                },
               ],
              },
             ],
             position: (368, 10),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "boot",
               position: (387, 5),
              },
              Raw {
               content: "extraModprobeConfig",
               position: (387, 10),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkIf",
              position: (387, 32),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (387, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "powerManagement",
                  position: (387, 41),
                 },
                 Raw {
                  content: "finegrained",
                  position: (387, 57),
                 },
                ],
               },
               default: None,
              },
              String {
               parts: [
                Raw {
                 content: "options nvidia \"NVreg_DynamicPowerManagement=0x02\"\n",
                },
               ],
               position: (387, 69),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "boot",
               position: (391, 5),
              },
              Raw {
               content: "blacklistedKernelModules",
               position: (391, 10),
              },
             ],
            },
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "nouveau",
                },
               ],
               position: (391, 39),
              },
              String {
               parts: [
                Raw {
                 content: "nvidiafb",
                },
               ],
               position: (391, 49),
              },
             ],
             position: (391, 37),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "services",
               position: (393, 5),
              },
              Raw {
               content: "acpid",
               position: (393, 14),
              },
              Raw {
               content: "enable",
               position: (393, 20),
              },
             ],
            },
            Variable {
             identifier: "true",
             position: (393, 29),
            },
           ),
          ],
          recursive: false,
          position: (179, 19),
         },
        ],
       },
       position: (176, 12),
      },
     ),
    ],
    recursive: false,
    position: (29, 1),
   },
   position: (7, 1),
  },
  position: (5, 1),
 },
 position: (3, 1),
}