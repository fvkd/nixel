---
Function {
 argument: Some(
  "args",
 ),
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "crossSystem",
    default: Some(
     Variable {
      identifier: "localSystem",
      position: (4, 17),
     },
    ),
   },
   FunctionArgument {
    identifier: "system",
    default: Some(
     PropertyAccess {
      expression: Variable {
       identifier: "localSystem",
       position: (3, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "system",
         position: (3, 24),
        },
       ],
      },
      default: None,
     },
    ),
   },
   FunctionArgument {
    identifier: "localSystem",
    default: Some(
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "system",
           position: (2, 19),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "args",
          position: (2, 28),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "system",
            position: (2, 33),
           },
          ],
         },
         default: Some(
          PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (2, 43),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "currentSystem",
              position: (2, 52),
             },
            ],
           },
           default: None,
          },
         ),
        },
       ),
      ],
      recursive: false,
     },
    ),
   },
   FunctionArgument {
    identifier: "maintainer",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: LetIn {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "pkgs",
       position: (15, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "import",
      position: (15, 10),
     },
     arguments: [
      Path {
       parts: [
        Raw {
         content: "./../../default.nix",
         position: (15, 17),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "removeAttrs",
        position: (15, 38),
       },
       arguments: [
        Variable {
         identifier: "args",
         position: (15, 50),
        },
        List {
         elements: [
          String {
           parts: [
            Raw {
             content: "maintainer",
             position: (15, 58),
            },
           ],
          },
         ],
        },
       ],
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "maintainer_",
       position: (16, 3),
      },
     ],
    },
    PropertyAccess {
     expression: Variable {
      identifier: "pkgs",
      position: (16, 17),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "lib",
        position: (16, 22),
       },
       Raw {
        content: "maintainers",
        position: (16, 26),
       },
       Expression {
        expression: Variable {
         identifier: "maintainer",
         position: (16, 40),
        },
       },
      ],
     },
     default: None,
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWith",
       position: (17, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "cond",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "return",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "set",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "pkgs",
          position: (18, 6),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "lib",
            position: (18, 11),
           },
           Raw {
            content: "flatten",
            position: (18, 15),
           },
          ],
         },
         default: None,
        },
        arguments: [
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (19, 8),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "lib",
              position: (19, 13),
             },
             Raw {
              content: "mapAttrsToList",
              position: (19, 17),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Function {
            argument: Some(
             "name",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "pkg",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: LetIn {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "result",
                   position: (22, 13),
                  },
                 ],
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "builtins",
                   position: (22, 22),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "tryEval",
                     position: (22, 31),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  IfThenElse {
                   predicate: BinaryOperation {
                    operator: LogicalAnd,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "pkgs",
                        position: (24, 20),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "lib",
                          position: (24, 25),
                         },
                         Raw {
                          content: "isDerivation",
                          position: (24, 29),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "pkg",
                        position: (24, 42),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: Variable {
                       identifier: "cond",
                       position: (24, 49),
                      },
                      arguments: [
                       Variable {
                        identifier: "name",
                        position: (24, 54),
                       },
                       Variable {
                        identifier: "pkg",
                        position: (24, 59),
                       },
                      ],
                     },
                    ],
                   },
                   then: FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (28, 19),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "seq",
                        position: (28, 28),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "pkg",
                       position: (28, 32),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "outPath",
                         position: (28, 36),
                        },
                       ],
                      },
                      default: None,
                     },
                     List {
                      elements: [
                       FunctionApplication {
                        function: Variable {
                         identifier: "return",
                         position: (29, 24),
                        },
                        arguments: [
                         Variable {
                          identifier: "name",
                          position: (29, 31),
                         },
                         Variable {
                          identifier: "pkg",
                          position: (29, 36),
                         },
                        ],
                       },
                      ],
                     },
                    ],
                   },
                   else_: IfThenElse {
                    predicate: BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      PropertyAccess {
                       expression: Variable {
                        identifier: "pkg",
                        position: (30, 25),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "recurseForDerivations",
                          position: (30, 29),
                         },
                        ],
                       },
                       default: Some(
                        Variable {
                         identifier: "false",
                         position: (30, 54),
                        },
                       ),
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "pkg",
                        position: (30, 63),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "recurseForRelease",
                          position: (30, 67),
                         },
                        ],
                       },
                       default: Some(
                        Variable {
                         identifier: "false",
                         position: (30, 88),
                        },
                       ),
                      },
                     ],
                    },
                    then: FunctionApplication {
                     function: Variable {
                      identifier: "packagesWith",
                      position: (31, 22),
                     },
                     arguments: [
                      Variable {
                       identifier: "cond",
                       position: (31, 35),
                      },
                      Variable {
                       identifier: "return",
                       position: (31, 40),
                      },
                      Variable {
                       identifier: "pkg",
                       position: (31, 47),
                      },
                     ],
                    },
                    else_: List {
                     elements: [],
                    },
                   },
                  },
                 ],
                },
               ),
              ],
              target: IfThenElse {
               predicate: PropertyAccess {
                expression: Variable {
                 identifier: "result",
                 position: (35, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "success",
                   position: (35, 21),
                  },
                 ],
                },
                default: None,
               },
               then: PropertyAccess {
                expression: Variable {
                 identifier: "result",
                 position: (35, 34),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "value",
                   position: (35, 41),
                  },
                 ],
                },
                default: None,
               },
               else_: List {
                elements: [],
               },
              },
             },
            },
           },
           Variable {
            identifier: "set",
            position: (38, 9),
           },
          ],
         },
        ],
       },
      },
     },
    },
   ),
  ],
  target: FunctionApplication {
   function: Variable {
    identifier: "packagesWith",
    position: (42, 1),
   },
   arguments: [
    Function {
     argument: Some(
      "name",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "pkg",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: BinaryOperation {
        operator: LogicalAnd,
        operands: [
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (45, 10),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "hasAttr",
              position: (45, 19),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "meta",
              position: (45, 28),
             },
            ],
           },
           Variable {
            identifier: "pkg",
            position: (45, 34),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (45, 41),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "hasAttr",
              position: (45, 50),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "maintainers",
              position: (45, 59),
             },
            ],
           },
           PropertyAccess {
            expression: Variable {
             identifier: "pkg",
             position: (45, 72),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "meta",
               position: (45, 76),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ],
       },
       then: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (47, 12),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "isList",
             position: (47, 21),
            },
           ],
          },
          default: None,
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "pkg",
            position: (47, 28),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "meta",
              position: (47, 32),
             },
             Raw {
              content: "maintainers",
              position: (47, 37),
             },
            ],
           },
           default: None,
          },
         ],
        },
        then: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (48, 14),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "elem",
             position: (48, 23),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "maintainer_",
           position: (48, 28),
          },
          PropertyAccess {
           expression: Variable {
            identifier: "pkg",
            position: (48, 40),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "meta",
              position: (48, 44),
             },
             Raw {
              content: "maintainers",
              position: (48, 49),
             },
            ],
           },
           default: None,
          },
         ],
        },
        else_: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "maintainer_",
           position: (49, 14),
          },
          PropertyAccess {
           expression: Variable {
            identifier: "pkg",
            position: (49, 29),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "meta",
              position: (49, 33),
             },
             Raw {
              content: "maintainers",
              position: (49, 38),
             },
            ],
           },
           default: None,
          },
         ],
        },
       },
       else_: Variable {
        identifier: "false",
        position: (51, 12),
       },
      },
     },
    },
    Function {
     argument: Some(
      "name",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "pkg",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Variable {
       identifier: "pkg",
       position: (54, 15),
      },
     },
    },
    Variable {
     identifier: "pkgs",
     position: (55, 3),
    },
   ],
  },
 },
}