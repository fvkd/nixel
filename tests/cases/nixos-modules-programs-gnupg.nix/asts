---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "programs",
         position: (7, 16),
        },
        Raw {
         content: "gnupg",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "xserverCfg",
        position: (9, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (9, 16),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (9, 23),
        },
        Raw {
         content: "xserver",
         position: (9, 32),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "defaultPinentryFlavor",
        position: (11, 3),
       },
      ],
     },
     IfThenElse {
      predicate: BinaryOperation {
       operator: LogicalOr,
       operands: [
        PropertyAccess {
         expression: Variable {
          identifier: "xserverCfg",
          position: (12, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "desktopManager",
            position: (12, 19),
           },
           Raw {
            content: "lxqt",
            position: (12, 34),
           },
           Raw {
            content: "enable",
            position: (12, 39),
           },
          ],
         },
         default: None,
        },
        PropertyAccess {
         expression: Variable {
          identifier: "xserverCfg",
          position: (13, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "desktopManager",
            position: (13, 19),
           },
           Raw {
            content: "plasma5",
            position: (13, 34),
           },
           Raw {
            content: "enable",
            position: (13, 42),
           },
          ],
         },
         default: None,
        },
       ],
       position: (13, 5),
      },
      then: String {
       parts: [
        Raw {
         content: "qt",
        },
       ],
       position: (14, 7),
      },
      else_: IfThenElse {
       predicate: PropertyAccess {
        expression: Variable {
         identifier: "xserverCfg",
         position: (15, 13),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "desktopManager",
           position: (15, 24),
          },
          Raw {
           content: "xfce",
           position: (15, 39),
          },
          Raw {
           content: "enable",
           position: (15, 44),
          },
         ],
        },
        default: None,
       },
       then: String {
        parts: [
         Raw {
          content: "gtk2",
         },
        ],
        position: (16, 7),
       },
       else_: IfThenElse {
        predicate: BinaryOperation {
         operator: LogicalOr,
         operands: [
          PropertyAccess {
           expression: Variable {
            identifier: "xserverCfg",
            position: (17, 13),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "enable",
              position: (17, 24),
             },
            ],
           },
           default: None,
          },
          PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (17, 34),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "programs",
              position: (17, 41),
             },
             Raw {
              content: "sway",
              position: (17, 50),
             },
             Raw {
              content: "enable",
              position: (17, 55),
             },
            ],
           },
           default: None,
          },
         ],
         position: (17, 31),
        },
        then: String {
         parts: [
          Raw {
           content: "gnome3",
          },
         ],
         position: (18, 7),
        },
        else_: Variable {
         identifier: "null",
         position: (20, 7),
        },
        position: (17, 10),
       },
       position: (15, 10),
      },
      position: (12, 5),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (26, 3),
        },
        Raw {
         content: "programs",
         position: (26, 11),
        },
        Raw {
         content: "gnupg",
         position: (26, 20),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "package",
            position: (27, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (27, 15),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (28, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (28, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "package",
                  position: (28, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (29, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (29, 17),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "gnupg",
                  position: (29, 22),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (30, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalExpression",
                position: (30, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "pkgs.gnupg",
                  },
                 ],
                 position: (30, 39),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (31, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "The gpg package that should be used.\n",
                },
               ],
               position: (31, 21),
              },
             ),
            ],
            recursive: false,
            position: (27, 24),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (36, 5),
           },
           Raw {
            content: "enable",
            position: (36, 11),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (36, 20),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (37, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (37, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (37, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (38, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (38, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (39, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enables GnuPG agent with socket-activation for every user session.\n",
                },
               ],
               position: (39, 21),
              },
             ),
            ],
            recursive: false,
            position: (36, 29),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (44, 5),
           },
           Raw {
            content: "enableSSHSupport",
            position: (44, 11),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (44, 30),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (45, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (45, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (45, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (46, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (46, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (47, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable SSH agent support in GnuPG agent. Also sets SSH_AUTH_SOCK\nenvironment variable correctly. This will disable socket-activation\nand thus always start a GnuPG agent per user session.\n",
                },
               ],
               position: (47, 21),
              },
             ),
            ],
            recursive: false,
            position: (44, 39),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (54, 5),
           },
           Raw {
            content: "enableExtraSocket",
            position: (54, 11),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (54, 31),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (55, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (55, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (55, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (56, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (56, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (57, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable extra socket for GnuPG agent.\n",
                },
               ],
               position: (57, 21),
              },
             ),
            ],
            recursive: false,
            position: (54, 40),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (62, 5),
           },
           Raw {
            content: "enableBrowserSocket",
            position: (62, 11),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (62, 33),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (63, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (63, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (63, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (64, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (64, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (65, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enable browser socket for GnuPG agent.\n",
                },
               ],
               position: (65, 21),
              },
             ),
            ],
            recursive: false,
            position: (62, 42),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (70, 5),
           },
           Raw {
            content: "pinentryFlavor",
            position: (70, 11),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (70, 28),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (71, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (71, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "nullOr",
                   position: (71, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (71, 28),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "enum",
                     position: (71, 34),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (71, 39),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "pinentry",
                      position: (71, 44),
                     },
                     Raw {
                      content: "flavors",
                      position: (71, 53),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (72, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "gnome3",
                },
               ],
               position: (72, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (73, 7),
                },
               ],
              },
              Variable {
               identifier: "defaultPinentryFlavor",
               position: (73, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "defaultText",
                 position: (74, 7),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "literalDocBook",
                position: (74, 21),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "matching the configured desktop environment",
                  },
                 ],
                 position: (74, 36),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (75, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Which pinentry interface to use. If not null, the path to the\npinentry binary will be passed to gpg-agent via commandline and\nthus overrides the pinentry option in gpg-agent.conf in the user's\nhome directory.\nIf not set at all, it'll pick an appropriate flavor depending on the\nsystem configuration (qt flavor for lxqt and plasma5, gtk2 for xfce\n4.12, gnome3 on all other systems with X enabled, ncurses otherwise).\n",
                },
               ],
               position: (75, 21),
              },
             ),
            ],
            recursive: false,
            position: (70, 37),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "dirmngr",
            position: (86, 5),
           },
           Raw {
            content: "enable",
            position: (86, 13),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (86, 22),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (87, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (87, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (87, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (88, 7),
                },
               ],
              },
              Variable {
               identifier: "false",
               position: (88, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (89, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Enables GnuPG network certificate management daemon with socket-activation for every user session.\n",
                },
               ],
               position: (89, 21),
              },
             ),
            ],
            recursive: false,
            position: (86, 31),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (26, 28),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (95, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (95, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (95, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "agent",
            position: (95, 21),
           },
           Raw {
            content: "enable",
            position: (95, 27),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (97, 5),
             },
             Raw {
              content: "user",
              position: (97, 13),
             },
             Raw {
              content: "services",
              position: (97, 18),
             },
             Raw {
              content: "gpg-agent",
              position: (97, 27),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (97, 39),
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (97, 45),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "agent",
                   position: (97, 49),
                  },
                  Raw {
                   content: "pinentryFlavor",
                   position: (97, 55),
                  },
                 ],
                },
                default: None,
               },
               Variable {
                identifier: "null",
                position: (97, 73),
               },
              ],
              position: (97, 70),
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "serviceConfig",
                   position: (98, 7),
                  },
                  Raw {
                   content: "ExecStart",
                   position: (98, 21),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [],
                   position: (98, 35),
                  },
                  String {
                   parts: [
                    Raw {
                     content: "",
                    },
                    Expression {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (99, 11),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "package",
                         position: (99, 15),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/bin/gpg-agent --supervised \\\n  --pinentry-program ",
                    },
                    Expression {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "pkgs",
                       position: (100, 32),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "pinentry",
                         position: (100, 37),
                        },
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (100, 48),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "agent",
                             position: (100, 52),
                            },
                            Raw {
                             content: "pinentryFlavor",
                             position: (100, 58),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/bin/pinentry\n",
                    },
                   ],
                   position: (98, 38),
                  },
                 ],
                 position: (98, 33),
                },
               ),
              ],
              recursive: false,
              position: (97, 79),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (104, 5),
             },
             Raw {
              content: "user",
              position: (104, 13),
             },
             Raw {
              content: "sockets",
              position: (104, 18),
             },
             Raw {
              content: "gpg-agent",
              position: (104, 26),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (105, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "sockets.target",
                  },
                 ],
                 position: (105, 20),
                },
               ],
               position: (105, 18),
              },
             ),
            ],
            recursive: false,
            position: (104, 38),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (108, 5),
             },
             Raw {
              content: "user",
              position: (108, 13),
             },
             Raw {
              content: "sockets",
              position: (108, 18),
             },
             Raw {
              content: "gpg-agent-ssh",
              position: (108, 26),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (108, 42),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (108, 47),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "agent",
                 position: (108, 51),
                },
                Raw {
                 content: "enableSSHSupport",
                 position: (108, 57),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "wantedBy",
                   position: (109, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "sockets.target",
                    },
                   ],
                   position: (109, 20),
                  },
                 ],
                 position: (109, 18),
                },
               ),
              ],
              recursive: false,
              position: (108, 74),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (112, 5),
             },
             Raw {
              content: "user",
              position: (112, 13),
             },
             Raw {
              content: "sockets",
              position: (112, 18),
             },
             Raw {
              content: "gpg-agent-extra",
              position: (112, 26),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (112, 44),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (112, 49),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "agent",
                 position: (112, 53),
                },
                Raw {
                 content: "enableExtraSocket",
                 position: (112, 59),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "wantedBy",
                   position: (113, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "sockets.target",
                    },
                   ],
                   position: (113, 20),
                  },
                 ],
                 position: (113, 18),
                },
               ),
              ],
              recursive: false,
              position: (112, 77),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (116, 5),
             },
             Raw {
              content: "user",
              position: (116, 13),
             },
             Raw {
              content: "sockets",
              position: (116, 18),
             },
             Raw {
              content: "gpg-agent-browser",
              position: (116, 26),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (116, 46),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (116, 51),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "agent",
                 position: (116, 55),
                },
                Raw {
                 content: "enableBrowserSocket",
                 position: (116, 61),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "wantedBy",
                   position: (117, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "sockets.target",
                    },
                   ],
                   position: (117, 20),
                  },
                 ],
                 position: (117, 18),
                },
               ),
              ],
              recursive: false,
              position: (116, 81),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (120, 5),
             },
             Raw {
              content: "user",
              position: (120, 13),
             },
             Raw {
              content: "sockets",
              position: (120, 18),
             },
             Raw {
              content: "dirmngr",
              position: (120, 26),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (120, 36),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (120, 41),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "dirmngr",
                 position: (120, 45),
                },
                Raw {
                 content: "enable",
                 position: (120, 53),
                },
               ],
              },
              default: None,
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "wantedBy",
                   position: (121, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "sockets.target",
                    },
                   ],
                   position: (121, 20),
                  },
                 ],
                 position: (121, 18),
                },
               ),
              ],
              recursive: false,
              position: (120, 60),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (124, 5),
             },
             Raw {
              content: "dbus",
              position: (124, 14),
             },
             Raw {
              content: "packages",
              position: (124, 19),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (124, 30),
            },
            arguments: [
             BinaryOperation {
              operator: EqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (124, 36),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "agent",
                   position: (124, 40),
                  },
                  Raw {
                   content: "pinentryFlavor",
                   position: (124, 46),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "gnome3",
                 },
                ],
                position: (124, 64),
               },
              ],
              position: (124, 61),
             },
             List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (124, 76),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "gcr",
                   position: (124, 81),
                  },
                 ],
                },
                default: None,
               },
              ],
              position: (124, 74),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (126, 5),
             },
             Raw {
              content: "systemPackages",
              position: (126, 17),
             },
            ],
           },
           With {
            expression: Variable {
             identifier: "pkgs",
             position: (126, 39),
            },
            target: List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (126, 47),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "package",
                  position: (126, 51),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (126, 45),
            },
            position: (126, 34),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (127, 5),
             },
             Raw {
              content: "packages",
              position: (127, 13),
             },
            ],
           },
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (127, 26),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "package",
                 position: (127, 30),
                },
               ],
              },
              default: None,
             },
            ],
            position: (127, 24),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (129, 5),
             },
             Raw {
              content: "interactiveShellInit",
              position: (129, 17),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "# Bind gpg-agent to this TTY if gpg commands are used.\nexport GPG_TTY=$(tty)\n\n",
               },
              ],
              position: (129, 40),
             },
             FunctionApplication {
              function: Variable {
               identifier: "optionalString",
               position: (133, 11),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (133, 26),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "agent",
                   position: (133, 30),
                  },
                  Raw {
                   content: "enableSSHSupport",
                   position: (133, 36),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [
                 Raw {
                  content: "# SSH agent protocol doesn't support changing TTYs, so bind the agent\n# to every new TTY.\n",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (136, 9),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "package",
                      position: (136, 13),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "/bin/gpg-connect-agent --quiet updatestartuptty /bye > /dev/null\n",
                 },
                ],
                position: (133, 53),
               },
              ],
             },
            ],
            position: (133, 8),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (139, 5),
             },
             Raw {
              content: "extraInit",
              position: (139, 17),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (139, 29),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (139, 34),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "agent",
                 position: (139, 38),
                },
                Raw {
                 content: "enableSSHSupport",
                 position: (139, 44),
                },
               ],
              },
              default: None,
             },
             String {
              parts: [
               Raw {
                content: "if [ -z \"$SSH_AUTH_SOCK\" ]; then\n  export SSH_AUTH_SOCK=$(",
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (141, 34),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "package",
                    position: (141, 38),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "/bin/gpgconf --list-dirs agent-ssh-socket)\nfi\n",
               },
              ],
              position: (139, 61),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (145, 5),
             },
            ],
           },
           List {
            elements: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "assertion",
                   position: (146, 9),
                  },
                 ],
                },
                BinaryOperation {
                 operator: Implication,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (146, 21),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "agent",
                      position: (146, 25),
                     },
                     Raw {
                      content: "enableSSHSupport",
                      position: (146, 31),
                     },
                    ],
                   },
                   default: None,
                  },
                  UnaryOperation {
                   operator: Not,
                   operand: PropertyAccess {
                    expression: Variable {
                     identifier: "config",
                     position: (146, 52),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "programs",
                       position: (146, 59),
                      },
                      Raw {
                       content: "ssh",
                       position: (146, 68),
                      },
                      Raw {
                       content: "startAgent",
                       position: (146, 72),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (146, 51),
                  },
                 ],
                 position: (146, 48),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "message",
                   position: (147, 9),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "You can't use ssh-agent and GnuPG agent with SSH support enabled at the same time!",
                  },
                 ],
                 position: (147, 19),
                },
               ),
              ],
              recursive: false,
              position: (146, 7),
             },
            ],
            position: (145, 18),
           },
          ),
         ],
         recursive: false,
         position: (95, 34),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "meta",
         position: (153, 3),
        },
        Raw {
         content: "buildDocsInSandbox",
         position: (153, 8),
        },
       ],
      },
      Variable {
       identifier: "false",
       position: (153, 29),
      },
     ),
    ],
    recursive: false,
    position: (24, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}