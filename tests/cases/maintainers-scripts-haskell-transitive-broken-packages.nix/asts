---
LetIn {
 bindings: [
  KeyValue(
   AttributePath {
    attributes: [
     Raw {
      content: "nixpkgs",
      position: (2, 3),
     },
    ],
   },
   FunctionApplication {
    function: Variable {
     identifier: "import",
     position: (2, 13),
    },
    arguments: [
     Path {
      parts: [
       Raw {
        content: "../../..",
        position: (2, 20),
       },
      ],
     },
    ],
   },
  ),
  Inherit(
   Some(
    FunctionApplication {
     function: Variable {
      identifier: "nixpkgs",
      position: (3, 12),
     },
     arguments: [
      Map {
       bindings: [],
       recursive: false,
      },
     ],
    },
   ),
   [
    Raw {
     content: "pkgs",
     position: (3, 24),
    },
    Raw {
     content: "lib",
     position: (3, 29),
    },
   ],
  ),
  KeyValue(
   AttributePath {
    attributes: [
     Raw {
      content: "getEvaluating",
      position: (4, 3),
     },
    ],
   },
   Function {
    argument: Some(
     "x",
    ),
    arguments: FunctionArguments {
     arguments: [],
     ellipsis: false,
    },
    definition: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "builtins",
       position: (5, 5),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrNames",
         position: (5, 14),
        },
       ],
      },
      default: None,
     },
     arguments: [
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (6, 7),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "filterAttrs",
           position: (6, 11),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Function {
         argument: Some(
          "_",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "v",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: BinaryOperation {
           operator: LogicalAnd,
           operands: [
            BinaryOperation {
             operator: LogicalAnd,
             operands: [
              PropertyAccess {
               expression: FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (7, 16),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tryEval",
                    position: (7, 25),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "v",
                   position: (7, 34),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "outPath",
                     position: (7, 36),
                    },
                   ],
                  },
                  default: Some(
                   Variable {
                    identifier: "null",
                    position: (7, 47),
                   },
                  ),
                 },
                ],
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "success",
                  position: (7, 54),
                 },
                ],
               },
               default: None,
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (7, 65),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "isDerivation",
                   position: (7, 69),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "v",
                 position: (7, 82),
                },
               ],
              },
             ],
             position: (7, 62),
            },
            UnaryOperation {
             operator: Not,
             operand: PropertyAccess {
              expression: Variable {
               identifier: "v",
               position: (7, 88),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "meta",
                 position: (7, 90),
                },
                Raw {
                 content: "broken",
                 position: (7, 95),
                },
               ],
              },
              default: None,
             },
             position: (7, 87),
            },
           ],
           position: (7, 84),
          },
          position: (7, 12),
         },
         position: (7, 9),
        },
        Variable {
         identifier: "x",
         position: (8, 9),
        },
       ],
      },
     ],
    },
    position: (4, 19),
   },
  ),
  KeyValue(
   AttributePath {
    attributes: [
     Raw {
      content: "brokenDeps",
      position: (10, 3),
     },
    ],
   },
   FunctionApplication {
    function: PropertyAccess {
     expression: Variable {
      identifier: "lib",
      position: (10, 16),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "subtractLists",
        position: (10, 20),
       },
      ],
     },
     default: None,
    },
    arguments: [
     FunctionApplication {
      function: Variable {
       identifier: "getEvaluating",
       position: (11, 6),
      },
      arguments: [
       PropertyAccess {
        expression: Variable {
         identifier: "pkgs",
         position: (11, 20),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "haskellPackages",
           position: (11, 25),
          },
         ],
        },
        default: None,
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "getEvaluating",
       position: (12, 6),
      },
      arguments: [
       PropertyAccess {
        expression: FunctionApplication {
         function: Variable {
          identifier: "nixpkgs",
          position: (12, 21),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "config",
                position: (12, 31),
               },
               Raw {
                content: "allowBroken",
                position: (12, 38),
               },
              ],
             },
             Variable {
              identifier: "true",
              position: (12, 52),
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "haskellPackages",
           position: (12, 61),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ],
   },
  ),
 ],
 target: String {
  parts: [
   Raw {
    content: "",
    position: (15, 1),
   },
   Expression {
    expression: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (15, 5),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "concatMapStringsSep",
         position: (15, 9),
        },
       ],
      },
      default: None,
     },
     arguments: [
      String {
       parts: [
        Raw {
         content: "\n",
         position: (15, 30),
        },
       ],
      },
      Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: String {
        parts: [
         Raw {
          content: "  - ",
          position: (15, 39),
         },
         Expression {
          expression: Variable {
           identifier: "x",
           position: (15, 45),
          },
         },
        ],
       },
       position: (15, 35),
      },
      Variable {
       identifier: "brokenDeps",
       position: (15, 50),
      },
     ],
    },
   },
   Raw {
    content: "\n",
    position: (15, 61),
   },
  ],
 },
 position: (1, 1),
}