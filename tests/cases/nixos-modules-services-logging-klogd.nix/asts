---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: Map {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "options",
        position: (8, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "services",
           position: (10, 5),
          },
          Raw {
           content: "klogd",
           position: (10, 14),
          },
          Raw {
           content: "enable",
           position: (10, 20),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (10, 29),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (11, 7),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "types",
               position: (11, 14),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "bool",
                 position: (11, 20),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (12, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "versionOlder",
               position: (12, 17),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "getVersion",
                 position: (12, 31),
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (12, 42),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "boot",
                     position: (12, 49),
                    },
                    Raw {
                     content: "kernelPackages",
                     position: (12, 54),
                    },
                    Raw {
                     content: "kernel",
                     position: (12, 69),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "3.5",
                  position: (12, 78),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "defaultText",
                position: (13, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "literalExpression",
               position: (13, 21),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "versionOlder (getVersion config.boot.kernelPackages.kernel) \"3.5\"",
                  position: (13, 41),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (14, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Whether to enable klogd, the kernel log message processing\ndaemon.  Since systemd handles logging of kernel messages on\nLinux 3.5 and later, this is only useful if you're running an\nolder kernel.\n",
                position: (15, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      recursive: false,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "config",
        position: (27, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkIf",
       position: (27, 12),
      },
      arguments: [
       PropertyAccess {
        expression: Variable {
         identifier: "config",
         position: (27, 17),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "services",
           position: (27, 24),
          },
          Raw {
           content: "klogd",
           position: (27, 33),
          },
          Raw {
           content: "enable",
           position: (27, 39),
          },
         ],
        },
        default: None,
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "systemd",
             position: (28, 5),
            },
            Raw {
             content: "services",
             position: (28, 13),
            },
            Raw {
             content: "klogd",
             position: (28, 22),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (29, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Kernel Log Daemon",
                position: (29, 22),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "wantedBy",
                position: (30, 7),
               },
              ],
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "multi-user.target",
                  position: (30, 21),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "path",
                position: (31, 7),
               },
              ],
             },
             List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "pkgs",
                 position: (31, 16),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "sysklogd",
                   position: (31, 21),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "unitConfig",
                position: (32, 7),
               },
               Raw {
                content: "ConditionVirtualization",
                position: (32, 18),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "!systemd-nspawn",
                position: (32, 45),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "script",
                position: (33, 7),
               },
              ],
             },
             BinaryOperation {
              operator: Addition,
              operands: [
               String {
                parts: [
                 Raw {
                  content: "klogd -c 1 -2 -n ",
                  position: (34, 10),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "-k $(dirname $(readlink -f /run/booted-system/kernel))/System.map",
                  position: (35, 10),
                 },
                ],
               },
              ],
              position: (34, 29),
             },
            ),
           ],
           recursive: false,
          },
         ),
        ],
        recursive: false,
       },
      ],
     },
    ),
   ],
   recursive: false,
  },
  position: (3, 1),
 },
 position: (1, 1),
}