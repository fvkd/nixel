---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (6, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (6, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "programs",
         position: (6, 16),
        },
        Raw {
         content: "bash",
         position: (6, 25),
        },
        Raw {
         content: "undistractMe",
         position: (6, 30),
        },
       ],
      },
      default: None,
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (9, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "programs",
            position: (10, 5),
           },
           Raw {
            content: "bash",
            position: (10, 14),
           },
           Raw {
            content: "undistractMe",
            position: (10, 19),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "enable",
               position: (11, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (11, 16),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "notifications when long-running terminal commands complete",
                 position: (11, 32),
                },
               ],
               position: (11, 31),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "playSound",
               position: (13, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (13, 19),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "notification sounds when long-running terminal commands complete",
                 position: (13, 35),
                },
               ],
               position: (13, 34),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "timeout",
               position: (15, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (15, 17),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (16, 9),
                   },
                  ],
                 },
                 to: Int {
                  value: 10,
                  position: (16, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (17, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Number of seconds it would take for a command to be considered long-running.\n",
                    position: (18, 1),
                   },
                  ],
                  position: (17, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (20, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (20, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "int",
                     position: (20, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               recursive: false,
               position: (15, 26),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (10, 34),
         },
        },
       ],
       recursive: false,
       position: (9, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (25, 3),
        },
       ],
      },
      to: FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (25, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (25, 17),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (25, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "programs",
              position: (26, 5),
             },
             Raw {
              content: "bash",
              position: (26, 14),
             },
             Raw {
              content: "promptPluginInit",
              position: (26, 19),
             },
            ],
           },
           to: String {
            parts: [
             Raw {
              content: "export LONG_RUNNING_COMMAND_TIMEOUT=",
              position: (27, 1),
             },
             Interpolation {
              expression: FunctionApplication {
               function: Variable {
                identifier: "toString",
                position: (27, 45),
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (27, 54),
                 },
                 attribute_path: AttributePath {
                  parts: [
                   Raw {
                    content: "timeout",
                    position: (27, 58),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             },
             Raw {
              content: "\nexport UDM_PLAY_SOUND=",
              position: (27, 66),
             },
             Interpolation {
              expression: IfThenElse {
               predicate: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (28, 34),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "playSound",
                   position: (28, 38),
                  },
                 ],
                },
                default: None,
               },
               then: String {
                parts: [
                 Raw {
                  content: "1",
                  position: (28, 54),
                 },
                ],
                position: (28, 53),
               },
               else_: String {
                parts: [
                 Raw {
                  content: "0",
                  position: (28, 63),
                 },
                ],
                position: (28, 62),
               },
               position: (28, 31),
              },
             },
             Raw {
              content: "\n. \"",
              position: (28, 66),
             },
             Interpolation {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (29, 12),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "undistract-me",
                  position: (29, 17),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/etc/profile.d/undistract-me.sh\"\n",
              position: (29, 31),
             },
            ],
            position: (26, 38),
           },
          },
         ],
         recursive: false,
         position: (25, 28),
        },
       ],
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "meta",
         position: (33, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "maintainers",
            position: (34, 5),
           },
          ],
         },
         to: With {
          expression: Variable {
           identifier: "maintainers",
           position: (34, 24),
          },
          target: List {
           elements: [
            Variable {
             identifier: "kira-bruneau",
             position: (34, 39),
            },
           ],
           position: (34, 37),
          },
          position: (34, 19),
         },
        },
       ],
       recursive: false,
       position: (33, 10),
      },
     },
    ],
    recursive: false,
    position: (8, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}