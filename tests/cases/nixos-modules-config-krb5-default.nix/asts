---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "krb5",
         position: (7, 16),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "defaultConfig",
        position: (11, 3),
       },
      ],
     },
     Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "libdefaults",
           position: (12, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "optionalAttrs",
          position: (12, 19),
         },
         arguments: [
          BinaryOperation {
           operator: NotEqualTo,
           operands: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (12, 34),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "defaultRealm",
                position: (12, 38),
               },
              ],
             },
             default: None,
            },
            Variable {
             identifier: "null",
             position: (12, 54),
            },
           ],
           position: (12, 51),
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default_realm",
                position: (13, 9),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (13, 25),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "defaultRealm",
                 position: (13, 29),
                },
               ],
              },
              default: None,
             },
            ),
           ],
           recursive: false,
           position: (13, 7),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "realms",
           position: (15, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "optionalAttrs",
          position: (15, 14),
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (15, 29),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "all",
               position: (15, 33),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Function {
             argument: Some(
              "value",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "value",
                position: (15, 45),
               },
               Variable {
                identifier: "null",
                position: (15, 54),
               },
              ],
              position: (15, 51),
             },
             position: (15, 38),
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (16, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "defaultRealm",
                  position: (16, 11),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (16, 24),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "kdc",
                  position: (16, 28),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (16, 32),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "kerberosAdminServer",
                  position: (16, 36),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (15, 60),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (18, 9),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultRealm",
                    position: (18, 13),
                   },
                  ],
                 },
                 default: None,
                },
               },
              ],
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "kdc",
                   position: (19, 9),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (19, 15),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "kdc",
                    position: (19, 19),
                   },
                  ],
                 },
                 default: None,
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "admin_server",
                   position: (20, 9),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (20, 24),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "kerberosAdminServer",
                    position: (20, 28),
                   },
                  ],
                 },
                 default: None,
                },
               ),
              ],
              recursive: false,
              position: (18, 29),
             },
            ),
           ],
           recursive: false,
           position: (17, 8),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "domain_realm",
           position: (24, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "optionalAttrs",
          position: (24, 20),
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (24, 35),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "all",
               position: (24, 39),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Function {
             argument: Some(
              "value",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "value",
                position: (24, 51),
               },
               Variable {
                identifier: "null",
                position: (24, 60),
               },
              ],
              position: (24, 57),
             },
             position: (24, 44),
            },
            List {
             elements: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (25, 7),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "domainRealm",
                  position: (25, 11),
                 },
                ],
               },
               default: None,
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (25, 23),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "defaultRealm",
                  position: (25, 27),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (24, 66),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Expression {
                expression: String {
                 parts: [
                  Raw {
                   content: ".",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (27, 11),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "domainRealm",
                       position: (27, 15),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                 ],
                 position: (27, 7),
                },
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (27, 31),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "defaultRealm",
                 position: (27, 35),
                },
               ],
              },
              default: None,
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (28, 9),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "domainRealm",
                    position: (28, 13),
                   },
                  ],
                 },
                 default: None,
                },
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (28, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "defaultRealm",
                 position: (28, 32),
                },
               ],
              },
              default: None,
             },
            ),
           ],
           recursive: false,
           position: (26, 8),
          },
         ],
        },
       ),
      ],
      recursive: false,
      position: (11, 19),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mergedConfig",
        position: (32, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "recursiveUpdate",
       position: (32, 19),
      },
      arguments: [
       Variable {
        identifier: "defaultConfig",
        position: (32, 35),
       },
       Map {
        bindings: [
         Inherit(
          Some(
           PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (33, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "krb5",
               position: (33, 21),
              },
             ],
            },
            default: None,
           },
          ),
          [
           Raw {
            content: "kerberos",
            position: (34, 7),
           },
           Raw {
            content: "libdefaults",
            position: (34, 16),
           },
           Raw {
            content: "realms",
            position: (34, 28),
           },
           Raw {
            content: "domain_realm",
            position: (34, 35),
           },
           Raw {
            content: "capaths",
            position: (34, 48),
           },
           Raw {
            content: "appdefaults",
            position: (34, 56),
           },
           Raw {
            content: "plugins",
            position: (34, 68),
           },
           Raw {
            content: "extraConfig",
            position: (35, 7),
           },
           Raw {
            content: "config",
            position: (35, 19),
           },
          ],
         ),
        ],
        recursive: false,
        position: (32, 49),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "filterEmbeddedMetadata",
        position: (38, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "value",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "isAttrs",
         position: (38, 38),
        },
        arguments: [
         Variable {
          identifier: "value",
          position: (38, 46),
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "filterAttrs",
         position: (39, 6),
        },
        arguments: [
         Function {
          argument: Some(
           "attrName",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: Function {
           argument: Some(
            "attrValue",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: BinaryOperation {
            operator: LogicalAnd,
            operands: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "attrName",
                position: (40, 29),
               },
               String {
                parts: [
                 Raw {
                  content: "_module",
                 },
                ],
                position: (40, 41),
               },
              ],
              position: (40, 38),
             },
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               Variable {
                identifier: "attrValue",
                position: (40, 54),
               },
               Variable {
                identifier: "null",
                position: (40, 67),
               },
              ],
              position: (40, 64),
             },
            ],
            position: (40, 51),
           },
           position: (40, 18),
          },
          position: (40, 8),
         },
         Variable {
          identifier: "value",
          position: (41, 9),
         },
        ],
       },
       else_: Variable {
        identifier: "value",
        position: (42, 10),
       },
       position: (38, 35),
      },
      position: (38, 28),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "indent",
        position: (44, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "  ",
       },
      ],
      position: (44, 12),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkRelation",
        position: (46, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "value",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "isList",
          position: (47, 9),
         },
         arguments: [
          Variable {
           identifier: "value",
           position: (47, 16),
          },
         ],
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "concatMapStringsSep",
          position: (48, 7),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "\n",
            },
           ],
           position: (48, 27),
          },
          FunctionApplication {
           function: Variable {
            identifier: "mkRelation",
            position: (48, 33),
           },
           arguments: [
            Variable {
             identifier: "name",
             position: (48, 44),
            },
           ],
          },
          Variable {
           identifier: "value",
           position: (48, 50),
          },
         ],
        },
        else_: String {
         parts: [
          Expression {
           expression: Variable {
            identifier: "name",
            position: (49, 13),
           },
          },
          Raw {
           content: " = ",
          },
          Expression {
           expression: FunctionApplication {
            function: Variable {
             identifier: "mkVal",
             position: (49, 23),
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (49, 29),
             },
            ],
           },
          },
         ],
         position: (49, 10),
        },
        position: (47, 5),
       },
       position: (46, 22),
      },
      position: (46, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkVal",
        position: (51, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "value",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: BinaryOperation {
        operator: EqualTo,
        operands: [
         Variable {
          identifier: "value",
          position: (52, 9),
         },
         Variable {
          identifier: "true",
          position: (52, 18),
         },
        ],
        position: (52, 15),
       },
       then: String {
        parts: [
         Raw {
          content: "true",
         },
        ],
        position: (52, 29),
       },
       else_: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "value",
           position: (53, 14),
          },
          Variable {
           identifier: "false",
           position: (53, 23),
          },
         ],
         position: (53, 20),
        },
        then: String {
         parts: [
          Raw {
           content: "false",
          },
         ],
         position: (53, 35),
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: Variable {
           identifier: "isInt",
           position: (54, 14),
          },
          arguments: [
           Variable {
            identifier: "value",
            position: (54, 20),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (54, 33),
          },
          arguments: [
           Variable {
            identifier: "value",
            position: (54, 42),
           },
          ],
         },
         else_: IfThenElse {
          predicate: FunctionApplication {
           function: Variable {
            identifier: "isAttrs",
            position: (55, 14),
           },
           arguments: [
            Variable {
             identifier: "value",
             position: (55, 22),
            },
           ],
          },
          then: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "configLines",
                position: (56, 11),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatLists",
               position: (56, 25),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "map",
                 position: (57, 10),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "splitString",
                   position: (57, 15),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "\n",
                     },
                    ],
                    position: (57, 27),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mapAttrsToList",
                   position: (58, 12),
                  },
                  arguments: [
                   Variable {
                    identifier: "mkRelation",
                    position: (58, 27),
                   },
                   Variable {
                    identifier: "value",
                    position: (58, 38),
                   },
                  ],
                 },
                ],
               },
              ],
             },
            ),
           ],
           target: BinaryOperation {
            operator: Addition,
            operands: [
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (60, 8),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                 },
                 Expression {
                  expression: Variable {
                   identifier: "indent",
                   position: (60, 30),
                  },
                 },
                ],
                position: (60, 25),
               },
               BinaryOperation {
                operator: Concatenation,
                operands: [
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "{",
                     },
                    ],
                    position: (61, 12),
                   },
                  ],
                  position: (61, 10),
                 },
                 Variable {
                  identifier: "configLines",
                  position: (61, 21),
                 },
                ],
                position: (61, 18),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "\n}",
               },
              ],
              position: (62, 9),
             },
            ],
            position: (62, 7),
           },
           position: (56, 7),
          },
          else_: Variable {
           identifier: "value",
           position: (63, 10),
          },
          position: (55, 10),
         },
         position: (54, 10),
        },
        position: (53, 10),
       },
       position: (52, 5),
      },
      position: (51, 11),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkMappedAttrsOrString",
        position: (65, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "value",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: Variable {
        identifier: "concatMapStringsSep",
        position: (65, 34),
       },
       arguments: [
        String {
         parts: [
          Raw {
           content: "\n",
          },
         ],
         position: (65, 54),
        },
        Function {
         argument: Some(
          "line",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: IfThenElse {
          predicate: BinaryOperation {
           operator: GreaterThan,
           operands: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (66, 15),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "stringLength",
                 position: (66, 24),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "line",
               position: (66, 37),
              },
             ],
            },
            Int {
             value: 0,
             position: (66, 44),
            },
           ],
           position: (66, 42),
          },
          then: String {
           parts: [
            Expression {
             expression: Variable {
              identifier: "indent",
              position: (67, 15),
             },
            },
            Expression {
             expression: Variable {
              identifier: "line",
              position: (67, 24),
             },
            },
           ],
           position: (67, 12),
          },
          else_: Variable {
           identifier: "line",
           position: (68, 12),
          },
          position: (66, 12),
         },
         position: (66, 6),
        },
        FunctionApplication {
         function: Variable {
          identifier: "splitString",
          position: (69, 6),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "\n",
            },
           ],
           position: (69, 18),
          },
          IfThenElse {
           predicate: FunctionApplication {
            function: Variable {
             identifier: "isAttrs",
             position: (70, 11),
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (70, 19),
             },
            ],
           },
           then: FunctionApplication {
            function: Variable {
             identifier: "concatStringsSep",
             position: (71, 9),
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "\n",
               },
              ],
              position: (71, 26),
             },
             FunctionApplication {
              function: Variable {
               identifier: "mapAttrsToList",
               position: (72, 14),
              },
              arguments: [
               Variable {
                identifier: "mkRelation",
                position: (72, 29),
               },
               Variable {
                identifier: "value",
                position: (72, 40),
               },
              ],
             },
            ],
           },
           else_: Variable {
            identifier: "value",
            position: (73, 14),
           },
           position: (70, 8),
          },
         ],
        },
       ],
      },
      position: (65, 27),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (79, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "krb5",
            position: (80, 5),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (81, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (81, 16),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "building krb5.conf, configuration file for Kerberos V",
                },
               ],
               position: (81, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "kerberos",
               position: (83, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (83, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (84, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (84, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "package",
                     position: (84, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (85, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "pkgs",
                   position: (85, 19),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "krb5Full",
                     position: (85, 24),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "defaultText",
                    position: (86, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (86, 23),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.krb5Full",
                     },
                    ],
                    position: (86, 41),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (87, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (87, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "pkgs.heimdal",
                     },
                    ],
                    position: (87, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (88, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The Kerberos implementation that will be present in\n<literal>environment.systemPackages</literal> after enabling this\nservice.\n",
                   },
                  ],
                  position: (88, 23),
                 },
                ),
               ],
               recursive: false,
               position: (83, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "libdefaults",
               position: (95, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (95, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (96, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (96, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (96, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (96, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (96, 41),
                    },
                   ],
                  },
                  position: (96, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (97, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (97, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (98, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (98, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (98, 47),
                    },
                   ],
                  },
                  position: (98, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (99, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (99, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  default_realm = \"ATHENA.MIT.EDU\";\n};\n",
                     },
                    ],
                    position: (99, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (104, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Settings used by the Kerberos V5 library.\n",
                   },
                  ],
                  position: (104, 23),
                 },
                ),
               ],
               recursive: false,
               position: (95, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "realms",
               position: (109, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (109, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (110, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (110, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (110, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (110, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (110, 41),
                    },
                   ],
                  },
                  position: (110, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (111, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (111, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (112, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (112, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  \"ATHENA.MIT.EDU\" = {\n    admin_server = \"athena.mit.edu\";\n    kdc = [\n      \"athena01.mit.edu\"\n      \"athena02.mit.edu\"\n    ];\n  };\n};\n",
                     },
                    ],
                    position: (112, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (123, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (123, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (123, 47),
                    },
                   ],
                  },
                  position: (123, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (124, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Realm-specific contact information and settings.",
                   },
                  ],
                  position: (124, 23),
                 },
                ),
               ],
               recursive: false,
               position: (109, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "domain_realm",
               position: (127, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (127, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (128, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (128, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (128, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (128, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (128, 41),
                    },
                   ],
                  },
                  position: (128, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (129, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (129, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (130, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (130, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  \"example.com\" = \"EXAMPLE.COM\";\n  \".example.com\" = \"EXAMPLE.COM\";\n};\n",
                     },
                    ],
                    position: (130, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (136, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (136, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (136, 47),
                    },
                   ],
                  },
                  position: (136, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (137, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Map of server hostnames to Kerberos realms.\n",
                   },
                  ],
                  position: (137, 23),
                 },
                ),
               ],
               recursive: false,
               position: (127, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "capaths",
               position: (142, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (142, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (143, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (143, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (143, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (143, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (143, 41),
                    },
                   ],
                  },
                  position: (143, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (144, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (144, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (145, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (145, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  \"ATHENA.MIT.EDU\" = {\n    \"EXAMPLE.COM\" = \".\";\n  };\n  \"EXAMPLE.COM\" = {\n    \"ATHENA.MIT.EDU\" = \".\";\n  };\n};\n",
                     },
                    ],
                    position: (145, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (155, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (155, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (155, 47),
                    },
                   ],
                  },
                  position: (155, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (156, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Authentication paths for non-hierarchical cross-realm authentication.\n",
                   },
                  ],
                  position: (156, 23),
                 },
                ),
               ],
               recursive: false,
               position: (142, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "appdefaults",
               position: (161, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (161, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (162, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (162, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (162, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (162, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (162, 41),
                    },
                   ],
                  },
                  position: (162, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (163, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (163, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (164, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (164, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  pam = {\n    debug = false;\n    ticket_lifetime = 36000;\n    renew_lifetime = 36000;\n    max_timeout = 30;\n    timeout_shift = 2;\n    initial_timeout = 1;\n  };\n};\n",
                     },
                    ],
                    position: (164, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (176, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (176, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (176, 47),
                    },
                   ],
                  },
                  position: (176, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (177, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Settings used by some Kerberos V5 applications.\n",
                   },
                  ],
                  position: (177, 23),
                 },
                ),
               ],
               recursive: false,
               position: (161, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "plugins",
               position: (182, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (182, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (183, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (183, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "either",
                    position: (183, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (183, 35),
                    },
                    Variable {
                     identifier: "lines",
                     position: (183, 41),
                    },
                   ],
                  },
                  position: (183, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (184, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (184, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (185, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "literalExpression",
                   position: (185, 19),
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "{\n  ccselect = {\n    disable = \"k5identity\";\n  };\n};\n",
                     },
                    ],
                    position: (185, 37),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (192, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "attrs",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: FunctionApplication {
                   function: Variable {
                    identifier: "filterEmbeddedMetadata",
                    position: (192, 24),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (192, 47),
                    },
                   ],
                  },
                  position: (192, 17),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (193, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Controls plugin module registration.\n",
                   },
                  ],
                  position: (193, 23),
                 },
                ),
               ],
               recursive: false,
               position: (182, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraConfig",
               position: (198, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (198, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (199, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (199, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (199, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "lines",
                     position: (199, 35),
                    },
                   ],
                  },
                  position: (199, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (200, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (200, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (201, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "[logging]\n  kdc          = SYSLOG:NOTICE\n  admin_server = SYSLOG:NOTICE\n  default      = SYSLOG:NOTICE\n",
                   },
                  ],
                  position: (201, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (207, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "These lines go to the end of <literal>krb5.conf</literal> verbatim.\n<literal>krb5.conf</literal> may include any of the relations that are\nvalid for <literal>kdc.conf</literal> (see <literal>man\nkdc.conf</literal>), but it is not a recommended practice.\n",
                   },
                  ],
                  position: (207, 23),
                 },
                ),
               ],
               recursive: false,
               position: (198, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "config",
               position: (215, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (215, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (216, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (216, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (216, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "lines",
                     position: (216, 35),
                    },
                   ],
                  },
                  position: (216, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (217, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (217, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (218, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "[libdefaults]\n  default_realm = EXAMPLE.COM\n\n[realms]\n  EXAMPLE.COM = {\n    admin_server = kerberos.example.com\n    kdc = kerberos.example.com\n    default_principal_flags = +preauth\n  }\n\n[domain_realm]\n  example.com  = EXAMPLE.COM\n  .example.com = EXAMPLE.COM\n\n[logging]\n  kdc          = SYSLOG:NOTICE\n  admin_server = SYSLOG:NOTICE\n  default      = SYSLOG:NOTICE\n",
                   },
                  ],
                  position: (218, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (238, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Verbatim <literal>krb5.conf</literal> configuration.  Note that this\nis mutually exclusive with configuration via\n<literal>libdefaults</literal>, <literal>realms</literal>,\n<literal>domain_realm</literal>, <literal>capaths</literal>,\n<literal>appdefaults</literal>, <literal>plugins</literal> and\n<literal>extraConfig</literal> configuration options.  Consult\n<literal>man krb5.conf</literal> for documentation.\n",
                   },
                  ],
                  position: (238, 23),
                 },
                ),
               ],
               recursive: false,
               position: (215, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "defaultRealm",
               position: (249, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (249, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (250, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (250, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (250, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (250, 35),
                    },
                   ],
                  },
                  position: (250, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (251, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (251, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (252, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "ATHENA.MIT.EDU",
                   },
                  ],
                  position: (252, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (253, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "DEPRECATED, please use\n<literal>krb5.libdefaults.default_realm</literal>.\n",
                   },
                  ],
                  position: (253, 23),
                 },
                ),
               ],
               recursive: false,
               position: (249, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "domainRealm",
               position: (259, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (259, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (260, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (260, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (260, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (260, 35),
                    },
                   ],
                  },
                  position: (260, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (261, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (261, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (262, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "athena.mit.edu",
                   },
                  ],
                  position: (262, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (263, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "DEPRECATED, please create a map of server hostnames to Kerberos realms\nin <literal>krb5.domain_realm</literal>.\n",
                   },
                  ],
                  position: (263, 23),
                 },
                ),
               ],
               recursive: false,
               position: (259, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "kdc",
               position: (269, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (269, 13),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (270, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (270, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (270, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (270, 35),
                    },
                   ],
                  },
                  position: (270, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (271, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (271, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (272, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "kerberos.mit.edu",
                   },
                  ],
                  position: (272, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (273, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "DEPRECATED, please pass a <literal>kdc</literal> attribute to a realm\nin <literal>krb5.realms</literal>.\n",
                   },
                  ],
                  position: (273, 23),
                 },
                ),
               ],
               recursive: false,
               position: (269, 22),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "kerberosAdminServer",
               position: (279, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (279, 29),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (280, 9),
                   },
                  ],
                 },
                 With {
                  expression: Variable {
                   identifier: "types",
                   position: (280, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "nullOr",
                    position: (280, 28),
                   },
                   arguments: [
                    Variable {
                     identifier: "str",
                     position: (280, 35),
                    },
                   ],
                  },
                  position: (280, 16),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (281, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "null",
                  position: (281, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (282, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "kerberos.mit.edu",
                   },
                  ],
                  position: (282, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (283, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "DEPRECATED, please pass an <literal>admin_server</literal> attribute\nto a realm in <literal>krb5.realms</literal>.\n",
                   },
                  ],
                  position: (283, 23),
                 },
                ),
               ],
               recursive: false,
               position: (279, 38),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (80, 12),
         },
        ),
       ],
       recursive: false,
       position: (79, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (293, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (293, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (293, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (293, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (295, 5),
             },
             Raw {
              content: "systemPackages",
              position: (295, 17),
             },
            ],
           },
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (295, 36),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "kerberos",
                 position: (295, 40),
                },
               ],
              },
              default: None,
             },
            ],
            position: (295, 34),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (297, 5),
             },
             Raw {
              content: "etc",
              position: (297, 17),
             },
             Expression {
              expression: String {
               parts: [
                Raw {
                 content: "krb5.conf",
                },
               ],
               position: (297, 21),
              },
             },
             Raw {
              content: "text",
              position: (297, 33),
             },
            ],
           },
           IfThenElse {
            predicate: FunctionApplication {
             function: Variable {
              identifier: "isString",
              position: (297, 43),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (297, 52),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "config",
                  position: (297, 56),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            then: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (298, 12),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "config",
                position: (298, 16),
               },
              ],
             },
             default: None,
            },
            else_: BinaryOperation {
             operator: Addition,
             operands: [
              String {
               parts: [
                Raw {
                 content: "[libdefaults]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (301, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (301, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "libdefaults",
                       position: (301, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n[realms]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (304, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (304, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "realms",
                       position: (304, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n[domain_realm]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (307, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (307, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "domain_realm",
                       position: (307, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n[capaths]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (310, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (310, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "capaths",
                       position: (310, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n[appdefaults]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (313, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (313, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "appdefaults",
                       position: (313, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n\n[plugins]\n",
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "mkMappedAttrsOrString",
                   position: (316, 11),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "mergedConfig",
                     position: (316, 33),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "plugins",
                       position: (316, 46),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                },
                Raw {
                 content: "\n",
                },
               ],
               position: (299, 13),
              },
              FunctionApplication {
               function: Variable {
                identifier: "optionalString",
                position: (317, 12),
               },
               arguments: [
                BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mergedConfig",
                    position: (317, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraConfig",
                      position: (317, 41),
                     },
                    ],
                   },
                   default: None,
                  },
                  Variable {
                   identifier: "null",
                   position: (317, 56),
                  },
                 ],
                 position: (317, 53),
                },
                BinaryOperation {
                 operator: Addition,
                 operands: [
                  String {
                   parts: [
                    Raw {
                     content: "\n",
                    },
                   ],
                   position: (318, 12),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "mergedConfig",
                    position: (318, 19),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraConfig",
                      position: (318, 32),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (318, 17),
                },
               ],
              },
             ],
             position: (317, 10),
            },
            position: (297, 40),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "warnings",
              position: (320, 5),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "flatten",
             position: (320, 16),
            },
            arguments: [
             List {
              elements: [
               FunctionApplication {
                function: Variable {
                 identifier: "optional",
                 position: (321, 8),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (321, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "defaultRealm",
                       position: (321, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (321, 38),
                   },
                  ],
                  position: (321, 35),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The option krb5.defaultRealm is deprecated, please use\nkrb5.libdefaults.default_realm.\n",
                   },
                  ],
                  position: (321, 44),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optional",
                 position: (325, 8),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (325, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "domainRealm",
                       position: (325, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (325, 37),
                   },
                  ],
                  position: (325, 34),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The option krb5.domainRealm is deprecated, please use krb5.domain_realm.\n",
                   },
                  ],
                  position: (325, 43),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optional",
                 position: (328, 8),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (328, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "kdc",
                       position: (328, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (328, 29),
                   },
                  ],
                  position: (328, 26),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The option krb5.kdc is deprecated, please pass a kdc attribute to a\nrealm in krb5.realms.\n",
                   },
                  ],
                  position: (328, 35),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optional",
                 position: (332, 8),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "cfg",
                     position: (332, 18),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "kerberosAdminServer",
                       position: (332, 22),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "null",
                    position: (332, 45),
                   },
                  ],
                  position: (332, 42),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "The option krb5.kerberosAdminServer is deprecated, please pass an\nadmin_server attribute to a realm in krb5.realms.\n",
                   },
                  ],
                  position: (332, 51),
                 },
                ],
               },
              ],
              position: (320, 24),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (338, 5),
             },
            ],
           },
           List {
            elements: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "assertion",
                   position: (339, 9),
                  },
                 ],
                },
                UnaryOperation {
                 operator: Not,
                 operand: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "builtins",
                      position: (339, 24),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "any",
                        position: (339, 33),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "value",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: BinaryOperation {
                       operator: NotEqualTo,
                       operands: [
                        Variable {
                         identifier: "value",
                         position: (339, 45),
                        },
                        Variable {
                         identifier: "null",
                         position: (339, 54),
                        },
                       ],
                       position: (339, 51),
                      },
                      position: (339, 38),
                     },
                     List {
                      elements: [
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (340, 13),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "defaultRealm",
                           position: (340, 17),
                          },
                         ],
                        },
                        default: None,
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (340, 30),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "domainRealm",
                           position: (340, 34),
                          },
                         ],
                        },
                        default: None,
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (340, 46),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "kdc",
                           position: (340, 50),
                          },
                         ],
                        },
                        default: None,
                       },
                       PropertyAccess {
                        expression: Variable {
                         identifier: "cfg",
                         position: (340, 54),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "kerberosAdminServer",
                           position: (340, 58),
                          },
                         ],
                        },
                        default: None,
                       },
                      ],
                      position: (339, 60),
                     },
                    ],
                   },
                   BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (341, 19),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "any",
                          position: (341, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "value",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: BinaryOperation {
                         operator: NotEqualTo,
                         operands: [
                          Variable {
                           identifier: "value",
                           position: (341, 40),
                          },
                          Map {
                           bindings: [],
                           recursive: false,
                           position: (341, 49),
                          },
                         ],
                         position: (341, 46),
                        },
                        position: (341, 33),
                       },
                       List {
                        elements: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (342, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "libdefaults",
                             position: (342, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (342, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "realms",
                             position: (342, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (342, 42),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "domain_realm",
                             position: (342, 46),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (342, 59),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "capaths",
                             position: (342, 63),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (343, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "appdefaults",
                             position: (343, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (343, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "plugins",
                             position: (343, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                        position: (341, 53),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (344, 20),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "any",
                          position: (344, 29),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "value",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: BinaryOperation {
                         operator: NotEqualTo,
                         operands: [
                          Variable {
                           identifier: "value",
                           position: (344, 41),
                          },
                          Variable {
                           identifier: "null",
                           position: (344, 50),
                          },
                         ],
                         position: (344, 47),
                        },
                        position: (344, 34),
                       },
                       List {
                        elements: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (345, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "config",
                             position: (345, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (345, 26),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "extraConfig",
                             position: (345, 30),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                        position: (344, 56),
                       },
                      ],
                     },
                    ],
                    position: (344, 16),
                   },
                  ],
                  position: (341, 14),
                 },
                 position: (339, 21),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "message",
                   position: (347, 9),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "Configuration of krb5.conf by deprecated options is mutually exclusive\nwith configuration by section.  Please migrate your config using the\nattributes suggested in the warnings.\n",
                  },
                 ],
                 position: (347, 19),
                },
               ),
              ],
              recursive: false,
              position: (339, 7),
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "assertion",
                   position: (353, 9),
                  },
                 ],
                },
                UnaryOperation {
                 operator: Not,
                 operand: BinaryOperation {
                  operator: LogicalAnd,
                  operands: [
                   BinaryOperation {
                    operator: NotEqualTo,
                    operands: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (353, 23),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "config",
                         position: (353, 27),
                        },
                       ],
                      },
                      default: None,
                     },
                     Variable {
                      identifier: "null",
                      position: (353, 37),
                     },
                    ],
                    position: (353, 34),
                   },
                   BinaryOperation {
                    operator: LogicalOr,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (354, 16),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "any",
                          position: (354, 25),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "value",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: BinaryOperation {
                         operator: NotEqualTo,
                         operands: [
                          Variable {
                           identifier: "value",
                           position: (354, 37),
                          },
                          Map {
                           bindings: [],
                           recursive: false,
                           position: (354, 46),
                          },
                         ],
                         position: (354, 43),
                        },
                        position: (354, 30),
                       },
                       List {
                        elements: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (355, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "libdefaults",
                             position: (355, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (355, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "realms",
                             position: (355, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (355, 42),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "domain_realm",
                             position: (355, 46),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (355, 59),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "capaths",
                             position: (355, 63),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (356, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "appdefaults",
                             position: (356, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (356, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "plugins",
                             position: (356, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                        position: (354, 50),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "builtins",
                        position: (357, 20),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "any",
                          position: (357, 29),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Function {
                        argument: Some(
                         "value",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: BinaryOperation {
                         operator: NotEqualTo,
                         operands: [
                          Variable {
                           identifier: "value",
                           position: (357, 41),
                          },
                          Variable {
                           identifier: "null",
                           position: (357, 50),
                          },
                         ],
                         position: (357, 47),
                        },
                        position: (357, 34),
                       },
                       List {
                        elements: [
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (358, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "extraConfig",
                             position: (358, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (358, 31),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "defaultRealm",
                             position: (358, 35),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (358, 48),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "domainRealm",
                             position: (358, 52),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (358, 64),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "kdc",
                             position: (358, 68),
                            },
                           ],
                          },
                          default: None,
                         },
                         PropertyAccess {
                          expression: Variable {
                           identifier: "cfg",
                           position: (359, 15),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "kerberosAdminServer",
                             position: (359, 19),
                            },
                           ],
                          },
                          default: None,
                         },
                        ],
                        position: (357, 56),
                       },
                      ],
                     },
                    ],
                    position: (357, 16),
                   },
                  ],
                  position: (354, 11),
                 },
                 position: (353, 21),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "message",
                   position: (361, 9),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "Configuration of krb5.conf using krb.config is mutually exclusive with\nconfiguration by section.  If you want to mix the two, you can pass\nlines to any configuration section or lines to krb5.extraConfig.\n",
                  },
                 ],
                 position: (361, 19),
                },
               ),
              ],
              recursive: false,
              position: (353, 7),
             },
            ],
            position: (338, 18),
           },
          ),
         ],
         recursive: false,
         position: (293, 28),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (75, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}