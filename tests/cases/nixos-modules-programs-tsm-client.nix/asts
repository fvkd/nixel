---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: LetIn {
  bindings: [
   Inherit(
    Some(
     Variable {
      identifier: "builtins",
      position: (5, 12),
     },
    ),
    [
     Raw {
      content: "length",
      position: (5, 22),
     },
     Raw {
      content: "map",
      position: (5, 29),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (6, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "attrsets",
         position: (6, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "attrNames",
      position: (6, 26),
     },
     Raw {
      content: "filterAttrs",
      position: (6, 36),
     },
     Raw {
      content: "hasAttr",
      position: (6, 48),
     },
     Raw {
      content: "mapAttrs",
      position: (6, 56),
     },
     Raw {
      content: "mapAttrsToList",
      position: (6, 65),
     },
     Raw {
      content: "optionalAttrs",
      position: (6, 80),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (7, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "modules",
         position: (7, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "mkDefault",
      position: (7, 25),
     },
     Raw {
      content: "mkIf",
      position: (7, 35),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (8, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (8, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "literalExpression",
      position: (8, 25),
     },
     Raw {
      content: "mkEnableOption",
      position: (8, 43),
     },
     Raw {
      content: "mkOption",
      position: (8, 58),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (9, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "strings",
         position: (9, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "concatStringsSep",
      position: (9, 25),
     },
     Raw {
      content: "optionalString",
      position: (9, 42),
     },
     Raw {
      content: "toLower",
      position: (9, 57),
     },
    ],
   ),
   Inherit(
    Some(
     PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (10, 12),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "types",
         position: (10, 16),
        },
       ],
      },
      default: None,
     },
    ),
    [
     Raw {
      content: "addCheck",
      position: (10, 23),
     },
     Raw {
      content: "attrsOf",
      position: (10, 32),
     },
     Raw {
      content: "lines",
      position: (10, 40),
     },
     Raw {
      content: "nonEmptyStr",
      position: (10, 46),
     },
     Raw {
      content: "nullOr",
      position: (10, 58),
     },
     Raw {
      content: "package",
      position: (10, 65),
     },
     Raw {
      content: "path",
      position: (10, 73),
     },
     Raw {
      content: "port",
      position: (10, 78),
     },
     Raw {
      content: "str",
      position: (10, 83),
     },
     Raw {
      content: "strMatching",
      position: (10, 87),
     },
     Raw {
      content: "submodule",
      position: (10, 99),
     },
    ],
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "checkIUnique",
       position: (16, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "lst",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "lenUniq",
           position: (18, 7),
          },
         ],
        },
        Function {
         argument: Some(
          "l",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: FunctionApplication {
          function: Variable {
           identifier: "length",
           position: (18, 20),
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (18, 28),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "lists",
                position: (18, 32),
               },
               Raw {
                content: "unique",
                position: (18, 38),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "l",
              position: (18, 45),
             },
            ],
           },
          ],
         },
         position: (18, 17),
        },
       ),
      ],
      target: BinaryOperation {
       operator: EqualTo,
       operands: [
        FunctionApplication {
         function: Variable {
          identifier: "lenUniq",
          position: (20, 7),
         },
         arguments: [
          Variable {
           identifier: "lst",
           position: (20, 15),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "lenUniq",
          position: (20, 22),
         },
         arguments: [
          FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (20, 31),
           },
           arguments: [
            Variable {
             identifier: "toLower",
             position: (20, 35),
            },
            Variable {
             identifier: "lst",
             position: (20, 43),
            },
           ],
          },
         ],
        },
       ],
       position: (20, 19),
      },
      position: (17, 5),
     },
     position: (16, 18),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "servernameType",
       position: (23, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "strMatching",
      position: (23, 20),
     },
     arguments: [
      String {
       parts: [
        Raw {
         content: ".{1,64}",
         position: (23, 33),
        },
       ],
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "serverOptions",
       position: (25, 3),
      },
     ],
    },
    Function {
     argument: None,
     arguments: FunctionArguments {
      arguments: [
       FunctionArgument {
        identifier: "config",
        default: None,
       },
       FunctionArgument {
        identifier: "name",
        default: None,
       },
      ],
      ellipsis: true,
     },
     definition: Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (26, 5),
          },
          Raw {
           content: "name",
           position: (26, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (26, 20),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (27, 7),
               },
              ],
             },
             Variable {
              identifier: "servernameType",
              position: (27, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (28, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "mainTsmServer",
                position: (28, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (29, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Local name of the IBM TSM server,\nmust be uncapitalized and no longer than 64 chars.\nThe value will be used for the\n<literal>server</literal>\ndirective in <filename>dsm.sys</filename>.\n",
                position: (30, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (26, 29),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (37, 5),
          },
          Raw {
           content: "server",
           position: (37, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (37, 22),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (38, 7),
               },
              ],
             },
             Variable {
              identifier: "nonEmptyStr",
              position: (38, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (39, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "tsmserver.company.com",
                position: (39, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (40, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Host/domain name or IP address of the IBM TSM server.\nThe value will be used for the\n<literal>tcpserveraddress</literal>\ndirective in <filename>dsm.sys</filename>.\n",
                position: (41, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (37, 31),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (47, 5),
          },
          Raw {
           content: "port",
           position: (47, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (47, 20),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (48, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "addCheck",
               position: (48, 14),
              },
              arguments: [
               Variable {
                identifier: "port",
                position: (48, 23),
               },
               Function {
                argument: Some(
                 "p",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: BinaryOperation {
                 operator: LessThanOrEqualTo,
                 operands: [
                  Variable {
                   identifier: "p",
                   position: (48, 32),
                  },
                  Int {
                   value: 32767,
                   position: (48, 35),
                  },
                 ],
                 position: (48, 33),
                },
                position: (48, 29),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (49, 7),
               },
              ],
             },
             Int {
              value: 1500,
              position: (49, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (50, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "TCP port of the IBM TSM server.\nThe value will be used for the\n<literal>tcpport</literal>\ndirective in <filename>dsm.sys</filename>.\nTSM does not support ports above 32767.\n",
                position: (51, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (47, 29),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (58, 5),
          },
          Raw {
           content: "node",
           position: (58, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (58, 20),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (59, 7),
               },
              ],
             },
             Variable {
              identifier: "nonEmptyStr",
              position: (59, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (60, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "MY-TSM-NODE",
                position: (60, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (61, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Target node name on the IBM TSM server.\nThe value will be used for the\n<literal>nodename</literal>\ndirective in <filename>dsm.sys</filename>.\n",
                position: (62, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (58, 29),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (68, 5),
          },
          Raw {
           content: "genPasswd",
           position: (68, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkEnableOption",
          position: (68, 25),
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "automatic client password generation.\nThis option influences the\n<literal>passwordaccess</literal>\ndirective in <filename>dsm.sys</filename>.\nThe password will be stored in the directory\ngiven by the option <option>passwdDir</option>.\n<emphasis>Caution</emphasis>:\nIf this option is enabled and the server forces\nto renew the password (e.g. on first connection),\na random password will be generated and stored\n",
             position: (69, 1),
            },
           ],
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (80, 5),
          },
          Raw {
           content: "passwdDir",
           position: (80, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (80, 25),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (81, 7),
               },
              ],
             },
             Variable {
              identifier: "path",
              position: (81, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (82, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "/home/alice/tsm-password",
                position: (82, 18),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (83, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Directory that holds the TSM\nnode's password information.\nThe value will be used for the\n<literal>passworddir</literal>\ndirective in <filename>dsm.sys</filename>.\n",
                position: (84, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (80, 34),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (91, 5),
          },
          Raw {
           content: "includeExclude",
           position: (91, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (91, 30),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (92, 7),
               },
              ],
             },
             Variable {
              identifier: "lines",
              position: (92, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (93, 7),
               },
              ],
             },
             String {
              parts: [],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (94, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "exclude.dir     /nix/store\ninclude.encrypt /home/.../*\n",
                position: (95, 1),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (98, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "<literal>include.*</literal> and\n<literal>exclude.*</literal> directives to be\nused when sending files to the IBM TSM server.\nThe lines will be written into a file that the\n<literal>inclexcl</literal>\ndirective in <filename>dsm.sys</filename> points to.\n",
                position: (99, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (91, 39),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (107, 5),
          },
          Raw {
           content: "extraConfig",
           position: (107, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (107, 27),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (111, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "addCheck",
               position: (111, 14),
              },
              arguments: [
               FunctionApplication {
                function: Variable {
                 identifier: "attrsOf",
                 position: (112, 10),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "nullOr",
                   position: (112, 19),
                  },
                  arguments: [
                   Variable {
                    identifier: "str",
                    position: (112, 26),
                   },
                  ],
                 },
                ],
               },
               Function {
                argument: Some(
                 "attrs",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "checkIUnique",
                  position: (113, 17),
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "attrNames",
                    position: (113, 31),
                   },
                   arguments: [
                    Variable {
                     identifier: "attrs",
                     position: (113, 41),
                    },
                   ],
                  },
                 ],
                },
                position: (113, 10),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "default",
                position: (114, 7),
               },
              ],
             },
             Map {
              bindings: [],
              recursive: false,
              position: (114, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (115, 7),
               },
               Raw {
                content: "compression",
                position: (115, 15),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "yes",
                position: (115, 30),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (116, 7),
               },
               Raw {
                content: "passwordaccess",
                position: (116, 15),
               },
              ],
             },
             Variable {
              identifier: "null",
              position: (116, 32),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (117, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Additional key-value pairs for the server stanza.\nValues must be strings, or <literal>null</literal>\nfor the key not to be used in the stanza\n(e.g. to overrule values generated by other options).\n",
                position: (118, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (107, 36),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (124, 5),
          },
          Raw {
           content: "text",
           position: (124, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (124, 20),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (125, 7),
               },
              ],
             },
             Variable {
              identifier: "lines",
              position: (125, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "example",
                position: (126, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "literalExpression",
               position: (126, 17),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "lib.modules.mkAfter \"compression no\"",
                  position: (127, 11),
                 },
                ],
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (128, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Additional text lines for the server stanza.\nThis option can be used if certion configuration keys\nmust be used multiple times or ordered in a certain way\nas the <option>extraConfig</option> option can't\ncontrol the order of lines in the resulting stanza.\nNote that the <literal>server</literal>\nline at the beginning of the stanza is\nnot part of this option's value.\n",
                position: (129, 1),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (124, 29),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "options",
           position: (139, 5),
          },
          Raw {
           content: "stanza",
           position: (139, 13),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkOption",
          position: (139, 22),
         },
         arguments: [
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "type",
                position: (140, 7),
               },
              ],
             },
             Variable {
              identifier: "str",
              position: (140, 14),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "internal",
                position: (141, 7),
               },
              ],
             },
             Variable {
              identifier: "true",
              position: (141, 18),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "visible",
                position: (142, 7),
               },
              ],
             },
             Variable {
              identifier: "false",
              position: (142, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "description",
                position: (143, 7),
               },
              ],
             },
             String {
              parts: [
               Raw {
                content: "Server stanza text generated from the options.",
                position: (143, 22),
               },
              ],
             },
            ),
           ],
           recursive: false,
           position: (139, 31),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (145, 5),
          },
          Raw {
           content: "name",
           position: (145, 12),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkDefault",
          position: (145, 19),
         },
         arguments: [
          Variable {
           identifier: "name",
           position: (145, 29),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (148, 5),
          },
          Raw {
           content: "extraConfig",
           position: (148, 12),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mapAttrs",
          position: (149, 7),
         },
         arguments: [
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (149, 17),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "trivial",
               position: (149, 21),
              },
              Raw {
               content: "const",
               position: (149, 29),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "mkDefault",
             position: (149, 35),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "commmethod",
                  position: (151, 11),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "v6tcpip",
                  position: (151, 25),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "tcpserveraddress",
                  position: (152, 11),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (152, 30),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "server",
                   position: (152, 37),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "tcpport",
                  position: (153, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (153, 21),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "toString",
                    position: (153, 30),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 PropertyAccess {
                  expression: Variable {
                   identifier: "config",
                   position: (153, 39),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "port",
                     position: (153, 46),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "nodename",
                  position: (154, 11),
                 },
                ],
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (154, 22),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "node",
                   position: (154, 29),
                  },
                 ],
                },
                default: None,
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "passwordaccess",
                  position: (155, 11),
                 },
                ],
               },
               IfThenElse {
                predicate: PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (155, 31),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "genPasswd",
                    position: (155, 38),
                   },
                  ],
                 },
                 default: None,
                },
                then: String {
                 parts: [
                  Raw {
                   content: "generate",
                   position: (155, 54),
                  },
                 ],
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "prompt",
                   position: (155, 70),
                  },
                 ],
                },
                position: (155, 28),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "passworddir",
                  position: (156, 11),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "\"",
                  position: (156, 27),
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "config",
                    position: (156, 30),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "passwdDir",
                      position: (156, 37),
                     },
                    ],
                   },
                   default: None,
                  },
                 },
                 Raw {
                  content: "\"",
                  position: (156, 47),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (150, 9),
            },
            FunctionApplication {
             function: Variable {
              identifier: "optionalAttrs",
              position: (157, 14),
             },
             arguments: [
              BinaryOperation {
               operator: NotEqualTo,
               operands: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "config",
                  position: (157, 29),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "includeExclude",
                    position: (157, 36),
                   },
                  ],
                 },
                 default: None,
                },
                String {
                 parts: [],
                },
               ],
               position: (157, 50),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "inclexcl",
                    position: (158, 11),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "\"",
                    position: (158, 24),
                   },
                   Expression {
                    expression: FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "pkgs",
                       position: (158, 27),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "writeText",
                         position: (158, 32),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      String {
                       parts: [
                        Raw {
                         content: "inclexcl.dsm.sys",
                         position: (158, 43),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "config",
                        position: (158, 61),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "includeExclude",
                          position: (158, 68),
                         },
                        ],
                       },
                       default: None,
                      },
                     ],
                    },
                   },
                   Raw {
                    content: "\"",
                    position: (158, 83),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (157, 56),
              },
             ],
            },
           ],
           position: (157, 11),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (161, 5),
          },
          Raw {
           content: "text",
           position: (161, 12),
          },
         ],
        },
        LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "attrset",
              position: (163, 9),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "filterAttrs",
             position: (163, 19),
            },
            arguments: [
             Function {
              argument: Some(
               "k",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "v",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 Variable {
                  identifier: "v",
                  position: (163, 38),
                 },
                 Variable {
                  identifier: "null",
                  position: (163, 41),
                 },
                ],
                position: (163, 39),
               },
               position: (163, 35),
              },
              position: (163, 32),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "config",
               position: (163, 47),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "extraConfig",
                 position: (163, 54),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "mkLine",
              position: (164, 9),
             },
            ],
           },
           Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: Addition,
              operands: [
               Variable {
                identifier: "k",
                position: (164, 24),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "optionalString",
                 position: (164, 28),
                },
                arguments: [
                 BinaryOperation {
                  operator: NotEqualTo,
                  operands: [
                   Variable {
                    identifier: "v",
                    position: (164, 44),
                   },
                   String {
                    parts: [],
                   },
                  ],
                  position: (164, 45),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "  ",
                    position: (164, 52),
                   },
                   Expression {
                    expression: Variable {
                     identifier: "v",
                     position: (164, 56),
                    },
                   },
                  ],
                 },
                ],
               },
              ],
              position: (164, 26),
             },
             position: (164, 21),
            },
            position: (164, 18),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "lines",
              position: (165, 9),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (165, 17),
            },
            arguments: [
             Variable {
              identifier: "mkLine",
              position: (165, 32),
             },
             Variable {
              identifier: "attrset",
              position: (165, 39),
             },
            ],
           },
          ),
         ],
         target: FunctionApplication {
          function: Variable {
           identifier: "concatStringsSep",
           position: (167, 9),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "\n",
              position: (167, 27),
             },
            ],
           },
           Variable {
            identifier: "lines",
            position: (167, 31),
           },
          ],
         },
         position: (162, 7),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "config",
           position: (168, 5),
          },
          Raw {
           content: "stanza",
           position: (168, 12),
          },
         ],
        },
        String {
         parts: [
          Raw {
           content: "server  ",
           position: (169, 1),
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (169, 17),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "name",
               position: (169, 24),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "\n",
           position: (169, 29),
          },
          Expression {
           expression: PropertyAccess {
            expression: Variable {
             identifier: "config",
             position: (170, 9),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "text",
               position: (170, 16),
              },
             ],
            },
            default: None,
           },
          },
          Raw {
           content: "\n",
           position: (170, 21),
          },
         ],
        },
       ),
      ],
      recursive: false,
      position: (25, 42),
     },
     position: (25, 19),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "options",
       position: (174, 3),
      },
      Raw {
       content: "programs",
       position: (174, 11),
      },
      Raw {
       content: "tsmClient",
       position: (174, 20),
      },
     ],
    },
    Map {
     bindings: [
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "enable",
          position: (175, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkEnableOption",
         position: (175, 14),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "IBM Spectrum Protect (Tivoli Storage Manager, TSM)\nclient command line applications with a\nclient system-options file \"dsm.sys\"\n",
            position: (176, 1),
           },
          ],
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "servers",
          position: (180, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (180, 15),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (181, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "attrsOf",
              position: (181, 14),
             },
             arguments: [
              FunctionApplication {
               function: Variable {
                identifier: "submodule",
                position: (181, 23),
               },
               arguments: [
                List {
                 elements: [
                  Variable {
                   identifier: "serverOptions",
                   position: (181, 35),
                  },
                 ],
                 position: (181, 33),
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "default",
               position: (182, 7),
              },
             ],
            },
            Map {
             bindings: [],
             recursive: false,
             position: (182, 17),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "example",
               position: (183, 7),
              },
              Raw {
               content: "mainTsmServer",
               position: (183, 15),
              },
             ],
            },
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "server",
                  position: (184, 9),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "tsmserver.company.com",
                  position: (184, 19),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "node",
                  position: (185, 9),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "MY-TSM-NODE",
                  position: (185, 17),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "extraConfig",
                  position: (186, 9),
                 },
                 Raw {
                  content: "compression",
                  position: (186, 21),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "yes",
                  position: (186, 36),
                 },
                ],
               },
              ),
             ],
             recursive: false,
             position: (183, 31),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "description",
               position: (188, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "Server definitions (\"stanzas\")\nfor the client system-options file.\n",
               position: (189, 1),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (180, 24),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "defaultServername",
          position: (193, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (193, 25),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (194, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "nullOr",
              position: (194, 14),
             },
             arguments: [
              Variable {
               identifier: "servernameType",
               position: (194, 21),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "default",
               position: (195, 7),
              },
             ],
            },
            Variable {
             identifier: "null",
             position: (195, 17),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "example",
               position: (196, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "mainTsmServer",
               position: (196, 18),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "description",
               position: (197, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "If multiple server stanzas are declared with\n<option>programs.tsmClient.servers</option>,\nthis option may be used to name a default\nserver stanza that IBM TSM uses in the absence of\na user-defined <filename>dsm.opt</filename> file.\nThis option translates to a\n<literal>defaultserver</literal> configuration line.\n",
               position: (198, 1),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (193, 34),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "dsmSysText",
          position: (207, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (207, 18),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (208, 7),
              },
             ],
            },
            Variable {
             identifier: "lines",
             position: (208, 14),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "readOnly",
               position: (209, 7),
              },
             ],
            },
            Variable {
             identifier: "true",
             position: (209, 18),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "description",
               position: (210, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "This configuration key contains the effective text\nof the client system-options file \"dsm.sys\".\nIt should not be changed, but may be\nused to feed the configuration into other\nTSM-depending packages used on the system.\n",
               position: (211, 1),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (207, 27),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "package",
          position: (218, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (218, 15),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (219, 7),
              },
             ],
            },
            Variable {
             identifier: "package",
             position: (219, 14),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "default",
               position: (220, 7),
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (220, 17),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "tsm-client",
                position: (220, 22),
               },
              ],
             },
             default: None,
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "defaultText",
               position: (221, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "literalExpression",
              position: (221, 21),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "pkgs.tsm-client",
                 position: (221, 40),
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "example",
               position: (222, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "literalExpression",
              position: (222, 17),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "pkgs.tsm-client-withGui",
                 position: (222, 36),
                },
               ],
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "description",
               position: (223, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The TSM client derivation to be\nadded to the system environment.\nIt will called with <literal>.override</literal>\nto add paths to the client system-options file.\n",
               position: (224, 1),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (218, 24),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "wrappedPackage",
          position: (230, 5),
         },
        ],
       },
       FunctionApplication {
        function: Variable {
         identifier: "mkOption",
         position: (230, 22),
        },
        arguments: [
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "type",
               position: (231, 7),
              },
             ],
            },
            Variable {
             identifier: "package",
             position: (231, 14),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "readOnly",
               position: (232, 7),
              },
             ],
            },
            Variable {
             identifier: "true",
             position: (232, 18),
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "description",
               position: (233, 7),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "The TSM client derivation, wrapped with the path\nto the client system-options file \"dsm.sys\".\nThis option is to provide the effective derivation\nfor other modules that want to call TSM executables.\n",
               position: (234, 1),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (230, 31),
         },
        ],
       },
      ),
     ],
     recursive: false,
     position: (174, 32),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "cfg",
       position: (242, 3),
      },
     ],
    },
    PropertyAccess {
     expression: Variable {
      identifier: "config",
      position: (242, 9),
     },
     attribute_path: AttributePath {
      attributes: [
       Raw {
        content: "programs",
        position: (242, 16),
       },
       Raw {
        content: "tsmClient",
        position: (242, 25),
       },
      ],
     },
     default: None,
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "assertions",
       position: (244, 3),
      },
     ],
    },
    List {
     elements: [
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "assertion",
            position: (246, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "checkIUnique",
           position: (246, 19),
          },
          arguments: [
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrsToList",
             position: (246, 33),
            },
            arguments: [
             Function {
              argument: Some(
               "k",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "v",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: PropertyAccess {
                expression: Variable {
                 identifier: "v",
                 position: (246, 55),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "name",
                   position: (246, 57),
                  },
                 ],
                },
                default: None,
               },
               position: (246, 52),
              },
              position: (246, 49),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (246, 63),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "servers",
                 position: (246, 67),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "message",
            position: (247, 7),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "TSM servernames contain duplicate name\n(note that case doesn't matter!)\n",
            position: (248, 1),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (245, 5),
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "assertion",
            position: (253, 7),
           },
          ],
         },
         BinaryOperation {
          operator: Implication,
          operands: [
           BinaryOperation {
            operator: NotEqualTo,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (253, 20),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "defaultServername",
                 position: (253, 24),
                },
               ],
              },
              default: None,
             },
             Variable {
              identifier: "null",
              position: (253, 43),
             },
            ],
            position: (253, 41),
           },
           FunctionApplication {
            function: Variable {
             identifier: "hasAttr",
             position: (253, 51),
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (253, 59),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "defaultServername",
                 position: (253, 63),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (253, 81),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "servers",
                 position: (253, 85),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ],
          position: (253, 48),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "message",
            position: (254, 7),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "TSM defaultServername not found in list of servers",
            position: (254, 18),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (252, 5),
      },
     ],
     position: (244, 16),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "dsmSysText",
       position: (258, 3),
      },
     ],
    },
    String {
     parts: [
      Raw {
       content: "****  IBM Spectrum Protect (Tivoli Storage Manager)\n****  client system-options file \"dsm.sys\".\n****  Do not edit!\n****  This file is generated by NixOS configuration.\n\n",
       position: (259, 1),
      },
      Expression {
       expression: FunctionApplication {
        function: Variable {
         identifier: "optionalString",
         position: (264, 7),
        },
        arguments: [
         BinaryOperation {
          operator: NotEqualTo,
          operands: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (264, 23),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "defaultServername",
               position: (264, 27),
              },
             ],
            },
            default: None,
           },
           Variable {
            identifier: "null",
            position: (264, 46),
           },
          ],
          position: (264, 44),
         },
         String {
          parts: [
           Raw {
            content: "defaultserver  ",
            position: (264, 53),
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (264, 70),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "defaultServername",
                position: (264, 74),
               },
              ],
             },
             default: None,
            },
           },
          ],
         },
        ],
       },
      },
      Raw {
       content: "\n\n",
       position: (264, 94),
      },
      Expression {
       expression: FunctionApplication {
        function: Variable {
         identifier: "concatStringsSep",
         position: (266, 7),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: "\n",
            position: (266, 25),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mapAttrsToList",
           position: (266, 30),
          },
          arguments: [
           Function {
            argument: Some(
             "k",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: Function {
             argument: Some(
              "v",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: PropertyAccess {
              expression: Variable {
               identifier: "v",
               position: (266, 52),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "stanza",
                 position: (266, 54),
                },
               ],
              },
              default: None,
             },
             position: (266, 49),
            },
            position: (266, 46),
           },
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (266, 62),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "servers",
               position: (266, 66),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ],
       },
      },
      Raw {
       content: "\n",
       position: (266, 75),
      },
     ],
    },
   ),
  ],
  target: Map {
   bindings: [
    Inherit(
     None,
     [
      Raw {
       content: "options",
       position: (273, 11),
      },
     ],
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "config",
        position: (275, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "mkIf",
       position: (275, 12),
      },
      arguments: [
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (275, 17),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "enable",
           position: (275, 21),
          },
         ],
        },
        default: None,
       },
       Map {
        bindings: [
         Inherit(
          None,
          [
           Raw {
            content: "assertions",
            position: (276, 13),
           },
          ],
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "programs",
             position: (277, 5),
            },
            Raw {
             content: "tsmClient",
             position: (277, 14),
            },
            Raw {
             content: "dsmSysText",
             position: (277, 24),
            },
           ],
          },
          Variable {
           identifier: "dsmSysText",
           position: (277, 37),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "programs",
             position: (278, 5),
            },
            Raw {
             content: "tsmClient",
             position: (278, 14),
            },
            Raw {
             content: "wrappedPackage",
             position: (278, 24),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (278, 41),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "package",
               position: (278, 45),
              },
              Raw {
               content: "override",
               position: (278, 53),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "dsmSysCli",
                  position: (279, 7),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (279, 19),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "writeText",
                    position: (279, 24),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "dsm.sys",
                    position: (279, 35),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (279, 44),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "dsmSysText",
                     position: (279, 48),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "dsmSysApi",
                  position: (280, 7),
                 },
                ],
               },
               Variable {
                identifier: "dsmSysCli",
                position: (280, 19),
               },
              ),
             ],
             recursive: true,
             position: (278, 62),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "environment",
             position: (282, 5),
            },
            Raw {
             content: "systemPackages",
             position: (282, 17),
            },
           ],
          },
          List {
           elements: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (282, 36),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "wrappedPackage",
                position: (282, 40),
               },
              ],
             },
             default: None,
            },
           ],
           position: (282, 34),
          },
         ),
        ],
        recursive: false,
        position: (275, 28),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "meta",
        position: (285, 3),
       },
       Raw {
        content: "maintainers",
        position: (285, 8),
       },
      ],
     },
     List {
      elements: [
       PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (285, 24),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "maintainers",
           position: (285, 28),
          },
          Raw {
           content: "yarny",
           position: (285, 40),
          },
         ],
        },
        default: None,
       },
      ],
      position: (285, 22),
     },
    ),
   ],
   recursive: false,
   position: (271, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}