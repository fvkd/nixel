---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "programs",
         position: (7, 16),
        },
        Raw {
         content: "htop",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "fmt",
        position: (9, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "value",
      },
      definition: IfThenElse {
       predicate: FunctionApplication {
        function: Variable {
         identifier: "isList",
         position: (10, 8),
        },
        arguments: [
         Variable {
          identifier: "value",
          position: (10, 15),
         },
        ],
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "concatStringsSep",
         position: (10, 26),
        },
        arguments: [
         String {
          parts: [
           Raw {
            content: " ",
            position: (10, 44),
           },
          ],
          position: (10, 43),
         },
         Parentheses {
          expression: FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (10, 48),
           },
           arguments: [
            Variable {
             identifier: "fmt",
             position: (10, 52),
            },
            Variable {
             identifier: "value",
             position: (10, 56),
            },
           ],
          },
          position: (10, 47),
         },
        ],
       },
       else_: IfThenElse {
        predicate: FunctionApplication {
         function: Variable {
          identifier: "isString",
          position: (11, 8),
         },
         arguments: [
          Variable {
           identifier: "value",
           position: (11, 17),
          },
         ],
        },
        then: Variable {
         identifier: "value",
         position: (11, 28),
        },
        else_: IfThenElse {
         predicate: BinaryOperation {
          operator: LogicalOr,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "isBool",
             position: (12, 8),
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (12, 15),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "isInt",
             position: (12, 24),
            },
            arguments: [
             Variable {
              identifier: "value",
              position: (12, 30),
             },
            ],
           },
          ],
          position: (12, 21),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (12, 41),
          },
          arguments: [
           Variable {
            identifier: "value",
            position: (12, 50),
           },
          ],
         },
         else_: FunctionApplication {
          function: Variable {
           identifier: "throw",
           position: (13, 5),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "Unrecognized type ",
              position: (13, 12),
             },
             Expression {
              expression: FunctionApplication {
               function: Variable {
                identifier: "typeOf",
                position: (13, 32),
               },
               arguments: [
                Variable {
                 identifier: "value",
                 position: (13, 39),
                },
               ],
              },
             },
             Raw {
              content: " in htop settings",
              position: (13, 45),
             },
            ],
            position: (13, 11),
           },
          ],
         },
         position: (12, 5),
        },
        position: (11, 5),
       },
       position: (10, 5),
      },
      position: (9, 9),
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (19, 3),
        },
        Raw {
         content: "programs",
         position: (19, 11),
        },
        Raw {
         content: "htop",
         position: (19, 20),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "package",
            position: (20, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (20, 15),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (21, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (21, 14),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "package",
                  position: (21, 20),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (22, 7),
                },
               ],
              },
              to: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (22, 17),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "htop",
                  position: (22, 22),
                 },
                ],
               },
               default: None,
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "defaultText",
                 position: (23, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "pkgs.htop",
                 position: (23, 22),
                },
               ],
               position: (23, 21),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (24, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "The htop package that should be used.\n",
                 position: (25, 1),
                },
               ],
               position: (24, 21),
              },
             },
            ],
            recursive: false,
            position: (20, 24),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (29, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkEnableOption",
           position: (29, 14),
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "htop process monitor",
              position: (29, 30),
             },
            ],
            position: (29, 29),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "settings",
            position: (31, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (31, 16),
          },
          arguments: [
           Map {
            bindings: [
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "type",
                 position: (32, 7),
                },
               ],
              },
              to: With {
               expression: Variable {
                identifier: "types",
                position: (32, 19),
               },
               target: FunctionApplication {
                function: Variable {
                 identifier: "attrsOf",
                 position: (32, 26),
                },
                arguments: [
                 Parentheses {
                  expression: FunctionApplication {
                   function: Variable {
                    identifier: "oneOf",
                    position: (32, 35),
                   },
                   arguments: [
                    List {
                     elements: [
                      Variable {
                       identifier: "str",
                       position: (32, 43),
                      },
                      Variable {
                       identifier: "int",
                       position: (32, 47),
                      },
                      Variable {
                       identifier: "bool",
                       position: (32, 51),
                      },
                      Parentheses {
                       expression: FunctionApplication {
                        function: Variable {
                         identifier: "listOf",
                         position: (32, 57),
                        },
                        arguments: [
                         Parentheses {
                          expression: FunctionApplication {
                           function: Variable {
                            identifier: "oneOf",
                            position: (32, 65),
                           },
                           arguments: [
                            List {
                             elements: [
                              Variable {
                               identifier: "str",
                               position: (32, 73),
                              },
                              Variable {
                               identifier: "int",
                               position: (32, 77),
                              },
                              Variable {
                               identifier: "bool",
                               position: (32, 81),
                              },
                             ],
                             position: (32, 71),
                            },
                           ],
                          },
                          position: (32, 64),
                         },
                        ],
                       },
                       position: (32, 56),
                      },
                     ],
                     position: (32, 41),
                    },
                   ],
                  },
                  position: (32, 34),
                 },
                ],
               },
               position: (32, 14),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "default",
                 position: (33, 7),
                },
               ],
              },
              to: Map {
               bindings: [],
               recursive: false,
               position: (33, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "example",
                 position: (34, 7),
                },
               ],
              },
              to: Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "hide_kernel_threads",
                    position: (35, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (35, 31),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "hide_userland_threads",
                    position: (36, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (36, 33),
                 },
                },
               ],
               recursive: false,
               position: (34, 17),
              },
             },
             Binding {
              from: AttributePath {
               parts: [
                Raw {
                 content: "description",
                 position: (38, 7),
                },
               ],
              },
              to: String {
               parts: [
                Raw {
                 content: "Extra global default configuration for htop\nwhich is read on first startup only.\nHtop subsequently uses ~/.config/htop/htoprc\nas configuration source.\n",
                 position: (39, 1),
                },
               ],
               position: (38, 21),
              },
             },
            ],
            recursive: false,
            position: (31, 25),
           },
          ],
         },
        },
       ],
       recursive: false,
       position: (19, 27),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (47, 3),
        },
       ],
      },
      to: FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (47, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (47, 17),
         },
         attribute_path: AttributePath {
          parts: [
           Raw {
            content: "enable",
            position: (47, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "environment",
              position: (48, 5),
             },
             Raw {
              content: "systemPackages",
              position: (48, 17),
             },
            ],
           },
           to: List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (49, 7),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "package",
                 position: (49, 11),
                },
               ],
              },
              default: None,
             },
            ],
            position: (48, 34),
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "environment",
              position: (52, 5),
             },
             Raw {
              content: "etc",
              position: (52, 17),
             },
             Expression {
              expression: String {
               parts: [
                Raw {
                 content: "htoprc",
                 position: (52, 22),
                },
               ],
               position: (52, 21),
              },
             },
             Raw {
              content: "text",
              position: (52, 30),
             },
            ],
           },
           to: BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "# Global htop configuration\n# To change set: programs.htop.settings.KEY = VALUE;\n",
                position: (53, 1),
               },
              ],
              position: (52, 37),
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatStringsSep",
               position: (55, 10),
              },
              arguments: [
               String {
                parts: [
                 Raw {
                  content: "\n",
                  position: (55, 28),
                 },
                ],
                position: (55, 27),
               },
               Parentheses {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "mapAttrsToList",
                  position: (55, 33),
                 },
                 arguments: [
                  Parentheses {
                   expression: Function {
                    argument: Simple {
                     identifier: "key",
                    },
                    definition: Function {
                     argument: Simple {
                      identifier: "value",
                     },
                     definition: String {
                      parts: [
                       Expression {
                        expression: Variable {
                         identifier: "key",
                         position: (55, 64),
                        },
                       },
                       Raw {
                        content: "=",
                        position: (55, 68),
                       },
                       Expression {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "fmt",
                          position: (55, 71),
                         },
                         arguments: [
                          Variable {
                           identifier: "value",
                           position: (55, 75),
                          },
                         ],
                        },
                       },
                      ],
                      position: (55, 61),
                     },
                     position: (55, 54),
                    },
                    position: (55, 49),
                   },
                   position: (55, 48),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (55, 84),
                   },
                   attribute_path: AttributePath {
                    parts: [
                     Raw {
                      content: "settings",
                      position: (55, 88),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
                position: (55, 32),
               },
              ],
             },
            ],
            position: (55, 8),
           },
          },
         ],
         recursive: false,
         position: (47, 28),
        },
       ],
      },
     },
    ],
    recursive: false,
    position: (17, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}