---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    Inherit(
     Some(
      Variable {
       identifier: "builtins",
       position: (6, 12),
      },
     ),
     [
      Raw {
       content: "attrNames",
       position: (6, 22),
      },
      Raw {
       content: "head",
       position: (6, 32),
      },
      Raw {
       content: "map",
       position: (6, 37),
      },
      Raw {
       content: "match",
       position: (6, 41),
      },
      Raw {
       content: "readFile",
       position: (6, 47),
      },
     ],
    ),
    Inherit(
     Some(
      Variable {
       identifier: "lib",
       position: (7, 12),
      },
     ),
     [
      Raw {
       content: "types",
       position: (7, 17),
      },
     ],
    ),
    Inherit(
     Some(
      PropertyAccess {
       expression: Variable {
        identifier: "config",
        position: (8, 12),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "environment",
          position: (8, 19),
         },
        ],
       },
       default: None,
      },
     ),
     [
      Raw {
       content: "etc",
       position: (8, 32),
      },
     ],
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (9, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (9, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "security",
         position: (9, 16),
        },
        Raw {
         content: "apparmor",
         position: (9, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "mkDisableOption",
        position: (10, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        FunctionApplication {
         function: Variable {
          identifier: "mkEnableOption",
          position: (10, 27),
         },
         arguments: [
          Variable {
           identifier: "name",
           position: (10, 42),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "default",
              position: (11, 5),
             },
            ],
           },
           Variable {
            identifier: "true",
            position: (11, 15),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "example",
              position: (12, 5),
             },
            ],
           },
           Variable {
            identifier: "false",
            position: (12, 15),
           },
          ),
         ],
         recursive: false,
         position: (10, 50),
        },
       ],
       position: (10, 47),
      },
      position: (10, 21),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "enabledPolicies",
        position: (14, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "filterAttrs",
       position: (14, 21),
      },
      arguments: [
       Function {
        argument: Some(
         "n",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "p",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: PropertyAccess {
          expression: Variable {
           identifier: "p",
           position: (14, 40),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "enable",
             position: (14, 42),
            },
           ],
          },
          default: None,
         },
         position: (14, 37),
        },
        position: (14, 34),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (14, 50),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "policies",
           position: (14, 54),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "imports",
         position: (18, 3),
        },
       ],
      },
      List {
       elements: [
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (19, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (19, 30),
            },
            String {
             parts: [
              Raw {
               content: "apparmor",
              },
             ],
             position: (19, 41),
            },
            String {
             parts: [
              Raw {
               content: "confineSUIDApplications",
              },
             ],
             position: (19, 52),
            },
           ],
           position: (19, 28),
          },
          String {
           parts: [
            Raw {
             content: "Please use the new options: `security.apparmor.policies.<policy>.enable'.",
            },
           ],
           position: (19, 80),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "mkRemovedOptionModule",
          position: (20, 6),
         },
         arguments: [
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "security",
              },
             ],
             position: (20, 30),
            },
            String {
             parts: [
              Raw {
               content: "apparmor",
              },
             ],
             position: (20, 41),
            },
            String {
             parts: [
              Raw {
               content: "profiles",
              },
             ],
             position: (20, 52),
            },
           ],
           position: (20, 28),
          },
          String {
           parts: [
            Raw {
             content: "Please use the new option: `security.apparmor.policies'.",
            },
           ],
           position: (20, 65),
          },
         ],
        },
        Path {
         parts: [
          Raw {
           content: "apparmor/includes.nix",
          },
         ],
         position: (21, 5),
        },
        Path {
         parts: [
          Raw {
           content: "apparmor/profiles.nix",
          },
         ],
         position: (22, 5),
        },
       ],
       position: (18, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (25, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "security",
            position: (26, 5),
           },
           Raw {
            content: "apparmor",
            position: (26, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (27, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (27, 16),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "        the AppArmor Mandatory Access Control system.\n\nIf you're enabling this module on a running system,\nnote that a reboot will be required to activate AppArmor in the kernel.\n\nAlso, beware that enabling this module privileges stability over security\nby not trying to kill unconfined but newly confinable running processes by default,\nthough it would be needed because AppArmor can only confine new\nor already confined processes of an executable.\nThis killing would for instance be necessary when upgrading to a NixOS revision\nintroducing for the first time an AppArmor profile for the executable\nof a running process.\n\nEnable <xref linkend=\"opt-security.apparmor.killUnconfinedConfinables\"/>\nif you want this service to do such killing\nby sending a <literal>SIGTERM</literal> to those running processes",
                },
               ],
               position: (27, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "policies",
               position: (44, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (44, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (45, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "AppArmor policies.\n",
                   },
                  ],
                  position: (45, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (48, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (48, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "attrsOf",
                      position: (48, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "types",
                      position: (48, 31),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "submodule",
                        position: (48, 37),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     Function {
                      argument: None,
                      arguments: FunctionArguments {
                       arguments: [
                        FunctionArgument {
                         identifier: "config",
                         default: None,
                        },
                        FunctionArgument {
                         identifier: "name",
                         default: None,
                        },
                       ],
                       ellipsis: true,
                      },
                      definition: Map {
                       bindings: [
                        KeyValue(
                         AttributePath {
                          attributes: [
                           Raw {
                            content: "options",
                            position: (49, 11),
                           },
                          ],
                         },
                         Map {
                          bindings: [
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "enable",
                               position: (50, 13),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: Variable {
                              identifier: "mkDisableOption",
                              position: (50, 22),
                             },
                             arguments: [
                              String {
                               parts: [
                                Raw {
                                 content: "loading of the profile into the kernel",
                                },
                               ],
                               position: (50, 38),
                              },
                             ],
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "enforce",
                               position: (51, 13),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: Variable {
                              identifier: "mkDisableOption",
                              position: (51, 23),
                             },
                             arguments: [
                              String {
                               parts: [
                                Raw {
                                 content: "enforcing of the policy or only complain in the logs",
                                },
                               ],
                               position: (51, 39),
                              },
                             ],
                            },
                           ),
                           KeyValue(
                            AttributePath {
                             attributes: [
                              Raw {
                               content: "profile",
                               position: (52, 13),
                              },
                             ],
                            },
                            FunctionApplication {
                             function: Variable {
                              identifier: "mkOption",
                              position: (52, 23),
                             },
                             arguments: [
                              Map {
                               bindings: [
                                KeyValue(
                                 AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "description",
                                    position: (53, 15),
                                   },
                                  ],
                                 },
                                 String {
                                  parts: [
                                   Raw {
                                    content: "The policy of the profile.",
                                   },
                                  ],
                                  position: (53, 29),
                                 },
                                ),
                                KeyValue(
                                 AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "type",
                                    position: (54, 15),
                                   },
                                  ],
                                 },
                                 PropertyAccess {
                                  expression: Variable {
                                   identifier: "types",
                                   position: (54, 22),
                                  },
                                  attribute_path: AttributePath {
                                   attributes: [
                                    Raw {
                                     content: "lines",
                                     position: (54, 28),
                                    },
                                   ],
                                  },
                                  default: None,
                                 },
                                ),
                                KeyValue(
                                 AttributePath {
                                  attributes: [
                                   Raw {
                                    content: "apply",
                                    position: (55, 15),
                                   },
                                  ],
                                 },
                                 FunctionApplication {
                                  function: PropertyAccess {
                                   expression: Variable {
                                    identifier: "pkgs",
                                    position: (55, 23),
                                   },
                                   attribute_path: AttributePath {
                                    attributes: [
                                     Raw {
                                      content: "writeText",
                                      position: (55, 28),
                                     },
                                    ],
                                   },
                                   default: None,
                                  },
                                  arguments: [
                                   Variable {
                                    identifier: "name",
                                    position: (55, 38),
                                   },
                                  ],
                                 },
                                ),
                               ],
                               recursive: false,
                               position: (52, 32),
                              },
                             ],
                            },
                           ),
                          ],
                          recursive: false,
                          position: (49, 21),
                         },
                        ),
                       ],
                       recursive: false,
                       position: (48, 71),
                      },
                      position: (48, 48),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (59, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (59, 19),
                 },
                ),
               ],
               recursive: false,
               position: (44, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "includes",
               position: (61, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (61, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (62, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (62, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "attrsOf",
                      position: (62, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (62, 30),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "lines",
                       position: (62, 36),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (63, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (63, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (64, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "List of paths to be added to AppArmor's searched paths\nwhen resolving <literal>include</literal> directives.\n",
                   },
                  ],
                  position: (64, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (68, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "mapAttrs",
                   position: (68, 17),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (68, 26),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "writeText",
                       position: (68, 31),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (61, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "packages",
               position: (70, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (70, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (71, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (71, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (71, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (71, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "package",
                       position: (71, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (72, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                  position: (72, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (73, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "List of packages to be added to AppArmor's include path",
                   },
                  ],
                  position: (73, 23),
                 },
                ),
               ],
               recursive: false,
               position: (70, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enableCache",
               position: (75, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (75, 21),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "        caching of AppArmor policies\nin <literal>/var/cache/apparmor/</literal>.\n\nBeware that AppArmor policies almost always contain Nix store paths,\nand thus produce at each change of these paths\na new cached version accumulating in the cache",
                },
               ],
               position: (75, 36),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "killUnconfinedConfinables",
               position: (82, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkEnableOption",
              position: (82, 35),
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "        killing of processes which have an AppArmor profile enabled\n(in <xref linkend=\"opt-security.apparmor.policies\"/>)\nbut are not confined (because AppArmor can only confine new processes).\n\nThis is only sending a gracious <literal>SIGTERM</literal> signal to the processes,\nnot a <literal>SIGKILL</literal>.\n\nBeware that due to a current limitation of AppArmor,\nonly profiles with exact paths (and no name) can enable such kills",
                },
               ],
               position: (82, 50),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (26, 25),
         },
        ),
       ],
       recursive: false,
       position: (25, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (95, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (95, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (95, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (95, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "assertions",
              position: (96, 5),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "map",
             position: (96, 18),
            },
            arguments: [
             Function {
              argument: Some(
               "policy",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "assertion",
                    position: (97, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: EqualTo,
                  operands: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "match",
                     position: (97, 21),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: ".*/.*",
                       },
                      ],
                      position: (97, 27),
                     },
                     Variable {
                      identifier: "policy",
                      position: (97, 35),
                     },
                    ],
                   },
                   Variable {
                    identifier: "null",
                    position: (97, 45),
                   },
                  ],
                  position: (97, 42),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "message",
                    position: (98, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "`security.apparmor.policies.\"",
                   },
                   Expression {
                    expression: Variable {
                     identifier: "policy",
                     position: (98, 52),
                    },
                   },
                   Raw {
                    content: "\"' must not contain a slash.",
                   },
                  ],
                  position: (98, 19),
                 },
                ),
               ],
               recursive: false,
               position: (97, 7),
              },
              position: (96, 23),
             },
             FunctionApplication {
              function: Variable {
               identifier: "attrNames",
               position: (102, 8),
              },
              arguments: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (102, 18),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "policies",
                   position: (102, 22),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (104, 5),
             },
             Raw {
              content: "systemPackages",
              position: (104, 17),
             },
            ],
           },
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (105, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "apparmor-utils",
                 position: (105, 12),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (106, 7),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "apparmor-bin-utils",
                 position: (106, 12),
                },
               ],
              },
              default: None,
             },
            ],
            position: (104, 34),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (108, 5),
             },
             Raw {
              content: "etc",
              position: (108, 17),
             },
             Expression {
              expression: __StringParts(
               [
                Raw {
                 content: "apparmor.d",
                },
               ],
              ),
             },
             Raw {
              content: "source",
              position: (108, 34),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (108, 43),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "linkFarm",
                position: (108, 48),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "apparmor.d",
               },
              ],
              position: (108, 57),
             },
             BinaryOperation {
              operator: Concatenation,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (111, 7),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "name",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "p",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Map {
                    bindings: [
                     Inherit(
                      None,
                      [
                       Raw {
                        content: "name",
                        position: (111, 42),
                       },
                      ],
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "path",
                         position: (111, 48),
                        },
                       ],
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "p",
                        position: (111, 55),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "profile",
                          position: (111, 57),
                         },
                        ],
                       },
                       default: None,
                      },
                     ),
                    ],
                    recursive: false,
                    position: (111, 32),
                   },
                   position: (111, 29),
                  },
                  position: (111, 23),
                 },
                 Variable {
                  identifier: "enabledPolicies",
                  position: (111, 69),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "mapAttrsToList",
                 position: (112, 7),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "name",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "path",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: Map {
                    bindings: [
                     Inherit(
                      None,
                      [
                       Raw {
                        content: "name",
                        position: (112, 45),
                       },
                       Raw {
                        content: "path",
                        position: (112, 50),
                       },
                      ],
                     ),
                    ],
                    recursive: false,
                    position: (112, 35),
                   },
                   position: (112, 29),
                  },
                  position: (112, 23),
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (112, 59),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "includes",
                     position: (112, 63),
                    },
                   ],
                  },
                  default: None,
                 },
                ],
               },
              ],
              position: (111, 85),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (114, 5),
             },
             Raw {
              content: "etc",
              position: (114, 17),
             },
             Expression {
              expression: __StringParts(
               [
                Raw {
                 content: "apparmor/parser.conf",
                },
               ],
              ),
             },
             Raw {
              content: "text",
              position: (114, 44),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "",
               },
               Expression {
                expression: IfThenElse {
                 predicate: PropertyAccess {
                  expression: Variable {
                   identifier: "cfg",
                   position: (115, 14),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "enableCache",
                     position: (115, 18),
                    },
                   ],
                  },
                  default: None,
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "write-cache",
                   },
                  ],
                  position: (115, 35),
                 },
                 else_: String {
                  parts: [
                   Raw {
                    content: "skip-cache",
                   },
                  ],
                  position: (115, 54),
                 },
                 position: (115, 11),
                },
               },
               Raw {
                content: "\ncache-loc /var/cache/apparmor\nInclude /etc/apparmor.d\n",
               },
              ],
              position: (114, 51),
             },
             FunctionApplication {
              function: Variable {
               identifier: "concatMapStrings",
               position: (119, 7),
              },
              arguments: [
               Function {
                argument: Some(
                 "p",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: String {
                 parts: [
                  Raw {
                   content: "Include ",
                  },
                  Expression {
                   expression: Variable {
                    identifier: "p",
                    position: (119, 39),
                   },
                  },
                  Raw {
                   content: "/etc/apparmor.d\n",
                  },
                 ],
                 position: (119, 28),
                },
                position: (119, 25),
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (119, 61),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "packages",
                   position: (119, 65),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            ],
            position: (118, 10),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (121, 5),
             },
             Raw {
              content: "etc",
              position: (121, 17),
             },
             Expression {
              expression: __StringParts(
               [
                Raw {
                 content: "apparmor/apparmor.conf",
                },
               ],
              ),
             },
             Raw {
              content: "text",
              position: (121, 46),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "",
             },
            ],
            position: (121, 53),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (124, 5),
             },
             Raw {
              content: "etc",
              position: (124, 17),
             },
             Expression {
              expression: __StringParts(
               [
                Raw {
                 content: "apparmor/severity.db",
                },
               ],
              ),
             },
             Raw {
              content: "source",
              position: (124, 44),
             },
            ],
           },
           BinaryOperation {
            operator: Addition,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (124, 53),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "apparmor-utils",
                 position: (124, 58),
                },
               ],
              },
              default: None,
             },
             String {
              parts: [
               Raw {
                content: "/etc/apparmor/severity.db",
               },
              ],
              position: (124, 75),
             },
            ],
            position: (124, 73),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (125, 5),
             },
             Raw {
              content: "etc",
              position: (125, 17),
             },
             Expression {
              expression: __StringParts(
               [
                Raw {
                 content: "apparmor/logprof.conf",
                },
               ],
              ),
             },
             Raw {
              content: "source",
              position: (125, 45),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "pkgs",
              position: (125, 54),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "runCommand",
                position: (125, 59),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "logprof.conf",
               },
              ],
              position: (125, 70),
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "header",
                   position: (126, 7),
                  },
                 ],
                },
                String {
                 parts: [
                  Raw {
                   content: "[settings]\n  # /etc/apparmor.d/ is read-only on NixOS\n  profiledir = /var/cache/apparmor/logprof\n  inactive_profiledir = /etc/apparmor.d/disable\n  # Use: journalctl -b --since today --grep audit: | aa-logprof\n  logfiles = /dev/stdin\n\n  parser = ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (134, 22),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "apparmor-parser",
                       position: (134, 27),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/apparmor_parser\n  ldd = ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (135, 19),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "glibc",
                       position: (135, 24),
                      },
                      Raw {
                       content: "bin",
                       position: (135, 30),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/ldd\n  logger = ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (136, 22),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "util-linux",
                       position: (136, 27),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/logger\n\n  # customize how file ownership permissions are presented\n  # 0 - off\n  # 1 - default of what ever mode the log reported\n  # 2 - force the new permissions to be user\n  # 3 - force all perms on the rule to be user\n  default_owner_prompt = 1\n\n  custom_includes = /etc/apparmor.d ",
                  },
                  Expression {
                   expression: FunctionApplication {
                    function: Variable {
                     identifier: "concatMapStringsSep",
                     position: (145, 47),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: " ",
                       },
                      ],
                      position: (145, 67),
                     },
                     Function {
                      argument: Some(
                       "p",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: String {
                       parts: [
                        Expression {
                         expression: Variable {
                          identifier: "p",
                          position: (145, 78),
                         },
                        },
                        Raw {
                         content: "/etc/apparmor.d",
                        },
                       ],
                       position: (145, 75),
                      },
                      position: (145, 72),
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "cfg",
                       position: (145, 98),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "packages",
                         position: (145, 102),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  },
                  Raw {
                   content: "\n\n[qualifiers]\n  ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (148, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "runtimeShell",
                       position: (148, 18),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: " = icnu\n  ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (149, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "bashInteractive",
                       position: (149, 18),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/sh = icnu\n  ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (150, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "bashInteractive",
                       position: (150, 18),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/bin/bash = icnu\n  ",
                  },
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "config",
                     position: (151, 13),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "users",
                       position: (151, 20),
                      },
                      Raw {
                       content: "defaultUserShell",
                       position: (151, 26),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: " = icnu\n",
                  },
                 ],
                 position: (126, 16),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "footer",
                   position: (153, 7),
                  },
                 ],
                },
                String {
                 parts: [
                  Expression {
                   expression: PropertyAccess {
                    expression: Variable {
                     identifier: "pkgs",
                     position: (153, 19),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "apparmor-utils",
                       position: (153, 24),
                      },
                     ],
                    },
                    default: None,
                   },
                  },
                  Raw {
                   content: "/etc/apparmor/logprof.conf",
                  },
                 ],
                 position: (153, 16),
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "passAsFile",
                   position: (154, 7),
                  },
                 ],
                },
                List {
                 elements: [
                  String {
                   parts: [
                    Raw {
                     content: "header",
                    },
                   ],
                   position: (154, 22),
                  },
                 ],
                 position: (154, 20),
                },
               ),
              ],
              recursive: false,
              position: (125, 85),
             },
             String {
              parts: [
               Raw {
                content: "cp $headerPath $out\nsed '1,/\\[qualifiers\\]/d' $footer >> $out\n",
               },
              ],
              position: (155, 7),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "boot",
              position: (160, 5),
             },
             Raw {
              content: "kernelParams",
              position: (160, 10),
             },
            ],
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "apparmor=1",
               },
              ],
              position: (160, 27),
             },
             String {
              parts: [
               Raw {
                content: "security=apparmor",
               },
              ],
              position: (160, 40),
             },
            ],
            position: (160, 25),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (162, 5),
             },
             Raw {
              content: "services",
              position: (162, 13),
             },
             Raw {
              content: "apparmor",
              position: (162, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "after",
                 position: (163, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "local-fs.target",
                  },
                 ],
                 position: (164, 9),
                },
                String {
                 parts: [
                  Raw {
                   content: "systemd-journald-audit.socket",
                  },
                 ],
                 position: (165, 9),
                },
               ],
               position: (163, 15),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "before",
                 position: (167, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "sysinit.target",
                  },
                 ],
                 position: (167, 18),
                },
               ],
               position: (167, 16),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "wantedBy",
                 position: (168, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                  },
                 ],
                 position: (168, 20),
                },
               ],
               position: (168, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "unitConfig",
                 position: (169, 7),
                },
               ],
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "Description",
                    position: (170, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Load AppArmor policies",
                   },
                  ],
                  position: (170, 21),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "DefaultDependencies",
                    position: (171, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "no",
                   },
                  ],
                  position: (171, 31),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "ConditionSecurity",
                    position: (172, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "apparmor",
                   },
                  ],
                  position: (172, 29),
                 },
                ),
               ],
               recursive: false,
               position: (169, 20),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "reloadIfChanged",
                 position: (176, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (176, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "restartTriggers",
                 position: (177, 7),
                },
               ],
              },
              List {
               elements: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "etc",
                  position: (178, 9),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: __StringParts(
                     [
                      Raw {
                       content: "apparmor/parser.conf",
                      },
                     ],
                    ),
                   },
                   Raw {
                    content: "source",
                    position: (178, 36),
                   },
                  ],
                 },
                 default: None,
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "etc",
                  position: (179, 9),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Expression {
                    expression: __StringParts(
                     [
                      Raw {
                       content: "apparmor.d",
                      },
                     ],
                    ),
                   },
                   Raw {
                    content: "source",
                    position: (179, 26),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (177, 25),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "serviceConfig",
                 position: (181, 7),
                },
               ],
              },
              LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "killUnconfinedConfinables",
                    position: (182, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (182, 37),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "writeShellScript",
                      position: (182, 42),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   String {
                    parts: [
                     Raw {
                      content: "apparmor-kill",
                     },
                    ],
                    position: (182, 59),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "set -eu\n",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "pkgs",
                        position: (184, 13),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "apparmor-bin-utils",
                          position: (184, 18),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/bin/aa-status --json |\n",
                     },
                     Expression {
                      expression: PropertyAccess {
                       expression: Variable {
                        identifier: "pkgs",
                        position: (185, 13),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "jq",
                          position: (185, 18),
                         },
                        ],
                       },
                       default: None,
                      },
                     },
                     Raw {
                      content: "/bin/jq --raw-output '.processes | .[] | .[] | select (.status == \"unconfined\") | .pid' |\nxargs --verbose --no-run-if-empty --delimiter='\\n' \\\nkill\n",
                     },
                    ],
                    position: (182, 75),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "commonOpts",
                    position: (189, 9),
                   },
                  ],
                 },
                 Function {
                  argument: Some(
                   "p",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: String {
                   parts: [
                    Raw {
                     content: "--verbose --show-cache ",
                    },
                    Expression {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "optionalString",
                       position: (189, 51),
                      },
                      arguments: [
                       UnaryOperation {
                        operator: Not,
                        operand: PropertyAccess {
                         expression: Variable {
                          identifier: "p",
                          position: (189, 68),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "enforce",
                            position: (189, 70),
                           },
                          ],
                         },
                         default: None,
                        },
                        position: (189, 67),
                       },
                       String {
                        parts: [
                         Raw {
                          content: "--complain ",
                         },
                        ],
                        position: (189, 79),
                       },
                      ],
                     },
                    },
                    Expression {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "p",
                       position: (189, 95),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "profile",
                         position: (189, 97),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                   ],
                   position: (189, 25),
                  },
                  position: (189, 22),
                 },
                ),
               ],
               target: Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "Type",
                     position: (191, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "oneshot",
                    },
                   ],
                   position: (191, 16),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "RemainAfterExit",
                     position: (192, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "yes",
                    },
                   ],
                   position: (192, 27),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "ExecStartPre",
                     position: (193, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Expression {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "pkgs",
                       position: (193, 27),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "apparmor-utils",
                         position: (193, 32),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/bin/aa-teardown",
                    },
                   ],
                   position: (193, 24),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "ExecStart",
                     position: (194, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mapAttrsToList",
                    position: (194, 21),
                   },
                   arguments: [
                    Function {
                     argument: Some(
                      "n",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: Function {
                      argument: Some(
                       "p",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: String {
                       parts: [
                        Expression {
                         expression: PropertyAccess {
                          expression: Variable {
                           identifier: "pkgs",
                           position: (194, 46),
                          },
                          attribute_path: AttributePath {
                           attributes: [
                            Raw {
                             content: "apparmor-parser",
                             position: (194, 51),
                            },
                           ],
                          },
                          default: None,
                         },
                        },
                        Raw {
                         content: "/bin/apparmor_parser --add ",
                        },
                        Expression {
                         expression: FunctionApplication {
                          function: Variable {
                           identifier: "commonOpts",
                           position: (194, 96),
                          },
                          arguments: [
                           Variable {
                            identifier: "p",
                            position: (194, 107),
                           },
                          ],
                         },
                        },
                       ],
                       position: (194, 43),
                      },
                      position: (194, 40),
                     },
                     position: (194, 37),
                    },
                    Variable {
                     identifier: "enabledPolicies",
                     position: (194, 112),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "ExecStartPost",
                     position: (195, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "optional",
                    position: (195, 25),
                   },
                   arguments: [
                    PropertyAccess {
                     expression: Variable {
                      identifier: "cfg",
                      position: (195, 34),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "killUnconfinedConfinables",
                        position: (195, 38),
                       },
                      ],
                     },
                     default: None,
                    },
                    Variable {
                     identifier: "killUnconfinedConfinables",
                     position: (195, 64),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "ExecReload",
                     position: (196, 9),
                    },
                   ],
                  },
                  BinaryOperation {
                   operator: Concatenation,
                   operands: [
                    FunctionApplication {
                     function: Variable {
                      identifier: "mapAttrsToList",
                      position: (199, 11),
                     },
                     arguments: [
                      Function {
                       argument: Some(
                        "n",
                       ),
                       arguments: FunctionArguments {
                        arguments: [],
                        ellipsis: false,
                       },
                       definition: Function {
                        argument: Some(
                         "p",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: String {
                         parts: [
                          Expression {
                           expression: PropertyAccess {
                            expression: Variable {
                             identifier: "pkgs",
                             position: (199, 36),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "apparmor-parser",
                               position: (199, 41),
                              },
                             ],
                            },
                            default: None,
                           },
                          },
                          Raw {
                           content: "/bin/apparmor_parser --replace ",
                          },
                          Expression {
                           expression: FunctionApplication {
                            function: Variable {
                             identifier: "commonOpts",
                             position: (199, 90),
                            },
                            arguments: [
                             Variable {
                              identifier: "p",
                              position: (199, 101),
                             },
                            ],
                           },
                          },
                         ],
                         position: (199, 33),
                        },
                        position: (199, 30),
                       },
                       position: (199, 27),
                      },
                      Variable {
                       identifier: "enabledPolicies",
                       position: (199, 106),
                      },
                     ],
                    },
                    BinaryOperation {
                     operator: Concatenation,
                     operands: [
                      List {
                       elements: [
                        String {
                         parts: [
                          Expression {
                           expression: PropertyAccess {
                            expression: Variable {
                             identifier: "pkgs",
                             position: (204, 16),
                            },
                            attribute_path: AttributePath {
                             attributes: [
                              Raw {
                               content: "apparmor-utils",
                               position: (204, 21),
                              },
                             ],
                            },
                            default: None,
                           },
                          },
                          Raw {
                           content: "/bin/aa-remove-unknown",
                          },
                         ],
                         position: (204, 13),
                        },
                       ],
                       position: (204, 11),
                      },
                      FunctionApplication {
                       function: Variable {
                        identifier: "optional",
                        position: (207, 11),
                       },
                       arguments: [
                        PropertyAccess {
                         expression: Variable {
                          identifier: "cfg",
                          position: (207, 20),
                         },
                         attribute_path: AttributePath {
                          attributes: [
                           Raw {
                            content: "killUnconfinedConfinables",
                            position: (207, 24),
                           },
                          ],
                         },
                         default: None,
                        },
                        Variable {
                         identifier: "killUnconfinedConfinables",
                         position: (207, 50),
                        },
                       ],
                      },
                     ],
                     position: (204, 62),
                    },
                   ],
                   position: (199, 122),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "ExecStop",
                     position: (208, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Expression {
                     expression: PropertyAccess {
                      expression: Variable {
                       identifier: "pkgs",
                       position: (208, 23),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "apparmor-utils",
                         position: (208, 28),
                        },
                       ],
                      },
                      default: None,
                     },
                    },
                    Raw {
                     content: "/bin/aa-teardown",
                    },
                   ],
                   position: (208, 20),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "CacheDirectory",
                     position: (209, 9),
                    },
                   ],
                  },
                  List {
                   elements: [
                    String {
                     parts: [
                      Raw {
                       content: "apparmor",
                      },
                     ],
                     position: (209, 28),
                    },
                    String {
                     parts: [
                      Raw {
                       content: "apparmor/logprof",
                      },
                     ],
                     position: (209, 39),
                    },
                   ],
                   position: (209, 26),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "CacheDirectoryMode",
                     position: (210, 9),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "0700",
                    },
                   ],
                   position: (210, 30),
                  },
                 ),
                ],
                recursive: false,
                position: (190, 12),
               },
               position: (181, 23),
              },
             ),
            ],
            recursive: false,
            position: (162, 33),
           },
          ),
         ],
         recursive: false,
         position: (95, 28),
        },
       ],
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "meta",
         position: (215, 3),
        },
        Raw {
         content: "maintainers",
         position: (215, 8),
        },
       ],
      },
      With {
       expression: Variable {
        identifier: "maintainers",
        position: (215, 27),
       },
       target: List {
        elements: [
         Variable {
          identifier: "julm",
          position: (215, 42),
         },
        ],
        position: (215, 40),
       },
       position: (215, 22),
      },
     ),
    ],
    recursive: false,
    position: (17, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}