---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "commit",
    default: Some(
     Variable {
      identifier: "null",
      position: (8, 12),
     },
    ),
   },
   FunctionArgument {
    identifier: "keep-going",
    default: Some(
     Variable {
      identifier: "null",
      position: (7, 16),
     },
    ),
   },
   FunctionArgument {
    identifier: "include-overlays",
    default: Some(
     Variable {
      identifier: "false",
      position: (6, 22),
     },
    ),
   },
   FunctionArgument {
    identifier: "max-workers",
    default: Some(
     Variable {
      identifier: "null",
      position: (5, 17),
     },
    ),
   },
   FunctionArgument {
    identifier: "path",
    default: Some(
     Variable {
      identifier: "null",
      position: (4, 10),
     },
    ),
   },
   FunctionArgument {
    identifier: "predicate",
    default: Some(
     Variable {
      identifier: "null",
      position: (3, 15),
     },
    ),
   },
   FunctionArgument {
    identifier: "maintainer",
    default: Some(
     Variable {
      identifier: "null",
      position: (2, 16),
     },
    ),
   },
   FunctionArgument {
    identifier: "package",
    default: Some(
     Variable {
      identifier: "null",
      position: (1, 13),
     },
    ),
   },
  ],
  ellipsis: false,
 },
 definition: LetIn {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "pkgs",
       position: (14, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "import",
      position: (14, 10),
     },
     arguments: [
      Path {
       parts: [
        Raw {
         content: "./../../default.nix",
         position: (14, 17),
        },
       ],
      },
      IfThenElse {
       predicate: BinaryOperation {
        operator: EqualTo,
        operands: [
         Variable {
          identifier: "include-overlays",
          position: (15, 8),
         },
         Variable {
          identifier: "false",
          position: (15, 28),
         },
        ],
        position: (15, 25),
       },
       then: Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "overlays",
             position: (16, 9),
            },
           ],
          },
          List {
           elements: [],
           position: (16, 20),
          },
         ),
        ],
        recursive: false,
        position: (16, 7),
       },
       else_: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "include-overlays",
           position: (17, 13),
          },
          Variable {
           identifier: "true",
           position: (17, 33),
          },
         ],
         position: (17, 30),
        },
        then: Map {
         bindings: [],
         recursive: false,
         position: (18, 7),
        },
        else_: Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "overlays",
              position: (19, 12),
             },
            ],
           },
           Variable {
            identifier: "include-overlays",
            position: (19, 23),
           },
          ),
         ],
         recursive: false,
         position: (19, 10),
        },
        position: (17, 10),
       },
       position: (15, 5),
      },
     ],
    },
   ),
   Inherit(
    Some(
     Variable {
      identifier: "pkgs",
      position: (22, 12),
     },
    ),
    [
     Raw {
      content: "lib",
      position: (22, 18),
     },
    ],
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "nubOn",
       position: (26, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "list",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: IfThenElse {
       predicate: BinaryOperation {
        operator: EqualTo,
        operands: [
         Variable {
          identifier: "list",
          position: (27, 8),
         },
         List {
          elements: [],
          position: (27, 16),
         },
        ],
        position: (27, 13),
       },
       then: List {
        elements: [],
        position: (28, 7),
       },
       else_: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "x",
             position: (31, 9),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (31, 13),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "head",
               position: (31, 17),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "list",
             position: (31, 22),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "xs",
             position: (32, 9),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (32, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "filter",
               position: (32, 18),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Function {
             argument: Some(
              "p",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: BinaryOperation {
              operator: NotEqualTo,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (32, 29),
                },
                arguments: [
                 Variable {
                  identifier: "x",
                  position: (32, 31),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (32, 36),
                },
                arguments: [
                 Variable {
                  identifier: "p",
                  position: (32, 38),
                 },
                ],
               },
              ],
              position: (32, 33),
             },
             position: (32, 26),
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (32, 42),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "drop",
                 position: (32, 46),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Int {
               value: 1,
               position: (32, 51),
              },
              Variable {
               identifier: "list",
               position: (32, 53),
              },
             ],
            },
           ],
          },
         ),
        ],
        target: BinaryOperation {
         operator: Concatenation,
         operands: [
          List {
           elements: [
            Variable {
             identifier: "x",
             position: (34, 10),
            },
           ],
           position: (34, 9),
          },
          FunctionApplication {
           function: Variable {
            identifier: "nubOn",
            position: (34, 16),
           },
           arguments: [
            Variable {
             identifier: "f",
             position: (34, 22),
            },
            Variable {
             identifier: "xs",
             position: (34, 24),
            },
           ],
          },
         ],
         position: (34, 13),
        },
        position: (30, 7),
       },
       position: (27, 5),
      },
      position: (26, 14),
     },
     position: (26, 11),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWithPath",
       position: (45, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "rootPath",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "cond",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "pkgs",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "packagesWithPathInner",
             position: (47, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "path",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "pathContent",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: LetIn {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "result",
                  position: (49, 11),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "builtins",
                  position: (49, 20),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "tryEval",
                    position: (49, 29),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "pathContent",
                  position: (49, 37),
                 },
                ],
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "dedupResults",
                  position: (51, 11),
                 },
                ],
               },
               Function {
                argument: Some(
                 "lst",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "nubOn",
                  position: (51, 31),
                 },
                 arguments: [
                  Function {
                   argument: None,
                   arguments: FunctionArguments {
                    arguments: [
                     FunctionArgument {
                      identifier: "attrPath",
                      default: None,
                     },
                     FunctionArgument {
                      identifier: "package",
                      default: None,
                     },
                    ],
                    ellipsis: false,
                   },
                   definition: PropertyAccess {
                    expression: Variable {
                     identifier: "package",
                     position: (51, 61),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "updateScript",
                       position: (51, 69),
                      },
                     ],
                    },
                    default: None,
                   },
                   position: (51, 38),
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (51, 84),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "concatLists",
                       position: (51, 88),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "lst",
                     position: (51, 100),
                    },
                   ],
                  },
                 ],
                },
                position: (51, 26),
               },
              ),
             ],
             target: IfThenElse {
              predicate: PropertyAccess {
               expression: Variable {
                identifier: "result",
                position: (53, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "success",
                  position: (53, 21),
                 },
                ],
               },
               default: None,
              },
              then: LetIn {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "evaluatedPathContent",
                    position: (55, 15),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "result",
                   position: (55, 38),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "value",
                     position: (55, 45),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
               ],
               target: IfThenElse {
                predicate: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (57, 18),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "isDerivation",
                     position: (57, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "evaluatedPathContent",
                   position: (57, 35),
                  },
                 ],
                },
                then: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (58, 17),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "optional",
                     position: (58, 21),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "cond",
                    position: (58, 31),
                   },
                   arguments: [
                    Variable {
                     identifier: "path",
                     position: (58, 36),
                    },
                    Variable {
                     identifier: "evaluatedPathContent",
                     position: (58, 41),
                    },
                   ],
                  },
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "attrPath",
                        position: (58, 65),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "lib",
                        position: (58, 76),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "concatStringsSep",
                          position: (58, 80),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       String {
                        parts: [
                         Raw {
                          content: ".",
                          position: (58, 98),
                         },
                        ],
                       },
                       Variable {
                        identifier: "path",
                        position: (58, 101),
                       },
                      ],
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "package",
                        position: (58, 107),
                       },
                      ],
                     },
                     Variable {
                      identifier: "evaluatedPathContent",
                      position: (58, 117),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (58, 63),
                  },
                 ],
                },
                else_: IfThenElse {
                 predicate: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (59, 23),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "isAttrs",
                      position: (59, 27),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "evaluatedPathContent",
                    position: (59, 35),
                   },
                  ],
                 },
                 then: IfThenElse {
                  predicate: BinaryOperation {
                   operator: LogicalOr,
                   operands: [
                    BinaryOperation {
                     operator: LogicalOr,
                     operands: [
                      BinaryOperation {
                       operator: EqualTo,
                       operands: [
                        Variable {
                         identifier: "path",
                         position: (61, 20),
                        },
                        Variable {
                         identifier: "rootPath",
                         position: (61, 28),
                        },
                       ],
                       position: (61, 25),
                      },
                      PropertyAccess {
                       expression: Variable {
                        identifier: "evaluatedPathContent",
                        position: (61, 40),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "recurseForDerivations",
                          position: (61, 61),
                         },
                        ],
                       },
                       default: Some(
                        Variable {
                         identifier: "false",
                         position: (61, 86),
                        },
                       ),
                      },
                     ],
                     position: (61, 37),
                    },
                    PropertyAccess {
                     expression: Variable {
                      identifier: "evaluatedPathContent",
                      position: (61, 95),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "recurseForRelease",
                        position: (61, 116),
                       },
                      ],
                     },
                     default: Some(
                      Variable {
                       identifier: "false",
                       position: (61, 137),
                      },
                     ),
                    },
                   ],
                   position: (61, 92),
                  },
                  then: FunctionApplication {
                   function: Variable {
                    identifier: "dedupResults",
                    position: (62, 19),
                   },
                   arguments: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "lib",
                       position: (62, 33),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "mapAttrsToList",
                         position: (62, 37),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Function {
                       argument: Some(
                        "name",
                       ),
                       arguments: FunctionArguments {
                        arguments: [],
                        ellipsis: false,
                       },
                       definition: Function {
                        argument: Some(
                         "elem",
                        ),
                        arguments: FunctionArguments {
                         arguments: [],
                         ellipsis: false,
                        },
                        definition: FunctionApplication {
                         function: Variable {
                          identifier: "packagesWithPathInner",
                          position: (62, 65),
                         },
                         arguments: [
                          BinaryOperation {
                           operator: Concatenation,
                           operands: [
                            Variable {
                             identifier: "path",
                             position: (62, 88),
                            },
                            List {
                             elements: [
                              Variable {
                               identifier: "name",
                               position: (62, 97),
                              },
                             ],
                             position: (62, 96),
                            },
                           ],
                           position: (62, 93),
                          },
                          Variable {
                           identifier: "elem",
                           position: (62, 104),
                          },
                         ],
                        },
                        position: (62, 59),
                       },
                       position: (62, 53),
                      },
                      Variable {
                       identifier: "evaluatedPathContent",
                       position: (62, 110),
                      },
                     ],
                    },
                   ],
                  },
                  else_: List {
                   elements: [],
                   position: (63, 22),
                  },
                  position: (61, 17),
                 },
                 else_: List {
                  elements: [],
                  position: (64, 20),
                 },
                 position: (59, 20),
                },
                position: (57, 15),
               },
               position: (54, 13),
              },
              else_: List {
               elements: [],
               position: (65, 16),
              },
              position: (53, 11),
             },
             position: (48, 9),
            },
            position: (47, 37),
           },
           position: (47, 31),
          },
         ),
        ],
        target: FunctionApplication {
         function: Variable {
          identifier: "packagesWithPathInner",
          position: (67, 7),
         },
         arguments: [
          Variable {
           identifier: "rootPath",
           position: (67, 29),
          },
          Variable {
           identifier: "pkgs",
           position: (67, 38),
          },
         ],
        },
        position: (46, 5),
       },
       position: (45, 38),
      },
      position: (45, 32),
     },
     position: (45, 22),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWith",
       position: (71, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "packagesWithPath",
      position: (71, 18),
     },
     arguments: [
      List {
       elements: [],
       position: (71, 35),
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWithUpdateScriptMatchingPredicate",
       position: (75, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "cond",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: FunctionApplication {
      function: Variable {
       identifier: "packagesWith",
       position: (76, 5),
      },
      arguments: [
       Function {
        argument: Some(
         "path",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "pkg",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: BinaryOperation {
          operator: LogicalAnd,
          operands: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (76, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "hasAttr",
                position: (76, 39),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "updateScript",
                position: (76, 48),
               },
              ],
             },
             Variable {
              identifier: "pkg",
              position: (76, 62),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "cond",
             position: (76, 69),
            },
            arguments: [
             Variable {
              identifier: "path",
              position: (76, 74),
             },
             Variable {
              identifier: "pkg",
              position: (76, 79),
             },
            ],
           },
          ],
          position: (76, 66),
         },
         position: (76, 25),
        },
        position: (76, 19),
       },
      ],
     },
     position: (75, 47),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWithUpdateScriptAndMaintainer",
       position: (80, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "maintainer'",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "maintainer",
           position: (82, 7),
          },
         ],
        },
        IfThenElse {
         predicate: UnaryOperation {
          operator: Not,
          operand: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (83, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "hasAttr",
               position: (83, 23),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "maintainer'",
             position: (83, 31),
            },
            PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (83, 43),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "maintainers",
                position: (83, 47),
               },
              ],
             },
             default: None,
            },
           ],
          },
          position: (83, 12),
         },
         then: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (84, 11),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "throw",
              position: (84, 20),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "Maintainer with name `",
              position: (84, 27),
             },
             Expression {
              expression: Variable {
               identifier: "maintainer'",
               position: (84, 51),
              },
             },
             Raw {
              content: " does not exist in `maintainers/maintainer-list.nix`.",
              position: (84, 63),
             },
            ],
           },
          ],
         },
         else_: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (86, 11),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "getAttr",
              position: (86, 20),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "maintainer'",
            position: (86, 28),
           },
           PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (86, 40),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "maintainers",
               position: (86, 44),
              },
             ],
            },
            default: None,
           },
          ],
         },
         position: (83, 9),
        },
       ),
      ],
      target: FunctionApplication {
       function: Variable {
        identifier: "packagesWithUpdateScriptMatchingPredicate",
        position: (88, 7),
       },
       arguments: [
        Function {
         argument: Some(
          "path",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "pkg",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "builtins",
              position: (89, 30),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "hasAttr",
                position: (89, 39),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: "maintainers",
                position: (89, 48),
               },
              ],
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkg",
               position: (89, 61),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "meta",
                 position: (89, 65),
                },
               ],
              },
              default: None,
             },
            ],
           },
           then: IfThenElse {
            predicate: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (90, 37),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "isList",
                 position: (90, 46),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "pkg",
                position: (90, 53),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "meta",
                  position: (90, 57),
                 },
                 Raw {
                  content: "maintainers",
                  position: (90, 62),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            then: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (91, 41),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "elem",
                 position: (91, 50),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "maintainer",
               position: (91, 55),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkg",
                position: (91, 66),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "meta",
                  position: (91, 70),
                 },
                 Raw {
                  content: "maintainers",
                  position: (91, 75),
                 },
                ],
               },
               default: None,
              },
             ],
            },
            else_: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "maintainer",
               position: (92, 41),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "pkg",
                position: (92, 55),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "meta",
                  position: (92, 59),
                 },
                 Raw {
                  content: "maintainers",
                  position: (92, 64),
                 },
                ],
               },
               default: None,
              },
             ],
             position: (92, 52),
            },
            position: (90, 34),
           },
           else_: Variable {
            identifier: "false",
            position: (94, 33),
           },
           position: (89, 27),
          },
          position: (88, 56),
         },
         position: (88, 50),
        },
       ],
      },
      position: (81, 5),
     },
     position: (80, 43),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesWithUpdateScript",
       position: (100, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "path",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "pkgs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "prefix",
            position: (102, 7),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (102, 16),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "splitString",
              position: (102, 20),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: ".",
              position: (102, 33),
             },
            ],
           },
           Variable {
            identifier: "path",
            position: (102, 36),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "pathContent",
            position: (103, 7),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (103, 21),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "attrByPath",
              position: (103, 25),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "prefix",
            position: (103, 36),
           },
           Variable {
            identifier: "null",
            position: (103, 43),
           },
           Variable {
            identifier: "pkgs",
            position: (103, 48),
           },
          ],
         },
        ),
       ],
       target: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "pathContent",
           position: (105, 10),
          },
          Variable {
           identifier: "null",
           position: (105, 25),
          },
         ],
         position: (105, 22),
        },
        then: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (106, 9),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "throw",
             position: (106, 18),
            },
           ],
          },
          default: None,
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "Attribute path `",
             position: (106, 25),
            },
            Expression {
             expression: Variable {
              identifier: "path",
              position: (106, 43),
             },
            },
            Raw {
             content: "` does not exist.",
             position: (106, 48),
            },
           ],
          },
         ],
        },
        else_: FunctionApplication {
         function: Variable {
          identifier: "packagesWithPath",
          position: (108, 9),
         },
         arguments: [
          Variable {
           identifier: "prefix",
           position: (108, 26),
          },
          Function {
           argument: Some(
            "path",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "pkg",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (108, 45),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "hasAttr",
                 position: (108, 54),
                },
               ],
              },
              default: None,
             },
             arguments: [
              String {
               parts: [
                Raw {
                 content: "updateScript",
                 position: (108, 63),
                },
               ],
              },
              Variable {
               identifier: "pkg",
               position: (108, 77),
              },
             ],
            },
            position: (108, 40),
           },
           position: (108, 34),
          },
          Variable {
           identifier: "pathContent",
           position: (109, 24),
          },
         ],
        },
        position: (105, 7),
       },
       position: (101, 5),
      },
      position: (100, 36),
     },
     position: (100, 30),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packageByName",
       position: (113, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "path",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "pkgs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "package",
            position: (115, 9),
           },
          ],
         },
         FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (115, 19),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "attrByPath",
              position: (115, 23),
             },
            ],
           },
           default: None,
          },
          arguments: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (115, 35),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "splitString",
                position: (115, 39),
               },
              ],
             },
             default: None,
            },
            arguments: [
             String {
              parts: [
               Raw {
                content: ".",
                position: (115, 52),
               },
              ],
             },
             Variable {
              identifier: "path",
              position: (115, 55),
             },
            ],
           },
           Variable {
            identifier: "null",
            position: (115, 61),
           },
           Variable {
            identifier: "pkgs",
            position: (115, 66),
           },
          ],
         },
        ),
       ],
       target: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "package",
           position: (117, 10),
          },
          Variable {
           identifier: "null",
           position: (117, 21),
          },
         ],
         position: (117, 18),
        },
        then: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (118, 9),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "throw",
             position: (118, 18),
            },
           ],
          },
          default: None,
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "Package with an attribute name `",
             position: (118, 25),
            },
            Expression {
             expression: Variable {
              identifier: "path",
              position: (118, 59),
             },
            },
            Raw {
             content: "` does not exist.",
             position: (118, 64),
            },
           ],
          },
         ],
        },
        else_: IfThenElse {
         predicate: UnaryOperation {
          operator: Not,
          operand: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (119, 17),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "hasAttr",
               position: (119, 26),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: "updateScript",
               position: (119, 35),
              },
             ],
            },
            Variable {
             identifier: "package",
             position: (119, 49),
            },
           ],
          },
          position: (119, 15),
         },
         then: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (120, 9),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "throw",
              position: (120, 18),
             },
            ],
           },
           default: None,
          },
          arguments: [
           String {
            parts: [
             Raw {
              content: "Package with an attribute name `",
              position: (120, 25),
             },
             Expression {
              expression: Variable {
               identifier: "path",
               position: (120, 59),
              },
             },
             Raw {
              content: "` does not have a `passthru.updateScript` attribute defined.",
              position: (120, 64),
             },
            ],
           },
          ],
         },
         else_: Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "attrPath",
               position: (122, 11),
              },
             ],
            },
            Variable {
             identifier: "path",
             position: (122, 22),
            },
           ),
           Inherit(
            None,
            [
             Raw {
              content: "package",
              position: (122, 36),
             },
            ],
           ),
          ],
          recursive: false,
          position: (122, 9),
         },
         position: (119, 12),
        },
        position: (117, 7),
       },
       position: (114, 5),
      },
      position: (113, 25),
     },
     position: (113, 19),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packages",
       position: (126, 3),
      },
     ],
    },
    IfThenElse {
     predicate: BinaryOperation {
      operator: NotEqualTo,
      operands: [
       Variable {
        identifier: "package",
        position: (127, 8),
       },
       Variable {
        identifier: "null",
        position: (127, 19),
       },
      ],
      position: (127, 16),
     },
     then: List {
      elements: [
       FunctionApplication {
        function: Variable {
         identifier: "packageByName",
         position: (128, 10),
        },
        arguments: [
         Variable {
          identifier: "package",
          position: (128, 24),
         },
         Variable {
          identifier: "pkgs",
          position: (128, 32),
         },
        ],
       },
      ],
      position: (128, 7),
     },
     else_: IfThenElse {
      predicate: BinaryOperation {
       operator: NotEqualTo,
       operands: [
        Variable {
         identifier: "predicate",
         position: (129, 13),
        },
        Variable {
         identifier: "null",
         position: (129, 26),
        },
       ],
       position: (129, 23),
      },
      then: FunctionApplication {
       function: Variable {
        identifier: "packagesWithUpdateScriptMatchingPredicate",
        position: (130, 7),
       },
       arguments: [
        Variable {
         identifier: "predicate",
         position: (130, 49),
        },
        Variable {
         identifier: "pkgs",
         position: (130, 59),
        },
       ],
      },
      else_: IfThenElse {
       predicate: BinaryOperation {
        operator: NotEqualTo,
        operands: [
         Variable {
          identifier: "maintainer",
          position: (131, 13),
         },
         Variable {
          identifier: "null",
          position: (131, 27),
         },
        ],
        position: (131, 24),
       },
       then: FunctionApplication {
        function: Variable {
         identifier: "packagesWithUpdateScriptAndMaintainer",
         position: (132, 7),
        },
        arguments: [
         Variable {
          identifier: "maintainer",
          position: (132, 45),
         },
         Variable {
          identifier: "pkgs",
          position: (132, 56),
         },
        ],
       },
       else_: IfThenElse {
        predicate: BinaryOperation {
         operator: NotEqualTo,
         operands: [
          Variable {
           identifier: "path",
           position: (133, 13),
          },
          Variable {
           identifier: "null",
           position: (133, 21),
          },
         ],
         position: (133, 18),
        },
        then: FunctionApplication {
         function: Variable {
          identifier: "packagesWithUpdateScript",
          position: (134, 7),
         },
         arguments: [
          Variable {
           identifier: "path",
           position: (134, 32),
          },
          Variable {
           identifier: "pkgs",
           position: (134, 37),
          },
         ],
        },
        else_: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (136, 7),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "throw",
             position: (136, 16),
            },
           ],
          },
          default: None,
         },
         arguments: [
          String {
           parts: [
            Raw {
             content: "No arguments provided.\n\n",
             position: (136, 23),
            },
            Expression {
             expression: Variable {
              identifier: "helpText",
              position: (136, 51),
             },
            },
           ],
          },
         ],
        },
        position: (133, 10),
       },
       position: (131, 10),
      },
      position: (129, 10),
     },
     position: (127, 5),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "helpText",
       position: (138, 3),
      },
     ],
    },
    String {
     parts: [
      Raw {
       content: "Please run:\n\n    % nix-shell maintainers/scripts/update.nix --argstr maintainer garbas\n\nto run all update scripts for all packages that lists \\`garbas\\` as a maintainer\nand have \\`updateScript\\` defined, or:\n\n    % nix-shell maintainers/scripts/update.nix --argstr package gnome.nautilus\n\nto run update script for specific package, or\n\n    % nix-shell maintainers/scripts/update.nix --arg predicate '(path: pkg: pkg.updateScript.name or null == \"gnome-update-script\")'\n\nto run update script for all packages matching given predicate, or\n\n    % nix-shell maintainers/scripts/update.nix --argstr path gnome\n\nto run update script for all package under an attribute path.\n\nYou can also add\n\n    --argstr max-workers 8\n\nto increase the number of jobs in parallel, or\n\n    --argstr keep-going true\n\nto continue running when a single update fails.\n\nYou can also make the updater automatically commit on your behalf from updateScripts\nthat support it by adding\n\n    --argstr commit true\n",
       position: (139, 1),
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packageData",
       position: (176, 3),
      },
     ],
    },
    Function {
     argument: None,
     arguments: FunctionArguments {
      arguments: [
       FunctionArgument {
        identifier: "attrPath",
        default: None,
       },
       FunctionArgument {
        identifier: "package",
        default: None,
       },
      ],
      ellipsis: false,
     },
     definition: Map {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "name",
           position: (177, 5),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "package",
          position: (177, 12),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "name",
            position: (177, 20),
           },
          ],
         },
         default: None,
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "pname",
           position: (178, 5),
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (178, 13),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "getName",
             position: (178, 17),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "package",
           position: (178, 25),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "oldVersion",
           position: (179, 5),
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (179, 18),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "getVersion",
             position: (179, 22),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "package",
           position: (179, 33),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "updateScript",
           position: (180, 5),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (180, 20),
         },
         arguments: [
          PropertyAccess {
           expression: Variable {
            identifier: "builtins",
            position: (180, 24),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "toString",
              position: (180, 33),
             },
            ],
           },
           default: None,
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (180, 43),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "toList",
               position: (180, 47),
              },
             ],
            },
            default: None,
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "package",
              position: (180, 55),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "updateScript",
                position: (180, 63),
               },
               Raw {
                content: "command",
                position: (180, 76),
               },
              ],
             },
             default: Some(
              PropertyAccess {
               expression: Variable {
                identifier: "package",
                position: (180, 87),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "updateScript",
                  position: (180, 95),
                 },
                ],
               },
               default: None,
              },
             ),
            },
           ],
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "supportedFeatures",
           position: (181, 5),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "package",
          position: (181, 25),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "updateScript",
            position: (181, 33),
           },
           Raw {
            content: "supportedFeatures",
            position: (181, 46),
           },
          ],
         },
         default: Some(
          List {
           elements: [],
           position: (181, 67),
          },
         ),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "attrPath",
           position: (182, 5),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "package",
          position: (182, 16),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "updateScript",
            position: (182, 24),
           },
           Raw {
            content: "attrPath",
            position: (182, 37),
           },
          ],
         },
         default: Some(
          Variable {
           identifier: "attrPath",
           position: (182, 49),
          },
         ),
        },
       ),
      ],
      recursive: false,
      position: (176, 40),
     },
     position: (176, 17),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "packagesJson",
       position: (187, 3),
      },
     ],
    },
    FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "pkgs",
       position: (187, 18),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "writeText",
         position: (187, 23),
        },
       ],
      },
      default: None,
     },
     arguments: [
      String {
       parts: [
        Raw {
         content: "packages.json",
         position: (187, 34),
        },
       ],
      },
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "builtins",
         position: (187, 50),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "toJSON",
           position: (187, 59),
          },
         ],
        },
        default: None,
       },
       arguments: [
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (187, 67),
         },
         arguments: [
          Variable {
           identifier: "packageData",
           position: (187, 71),
          },
          Variable {
           identifier: "packages",
           position: (187, 83),
          },
         ],
        },
       ],
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "optionalArgs",
       position: (189, 3),
      },
     ],
    },
    BinaryOperation {
     operator: Concatenation,
     operands: [
      FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (190, 5),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "optional",
           position: (190, 9),
          },
         ],
        },
        default: None,
       },
       arguments: [
        BinaryOperation {
         operator: NotEqualTo,
         operands: [
          Variable {
           identifier: "max-workers",
           position: (190, 19),
          },
          Variable {
           identifier: "null",
           position: (190, 34),
          },
         ],
         position: (190, 31),
        },
        String {
         parts: [
          Raw {
           content: "--max-workers=",
           position: (190, 41),
          },
          Expression {
           expression: Variable {
            identifier: "max-workers",
            position: (190, 57),
           },
          },
         ],
        },
       ],
      },
      BinaryOperation {
       operator: Concatenation,
       operands: [
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (191, 8),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "optional",
             position: (191, 12),
            },
           ],
          },
          default: None,
         },
         arguments: [
          BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "keep-going",
             position: (191, 22),
            },
            String {
             parts: [
              Raw {
               content: "true",
               position: (191, 37),
              },
             ],
            },
           ],
           position: (191, 33),
          },
          String {
           parts: [
            Raw {
             content: "--keep-going",
             position: (191, 45),
            },
           ],
          },
         ],
        },
        FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "lib",
           position: (192, 8),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "optional",
             position: (192, 12),
            },
           ],
          },
          default: None,
         },
         arguments: [
          BinaryOperation {
           operator: EqualTo,
           operands: [
            Variable {
             identifier: "commit",
             position: (192, 22),
            },
            String {
             parts: [
              Raw {
               content: "true",
               position: (192, 33),
              },
             ],
            },
           ],
           position: (192, 29),
          },
          String {
           parts: [
            Raw {
             content: "--commit",
             position: (192, 41),
            },
           ],
          },
         ],
        },
       ],
       position: (192, 5),
      },
     ],
     position: (191, 5),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "args",
       position: (194, 3),
      },
     ],
    },
    BinaryOperation {
     operator: Concatenation,
     operands: [
      List {
       elements: [
        Variable {
         identifier: "packagesJson",
         position: (194, 12),
        },
       ],
       position: (194, 10),
      },
      Variable {
       identifier: "optionalArgs",
       position: (194, 30),
      },
     ],
     position: (194, 27),
    },
   ),
  ],
  target: FunctionApplication {
   function: PropertyAccess {
    expression: Variable {
     identifier: "pkgs",
     position: (196, 4),
    },
    attribute_path: AttributePath {
     attributes: [
      Raw {
       content: "stdenv",
       position: (196, 9),
      },
      Raw {
       content: "mkDerivation",
       position: (196, 16),
      },
     ],
    },
    default: None,
   },
   arguments: [
    Map {
     bindings: [
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "name",
          position: (197, 3),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "nixpkgs-update-script",
          position: (197, 11),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "buildCommand",
          position: (198, 3),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "echo \"\"\necho \"----------------------------------------------------------------\"\necho \"\"\necho \"Not possible to update packages using \\`nix-build\\`\"\necho \"\"\necho \"",
          position: (199, 1),
         },
         Expression {
          expression: Variable {
           identifier: "helpText",
           position: (204, 13),
          },
         },
         Raw {
          content: "\"\necho \"----------------------------------------------------------------\"\nexit 1\n",
          position: (204, 22),
         },
        ],
       },
      ),
      KeyValue(
       AttributePath {
        attributes: [
         Raw {
          content: "shellHook",
          position: (208, 3),
         },
        ],
       },
       String {
        parts: [
         Raw {
          content: "unset shellHook # do not contaminate nested shells\nexec ",
          position: (209, 1),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (210, 12),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "python3",
              position: (210, 17),
             },
             Raw {
              content: "interpreter",
              position: (210, 25),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: " ",
          position: (210, 37),
         },
         Expression {
          expression: Path {
           parts: [
            Raw {
             content: "./update.py",
             position: (210, 40),
            },
           ],
          },
         },
         Raw {
          content: " ",
          position: (210, 52),
         },
         Expression {
          expression: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (210, 55),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "concatStringsSep",
               position: (210, 64),
              },
             ],
            },
            default: None,
           },
           arguments: [
            String {
             parts: [
              Raw {
               content: " ",
               position: (210, 82),
              },
             ],
            },
            Variable {
             identifier: "args",
             position: (210, 85),
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (210, 90),
         },
        ],
       },
      ),
     ],
     recursive: false,
     position: (196, 29),
    },
   ],
  },
  position: (13, 1),
 },
 position: (1, 1),
}