---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "options",
       position: (2, 3),
      },
      Raw {
       content: "value",
       position: (2, 11),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (2, 19),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "mkOption",
         position: (2, 23),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "type",
            position: (3, 5),
           },
          ],
         },
         to: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (3, 12),
           },
           attribute_path: AttributePath {
            parts: [
             Raw {
              content: "types",
              position: (3, 16),
             },
             Raw {
              content: "nullOr",
              position: (3, 22),
             },
            ],
           },
           default: None,
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (3, 29),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "types",
               position: (3, 33),
              },
              Raw {
               content: "str",
               position: (3, 39),
              },
             ],
            },
            default: None,
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "default",
            position: (4, 5),
           },
          ],
         },
         to: Variable {
          identifier: "null",
          position: (4, 15),
         },
        },
       ],
       recursive: false,
       position: (2, 32),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "config",
       position: (7, 3),
      },
      Raw {
       content: "foo",
       position: (7, 10),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (7, 16),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "mkIf",
         position: (7, 20),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Parentheses {
       expression: BinaryOperation {
        operator: NotEqualTo,
        operands: [
         PropertyAccess {
          expression: Variable {
           identifier: "config",
           position: (7, 26),
          },
          attribute_path: AttributePath {
           parts: [
            Raw {
             content: "value",
             position: (7, 33),
            },
           ],
          },
          default: None,
         },
         Variable {
          identifier: "null",
          position: (7, 42),
         },
        ],
        position: (7, 39),
       },
       position: (7, 25),
      },
      PropertyAccess {
       expression: Variable {
        identifier: "config",
        position: (7, 48),
       },
       attribute_path: AttributePath {
        parts: [
         Raw {
          content: "value",
          position: (7, 55),
         },
        ],
       },
       default: None,
      },
     ],
    },
   },
  ],
  recursive: false,
  position: (1, 23),
 },
 position: (1, 1),
}