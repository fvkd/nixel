---
Î“ := rules "expr"
  expr := rules "expr_function"
    expr_function := rules "expr_if"
      expr_if := rules "expr_op"
        expr_op := rules "expr_app"
          expr_app := rules "expr_app" "expr_select"
            expr_app := rules "expr_app" "expr_select"
              expr_app := rules "expr_select"
                expr_select := rules "expr_simple"
                  expr_simple := rules "ID"
                    ID := lexemes "ID"
                      ID "import" (1, 1)
              expr_select := rules "expr_simple"
                expr_simple := rules "path_start" "PATH_END"
                  path_start := rules "PATH"
                    PATH := lexemes "PATH"
                      PATH "./make-test-python.nix" (1, 8)
                  PATH_END := lexemes "PATH_END"
                    PATH_END " " (1, 30)
            expr_select := rules "expr_simple"
              expr_simple := rules "(" "expr" ")"
                ( := lexemes "("
                  ( "(" (1, 31)
                expr := rules "expr_function"
                  expr_function := rules "{" "formals" "}" ":" "expr_function"
                    { := lexemes "{"
                      { "{" (1, 32)
                    formals := rules "formal" "," "formals"
                      formal := rules "ID"
                        ID := lexemes "ID"
                          ID "lib" (1, 34)
                      , := lexemes ","
                        , "," (1, 37)
                      formals := rules "formal" "," "formals"
                        formal := rules "ID"
                          ID := lexemes "ID"
                            ID "pkgs" (1, 39)
                        , := lexemes ","
                          , "," (1, 43)
                        formals := rules "ELLIPSIS"
                          ELLIPSIS := lexemes "ELLIPSIS"
                            ELLIPSIS "..." (1, 45)
                    } := lexemes "}"
                      } "}" (1, 49)
                    : := lexemes ":"
                      : ":" (1, 50)
                    expr_function := rules "expr_if"
                      expr_if := rules "expr_op"
                        expr_op := rules "expr_app"
                          expr_app := rules "expr_select"
                            expr_select := rules "expr_simple"
                              expr_simple := rules "{" "binds" "}"
                                { := lexemes "{"
                                  { "{" (1, 52)
                                binds := rules "binds" "attrpath" "=" "expr" ";"
                                  binds := rules "binds" "attrpath" "=" "expr" ";"
                                    binds := rules "binds" "attrpath" "=" "expr" ";"
                                      binds := rules 
                                      attrpath := rules "attr"
                                        attr := rules "ID"
                                          ID := lexemes "ID"
                                            ID "name" (2, 3)
                                      = := lexemes "="
                                        = "=" (2, 8)
                                      expr := rules "expr_function"
                                        expr_function := rules "expr_if"
                                          expr_if := rules "expr_op"
                                            expr_op := rules "expr_app"
                                              expr_app := rules "expr_select"
                                                expr_select := rules "expr_simple"
                                                  expr_simple := rules "\"" "string_parts" "\""
                                                    " := lexemes "\""
                                                      " "\"" (2, 10)
                                                    string_parts := rules "STR"
                                                      STR := lexemes "STR"
                                                        STR "systemd-initrd-simple" (2, 11)
                                                    " := lexemes "\""
                                                      " "\"" (2, 32)
                                      ; := lexemes ";"
                                        ; ";" (2, 33)
                                    attrpath := rules "attr"
                                      attr := rules "ID"
                                        ID := lexemes "ID"
                                          ID "machine" (4, 3)
                                    = := lexemes "="
                                      = "=" (4, 11)
                                    expr := rules "expr_function"
                                      expr_function := rules "{" "formals" "}" ":" "expr_function"
                                        { := lexemes "{"
                                          { "{" (4, 13)
                                        formals := rules "formal" "," "formals"
                                          formal := rules "ID"
                                            ID := lexemes "ID"
                                              ID "pkgs" (4, 15)
                                          , := lexemes ","
                                            , "," (4, 19)
                                          formals := rules "ELLIPSIS"
                                            ELLIPSIS := lexemes "ELLIPSIS"
                                              ELLIPSIS "..." (4, 21)
                                        } := lexemes "}"
                                          } "}" (4, 25)
                                        : := lexemes ":"
                                          : ":" (4, 26)
                                        expr_function := rules "expr_if"
                                          expr_if := rules "expr_op"
                                            expr_op := rules "expr_app"
                                              expr_app := rules "expr_select"
                                                expr_select := rules "expr_simple"
                                                  expr_simple := rules "{" "binds" "}"
                                                    { := lexemes "{"
                                                      { "{" (4, 28)
                                                    binds := rules "binds" "attrpath" "=" "expr" ";"
                                                      binds := rules "binds" "attrpath" "=" "expr" ";"
                                                        binds := rules 
                                                        attrpath := rules "attrpath" "." "attr"
                                                          attrpath := rules "attrpath" "." "attr"
                                                            attrpath := rules "attr"
                                                              attr := rules "ID"
                                                                ID := lexemes "ID"
                                                                  ID "boot" (5, 5)
                                                            . := lexemes "."
                                                              . "." (5, 9)
                                                            attr := rules "ID"
                                                              ID := lexemes "ID"
                                                                ID "initrd" (5, 10)
                                                          . := lexemes "."
                                                            . "." (5, 16)
                                                          attr := rules "ID"
                                                            ID := lexemes "ID"
                                                              ID "systemd" (5, 17)
                                                        = := lexemes "="
                                                          = "=" (5, 25)
                                                        expr := rules "expr_function"
                                                          expr_function := rules "expr_if"
                                                            expr_if := rules "expr_op"
                                                              expr_op := rules "expr_app"
                                                                expr_app := rules "expr_select"
                                                                  expr_select := rules "expr_simple"
                                                                    expr_simple := rules "{" "binds" "}"
                                                                      { := lexemes "{"
                                                                        { "{" (5, 27)
                                                                      binds := rules "binds" "attrpath" "=" "expr" ";"
                                                                        binds := rules "binds" "attrpath" "=" "expr" ";"
                                                                          binds := rules 
                                                                          attrpath := rules "attr"
                                                                            attr := rules "ID"
                                                                              ID := lexemes "ID"
                                                                                ID "enable" (6, 7)
                                                                          = := lexemes "="
                                                                            = "=" (6, 14)
                                                                          expr := rules "expr_function"
                                                                            expr_function := rules "expr_if"
                                                                              expr_if := rules "expr_op"
                                                                                expr_op := rules "expr_app"
                                                                                  expr_app := rules "expr_select"
                                                                                    expr_select := rules "expr_simple"
                                                                                      expr_simple := rules "ID"
                                                                                        ID := lexemes "ID"
                                                                                          ID "true" (6, 16)
                                                                          ; := lexemes ";"
                                                                            ; ";" (6, 20)
                                                                        attrpath := rules "attr"
                                                                          attr := rules "ID"
                                                                            ID := lexemes "ID"
                                                                              ID "emergencyAccess" (7, 7)
                                                                        = := lexemes "="
                                                                          = "=" (7, 23)
                                                                        expr := rules "expr_function"
                                                                          expr_function := rules "expr_if"
                                                                            expr_if := rules "expr_op"
                                                                              expr_op := rules "expr_app"
                                                                                expr_app := rules "expr_select"
                                                                                  expr_select := rules "expr_simple"
                                                                                    expr_simple := rules "ID"
                                                                                      ID := lexemes "ID"
                                                                                        ID "true" (7, 25)
                                                                        ; := lexemes ";"
                                                                          ; ";" (7, 29)
                                                                      } := lexemes "}"
                                                                        } "}" (8, 5)
                                                        ; := lexemes ";"
                                                          ; ";" (8, 6)
                                                      attrpath := rules "attr"
                                                        attr := rules "ID"
                                                          ID := lexemes "ID"
                                                            ID "fileSystems" (9, 5)
                                                      = := lexemes "="
                                                        = "=" (9, 17)
                                                      expr := rules "expr_function"
                                                        expr_function := rules "expr_if"
                                                          expr_if := rules "expr_op"
                                                            expr_op := rules "expr_app"
                                                              expr_app := rules "expr_app" "expr_select"
                                                                expr_app := rules "expr_select"
                                                                  expr_select := rules "expr_simple" "." "attrpath"
                                                                    expr_simple := rules "ID"
                                                                      ID := lexemes "ID"
                                                                        ID "lib" (9, 19)
                                                                    . := lexemes "."
                                                                      . "." (9, 22)
                                                                    attrpath := rules "attr"
                                                                      attr := rules "ID"
                                                                        ID := lexemes "ID"
                                                                          ID "mkVMOverride" (9, 23)
                                                                expr_select := rules "expr_simple"
                                                                  expr_simple := rules "{" "binds" "}"
                                                                    { := lexemes "{"
                                                                      { "{" (9, 36)
                                                                    binds := rules "binds" "attrpath" "=" "expr" ";"
                                                                      binds := rules 
                                                                      attrpath := rules "attrpath" "." "attr"
                                                                        attrpath := rules "string_attr"
                                                                          string_attr := rules "\"" "string_parts" "\""
                                                                            " := lexemes "\""
                                                                              " "\"" (10, 7)
                                                                            string_parts := rules "STR"
                                                                              STR := lexemes "STR"
                                                                                STR "/" (10, 8)
                                                                            " := lexemes "\""
                                                                              " "\"" (10, 9)
                                                                        . := lexemes "."
                                                                          . "." (10, 10)
                                                                        attr := rules "ID"
                                                                          ID := lexemes "ID"
                                                                            ID "autoResize" (10, 11)
                                                                      = := lexemes "="
                                                                        = "=" (10, 22)
                                                                      expr := rules "expr_function"
                                                                        expr_function := rules "expr_if"
                                                                          expr_if := rules "expr_op"
                                                                            expr_op := rules "expr_app"
                                                                              expr_app := rules "expr_select"
                                                                                expr_select := rules "expr_simple"
                                                                                  expr_simple := rules "ID"
                                                                                    ID := lexemes "ID"
                                                                                      ID "true" (10, 24)
                                                                      ; := lexemes ";"
                                                                        ; ";" (10, 28)
                                                                    } := lexemes "}"
                                                                      } "}" (11, 5)
                                                      ; := lexemes ";"
                                                        ; ";" (11, 6)
                                                    } := lexemes "}"
                                                      } "}" (12, 3)
                                    ; := lexemes ";"
                                      ; ";" (12, 4)
                                  attrpath := rules "attr"
                                    attr := rules "ID"
                                      ID := lexemes "ID"
                                        ID "testScript" (14, 3)
                                  = := lexemes "="
                                    = "=" (14, 14)
                                  expr := rules "expr_function"
                                    expr_function := rules "expr_if"
                                      expr_if := rules "expr_op"
                                        expr_op := rules "expr_app"
                                          expr_app := rules "expr_select"
                                            expr_select := rules "expr_simple"
                                              expr_simple := rules "IND_STRING_OPEN" "ind_string_parts" "IND_STRING_CLOSE"
                                                IND_STRING_OPEN := lexemes "IND_STRING_OPEN"
                                                  IND_STRING_OPEN "''\n" (14, 16)
                                                ind_string_parts := rules "ind_string_parts" "IND_STR"
                                                  ind_string_parts := rules 
                                                  IND_STR := lexemes "IND_STR"
                                                    IND_STR "    import subprocess\n\n    oldAvail = machine.succeed(\"df --output=avail / | sed 1d\")\n    machine.shutdown()\n\n    subprocess.check_call([\"qemu-img\", \"resize\", \"vm-state-machine/machine.qcow2\", \"+1G\"])\n\n    machine.start()\n    newAvail = machine.succeed(\"df --output=avail / | sed 1d\")\n\n    assert int(oldAvail) < int(newAvail), \"File system did not grow\"\n  " (15, 1)
                                                IND_STRING_CLOSE := lexemes "IND_STRING_CLOSE"
                                                  IND_STRING_CLOSE "''" (26, 3)
                                  ; := lexemes ";"
                                    ; ";" (26, 5)
                                } := lexemes "}"
                                  } "}" (27, 1)
                ) := lexemes ")"
                  ) ")" (27, 2)