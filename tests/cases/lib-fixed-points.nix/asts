---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "fix",
       position: (19, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "f",
     },
     definition: LetIn {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "x",
           position: (19, 16),
          },
         ],
        },
        to: FunctionApplication {
         function: Variable {
          identifier: "f",
          position: (19, 20),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (19, 22),
          },
         ],
        },
       },
      ],
      target: Variable {
       identifier: "x",
       position: (19, 28),
      },
      position: (19, 12),
     },
     position: (19, 9),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "fix'",
       position: (25, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "f",
     },
     definition: LetIn {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "x",
           position: (25, 17),
          },
         ],
        },
        to: BinaryOperation {
         operator: Update,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (25, 21),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (25, 23),
            },
           ],
          },
          Map {
           bindings: [
            Binding {
             from: AttributePath {
              parts: [
               Raw {
                content: "__unfix__",
                position: (25, 30),
               },
              ],
             },
             to: Variable {
              identifier: "f",
              position: (25, 42),
             },
            },
           ],
           recursive: false,
           position: (25, 28),
          },
         ],
         position: (25, 25),
        },
       },
      ],
      target: Variable {
       identifier: "x",
       position: (25, 51),
      },
      position: (25, 13),
     },
     position: (25, 10),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "converge",
       position: (32, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "f",
     },
     definition: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: LetIn {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "x'",
            position: (34, 7),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (34, 12),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (34, 14),
           },
          ],
         },
        },
       ],
       target: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "x'",
           position: (36, 10),
          },
          Variable {
           identifier: "x",
           position: (36, 16),
          },
         ],
         position: (36, 13),
        },
        then: Variable {
         identifier: "x",
         position: (37, 12),
        },
        else_: FunctionApplication {
         function: Variable {
          identifier: "converge",
          position: (38, 12),
         },
         arguments: [
          Variable {
           identifier: "f",
           position: (38, 21),
          },
          Variable {
           identifier: "x'",
           position: (38, 23),
          },
         ],
        },
        position: (36, 7),
       },
       position: (33, 5),
      },
      position: (32, 17),
     },
     position: (32, 14),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "extends",
       position: (69, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "f",
     },
     definition: Function {
      argument: Simple {
       identifier: "rattrs",
      },
      definition: Function {
       argument: Simple {
        identifier: "self",
       },
       definition: LetIn {
        bindings: [
         Binding {
          from: AttributePath {
           parts: [
            Raw {
             content: "super",
             position: (69, 34),
            },
           ],
          },
          to: FunctionApplication {
           function: Variable {
            identifier: "rattrs",
            position: (69, 42),
           },
           arguments: [
            Variable {
             identifier: "self",
             position: (69, 49),
            },
           ],
          },
         },
        ],
        target: BinaryOperation {
         operator: Update,
         operands: [
          Variable {
           identifier: "super",
           position: (69, 58),
          },
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (69, 67),
           },
           arguments: [
            Variable {
             identifier: "self",
             position: (69, 69),
            },
            Variable {
             identifier: "super",
             position: (69, 74),
            },
           ],
          },
         ],
         position: (69, 64),
        },
        position: (69, 30),
       },
       position: (69, 24),
      },
      position: (69, 16),
     },
     position: (69, 13),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "composeExtensions",
       position: (74, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "f",
     },
     definition: Function {
      argument: Simple {
       identifier: "g",
      },
      definition: Function {
       argument: Simple {
        identifier: "final",
       },
       definition: Function {
        argument: Simple {
         identifier: "prev",
        },
        definition: LetIn {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "fApplied",
              position: (76, 11),
             },
            ],
           },
           to: FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (76, 22),
            },
            arguments: [
             Variable {
              identifier: "final",
              position: (76, 24),
             },
             Variable {
              identifier: "prev",
              position: (76, 30),
             },
            ],
           },
          },
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "prev'",
              position: (77, 11),
             },
            ],
           },
           to: BinaryOperation {
            operator: Update,
            operands: [
             Variable {
              identifier: "prev",
              position: (77, 19),
             },
             Variable {
              identifier: "fApplied",
              position: (77, 27),
             },
            ],
            position: (77, 24),
           },
          },
         ],
         target: BinaryOperation {
          operator: Update,
          operands: [
           Variable {
            identifier: "fApplied",
            position: (78, 10),
           },
           FunctionApplication {
            function: Variable {
             identifier: "g",
             position: (78, 22),
            },
            arguments: [
             Variable {
              identifier: "final",
              position: (78, 24),
             },
             Variable {
              identifier: "prev'",
              position: (78, 30),
             },
            ],
           },
          ],
          position: (78, 19),
         },
         position: (76, 7),
        },
        position: (75, 18),
       },
       position: (75, 11),
      },
      position: (75, 8),
     },
     position: (75, 5),
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "composeManyExtensions",
       position: (86, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (87, 5),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "foldr",
         position: (87, 9),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Function {
       argument: Simple {
        identifier: "x",
       },
       definition: Function {
        argument: Simple {
         identifier: "y",
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "composeExtensions",
          position: (87, 22),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (87, 40),
          },
          Variable {
           identifier: "y",
           position: (87, 42),
          },
         ],
        },
        position: (87, 19),
       },
       position: (87, 16),
      },
      Function {
       argument: Simple {
        identifier: "final",
       },
       definition: Function {
        argument: Simple {
         identifier: "prev",
        },
        definition: Map {
         bindings: [],
         recursive: false,
         position: (87, 59),
        },
        position: (87, 53),
       },
       position: (87, 46),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "makeExtensible",
       position: (105, 3),
      },
     ],
    },
    to: FunctionApplication {
     function: Variable {
      identifier: "makeExtensibleWithCustomName",
      position: (105, 20),
     },
     arguments: [
      String {
       parts: [
        Raw {
         content: "extend",
         position: (105, 50),
        },
       ],
       position: (105, 49),
      },
     ],
    },
   },
   Binding {
    from: AttributePath {
     parts: [
      Raw {
       content: "makeExtensibleWithCustomName",
       position: (109, 3),
      },
     ],
    },
    to: Function {
     argument: Simple {
      identifier: "extenderName",
     },
     definition: Function {
      argument: Simple {
       identifier: "rattrs",
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        FunctionApplication {
         function: Variable {
          identifier: "fix'",
          position: (110, 5),
         },
         arguments: [
          Variable {
           identifier: "rattrs",
           position: (110, 10),
          },
         ],
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Expression {
              expression: Variable {
               identifier: "extenderName",
               position: (111, 9),
              },
             },
            ],
           },
           to: Function {
            argument: Simple {
             identifier: "f",
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "makeExtensibleWithCustomName",
              position: (111, 28),
             },
             arguments: [
              Variable {
               identifier: "extenderName",
               position: (111, 57),
              },
              FunctionApplication {
               function: Variable {
                identifier: "extends",
                position: (111, 71),
               },
               arguments: [
                Variable {
                 identifier: "f",
                 position: (111, 79),
                },
                Variable {
                 identifier: "rattrs",
                 position: (111, 81),
                },
               ],
              },
             ],
            },
            position: (111, 25),
           },
          },
         ],
         recursive: false,
         position: (110, 20),
        },
       ],
       position: (110, 17),
      },
      position: (109, 48),
     },
     position: (109, 34),
    },
   },
  ],
  recursive: true,
  position: (2, 1),
 },
 position: (1, 1),
}