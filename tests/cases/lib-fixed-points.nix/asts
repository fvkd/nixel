---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "fix",
       position: (19, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "x",
           position: (19, 16),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "f",
          position: (19, 20),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (19, 22),
          },
         ],
        },
       ),
      ],
      target: Variable {
       identifier: "x",
       position: (19, 28),
      },
     },
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "fix'",
       position: (25, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "x",
           position: (25, 17),
          },
         ],
        },
        BinaryOperation {
         operator: Update,
         operands: [
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (25, 21),
           },
           arguments: [
            Variable {
             identifier: "x",
             position: (25, 23),
            },
           ],
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "__unfix__",
                position: (25, 30),
               },
              ],
             },
             Variable {
              identifier: "f",
              position: (25, 42),
             },
            ),
           ],
           recursive: false,
          },
         ],
        },
       ),
      ],
      target: Variable {
       identifier: "x",
       position: (25, 51),
      },
     },
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "converge",
       position: (32, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "x",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "x'",
            position: (34, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (34, 12),
          },
          arguments: [
           Variable {
            identifier: "x",
            position: (34, 14),
           },
          ],
         },
        ),
       ],
       target: IfThenElse {
        predicate: BinaryOperation {
         operator: EqualTo,
         operands: [
          Variable {
           identifier: "x'",
           position: (36, 10),
          },
          Variable {
           identifier: "x",
           position: (36, 16),
          },
         ],
        },
        then: Variable {
         identifier: "x",
         position: (37, 12),
        },
        else_: FunctionApplication {
         function: Variable {
          identifier: "converge",
          position: (38, 12),
         },
         arguments: [
          Variable {
           identifier: "f",
           position: (38, 21),
          },
          Variable {
           identifier: "x'",
           position: (38, 23),
          },
         ],
        },
       },
      },
     },
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "extends",
       position: (69, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "rattrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "self",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "super",
             position: (69, 34),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "rattrs",
            position: (69, 42),
           },
           arguments: [
            Variable {
             identifier: "self",
             position: (69, 49),
            },
           ],
          },
         ),
        ],
        target: BinaryOperation {
         operator: Update,
         operands: [
          Variable {
           identifier: "super",
           position: (69, 58),
          },
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (69, 67),
           },
           arguments: [
            Variable {
             identifier: "self",
             position: (69, 69),
            },
            Variable {
             identifier: "super",
             position: (69, 74),
            },
           ],
          },
         ],
        },
       },
      },
     },
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "composeExtensions",
       position: (74, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "g",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "final",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "prev",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: LetIn {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "fApplied",
              position: (76, 11),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (76, 22),
            },
            arguments: [
             Variable {
              identifier: "final",
              position: (76, 24),
             },
             Variable {
              identifier: "prev",
              position: (76, 30),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "prev'",
              position: (77, 11),
             },
            ],
           },
           BinaryOperation {
            operator: Update,
            operands: [
             Variable {
              identifier: "prev",
              position: (77, 19),
             },
             Variable {
              identifier: "fApplied",
              position: (77, 27),
             },
            ],
           },
          ),
         ],
         target: BinaryOperation {
          operator: Update,
          operands: [
           Variable {
            identifier: "fApplied",
            position: (78, 10),
           },
           FunctionApplication {
            function: Variable {
             identifier: "g",
             position: (78, 22),
            },
            arguments: [
             Variable {
              identifier: "final",
              position: (78, 24),
             },
             Variable {
              identifier: "prev'",
              position: (78, 30),
             },
            ],
           },
          ],
         },
        },
       },
      },
     },
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "composeManyExtensions",
       position: (86, 3),
      },
     ],
    },
    FunctionApplication {
     function: PropertyAccess {
      expression: Variable {
       identifier: "lib",
       position: (87, 5),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "foldr",
         position: (87, 9),
        },
       ],
      },
      default: None,
     },
     arguments: [
      Function {
       argument: Some(
        "x",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "y",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: FunctionApplication {
         function: Variable {
          identifier: "composeExtensions",
          position: (87, 22),
         },
         arguments: [
          Variable {
           identifier: "x",
           position: (87, 40),
          },
          Variable {
           identifier: "y",
           position: (87, 42),
          },
         ],
        },
       },
      },
      Function {
       argument: Some(
        "final",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "prev",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Map {
         bindings: [],
         recursive: false,
        },
       },
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "makeExtensible",
       position: (105, 3),
      },
     ],
    },
    FunctionApplication {
     function: Variable {
      identifier: "makeExtensibleWithCustomName",
      position: (105, 20),
     },
     arguments: [
      String {
       parts: [
        Raw {
         content: "extend",
         position: (105, 50),
        },
       ],
      },
     ],
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "makeExtensibleWithCustomName",
       position: (109, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "extenderName",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "rattrs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        FunctionApplication {
         function: Variable {
          identifier: "fix'",
          position: (110, 5),
         },
         arguments: [
          Variable {
           identifier: "rattrs",
           position: (110, 10),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Expression {
              expression: Variable {
               identifier: "extenderName",
               position: (111, 9),
              },
             },
            ],
           },
           Function {
            argument: Some(
             "f",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "makeExtensibleWithCustomName",
              position: (111, 28),
             },
             arguments: [
              Variable {
               identifier: "extenderName",
               position: (111, 57),
              },
              FunctionApplication {
               function: Variable {
                identifier: "extends",
                position: (111, 71),
               },
               arguments: [
                Variable {
                 identifier: "f",
                 position: (111, 79),
                },
                Variable {
                 identifier: "rattrs",
                 position: (111, 81),
                },
               ],
              },
             ],
            },
           },
          ),
         ],
         recursive: false,
        },
       ],
      },
     },
    },
   ),
  ],
  recursive: true,
 },
}