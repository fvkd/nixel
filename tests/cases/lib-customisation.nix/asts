---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: Map {
  bindings: [
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "overrideDerivation",
       position: (31, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "drv",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "newDrv",
            position: (33, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "derivation",
           position: (33, 16),
          },
          arguments: [
           BinaryOperation {
            operator: Update,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "drv",
               position: (33, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "drvAttrs",
                 position: (33, 32),
                },
               ],
              },
              default: None,
             },
             FunctionApplication {
              function: Variable {
               identifier: "f",
               position: (33, 45),
              },
              arguments: [
               Variable {
                identifier: "drv",
                position: (33, 47),
               },
              ],
             },
            ],
            position: (33, 41),
           },
          ],
         },
        ),
       ],
       target: FunctionApplication {
        function: PropertyAccess {
         expression: Variable {
          identifier: "lib",
          position: (34, 8),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "flip",
            position: (34, 12),
           },
          ],
         },
         default: None,
        },
        arguments: [
         FunctionApplication {
          function: Variable {
           identifier: "extendDerivation",
           position: (34, 18),
          },
          arguments: [
           Variable {
            identifier: "true",
            position: (34, 35),
           },
          ],
         },
         Variable {
          identifier: "newDrv",
          position: (34, 41),
         },
         BinaryOperation {
          operator: Update,
          operands: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "meta",
                 position: (35, 9),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "drv",
                position: (35, 16),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "meta",
                  position: (35, 20),
                 },
                ],
               },
               default: Some(
                Map {
                 bindings: [],
                 recursive: false,
                 position: (35, 28),
                },
               ),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "passthru",
                 position: (36, 9),
                },
               ],
              },
              IfThenElse {
               predicate: HasProperty {
                expression: Variable {
                 identifier: "drv",
                 position: (36, 23),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "passthru",
                   position: (36, 29),
                  },
                 ],
                },
                position: (36, 27),
               },
               then: PropertyAccess {
                expression: Variable {
                 identifier: "drv",
                 position: (36, 43),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "passthru",
                   position: (36, 47),
                  },
                 ],
                },
                default: None,
               },
               else_: Map {
                bindings: [],
                recursive: false,
                position: (36, 61),
               },
               position: (36, 20),
              },
             ),
            ],
            recursive: false,
            position: (35, 7),
           },
           BinaryOperation {
            operator: Update,
            operands: [
             PropertyAccess {
              expression: Variable {
               identifier: "drv",
               position: (39, 8),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "passthru",
                 position: (39, 12),
                },
               ],
              },
              default: Some(
               Map {
                bindings: [],
                recursive: false,
                position: (39, 24),
               },
              ),
             },
             IfThenElse {
              predicate: BinaryOperation {
               operator: LogicalAnd,
               operands: [
                HasProperty {
                 expression: Variable {
                  identifier: "drv",
                  position: (41, 12),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "crossDrv",
                    position: (41, 18),
                   },
                  ],
                 },
                 position: (41, 16),
                },
                HasProperty {
                 expression: Variable {
                  identifier: "drv",
                  position: (41, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "nativeDrv",
                    position: (41, 36),
                   },
                  ],
                 },
                 position: (41, 34),
                },
               ],
               position: (41, 27),
              },
              then: Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "crossDrv",
                    position: (43, 10),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "overrideDerivation",
                   position: (43, 21),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "drv",
                     position: (43, 40),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "crossDrv",
                       position: (43, 44),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "f",
                    position: (43, 53),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "nativeDrv",
                    position: (44, 10),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "overrideDerivation",
                   position: (44, 22),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "drv",
                     position: (44, 41),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "nativeDrv",
                       position: (44, 45),
                      },
                     ],
                    },
                    default: None,
                   },
                   Variable {
                    identifier: "f",
                    position: (44, 55),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (42, 13),
              },
              else_: Map {
               bindings: [],
               recursive: false,
               position: (46, 13),
              },
              position: (41, 8),
             },
            ],
            position: (40, 7),
           },
          ],
          position: (38, 7),
         },
        ],
       },
       position: (32, 5),
      },
      position: (31, 29),
     },
     position: (31, 24),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "makeOverridable",
       position: (67, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "f",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "origArgs",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "result",
            position: (69, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "f",
           position: (69, 16),
          },
          arguments: [
           Variable {
            identifier: "origArgs",
            position: (69, 18),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "copyArgs",
            position: (72, 7),
           },
          ],
         },
         Function {
          argument: Some(
           "g",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (72, 21),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "setFunctionArgs",
               position: (72, 25),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "g",
             position: (72, 41),
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (72, 44),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "functionArgs",
                 position: (72, 48),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "f",
               position: (72, 61),
              },
             ],
            },
           ],
          },
          position: (72, 18),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "overrideWith",
            position: (74, 7),
           },
          ],
         },
         Function {
          argument: Some(
           "newArgs",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: BinaryOperation {
           operator: Update,
           operands: [
            Variable {
             identifier: "origArgs",
             position: (74, 31),
            },
            IfThenElse {
             predicate: FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (74, 47),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "isFunction",
                  position: (74, 51),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "newArgs",
                position: (74, 62),
               },
              ],
             },
             then: FunctionApplication {
              function: Variable {
               identifier: "newArgs",
               position: (74, 75),
              },
              arguments: [
               Variable {
                identifier: "origArgs",
                position: (74, 83),
               },
              ],
             },
             else_: Variable {
              identifier: "newArgs",
              position: (74, 97),
             },
             position: (74, 44),
            },
           ],
           position: (74, 40),
          },
          position: (74, 22),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "overrideArgs",
            position: (77, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "copyArgs",
           position: (77, 22),
          },
          arguments: [
           Function {
            argument: Some(
             "newArgs",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "makeOverridable",
              position: (77, 41),
             },
             arguments: [
              Variable {
               identifier: "f",
               position: (77, 57),
              },
              FunctionApplication {
               function: Variable {
                identifier: "overrideWith",
                position: (77, 60),
               },
               arguments: [
                Variable {
                 identifier: "newArgs",
                 position: (77, 73),
                },
               ],
              },
             ],
            },
            position: (77, 32),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "overrideResult",
            position: (79, 7),
           },
          ],
         },
         Function {
          argument: Some(
           "g",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "makeOverridable",
            position: (79, 27),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "copyArgs",
              position: (79, 44),
             },
             arguments: [
              Function {
               argument: Some(
                "args",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "g",
                 position: (79, 60),
                },
                arguments: [
                 FunctionApplication {
                  function: Variable {
                   identifier: "f",
                   position: (79, 63),
                  },
                  arguments: [
                   Variable {
                    identifier: "args",
                    position: (79, 65),
                   },
                  ],
                 },
                ],
               },
               position: (79, 54),
              },
             ],
            },
            Variable {
             identifier: "origArgs",
             position: (79, 73),
            },
           ],
          },
          position: (79, 24),
         },
        ),
       ],
       target: IfThenElse {
        predicate: FunctionApplication {
         function: PropertyAccess {
          expression: Variable {
           identifier: "builtins",
           position: (81, 10),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "isAttrs",
             position: (81, 19),
            },
           ],
          },
          default: None,
         },
         arguments: [
          Variable {
           identifier: "result",
           position: (81, 27),
          },
         ],
        },
        then: BinaryOperation {
         operator: Update,
         operands: [
          Variable {
           identifier: "result",
           position: (82, 9),
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "override",
                position: (83, 11),
               },
              ],
             },
             Variable {
              identifier: "overrideArgs",
              position: (83, 22),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "overrideDerivation",
                position: (84, 11),
               },
              ],
             },
             Function {
              argument: Some(
               "fdrv",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "overrideResult",
                position: (84, 38),
               },
               arguments: [
                Function {
                 argument: Some(
                  "x",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: FunctionApplication {
                  function: Variable {
                   identifier: "overrideDerivation",
                   position: (84, 57),
                  },
                  arguments: [
                   Variable {
                    identifier: "x",
                    position: (84, 76),
                   },
                   Variable {
                    identifier: "fdrv",
                    position: (84, 78),
                   },
                  ],
                 },
                 position: (84, 54),
                },
               ],
              },
              position: (84, 32),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Expression {
                expression: IfThenElse {
                 predicate: HasProperty {
                  expression: Variable {
                   identifier: "result",
                   position: (85, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "overrideAttrs",
                     position: (85, 25),
                    },
                   ],
                  },
                  position: (85, 23),
                 },
                 then: String {
                  parts: [
                   Raw {
                    content: "overrideAttrs",
                   },
                  ],
                  position: (85, 44),
                 },
                 else_: Variable {
                  identifier: "null",
                  position: (85, 65),
                 },
                 position: (85, 13),
                },
               },
              ],
             },
             Function {
              argument: Some(
               "fdrv",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: FunctionApplication {
               function: Variable {
                identifier: "overrideResult",
                position: (86, 13),
               },
               arguments: [
                Function {
                 argument: Some(
                  "x",
                 ),
                 arguments: FunctionArguments {
                  arguments: [],
                  ellipsis: false,
                 },
                 definition: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "x",
                    position: (86, 32),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "overrideAttrs",
                      position: (86, 34),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "fdrv",
                    position: (86, 48),
                   },
                  ],
                 },
                 position: (86, 29),
                },
               ],
              },
              position: (85, 73),
             },
            ),
           ],
           recursive: false,
           position: (82, 19),
          },
         ],
         position: (82, 16),
        },
        else_: IfThenElse {
         predicate: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (88, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "isFunction",
              position: (88, 19),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "result",
            position: (88, 30),
           },
          ],
         },
         then: BinaryOperation {
          operator: Update,
          operands: [
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (90, 9),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "setFunctionArgs",
                position: (90, 13),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "result",
              position: (90, 29),
             },
             FunctionApplication {
              function: PropertyAccess {
               expression: Variable {
                identifier: "lib",
                position: (90, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "functionArgs",
                  position: (90, 41),
                 },
                ],
               },
               default: None,
              },
              arguments: [
               Variable {
                identifier: "result",
                position: (90, 54),
               },
              ],
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "override",
                 position: (91, 11),
                },
               ],
              },
              Variable {
               identifier: "overrideArgs",
               position: (91, 22),
              },
             ),
            ],
            recursive: false,
            position: (90, 65),
           },
          ],
          position: (90, 62),
         },
         else_: Variable {
          identifier: "result",
          position: (93, 12),
         },
         position: (88, 12),
        },
        position: (81, 7),
       },
       position: (68, 5),
      },
      position: (67, 24),
     },
     position: (67, 21),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "callPackageWith",
       position: (117, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "autoArgs",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "fn",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "f",
             position: (119, 7),
            },
           ],
          },
          IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (119, 14),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isFunction",
                position: (119, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "fn",
              position: (119, 29),
             },
            ],
           },
           then: Variable {
            identifier: "fn",
            position: (119, 37),
           },
           else_: FunctionApplication {
            function: Variable {
             identifier: "import",
             position: (119, 45),
            },
            arguments: [
             Variable {
              identifier: "fn",
              position: (119, 52),
             },
            ],
           },
           position: (119, 11),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "fargs",
             position: (120, 7),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (120, 15),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "functionArgs",
               position: (120, 19),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Variable {
             identifier: "f",
             position: (120, 32),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "allArgs",
             position: (124, 7),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "builtins",
               position: (124, 17),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "intersectAttrs",
                 position: (124, 26),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "fargs",
               position: (124, 41),
              },
              Variable {
               identifier: "autoArgs",
               position: (124, 47),
              },
             ],
            },
            Variable {
             identifier: "args",
             position: (124, 59),
            },
           ],
           position: (124, 56),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "missingArgs",
             position: (128, 7),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "lib",
             position: (128, 21),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "attrNames",
               position: (128, 25),
              },
             ],
            },
            default: None,
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (130, 10),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "filterAttrs",
                 position: (130, 14),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Function {
               argument: Some(
                "name",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: Function {
                argument: Some(
                 "value",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: UnaryOperation {
                 operator: Not,
                 operand: Variable {
                  identifier: "value",
                  position: (130, 42),
                 },
                 position: (130, 40),
                },
                position: (130, 33),
               },
               position: (130, 27),
              },
              FunctionApplication {
               function: Variable {
                identifier: "removeAttrs",
                position: (132, 10),
               },
               arguments: [
                Variable {
                 identifier: "fargs",
                 position: (132, 22),
                },
                FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (132, 29),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "attrNames",
                     position: (132, 33),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "allArgs",
                   position: (132, 43),
                  },
                 ],
                },
               ],
              },
             ],
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "getSuggestions",
             position: (135, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "arg",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (135, 29),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "pipe",
                position: (135, 33),
               },
              ],
             },
             default: None,
            },
            arguments: [
             BinaryOperation {
              operator: Update,
              operands: [
               Variable {
                identifier: "autoArgs",
                position: (135, 39),
               },
               Variable {
                identifier: "args",
                position: (135, 51),
               },
              ],
              position: (135, 48),
             },
             List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "lib",
                 position: (136, 9),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "attrNames",
                   position: (136, 13),
                  },
                 ],
                },
                default: None,
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (139, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "filter",
                    position: (139, 14),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (139, 22),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "strings",
                      position: (139, 26),
                     },
                     Raw {
                      content: "levenshteinAtMost",
                      position: (139, 34),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Int {
                    value: 2,
                    position: (139, 52),
                   },
                   Variable {
                    identifier: "arg",
                    position: (139, 54),
                   },
                  ],
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (141, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "sort",
                    position: (141, 14),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Function {
                  argument: Some(
                   "x",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: Function {
                   argument: Some(
                    "y",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: BinaryOperation {
                    operator: LessThan,
                    operands: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "lib",
                        position: (141, 26),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "strings",
                          position: (141, 30),
                         },
                         Raw {
                          content: "levenshtein",
                          position: (141, 38),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "x",
                        position: (141, 50),
                       },
                       Variable {
                        identifier: "arg",
                        position: (141, 52),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "lib",
                        position: (141, 58),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "strings",
                          position: (141, 62),
                         },
                         Raw {
                          content: "levenshtein",
                          position: (141, 70),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "y",
                        position: (141, 82),
                       },
                       Variable {
                        identifier: "arg",
                        position: (141, 84),
                       },
                      ],
                     },
                    ],
                    position: (141, 56),
                   },
                   position: (141, 23),
                  },
                  position: (141, 20),
                 },
                ],
               },
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (143, 10),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "take",
                    position: (143, 14),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Int {
                  value: 3,
                  position: (143, 19),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "map",
                 position: (145, 10),
                },
                arguments: [
                 Function {
                  argument: Some(
                   "x",
                  ),
                  arguments: FunctionArguments {
                   arguments: [],
                   ellipsis: false,
                  },
                  definition: BinaryOperation {
                   operator: Addition,
                   operands: [
                    BinaryOperation {
                     operator: Addition,
                     operands: [
                      String {
                       parts: [
                        Raw {
                         content: "\"",
                        },
                       ],
                       position: (145, 18),
                      },
                      Variable {
                       identifier: "x",
                       position: (145, 25),
                      },
                     ],
                     position: (145, 23),
                    },
                    String {
                     parts: [
                      Raw {
                       content: "\"",
                      },
                     ],
                     position: (145, 29),
                    },
                   ],
                   position: (145, 27),
                  },
                  position: (145, 15),
                 },
                ],
               },
              ],
              position: (135, 57),
             },
            ],
           },
           position: (135, 24),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "prettySuggestions",
             position: (148, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "suggestions",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: IfThenElse {
            predicate: BinaryOperation {
             operator: EqualTo,
             operands: [
              Variable {
               identifier: "suggestions",
               position: (149, 12),
              },
              List {
               elements: [],
               position: (149, 27),
              },
             ],
             position: (149, 24),
            },
            then: String {
             parts: [],
             position: (149, 35),
            },
            else_: IfThenElse {
             predicate: BinaryOperation {
              operator: EqualTo,
              operands: [
               FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (150, 17),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "length",
                    position: (150, 21),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Variable {
                  identifier: "suggestions",
                  position: (150, 28),
                 },
                ],
               },
               Int {
                value: 1,
                position: (150, 43),
               },
              ],
              position: (150, 40),
             },
             then: String {
              parts: [
               Raw {
                content: ", did you mean ",
               },
               Expression {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (150, 68),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "elemAt",
                     position: (150, 72),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "suggestions",
                   position: (150, 79),
                  },
                  Int {
                   value: 0,
                   position: (150, 91),
                  },
                 ],
                },
               },
               Raw {
                content: "?",
               },
              ],
              position: (150, 50),
             },
             else_: String {
              parts: [
               Raw {
                content: ", did you mean ",
               },
               Expression {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (151, 32),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "concatStringsSep",
                     position: (151, 36),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  String {
                   parts: [
                    Raw {
                     content: ", ",
                    },
                   ],
                   position: (151, 53),
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (151, 59),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "init",
                       position: (151, 63),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    Variable {
                     identifier: "suggestions",
                     position: (151, 68),
                    },
                   ],
                  },
                 ],
                },
               },
               Raw {
                content: " or ",
               },
               Expression {
                expression: FunctionApplication {
                 function: PropertyAccess {
                  expression: Variable {
                   identifier: "lib",
                   position: (151, 87),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "last",
                     position: (151, 91),
                    },
                   ],
                  },
                  default: None,
                 },
                 arguments: [
                  Variable {
                   identifier: "suggestions",
                   position: (151, 96),
                  },
                 ],
                },
               },
               Raw {
                content: "?",
               },
              ],
              position: (151, 14),
             },
             position: (150, 14),
            },
            position: (149, 9),
           },
           position: (148, 27),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "errorForArg",
             position: (153, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "arg",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: LetIn {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "loc",
                 position: (155, 11),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (155, 17),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "unsafeGetAttrPos",
                   position: (155, 26),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "arg",
                 position: (155, 43),
                },
                Variable {
                 identifier: "fargs",
                 position: (155, 47),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "loc'",
                 position: (158, 11),
                },
               ],
              },
              IfThenElse {
               predicate: BinaryOperation {
                operator: NotEqualTo,
                operands: [
                 Variable {
                  identifier: "loc",
                  position: (158, 21),
                 },
                 Variable {
                  identifier: "null",
                  position: (158, 28),
                 },
                ],
                position: (158, 25),
               },
               then: BinaryOperation {
                operator: Addition,
                operands: [
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "loc",
                     position: (158, 38),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "file",
                       position: (158, 42),
                      },
                     ],
                    },
                    default: None,
                   },
                   String {
                    parts: [
                     Raw {
                      content: ":",
                     },
                    ],
                    position: (158, 49),
                   },
                  ],
                  position: (158, 47),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "toString",
                   position: (158, 55),
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "loc",
                     position: (158, 64),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "line",
                       position: (158, 68),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ],
                position: (158, 53),
               },
               else_: IfThenElse {
                predicate: UnaryOperation {
                 operator: Not,
                 operand: FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (159, 23),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "isFunction",
                      position: (159, 27),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "fn",
                    position: (159, 38),
                   },
                  ],
                 },
                 position: (159, 21),
                },
                then: BinaryOperation {
                 operator: Addition,
                 operands: [
                  FunctionApplication {
                   function: Variable {
                    identifier: "toString",
                    position: (160, 15),
                   },
                   arguments: [
                    Variable {
                     identifier: "fn",
                     position: (160, 24),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: PropertyAccess {
                    expression: Variable {
                     identifier: "lib",
                     position: (160, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "optionalString",
                       position: (160, 33),
                      },
                     ],
                    },
                    default: None,
                   },
                   arguments: [
                    FunctionApplication {
                     function: PropertyAccess {
                      expression: Variable {
                       identifier: "lib",
                       position: (160, 49),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "sources",
                         position: (160, 53),
                        },
                        Raw {
                         content: "pathIsDirectory",
                         position: (160, 61),
                        },
                       ],
                      },
                      default: None,
                     },
                     arguments: [
                      Variable {
                       identifier: "fn",
                       position: (160, 77),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "/default.nix",
                      },
                     ],
                     position: (160, 81),
                    },
                   ],
                  },
                 ],
                 position: (160, 27),
                },
                else_: String {
                 parts: [
                  Raw {
                   content: "<unknown location>",
                  },
                 ],
                 position: (161, 18),
                },
                position: (159, 18),
               },
               position: (158, 18),
              },
             ),
            ],
            target: BinaryOperation {
             operator: Addition,
             operands: [
              String {
               parts: [
                Raw {
                 content: "Function called without required argument \"",
                },
                Expression {
                 expression: Variable {
                  identifier: "arg",
                  position: (162, 59),
                 },
                },
                Raw {
                 content: "\" at ",
                },
               ],
               position: (162, 12),
              },
              String {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "loc'",
                  position: (163, 14),
                 },
                },
                Expression {
                 expression: FunctionApplication {
                  function: Variable {
                   identifier: "prettySuggestions",
                   position: (163, 21),
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "getSuggestions",
                     position: (163, 40),
                    },
                    arguments: [
                     Variable {
                      identifier: "arg",
                      position: (163, 55),
                     },
                    ],
                   },
                  ],
                 },
                },
               ],
               position: (163, 11),
              },
             ],
             position: (163, 9),
            },
            position: (154, 9),
           },
           position: (153, 21),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "error",
             position: (166, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "errorForArg",
            position: (166, 15),
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (166, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "head",
                 position: (166, 32),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "missingArgs",
               position: (166, 37),
              },
             ],
            },
           ],
          },
         ),
        ],
        target: IfThenElse {
         predicate: BinaryOperation {
          operator: EqualTo,
          operands: [
           Variable {
            identifier: "missingArgs",
            position: (168, 11),
           },
           List {
            elements: [],
            position: (168, 26),
           },
          ],
          position: (168, 23),
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "makeOverridable",
           position: (168, 34),
          },
          arguments: [
           Variable {
            identifier: "f",
            position: (168, 50),
           },
           Variable {
            identifier: "allArgs",
            position: (168, 52),
           },
          ],
         },
         else_: FunctionApplication {
          function: Variable {
           identifier: "throw",
           position: (168, 65),
          },
          arguments: [
           Variable {
            identifier: "error",
            position: (168, 71),
           },
          ],
         },
         position: (168, 8),
        },
        position: (118, 5),
       },
       position: (117, 35),
      },
      position: (117, 31),
     },
     position: (117, 21),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "callPackagesWith",
       position: (174, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "autoArgs",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "fn",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "args",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "f",
             position: (176, 7),
            },
           ],
          },
          IfThenElse {
           predicate: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (176, 14),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isFunction",
                position: (176, 18),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "fn",
              position: (176, 29),
             },
            ],
           },
           then: Variable {
            identifier: "fn",
            position: (176, 37),
           },
           else_: FunctionApplication {
            function: Variable {
             identifier: "import",
             position: (176, 45),
            },
            arguments: [
             Variable {
              identifier: "fn",
              position: (176, 52),
             },
            ],
           },
           position: (176, 11),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "auto",
             position: (177, 7),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "builtins",
             position: (177, 14),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "intersectAttrs",
               position: (177, 23),
              },
             ],
            },
            default: None,
           },
           arguments: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (177, 39),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "functionArgs",
                 position: (177, 43),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "f",
               position: (177, 56),
              },
             ],
            },
            Variable {
             identifier: "autoArgs",
             position: (177, 59),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "origArgs",
             position: (178, 7),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            Variable {
             identifier: "auto",
             position: (178, 18),
            },
            Variable {
             identifier: "args",
             position: (178, 26),
            },
           ],
           position: (178, 23),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "pkgs",
             position: (179, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "f",
            position: (179, 14),
           },
           arguments: [
            Variable {
             identifier: "origArgs",
             position: (179, 16),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "mkAttrOverridable",
             position: (180, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "name",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "_",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: FunctionApplication {
             function: Variable {
              identifier: "makeOverridable",
              position: (180, 36),
             },
             arguments: [
              Function {
               argument: Some(
                "newArgs",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: PropertyAccess {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "f",
                  position: (180, 63),
                 },
                 arguments: [
                  Variable {
                   identifier: "newArgs",
                   position: (180, 65),
                  },
                 ],
                },
                attribute_path: AttributePath {
                 attributes: [
                  Expression {
                   expression: Variable {
                    identifier: "name",
                    position: (180, 76),
                   },
                  },
                 ],
                },
                default: None,
               },
               position: (180, 53),
              },
              Variable {
               identifier: "origArgs",
               position: (180, 83),
              },
             ],
            },
            position: (180, 33),
           },
           position: (180, 27),
          },
         ),
        ],
        target: IfThenElse {
         predicate: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (182, 10),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "isDerivation",
              position: (182, 14),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "pkgs",
            position: (182, 27),
           },
          ],
         },
         then: FunctionApplication {
          function: Variable {
           identifier: "throw",
           position: (182, 37),
          },
          arguments: [
           BinaryOperation {
            operator: Addition,
            operands: [
             BinaryOperation {
              operator: Addition,
              operands: [
               String {
                parts: [
                 Raw {
                  content: "function `callPackages` was called on a *single* derivation ",
                 },
                ],
                position: (183, 10),
               },
               String {
                parts: [
                 Raw {
                  content: "\"",
                 },
                 Expression {
                  expression: PropertyAccess {
                   expression: Variable {
                    identifier: "pkgs",
                    position: (184, 18),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "name",
                      position: (184, 23),
                     },
                    ],
                   },
                   default: Some(
                    String {
                     parts: [
                      Raw {
                       content: "<unknown-name>",
                      },
                     ],
                     position: (184, 31),
                    },
                   ),
                  },
                 },
                 Raw {
                  content: "\";",
                 },
                ],
                position: (184, 13),
               },
              ],
              position: (184, 11),
             },
             String {
              parts: [
               Raw {
                content: " did you mean to use `callPackage` instead?",
               },
              ],
              position: (185, 13),
             },
            ],
            position: (185, 11),
           },
          ],
         },
         else_: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (186, 12),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "mapAttrs",
              position: (186, 16),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "mkAttrOverridable",
            position: (186, 25),
           },
           Variable {
            identifier: "pkgs",
            position: (186, 43),
           },
          ],
         },
         position: (182, 7),
        },
        position: (175, 5),
       },
       position: (174, 36),
      },
      position: (174, 32),
     },
     position: (174, 22),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "extendDerivation",
       position: (191, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "condition",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "passthru",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "drv",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: LetIn {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "outputs",
             position: (193, 7),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "drv",
            position: (193, 17),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "outputs",
              position: (193, 21),
             },
            ],
           },
           default: Some(
            List {
             elements: [
              String {
               parts: [
                Raw {
                 content: "out",
                },
               ],
               position: (193, 34),
              },
             ],
             position: (193, 32),
            },
           ),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "commonAttrs",
             position: (195, 7),
            },
           ],
          },
          BinaryOperation {
           operator: Update,
           operands: [
            Variable {
             identifier: "drv",
             position: (195, 21),
            },
            BinaryOperation {
             operator: Update,
             operands: [
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "builtins",
                 position: (195, 29),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listToAttrs",
                   position: (195, 38),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Variable {
                 identifier: "outputsList",
                 position: (195, 50),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                Map {
                 bindings: [
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "all",
                      position: (196, 12),
                     },
                    ],
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "map",
                     position: (196, 18),
                    },
                    arguments: [
                     Function {
                      argument: Some(
                       "x",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: PropertyAccess {
                       expression: Variable {
                        identifier: "x",
                        position: (196, 26),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "value",
                          position: (196, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                      position: (196, 23),
                     },
                     Variable {
                      identifier: "outputsList",
                      position: (196, 35),
                     },
                    ],
                   },
                  ),
                 ],
                 recursive: false,
                 position: (196, 10),
                },
                Variable {
                 identifier: "passthru",
                 position: (196, 54),
                },
               ],
               position: (196, 51),
              },
             ],
             position: (195, 63),
            },
           ],
           position: (195, 25),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "outputToAttrListElement",
             position: (198, 7),
            },
           ],
          },
          Function {
           argument: Some(
            "outputName",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "name",
                 position: (199, 11),
                },
               ],
              },
              Variable {
               identifier: "outputName",
               position: (199, 18),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "value",
                 position: (200, 11),
                },
               ],
              },
              BinaryOperation {
               operator: Update,
               operands: [
                Variable {
                 identifier: "commonAttrs",
                 position: (200, 19),
                },
                Map {
                 bindings: [
                  Inherit {
                   from: Some(
                    PropertyAccess {
                     expression: Variable {
                      identifier: "drv",
                      position: (201, 22),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "outputName",
                         position: (201, 28),
                        },
                       },
                      ],
                     },
                     default: None,
                    },
                   ),
                   attributes: [
                    Raw {
                     content: "type",
                     position: (201, 41),
                    },
                    Raw {
                     content: "outputName",
                     position: (201, 46),
                    },
                   ],
                  },
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "outputSpecified",
                      position: (202, 13),
                     },
                    ],
                   },
                   Variable {
                    identifier: "true",
                    position: (202, 31),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "drvPath",
                      position: (203, 13),
                     },
                    ],
                   },
                   Assert {
                    expression: Variable {
                     identifier: "condition",
                     position: (203, 30),
                    },
                    target: PropertyAccess {
                     expression: Variable {
                      identifier: "drv",
                      position: (203, 41),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "outputName",
                         position: (203, 47),
                        },
                       },
                       Raw {
                        content: "drvPath",
                        position: (203, 59),
                       },
                      ],
                     },
                     default: None,
                    },
                    position: (203, 23),
                   },
                  ),
                  KeyValue(
                   AttributePath {
                    attributes: [
                     Raw {
                      content: "outPath",
                      position: (204, 13),
                     },
                    ],
                   },
                   Assert {
                    expression: Variable {
                     identifier: "condition",
                     position: (204, 30),
                    },
                    target: PropertyAccess {
                     expression: Variable {
                      identifier: "drv",
                      position: (204, 41),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Expression {
                        expression: Variable {
                         identifier: "outputName",
                         position: (204, 47),
                        },
                       },
                       Raw {
                        content: "outPath",
                        position: (204, 59),
                       },
                      ],
                     },
                     default: None,
                    },
                    position: (204, 23),
                   },
                  ),
                 ],
                 recursive: false,
                 position: (200, 34),
                },
               ],
               position: (200, 31),
              },
             ),
            ],
            recursive: false,
            position: (199, 9),
           },
           position: (198, 33),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "outputsList",
             position: (208, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "map",
            position: (208, 21),
           },
           arguments: [
            Variable {
             identifier: "outputToAttrListElement",
             position: (208, 25),
            },
            Variable {
             identifier: "outputs",
             position: (208, 49),
            },
           ],
          },
         ),
        ],
        target: BinaryOperation {
         operator: Update,
         operands: [
          Variable {
           identifier: "commonAttrs",
           position: (209, 8),
          },
          Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "drvPath",
                position: (210, 7),
               },
              ],
             },
             Assert {
              expression: Variable {
               identifier: "condition",
               position: (210, 24),
              },
              target: PropertyAccess {
               expression: Variable {
                identifier: "drv",
                position: (210, 35),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "drvPath",
                  position: (210, 39),
                 },
                ],
               },
               default: None,
              },
              position: (210, 17),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "outPath",
                position: (211, 7),
               },
              ],
             },
             Assert {
              expression: Variable {
               identifier: "condition",
               position: (211, 24),
              },
              target: PropertyAccess {
               expression: Variable {
                identifier: "drv",
                position: (211, 35),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "outPath",
                  position: (211, 39),
                 },
                ],
               },
               default: None,
              },
              position: (211, 17),
             },
            ),
           ],
           recursive: false,
           position: (209, 23),
          },
         ],
         position: (209, 20),
        },
        position: (192, 5),
       },
       position: (191, 43),
      },
      position: (191, 33),
     },
     position: (191, 22),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "hydraJob",
       position: (218, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "drv",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "outputs",
           position: (220, 7),
          },
         ],
        },
        PropertyAccess {
         expression: Variable {
          identifier: "drv",
          position: (220, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "outputs",
            position: (220, 21),
           },
          ],
         },
         default: Some(
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "out",
              },
             ],
             position: (220, 33),
            },
           ],
           position: (220, 32),
          },
         ),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "commonAttrs",
           position: (222, 7),
          },
         ],
        },
        BinaryOperation {
         operator: Update,
         operands: [
          Map {
           bindings: [
            Inherit {
             from: Some(
              Variable {
               identifier: "drv",
               position: (223, 20),
              },
             ),
             attributes: [
              Raw {
               content: "name",
               position: (223, 25),
              },
              Raw {
               content: "system",
               position: (223, 30),
              },
              Raw {
               content: "meta",
               position: (223, 37),
              },
             ],
            },
            Inherit {
             from: None,
             attributes: [
              Raw {
               content: "outputs",
               position: (223, 51),
              },
             ],
            },
           ],
           recursive: false,
           position: (223, 9),
          },
          BinaryOperation {
           operator: Update,
           operands: [
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (224, 12),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "optionalAttrs",
                 position: (224, 16),
                },
               ],
              },
              default: None,
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "drv",
                position: (224, 31),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "_hydraAggregate",
                  position: (224, 35),
                 },
                ],
               },
               default: Some(
                Variable {
                 identifier: "false",
                 position: (224, 54),
                },
               ),
              },
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "_hydraAggregate",
                    position: (225, 11),
                   },
                  ],
                 },
                 Variable {
                  identifier: "true",
                  position: (225, 29),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "constituents",
                    position: (226, 11),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (226, 26),
                  },
                  arguments: [
                   Variable {
                    identifier: "hydraJob",
                    position: (226, 30),
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "lib",
                      position: (226, 40),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "flatten",
                        position: (226, 44),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     PropertyAccess {
                      expression: Variable {
                       identifier: "drv",
                       position: (226, 52),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "constituents",
                         position: (226, 56),
                        },
                       ],
                      },
                      default: None,
                     },
                    ],
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (224, 61),
              },
             ],
            },
            FunctionApplication {
             function: PropertyAccess {
              expression: Variable {
               identifier: "lib",
               position: (228, 13),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "listToAttrs",
                 position: (228, 17),
                },
               ],
              },
              default: None,
             },
             arguments: [
              Variable {
               identifier: "outputsList",
               position: (228, 29),
              },
             ],
            },
           ],
           position: (228, 9),
          },
         ],
         position: (224, 9),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "makeOutput",
           position: (230, 7),
          },
         ],
        },
        Function {
         argument: Some(
          "outputName",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: LetIn {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "output",
               position: (231, 13),
              },
             ],
            },
            PropertyAccess {
             expression: Variable {
              identifier: "drv",
              position: (231, 22),
             },
             attribute_path: AttributePath {
              attributes: [
               Expression {
                expression: Variable {
                 identifier: "outputName",
                 position: (231, 28),
                },
               },
              ],
             },
             default: None,
            },
           ),
          ],
          target: Map {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "name",
                position: (232, 11),
               },
              ],
             },
             Variable {
              identifier: "outputName",
              position: (232, 18),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "value",
                position: (233, 11),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               Variable {
                identifier: "commonAttrs",
                position: (233, 19),
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "outPath",
                     position: (234, 13),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "output",
                    position: (234, 23),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "outPath",
                      position: (234, 30),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "drvPath",
                     position: (235, 13),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "output",
                    position: (235, 23),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "drvPath",
                      position: (235, 30),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "type",
                     position: (236, 13),
                    },
                   ],
                  },
                  String {
                   parts: [
                    Raw {
                     content: "derivation",
                    },
                   ],
                   position: (236, 20),
                  },
                 ),
                 Inherit {
                  from: None,
                  attributes: [
                   Raw {
                    content: "outputName",
                    position: (237, 21),
                   },
                  ],
                 },
                ],
                recursive: false,
                position: (233, 34),
               },
              ],
              position: (233, 31),
             },
            ),
           ],
           recursive: false,
           position: (232, 9),
          },
          position: (231, 9),
         },
         position: (230, 20),
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "outputsList",
           position: (241, 7),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "map",
          position: (241, 21),
         },
         arguments: [
          Variable {
           identifier: "makeOutput",
           position: (241, 25),
          },
          Variable {
           identifier: "outputs",
           position: (241, 36),
          },
         ],
        },
       ),
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "drv'",
           position: (243, 7),
          },
         ],
        },
        PropertyAccess {
         expression: FunctionApplication {
          function: PropertyAccess {
           expression: Variable {
            identifier: "lib",
            position: (243, 15),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "head",
              position: (243, 19),
             },
            ],
           },
           default: None,
          },
          arguments: [
           Variable {
            identifier: "outputsList",
            position: (243, 24),
           },
          ],
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "value",
            position: (243, 37),
           },
          ],
         },
         default: None,
        },
       ),
      ],
      target: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "lib",
         position: (244, 8),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "deepSeq",
           position: (244, 12),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Variable {
         identifier: "drv'",
         position: (244, 20),
        },
        Variable {
         identifier: "drv'",
         position: (244, 25),
        },
       ],
      },
      position: (219, 5),
     },
     position: (218, 14),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "makeScope",
       position: (255, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "newScope",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "f",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "self",
            position: (256, 9),
           },
          ],
         },
         BinaryOperation {
          operator: Update,
          operands: [
           FunctionApplication {
            function: Variable {
             identifier: "f",
             position: (256, 16),
            },
            arguments: [
             Variable {
              identifier: "self",
              position: (256, 18),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "newScope",
                 position: (257, 11),
                },
               ],
              },
              Function {
               argument: Some(
                "scope",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "newScope",
                 position: (257, 29),
                },
                arguments: [
                 BinaryOperation {
                  operator: Update,
                  operands: [
                   Variable {
                    identifier: "self",
                    position: (257, 39),
                   },
                   Variable {
                    identifier: "scope",
                    position: (257, 47),
                   },
                  ],
                  position: (257, 44),
                 },
                ],
               },
               position: (257, 22),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "callPackage",
                 position: (258, 11),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "self",
                 position: (258, 25),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "newScope",
                   position: (258, 30),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                Map {
                 bindings: [],
                 recursive: false,
                 position: (258, 39),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "overrideScope",
                 position: (259, 11),
                },
               ],
              },
              Function {
               argument: Some(
                "g",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "lib",
                  position: (259, 30),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "warn",
                    position: (259, 34),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 String {
                  parts: [
                   Raw {
                    content: "`overrideScope` (from `lib.makeScope`) is deprecated. Do `overrideScope' (self: super: { … })` instead of `overrideScope (super: self: { … })`. All other overrides have the parameters in that order, including other definitions of `overrideScope`. This was the only definition violating the pattern.",
                   },
                  ],
                  position: (260, 13),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "makeScope",
                   position: (261, 14),
                  },
                  arguments: [
                   Variable {
                    identifier: "newScope",
                    position: (261, 24),
                   },
                   FunctionApplication {
                    function: PropertyAccess {
                     expression: Variable {
                      identifier: "lib",
                      position: (261, 34),
                     },
                     attribute_path: AttributePath {
                      attributes: [
                       Raw {
                        content: "fixedPoints",
                        position: (261, 38),
                       },
                       Raw {
                        content: "extends",
                        position: (261, 50),
                       },
                      ],
                     },
                     default: None,
                    },
                    arguments: [
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "lib",
                        position: (261, 59),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "flip",
                          position: (261, 63),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "g",
                        position: (261, 68),
                       },
                      ],
                     },
                     Variable {
                      identifier: "f",
                      position: (261, 71),
                     },
                    ],
                   },
                  ],
                 },
                ],
               },
               position: (259, 27),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "overrideScope'",
                 position: (262, 11),
                },
               ],
              },
              Function {
               argument: Some(
                "g",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "makeScope",
                 position: (262, 31),
                },
                arguments: [
                 Variable {
                  identifier: "newScope",
                  position: (262, 41),
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "lib",
                    position: (262, 51),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "fixedPoints",
                      position: (262, 55),
                     },
                     Raw {
                      content: "extends",
                      position: (262, 67),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "g",
                    position: (262, 75),
                   },
                   Variable {
                    identifier: "f",
                    position: (262, 77),
                   },
                  ],
                 },
                ],
               },
               position: (262, 28),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "packages",
                 position: (263, 11),
                },
               ],
              },
              Variable {
               identifier: "f",
               position: (263, 22),
              },
             ),
            ],
            recursive: false,
            position: (256, 26),
           },
          ],
          position: (256, 23),
         },
        ),
       ],
       target: Variable {
        identifier: "self",
        position: (265, 8),
       },
       position: (256, 5),
      },
      position: (255, 25),
     },
     position: (255, 15),
    },
   ),
   KeyValue(
    AttributePath {
     attributes: [
      Raw {
       content: "makeScopeWithSplicing",
       position: (269, 3),
      },
     ],
    },
    Function {
     argument: Some(
      "splicePackages",
     ),
     arguments: FunctionArguments {
      arguments: [],
      ellipsis: false,
     },
     definition: Function {
      argument: Some(
       "newScope",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: Function {
       argument: Some(
        "otherSplices",
       ),
       arguments: FunctionArguments {
        arguments: [],
        ellipsis: false,
       },
       definition: Function {
        argument: Some(
         "keep",
        ),
        arguments: FunctionArguments {
         arguments: [],
         ellipsis: false,
        },
        definition: Function {
         argument: Some(
          "extra",
         ),
         arguments: FunctionArguments {
          arguments: [],
          ellipsis: false,
         },
         definition: Function {
          argument: Some(
           "f",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: LetIn {
           bindings: [
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "spliced0",
                position: (271, 7),
               },
              ],
             },
             FunctionApplication {
              function: Variable {
               identifier: "splicePackages",
               position: (271, 18),
              },
              arguments: [
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsBuildBuild",
                     position: (272, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "otherSplices",
                    position: (272, 26),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "selfBuildBuild",
                      position: (272, 39),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsBuildHost",
                     position: (273, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "otherSplices",
                    position: (273, 25),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "selfBuildHost",
                      position: (273, 38),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsBuildTarget",
                     position: (274, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "otherSplices",
                    position: (274, 27),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "selfBuildTarget",
                      position: (274, 40),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsHostHost",
                     position: (275, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "otherSplices",
                    position: (275, 24),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "selfHostHost",
                      position: (275, 37),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsHostTarget",
                     position: (276, 9),
                    },
                   ],
                  },
                  Variable {
                   identifier: "self",
                   position: (276, 26),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "pkgsTargetTarget",
                     position: (277, 9),
                    },
                   ],
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "otherSplices",
                    position: (277, 28),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "selfTargetTarget",
                      position: (277, 41),
                     },
                    ],
                   },
                   default: None,
                  },
                 ),
                ],
                recursive: false,
                position: (271, 33),
               },
              ],
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "spliced",
                position: (279, 7),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "extra",
                 position: (279, 17),
                },
                arguments: [
                 Variable {
                  identifier: "spliced0",
                  position: (279, 23),
                 },
                ],
               },
               BinaryOperation {
                operator: Update,
                operands: [
                 Variable {
                  identifier: "spliced0",
                  position: (279, 35),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "keep",
                   position: (279, 47),
                  },
                  arguments: [
                   Variable {
                    identifier: "self",
                    position: (279, 52),
                   },
                  ],
                 },
                ],
                position: (279, 44),
               },
              ],
              position: (279, 32),
             },
            ),
            KeyValue(
             AttributePath {
              attributes: [
               Raw {
                content: "self",
                position: (280, 7),
               },
              ],
             },
             BinaryOperation {
              operator: Update,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "f",
                 position: (280, 14),
                },
                arguments: [
                 Variable {
                  identifier: "self",
                  position: (280, 16),
                 },
                ],
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "newScope",
                     position: (281, 9),
                    },
                   ],
                  },
                  Function {
                   argument: Some(
                    "scope",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "newScope",
                     position: (281, 27),
                    },
                    arguments: [
                     BinaryOperation {
                      operator: Update,
                      operands: [
                       Variable {
                        identifier: "spliced",
                        position: (281, 37),
                       },
                       Variable {
                        identifier: "scope",
                        position: (281, 48),
                       },
                      ],
                      position: (281, 45),
                     },
                    ],
                   },
                   position: (281, 20),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "callPackage",
                     position: (282, 9),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "newScope",
                    position: (282, 23),
                   },
                   arguments: [
                    Variable {
                     identifier: "spliced",
                     position: (282, 32),
                    },
                   ],
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "overrideScope",
                     position: (285, 9),
                    },
                   ],
                  },
                  Function {
                   argument: Some(
                    "g",
                   ),
                   arguments: FunctionArguments {
                    arguments: [],
                    ellipsis: false,
                   },
                   definition: FunctionApplication {
                    function: Variable {
                     identifier: "makeScopeWithSplicing",
                     position: (285, 28),
                    },
                    arguments: [
                     Variable {
                      identifier: "splicePackages",
                      position: (286, 11),
                     },
                     Variable {
                      identifier: "newScope",
                      position: (287, 11),
                     },
                     Variable {
                      identifier: "otherSplices",
                      position: (288, 11),
                     },
                     Variable {
                      identifier: "keep",
                      position: (289, 11),
                     },
                     Variable {
                      identifier: "extra",
                      position: (290, 11),
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "lib",
                        position: (291, 12),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "fixedPoints",
                          position: (291, 16),
                         },
                         Raw {
                          content: "extends",
                          position: (291, 28),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       Variable {
                        identifier: "g",
                        position: (291, 36),
                       },
                       Variable {
                        identifier: "f",
                        position: (291, 38),
                       },
                      ],
                     },
                    ],
                   },
                   position: (285, 25),
                  },
                 ),
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "packages",
                     position: (292, 9),
                    },
                   ],
                  },
                  Variable {
                   identifier: "f",
                   position: (292, 20),
                  },
                 ),
                ],
                recursive: false,
                position: (280, 24),
               },
              ],
              position: (280, 21),
             },
            ),
           ],
           target: Variable {
            identifier: "self",
            position: (294, 8),
           },
           position: (270, 5),
          },
          position: (269, 80),
         },
         position: (269, 73),
        },
        position: (269, 67),
       },
       position: (269, 53),
      },
      position: (269, 43),
     },
     position: (269, 27),
    },
   ),
  ],
  recursive: true,
  position: (3, 1),
 },
 position: (1, 1),
}