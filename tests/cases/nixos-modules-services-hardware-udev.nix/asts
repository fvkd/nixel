---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "udev",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 10),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "systemd",
         position: (7, 17),
        },
        Raw {
         content: "package",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (9, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (9, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (9, 16),
        },
        Raw {
         content: "udev",
         position: (9, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "extraUdevRules",
        position: (11, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (11, 20),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeTextFile",
          position: (11, 25),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (12, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "extra-udev-rules",
             position: (12, 13),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "text",
             position: (13, 5),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (13, 12),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "extraRules",
              position: (13, 16),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "destination",
             position: (14, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "/etc/udev/rules.d/99-local.rules",
             position: (14, 20),
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (11, 39),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "extraHwdbFile",
        position: (17, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (17, 19),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeTextFile",
          position: (17, 24),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (18, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "extra-hwdb-file",
             position: (18, 13),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "text",
             position: (19, 5),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (19, 12),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "extraHwdb",
              position: (19, 16),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "destination",
             position: (20, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "/etc/udev/hwdb.d/99-local.hwdb",
             position: (20, 20),
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (17, 38),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nixosRules",
        position: (23, 3),
       },
      ],
     },
     String {
      parts: [
       Raw {
        content: "# Miscellaneous devices.\nKERNEL==\"kvm\",                  MODE=\"0666\"\nKERNEL==\"kqemu\",                MODE=\"0666\"\n\n# Needed for gpm.\nSUBSYSTEM==\"input\", KERNEL==\"mice\", TAG+=\"systemd\"\n",
        position: (24, 1),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "udevRules",
        position: (33, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (33, 15),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "runCommand",
          position: (33, 20),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "udev-rules",
          position: (33, 32),
         },
        ],
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "preferLocalBuild",
             position: (34, 7),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (34, 26),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "allowSubstitutes",
             position: (35, 7),
            },
           ],
          },
          Variable {
           identifier: "false",
           position: (35, 26),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "packages",
             position: (36, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "unique",
            position: (36, 18),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "map",
              position: (36, 26),
             },
             arguments: [
              Variable {
               identifier: "toString",
               position: (36, 30),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (36, 39),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "packages",
                  position: (36, 43),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (34, 5),
       },
       String {
        parts: [
         Raw {
          content: "mkdir -p $out\nshopt -s nullglob\nset +o pipefail\n\n# Set a reasonable $PATH for programs called by udev rules.\necho 'ENV{PATH}=\"",
          position: (39, 1),
         },
         Expression {
          expression: Variable {
           identifier: "udevPath",
           position: (44, 26),
          },
         },
         Raw {
          content: "/bin:",
          position: (44, 35),
         },
         Expression {
          expression: Variable {
           identifier: "udevPath",
           position: (44, 42),
          },
         },
         Raw {
          content: "/sbin\"' > $out/00-path.rules\n\n# Add the udev rules from other packages.\nfor i in $packages; do\n  echo \"Adding rules for package $i\"\n  for j in $i/{etc,lib}/udev/rules.d/*; do\n    echo \"Copying $j to $out/$(basename $j)\"\n    cat $j > $out/$(basename $j)\n  done\ndone\n\n# Fix some paths in the standard udev rules.  Hacky.\nfor i in $out/*.rules; do\n  substituteInPlace $i \\\n    --replace \\\"/sbin/modprobe \\\"",
          position: (44, 51),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (58, 42),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "kmod",
              position: (58, 47),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/modprobe \\\n    --replace \\\"/sbin/mdadm \\\"",
          position: (58, 52),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (59, 39),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "mdadm",
              position: (59, 44),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/sbin/mdadm \\\n    --replace \\\"/sbin/blkid \\\"",
          position: (59, 50),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (60, 39),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "util-linux",
              position: (60, 44),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/sbin/blkid \\\n    --replace \\\"/bin/mount \\\"",
          position: (60, 55),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (61, 38),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "util-linux",
              position: (61, 43),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/mount \\\n    --replace /usr/bin/readlink ",
          position: (61, 54),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (62, 41),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "coreutils",
              position: (62, 46),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/readlink \\\n    --replace /usr/bin/basename ",
          position: (62, 56),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (63, 41),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "coreutils",
              position: (63, 46),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/basename\ndone\n\necho -n \"Checking that all programs called by relative paths in udev rules exist in ",
          position: (63, 56),
         },
         Expression {
          expression: Variable {
           identifier: "udev",
           position: (66, 93),
          },
         },
         Raw {
          content: "/lib/udev... \"\nimport_progs=$(grep 'IMPORT{program}=\"[^/$]' $out/* |\n  sed -e 's/.*IMPORT{program}=\"\\([^ \"]*\\)[ \"].*/\\1/' | uniq)\nrun_progs=$(grep -v '^[[:space:]]*#' $out/* | grep 'RUN+=\"[^/$]' |\n  sed -e 's/.*RUN+=\"\\([^ \"]*\\)[ \"].*/\\1/' | uniq)\nfor i in $import_progs $run_progs; do\n  if [[ ! -x ",
          position: (66, 98),
         },
         Expression {
          expression: Variable {
           identifier: "udev",
           position: (72, 22),
          },
         },
         Raw {
          content: "/lib/udev/$i && ! $i =~ socket:.* ]]; then\n    echo \"FAIL\"\n    echo \"$i is called in udev rules but not installed by udev\"\n    exit 1\n  fi\ndone\necho \"OK\"\n\necho -n \"Checking that all programs called by absolute paths in udev rules exist... \"\nimport_progs=$(grep 'IMPORT{program}=\"\\/' $out/* |\n  sed -e 's/.*IMPORT{program}=\"\\([^ \"]*\\)[ \"].*/\\1/' | uniq)\nrun_progs=$(grep -v '^[[:space:]]*#' $out/* | grep 'RUN+=\"/' |\n  sed -e 's/.*RUN+=\"\\([^ \"]*\\)[ \"].*/\\1/' | uniq)\nfor i in $import_progs $run_progs; do\n  # if the path refers to /run/current-system/systemd, replace with config.systemd.package\n  if [[ $i == /run/current-system/systemd* ]]; then\n    i=\"",
          position: (72, 27),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (88, 16),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (88, 23),
             },
             Raw {
              content: "package",
              position: (88, 31),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/",
          position: (88, 39),
         },
         Raw {
          content: "$",
          position: (88, 40),
         },
         Raw {
          content: "{i#/run/current-system/systemd/}\"\n  fi\n  if [[ ! -x $i ]]; then\n    echo \"FAIL\"\n    echo \"$i is called in udev rules but is not executable or does not exist\"\n    exit 1\n  fi\ndone\necho \"OK\"\n\nfilesToFixup=\"$(for i in \"$out\"/*; do\n  grep -l '\\B\\(/usr\\)\\?/s\\?bin' \"$i\" || :\ndone)\"\n\nif [ -n \"$filesToFixup\" ]; then\n  echo \"Consider fixing the following udev rules:\"\n  echo \"$filesToFixup\" | while read localFile; do\n    remoteFile=\"origin unknown\"\n    for i in ",
          position: (88, 43),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (106, 22),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (106, 31),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "packages",
                position: (106, 35),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: "; do\n      for j in \"$i\"/*/udev/rules.d/*; do\n        [ -e \"$out/$(basename \"$j\")\" ] || continue\n        [ \"$(basename \"$j\")\" = \"$(basename \"$localFile\")\" ] || continue\n        remoteFile=\"originally from $j\"\n        break 2\n      done\n    done\n    refs=\"$(\n      grep -o '\\B\\(/usr\\)\\?/s\\?bin/[^ \"]\\+' \"$localFile\" \\\n        | sed -e ':r;N;",
          position: (106, 44),
         },
         Raw {
          content: "$",
          position: (116, 30),
         },
         Raw {
          content: "{s/\\n/ and /;br};s/\\n/, /g;br'\n    )\"\n    echo \"$localFile ($remoteFile) contains references to $refs.\"\n  done\n  exit 1\nfi\n\n# If auto-configuration is disabled, then remove\n# udev's 80-drivers.rules file, which contains rules for\n# automatically calling modprobe.\n",
          position: (116, 33),
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "optionalString",
            position: (126, 9),
           },
           arguments: [
            UnaryOperation {
             operator: Not,
             operand: PropertyAccess {
              expression: Variable {
               identifier: "config",
               position: (126, 26),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "boot",
                 position: (126, 33),
                },
                Raw {
                 content: "hardwareScan",
                 position: (126, 38),
                },
               ],
              },
              default: None,
             },
             position: (126, 25),
            },
            String {
             parts: [
              Raw {
               content: "ln -s /dev/null $out/80-drivers.rules\n",
               position: (127, 1),
              },
             ],
            },
           ],
          },
         },
         Raw {
          content: "\n",
          position: (128, 10),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "hwdbBin",
        position: (131, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (131, 13),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "runCommand",
          position: (131, 18),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "hwdb.bin",
          position: (131, 30),
         },
        ],
       },
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "preferLocalBuild",
             position: (132, 7),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (132, 26),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "allowSubstitutes",
             position: (133, 7),
            },
           ],
          },
          Variable {
           identifier: "false",
           position: (133, 26),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "packages",
             position: (134, 7),
            },
           ],
          },
          FunctionApplication {
           function: Variable {
            identifier: "unique",
            position: (134, 18),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "map",
              position: (134, 26),
             },
             arguments: [
              Variable {
               identifier: "toString",
               position: (134, 30),
              },
              BinaryOperation {
               operator: Concatenation,
               operands: [
                List {
                 elements: [
                  Variable {
                   identifier: "udev",
                   position: (134, 41),
                  },
                 ],
                 position: (134, 40),
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (134, 50),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "packages",
                    position: (134, 54),
                   },
                  ],
                 },
                 default: None,
                },
               ],
               position: (134, 47),
              },
             ],
            },
           ],
          },
         ),
        ],
        recursive: false,
        position: (132, 5),
       },
       String {
        parts: [
         Raw {
          content: "mkdir -p etc/udev/hwdb.d\nfor i in $packages; do\n  echo \"Adding hwdb files for package $i\"\n  for j in $i/{etc,lib}/udev/hwdb.d/*; do\n    ln -s $j etc/udev/hwdb.d/$(basename $j)\n  done\ndone\n\necho \"Generating hwdb database...\"\n# hwdb --update doesn't return error code even on errors!\nres=\"$(",
          position: (137, 1),
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "pkgs",
            position: (147, 16),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "buildPackages",
              position: (147, 21),
             },
             Raw {
              content: "udev",
              position: (147, 35),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "/bin/udevadm hwdb --update --root=$(pwd) 2>&1)\"\necho \"$res\"\n[ -z \"$(echo \"$res\" | egrep '^Error')\" ]\nmv etc/udev/hwdb.bin $out\n",
          position: (147, 40),
         },
        ],
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "udevPath",
        position: (155, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (155, 14),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "buildEnv",
          position: (155, 19),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (156, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "udev-path",
             position: (156, 13),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "paths",
             position: (157, 5),
            },
           ],
          },
          PropertyAccess {
           expression: Variable {
            identifier: "cfg",
            position: (157, 13),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "path",
              position: (157, 17),
             },
            ],
           },
           default: None,
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "pathsToLink",
             position: (158, 5),
            },
           ],
          },
          List {
           elements: [
            String {
             parts: [
              Raw {
               content: "/bin",
               position: (158, 22),
              },
             ],
            },
            String {
             parts: [
              Raw {
               content: "/sbin",
               position: (158, 29),
              },
             ],
            },
           ],
           position: (158, 19),
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "ignoreCollisions",
             position: (159, 5),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (159, 24),
          },
         ),
        ],
        recursive: false,
        position: (155, 28),
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (168, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "boot",
            position: (170, 5),
           },
           Raw {
            content: "hardwareScan",
            position: (170, 10),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (170, 25),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (171, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (171, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (171, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (172, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (172, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (173, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Whether to try to load kernel modules for all detected hardware.\nUsually this does a good job of providing you with the modules\nyou need, but sometimes it can crash the system or cause other\nnasty effects.\n",
                 position: (174, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (170, 34),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (181, 5),
           },
           Raw {
            content: "udev",
            position: (181, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "packages",
               position: (183, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (183, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (184, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (184, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (184, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (184, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "path",
                       position: (184, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (185, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                  position: (185, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (186, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "List of packages containing <command>udev</command> rules.\nAll files found in\n<filename><replaceable>pkg</replaceable>/etc/udev/rules.d</filename> and\n<filename><replaceable>pkg</replaceable>/lib/udev/rules.d</filename>\nwill be included.\n",
                    position: (187, 1),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "apply",
                    position: (193, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "map",
                   position: (193, 17),
                  },
                  arguments: [
                   Variable {
                    identifier: "getBin",
                    position: (193, 21),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (183, 27),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "path",
               position: (196, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (196, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (197, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (197, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (197, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (197, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "path",
                       position: (197, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (198, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                  position: (198, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (199, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Packages added to the <envar>PATH</envar> environment variable when\nexecuting programs from Udev rules.\n",
                    position: (200, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (196, 23),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "initrdRules",
               position: (205, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (205, 21),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (206, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (207, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"00:1D:60:B9:6D:4F\", KERNEL==\"eth*\", NAME=\"my_fast_network_card\"\n",
                    position: (208, 1),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (210, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (210, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (210, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (211, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "<command>udev</command> rules to include in the initrd\n<emphasis>only</emphasis>. They'll be written into file\n<filename>99-local.rules</filename>. Thus they are read and applied\nafter the essential initrd rules.\n",
                    position: (212, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (205, 30),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraRules",
               position: (219, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (219, 20),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (220, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (221, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "ENV{ID_VENDOR_ID}==\"046d\", ENV{ID_MODEL_ID}==\"0825\", ENV{PULSE_IGNORE}=\"1\"\n",
                    position: (222, 1),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (224, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (224, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (224, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (225, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Additional <command>udev</command> rules. They'll be written\ninto file <filename>99-local.rules</filename>. Thus they are\nread and applied after all other rules.\n",
                    position: (226, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (219, 29),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraHwdb",
               position: (232, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (232, 19),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (233, 9),
                   },
                  ],
                 },
                 String {
                  parts: [],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (234, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "evdev:input:b0003v05AFp8277*\n  KEYBOARD_KEY_70039=leftalt\n  KEYBOARD_KEY_700e2=leftctrl\n",
                    position: (235, 1),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (239, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (239, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "lines",
                     position: (239, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (240, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Additional <command>hwdb</command> files. They'll be written\ninto file <filename>99-local.hwdb</filename>. Thus they are\nread after all other files.\n",
                    position: (241, 1),
                   },
                  ],
                 },
                ),
               ],
               recursive: false,
               position: (232, 28),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (181, 21),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "hardware",
            position: (249, 5),
           },
           Raw {
            content: "firmware",
            position: (249, 14),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (249, 25),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (250, 7),
                },
               ],
              },
              FunctionApplication {
               function: PropertyAccess {
                expression: Variable {
                 identifier: "types",
                 position: (250, 14),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "listOf",
                   position: (250, 20),
                  },
                 ],
                },
                default: None,
               },
               arguments: [
                PropertyAccess {
                 expression: Variable {
                  identifier: "types",
                  position: (250, 27),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "package",
                    position: (250, 33),
                   },
                  ],
                 },
                 default: None,
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (251, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (251, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (252, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "List of packages containing firmware files.  Such files\nwill be loaded automatically if the kernel asks for them\n(i.e., when it has detected specific hardware that requires\nfirmware to function).  If multiple packages contain firmware\nfiles with the same name, the first package in the list takes\nprecedence.  Note that you must rebuild your system if you add\nfiles to any of these directories.\n",
                 position: (253, 1),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "apply",
                 position: (261, 7),
                },
               ],
              },
              Function {
               argument: Some(
                "list",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: PropertyAccess {
                 expression: Variable {
                  identifier: "pkgs",
                  position: (261, 21),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "buildEnv",
                    position: (261, 26),
                   },
                  ],
                 },
                 default: None,
                },
                arguments: [
                 Map {
                  bindings: [
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "name",
                       position: (262, 9),
                      },
                     ],
                    },
                    String {
                     parts: [
                      Raw {
                       content: "firmware",
                       position: (262, 17),
                      },
                     ],
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "paths",
                       position: (263, 9),
                      },
                     ],
                    },
                    Variable {
                     identifier: "list",
                     position: (263, 17),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "pathsToLink",
                       position: (264, 9),
                      },
                     ],
                    },
                    List {
                     elements: [
                      String {
                       parts: [
                        Raw {
                         content: "/lib/firmware",
                         position: (264, 26),
                        },
                       ],
                      },
                     ],
                     position: (264, 23),
                    },
                   ),
                   KeyValue(
                    AttributePath {
                     attributes: [
                      Raw {
                       content: "ignoreCollisions",
                       position: (265, 9),
                      },
                     ],
                    },
                    Variable {
                     identifier: "true",
                     position: (265, 28),
                    },
                   ),
                  ],
                  recursive: false,
                  position: (261, 35),
                 },
                ],
               },
               position: (261, 15),
              },
             ),
            ],
            recursive: false,
            position: (249, 34),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "networking",
            position: (269, 5),
           },
           Raw {
            content: "usePredictableInterfaceNames",
            position: (269, 16),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (269, 47),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (270, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (270, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (271, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (271, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (271, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (272, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Whether to assign <link\nxlink:href='http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames'>predictable\nnames to network interfaces</link>.  If enabled, interfaces\nare assigned names that contain topology information\n(e.g. <literal>wlp3s0</literal>) and thus should be stable\nacross reboots.  If disabled, names depend on the order in\nwhich interfaces are discovered by the kernel, which may\nchange randomly across reboots; for instance, you may find\n<literal>eth0</literal> and <literal>eth1</literal> flipping\nunpredictably.\n",
                 position: (273, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
            position: (269, 56),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (168, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (291, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (291, 12),
       },
       arguments: [
        UnaryOperation {
         operator: Not,
         operand: PropertyAccess {
          expression: Variable {
           identifier: "config",
           position: (291, 19),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "boot",
             position: (291, 26),
            },
            Raw {
             content: "isContainer",
             position: (291, 31),
            },
           ],
          },
          default: None,
         },
         position: (291, 18),
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (293, 5),
             },
             Raw {
              content: "udev",
              position: (293, 14),
             },
             Raw {
              content: "extraRules",
              position: (293, 19),
             },
            ],
           },
           Variable {
            identifier: "nixosRules",
            position: (293, 32),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (295, 5),
             },
             Raw {
              content: "udev",
              position: (295, 14),
             },
             Raw {
              content: "packages",
              position: (295, 19),
             },
            ],
           },
           List {
            elements: [
             Variable {
              identifier: "extraUdevRules",
              position: (295, 32),
             },
             Variable {
              identifier: "extraHwdbFile",
              position: (295, 47),
             },
            ],
            position: (295, 30),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (297, 5),
             },
             Raw {
              content: "udev",
              position: (297, 14),
             },
             Raw {
              content: "path",
              position: (297, 19),
             },
            ],
           },
           List {
            elements: [
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (297, 28),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "coreutils",
                 position: (297, 33),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (297, 43),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "gnused",
                 position: (297, 48),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (297, 55),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "gnugrep",
                 position: (297, 60),
                },
               ],
              },
              default: None,
             },
             PropertyAccess {
              expression: Variable {
               identifier: "pkgs",
               position: (297, 68),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "util-linux",
                 position: (297, 73),
                },
               ],
              },
              default: None,
             },
             Variable {
              identifier: "udev",
              position: (297, 84),
             },
            ],
            position: (297, 26),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "boot",
              position: (299, 5),
             },
             Raw {
              content: "kernelParams",
              position: (299, 10),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (299, 25),
            },
            arguments: [
             UnaryOperation {
              operator: Not,
              operand: PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (299, 32),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "networking",
                  position: (299, 39),
                 },
                 Raw {
                  content: "usePredictableInterfaceNames",
                  position: (299, 50),
                 },
                ],
               },
               default: None,
              },
              position: (299, 31),
             },
             List {
              elements: [
               String {
                parts: [
                 Raw {
                  content: "net.ifnames=0",
                  position: (299, 83),
                 },
                ],
               },
              ],
              position: (299, 80),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "boot",
              position: (301, 5),
             },
             Raw {
              content: "initrd",
              position: (301, 10),
             },
             Raw {
              content: "extraUdevRulesCommands",
              position: (301, 17),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "optionalString",
             position: (301, 42),
            },
            arguments: [
             BinaryOperation {
              operator: NotEqualTo,
              operands: [
               PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (301, 58),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "initrdRules",
                   position: (301, 62),
                  },
                 ],
                },
                default: None,
               },
               String {
                parts: [],
               },
              ],
              position: (301, 74),
             },
             String {
              parts: [
               Raw {
                content: "cat <<'EOF' > $out/99-local.rules\n",
                position: (303, 1),
               },
               Expression {
                expression: PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (304, 11),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "initrdRules",
                    position: (304, 15),
                   },
                  ],
                 },
                 default: None,
                },
               },
               Raw {
                content: "\nEOF\n",
                position: (304, 27),
               },
              ],
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (308, 5),
             },
             Raw {
              content: "etc",
              position: (308, 17),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Expression {
                 expression: String {
                  parts: [
                   Raw {
                    content: "udev/rules.d",
                    position: (310, 10),
                   },
                  ],
                 },
                },
                Raw {
                 content: "source",
                 position: (310, 24),
                },
               ],
              },
              Variable {
               identifier: "udevRules",
               position: (310, 33),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Expression {
                 expression: String {
                  parts: [
                   Raw {
                    content: "udev/hwdb.bin",
                    position: (311, 10),
                   },
                  ],
                 },
                },
                Raw {
                 content: "source",
                 position: (311, 25),
                },
               ],
              },
              Variable {
               identifier: "hwdbBin",
               position: (311, 34),
              },
             ),
            ],
            recursive: false,
            position: (309, 7),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "system",
              position: (314, 5),
             },
             Raw {
              content: "requiredKernelConfig",
              position: (314, 12),
             },
            ],
           },
           With {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "config",
              position: (314, 40),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "lib",
                position: (314, 47),
               },
               Raw {
                content: "kernelConfig",
                position: (314, 51),
               },
              ],
             },
             default: None,
            },
            target: List {
             elements: [
              FunctionApplication {
               function: Variable {
                identifier: "isEnabled",
                position: (315, 8),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "UNIX",
                   position: (315, 19),
                  },
                 ],
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "isYes",
                position: (316, 8),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "INOTIFY_USER",
                   position: (316, 15),
                  },
                 ],
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "isYes",
                position: (317, 8),
               },
               arguments: [
                String {
                 parts: [
                  Raw {
                   content: "NET",
                   position: (317, 15),
                  },
                 ],
                },
               ],
              },
             ],
             position: (314, 65),
            },
            position: (314, 35),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (321, 5),
             },
             Raw {
              content: "etc",
              position: (321, 17),
             },
             Expression {
              expression: String {
               parts: [
                Raw {
                 content: "modprobe.d/firmware.conf",
                 position: (321, 22),
                },
               ],
              },
             },
             Raw {
              content: "text",
              position: (321, 48),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "options firmware_class path=",
              position: (321, 56),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (321, 86),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "hardware",
                  position: (321, 93),
                 },
                 Raw {
                  content: "firmware",
                  position: (321, 102),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/lib/firmware",
              position: (321, 111),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "system",
              position: (323, 5),
             },
             Raw {
              content: "activationScripts",
              position: (323, 12),
             },
             Raw {
              content: "udevd",
              position: (323, 30),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "# The deprecated hotplug uevent helper is not used anymore\nif [ -e /proc/sys/kernel/hotplug ]; then\n  echo \"\" > /proc/sys/kernel/hotplug\nfi\n\n# Allow the kernel to find our firmware.\nif [ -e /sys/module/firmware_class/parameters/path ]; then\n  echo -n \"",
              position: (325, 1),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (332, 22),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "hardware",
                  position: (332, 29),
                 },
                 Raw {
                  content: "firmware",
                  position: (332, 38),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/lib/firmware\" > /sys/module/firmware_class/parameters/path\nfi\n",
              position: (332, 47),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (336, 5),
             },
             Raw {
              content: "services",
              position: (336, 13),
             },
             Raw {
              content: "systemd-udevd",
              position: (336, 22),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "restartTriggers",
                 position: (337, 9),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (337, 27),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "packages",
                  position: (337, 31),
                 },
                ],
               },
               default: None,
              },
             ),
            ],
            recursive: false,
            position: (337, 7),
           },
          ),
         ],
         recursive: false,
         position: (291, 44),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (164, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}