---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
  ],
  ellipsis: false,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: Map {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "option",
        position: (8, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        Variable {
         identifier: "x",
         position: (9, 7),
        },
        Map {
         bindings: [
          Binding {
           from: AttributePath {
            parts: [
             Raw {
              content: "optional",
              position: (9, 14),
             },
            ],
           },
           to: Variable {
            identifier: "true",
            position: (9, 25),
           },
          },
         ],
         recursive: false,
         position: (9, 12),
        },
       ],
       position: (9, 9),
      },
      position: (8, 12),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "yes",
        position: (11, 3),
       },
      ],
     },
     to: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "tristate",
           position: (11, 16),
          },
         ],
        },
        to: String {
         parts: [
          Raw {
           content: "y",
           position: (11, 31),
          },
         ],
         position: (11, 30),
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "optional",
           position: (11, 35),
          },
         ],
        },
        to: Variable {
         identifier: "false",
         position: (11, 46),
        },
       },
      ],
      recursive: false,
      position: (11, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "no",
        position: (12, 3),
       },
      ],
     },
     to: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "tristate",
           position: (12, 16),
          },
         ],
        },
        to: String {
         parts: [
          Raw {
           content: "n",
           position: (12, 31),
          },
         ],
         position: (12, 30),
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "optional",
           position: (12, 35),
          },
         ],
        },
        to: Variable {
         identifier: "false",
         position: (12, 46),
        },
       },
      ],
      recursive: false,
      position: (12, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "module",
        position: (13, 3),
       },
      ],
     },
     to: Map {
      bindings: [
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "tristate",
           position: (13, 16),
          },
         ],
        },
        to: String {
         parts: [
          Raw {
           content: "m",
           position: (13, 31),
          },
         ],
         position: (13, 30),
        },
       },
       Binding {
        from: AttributePath {
         parts: [
          Raw {
           content: "optional",
           position: (13, 35),
          },
         ],
        },
        to: Variable {
         identifier: "false",
         position: (13, 46),
        },
       },
      ],
      recursive: false,
      position: (13, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "freeform",
        position: (14, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "x",
      },
      definition: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "freeform",
            position: (14, 19),
           },
          ],
         },
         to: Variable {
          identifier: "x",
          position: (14, 30),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "optional",
            position: (14, 33),
           },
          ],
         },
         to: Variable {
          identifier: "false",
          position: (14, 44),
         },
        },
       ],
       recursive: false,
       position: (14, 17),
      },
      position: (14, 14),
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "whenHelpers",
        position: (19, 3),
       },
      ],
     },
     to: Function {
      argument: Simple {
       identifier: "version",
      },
      definition: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "whenAtLeast",
            position: (20, 5),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "ver",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "mkIf",
            position: (20, 24),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "versionAtLeast",
              position: (20, 30),
             },
             arguments: [
              Variable {
               identifier: "version",
               position: (20, 45),
              },
              Variable {
               identifier: "ver",
               position: (20, 53),
              },
             ],
            },
           ],
          },
          position: (20, 19),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "whenOlder",
            position: (21, 5),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "ver",
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "mkIf",
            position: (21, 24),
           },
           arguments: [
            FunctionApplication {
             function: Variable {
              identifier: "versionOlder",
              position: (21, 30),
             },
             arguments: [
              Variable {
               identifier: "version",
               position: (21, 43),
              },
              Variable {
               identifier: "ver",
               position: (21, 51),
              },
             ],
            },
           ],
          },
          position: (21, 19),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "whenBetween",
            position: (23, 5),
           },
          ],
         },
         to: Function {
          argument: Simple {
           identifier: "verLow",
          },
          definition: Function {
           argument: Simple {
            identifier: "verHigh",
           },
           definition: FunctionApplication {
            function: Variable {
             identifier: "mkIf",
             position: (23, 36),
            },
            arguments: [
             BinaryOperation {
              operator: LogicalAnd,
              operands: [
               FunctionApplication {
                function: Variable {
                 identifier: "versionAtLeast",
                 position: (23, 42),
                },
                arguments: [
                 Variable {
                  identifier: "version",
                  position: (23, 57),
                 },
                 Variable {
                  identifier: "verLow",
                  position: (23, 65),
                 },
                ],
               },
               FunctionApplication {
                function: Variable {
                 identifier: "versionOlder",
                 position: (23, 75),
                },
                arguments: [
                 Variable {
                  identifier: "version",
                  position: (23, 88),
                 },
                 Variable {
                  identifier: "verHigh",
                  position: (23, 96),
                 },
                ],
               },
              ],
              position: (23, 72),
             },
            ],
           },
           position: (23, 27),
          },
          position: (23, 19),
         },
        },
       ],
       recursive: false,
       position: (19, 26),
      },
      position: (19, 17),
     },
    },
   ],
   recursive: false,
   position: (4, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}