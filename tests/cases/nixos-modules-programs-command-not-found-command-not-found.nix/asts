---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (8, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (11, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (11, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "programs",
         position: (11, 16),
        },
        Raw {
         content: "command-not-found",
         position: (11, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "commandNotFound",
        position: (12, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (12, 21),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "substituteAll",
          position: (12, 26),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "name",
             position: (13, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "command-not-found",
             position: (13, 13),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "dir",
             position: (14, 5),
            },
           ],
          },
          String {
           parts: [
            Raw {
             content: "bin",
             position: (14, 12),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "src",
             position: (15, 5),
            },
           ],
          },
          Path {
           parts: [
            Raw {
             content: "./command-not-found.pl",
             position: (15, 11),
            },
           ],
          },
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "isExecutable",
             position: (16, 5),
            },
           ],
          },
          Variable {
           identifier: "true",
           position: (16, 20),
          },
         ),
         Inherit(
          Some(
           Variable {
            identifier: "cfg",
            position: (17, 14),
           },
          ),
          [
           Raw {
            content: "dbPath",
            position: (17, 19),
           },
          ],
         ),
         KeyValue(
          AttributePath {
           attributes: [
            Raw {
             content: "perl",
             position: (18, 5),
            },
           ],
          },
          FunctionApplication {
           function: PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (18, 12),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "perl",
               position: (18, 17),
              },
              Raw {
               content: "withPackages",
               position: (18, 22),
              },
             ],
            },
            default: None,
           },
           arguments: [
            Function {
             argument: Some(
              "p",
             ),
             arguments: FunctionArguments {
              arguments: [],
              ellipsis: false,
             },
             definition: List {
              elements: [
               PropertyAccess {
                expression: Variable {
                 identifier: "p",
                 position: (18, 41),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "DBDSQLite",
                   position: (18, 43),
                  },
                 ],
                },
                default: None,
               },
               PropertyAccess {
                expression: Variable {
                 identifier: "p",
                 position: (18, 53),
                },
                attribute_path: AttributePath {
                 attributes: [
                  Raw {
                   content: "StringShellQuote",
                   position: (18, 55),
                  },
                 ],
                },
                default: None,
               },
              ],
             },
            },
           ],
          },
         ),
        ],
        recursive: false,
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (24, 3),
        },
        Raw {
         content: "programs",
         position: (24, 11),
        },
        Raw {
         content: "command-not-found",
         position: (24, 20),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (26, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (26, 14),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (27, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (27, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "bool",
                  position: (27, 20),
                 },
                ],
               },
               default: None,
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (28, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (28, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (29, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Whether interactive shells should show which Nix package (if\nany) provides a missing command.\n",
                 position: (30, 1),
                },
               ],
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "dbPath",
            position: (35, 5),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (35, 14),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (36, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "/nix/var/nix/profiles/per-user/root/channels/nixos/programs.sqlite",
                 position: (36, 18),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (37, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Absolute path to programs.sqlite.\n\nBy default this file will be provided by your channel\n(nixexprs.tar.xz).\n",
                 position: (38, 1),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (43, 7),
                },
               ],
              },
              PropertyAccess {
               expression: Variable {
                identifier: "types",
                position: (43, 14),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "path",
                  position: (43, 20),
                 },
                ],
               },
               default: None,
              },
             ),
            ],
            recursive: false,
           },
          ],
         },
        ),
       ],
       recursive: false,
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (47, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (47, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (47, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (47, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "programs",
              position: (48, 5),
             },
             Raw {
              content: "bash",
              position: (48, 14),
             },
             Raw {
              content: "interactiveShellInit",
              position: (48, 19),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "# This function is called whenever a command is not found.\ncommand_not_found_handle() {\n  local p=",
              position: (50, 1),
             },
             Raw {
              content: "'",
              position: (52, 19),
             },
             Expression {
              expression: Variable {
               identifier: "commandNotFound",
               position: (52, 22),
              },
             },
             Raw {
              content: "/bin/command-not-found'\n  if [ -x \"$p\" ] && [ -f ",
              position: (52, 38),
             },
             Raw {
              content: "'",
              position: (53, 34),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (53, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "dbPath",
                  position: (53, 41),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "' ]; then\n    # Run the helper program.\n    \"$p\" \"$@\"\n    # Retry the command if we just installed it.\n    if [ $? = 126 ]; then\n      \"$@\"\n    else\n      return 127\n    fi\n  else\n    echo \"$1: command not found\" >&2\n    return 127\n  fi\n}\n",
              position: (53, 48),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "programs",
              position: (69, 5),
             },
             Raw {
              content: "zsh",
              position: (69, 14),
             },
             Raw {
              content: "interactiveShellInit",
              position: (69, 18),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "# This function is called whenever a command is not found.\ncommand_not_found_handler() {\n  local p=",
              position: (71, 1),
             },
             Raw {
              content: "'",
              position: (73, 19),
             },
             Expression {
              expression: Variable {
               identifier: "commandNotFound",
               position: (73, 22),
              },
             },
             Raw {
              content: "/bin/command-not-found'\n  if [ -x \"$p\" ] && [ -f ",
              position: (73, 38),
             },
             Raw {
              content: "'",
              position: (74, 34),
             },
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "cfg",
                position: (74, 37),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "dbPath",
                  position: (74, 41),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "' ]; then\n    # Run the helper program.\n    \"$p\" \"$@\"\n\n    # Retry the command if we just installed it.\n    if [ $? = 126 ]; then\n      \"$@\"\n    else\n      return 127\n    fi\n  else\n    # Indicate than there was an error so ZSH falls back to its default handler\n    echo \"$1: command not found\" >&2\n    return 127\n  fi\n}\n",
              position: (74, 48),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (92, 5),
             },
             Raw {
              content: "systemPackages",
              position: (92, 17),
             },
            ],
           },
           List {
            elements: [
             Variable {
              identifier: "commandNotFound",
              position: (92, 36),
             },
            ],
           },
          ),
         ],
         recursive: false,
        },
       ],
      },
     ),
    ],
    recursive: false,
   },
  },
 },
}