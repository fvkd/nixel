---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "modules",
    default: None,
   },
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "nixosPath",
        position: (8, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "toString",
       position: (8, 15),
      },
      arguments: [
       Path {
        parts: [
         Raw {
          content: "../..",
         },
        ],
        position: (8, 24),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "isNixOSFile",
        position: (11, 3),
       },
      ],
     },
     Function {
      argument: Simple {
       identifier: "path",
      },
      definition: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "s",
            position: (12, 9),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "toString",
           position: (12, 13),
          },
          arguments: [
           Variable {
            identifier: "path",
            position: (12, 22),
           },
          ],
         },
        ),
       ],
       target: BinaryOperation {
        operator: NotEqualTo,
        operands: [
         FunctionApplication {
          function: Variable {
           identifier: "removePrefix",
           position: (13, 7),
          },
          arguments: [
           Variable {
            identifier: "nixosPath",
            position: (13, 20),
           },
           Variable {
            identifier: "s",
            position: (13, 30),
           },
          ],
         },
         Variable {
          identifier: "s",
          position: (13, 35),
         },
        ],
        position: (13, 32),
       },
       position: (12, 5),
      },
      position: (11, 17),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "moduleFiles",
        position: (18, 3),
       },
      ],
     },
     FunctionApplication {
      function: Variable {
       identifier: "filter",
       position: (20, 5),
      },
      arguments: [
       Function {
        argument: Simple {
         identifier: "x",
        },
        definition: BinaryOperation {
         operator: LogicalAnd,
         operands: [
          UnaryOperation {
           operator: Not,
           operand: FunctionApplication {
            function: Variable {
             identifier: "isAttrs",
             position: (20, 17),
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (20, 25),
             },
            ],
           },
           position: (20, 16),
          },
          UnaryOperation {
           operator: Not,
           operand: FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "lib",
              position: (20, 31),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "isFunction",
                position: (20, 35),
               },
              ],
             },
             default: None,
            },
            arguments: [
             Variable {
              identifier: "x",
              position: (20, 46),
             },
            ],
           },
           position: (20, 30),
          },
         ],
         position: (20, 27),
        },
        position: (20, 13),
       },
       Variable {
        identifier: "modules",
        position: (20, 49),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "partitionedModuleFiles",
        position: (24, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "p",
           position: (25, 9),
          },
         ],
        },
        FunctionApplication {
         function: Variable {
          identifier: "partition",
          position: (25, 13),
         },
         arguments: [
          Variable {
           identifier: "isNixOSFile",
           position: (25, 23),
          },
          Variable {
           identifier: "moduleFiles",
           position: (25, 35),
          },
         ],
        },
       ),
      ],
      target: Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "nixos",
            position: (26, 7),
           },
          ],
         },
         PropertyAccess {
          expression: Variable {
           identifier: "p",
           position: (26, 15),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "right",
             position: (26, 17),
            },
           ],
          },
          default: None,
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "others",
            position: (26, 24),
           },
          ],
         },
         PropertyAccess {
          expression: Variable {
           identifier: "p",
           position: (26, 33),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "wrong",
             position: (26, 35),
            },
           ],
          },
          default: None,
         },
        ),
       ],
       recursive: false,
       position: (26, 5),
      },
      position: (25, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "relocatedModuleFiles",
        position: (30, 3),
       },
      ],
     },
     LetIn {
      bindings: [
       KeyValue(
        AttributePath {
         attributes: [
          Raw {
           content: "relocateNixOS",
           position: (32, 7),
          },
         ],
        },
        Function {
         argument: Simple {
          identifier: "path",
         },
         definition: BinaryOperation {
          operator: Addition,
          operands: [
           BinaryOperation {
            operator: Addition,
            operands: [
             String {
              parts: [
               Raw {
                content: "<nixpkgs/nixos",
               },
              ],
              position: (33, 9),
             },
             FunctionApplication {
              function: Variable {
               identifier: "removePrefix",
               position: (33, 28),
              },
              arguments: [
               Variable {
                identifier: "nixosPath",
                position: (33, 41),
               },
               FunctionApplication {
                function: Variable {
                 identifier: "toString",
                 position: (33, 52),
                },
                arguments: [
                 Variable {
                  identifier: "path",
                  position: (33, 61),
                 },
                ],
               },
              ],
             },
            ],
            position: (33, 26),
           },
           String {
            parts: [
             Raw {
              content: ">",
             },
            ],
            position: (33, 69),
           },
          ],
          position: (33, 67),
         },
         position: (32, 23),
        },
       ),
      ],
      target: Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "nixos",
            position: (35, 9),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "map",
           position: (35, 17),
          },
          arguments: [
           Variable {
            identifier: "relocateNixOS",
            position: (35, 21),
           },
           PropertyAccess {
            expression: Variable {
             identifier: "partitionedModuleFiles",
             position: (35, 35),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "nixos",
               position: (35, 58),
              },
             ],
            },
            default: None,
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "others",
            position: (36, 9),
           },
          ],
         },
         List {
          elements: [],
          position: (36, 18),
         },
        ),
       ],
       recursive: false,
       position: (35, 7),
      },
      position: (31, 5),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configClone",
        position: (45, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (45, 17),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "writeText",
          position: (45, 22),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "configuration.nix",
         },
        ],
        position: (45, 32),
       },
       String {
        parts: [
         Raw {
          content: "{ config, pkgs, ... }:\n\n{\n  imports = [ ",
         },
         Expression {
          expression: FunctionApplication {
           function: Variable {
            identifier: "toString",
            position: (50, 23),
           },
           arguments: [
            PropertyAccess {
             expression: Variable {
              identifier: "config",
              position: (50, 32),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "installer",
                position: (50, 39),
               },
               Raw {
                content: "cloneConfigIncludes",
                position: (50, 49),
               },
              ],
             },
             default: None,
            },
           ],
          },
         },
         Raw {
          content: " ];\n\n  ",
         },
         Expression {
          expression: PropertyAccess {
           expression: Variable {
            identifier: "config",
            position: (52, 11),
           },
           attribute_path: AttributePath {
            attributes: [
             Raw {
              content: "installer",
              position: (52, 18),
             },
             Raw {
              content: "cloneConfigExtra",
              position: (52, 28),
             },
            ],
           },
           default: None,
          },
         },
         Raw {
          content: "\n}\n",
         },
        ],
        position: (46, 5),
       },
      ],
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (60, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "installer",
            position: (62, 5),
           },
           Raw {
            content: "cloneConfig",
            position: (62, 15),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (62, 29),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (63, 7),
                },
               ],
              },
              Variable {
               identifier: "true",
               position: (63, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (64, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Try to clone the installation-device configuration by re-using it's\nprofile from the list of imported modules.\n",
                },
               ],
               position: (64, 21),
              },
             ),
            ],
            recursive: false,
            position: (62, 38),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "installer",
            position: (70, 5),
           },
           Raw {
            content: "cloneConfigIncludes",
            position: (70, 15),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (70, 37),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (71, 7),
                },
               ],
              },
              List {
               elements: [],
               position: (71, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "example",
                 position: (72, 7),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "./nixos/modules/hardware/network/rt73.nix",
                  },
                 ],
                 position: (72, 19),
                },
               ],
               position: (72, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (73, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "List of modules used to re-build this installation device profile.\n",
                },
               ],
               position: (73, 21),
              },
             ),
            ],
            recursive: false,
            position: (70, 46),
           },
          ],
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "installer",
            position: (78, 5),
           },
           Raw {
            content: "cloneConfigExtra",
            position: (78, 15),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "mkOption",
           position: (78, 34),
          },
          arguments: [
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "default",
                 position: (79, 7),
                },
               ],
              },
              String {
               parts: [],
               position: (79, 17),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "description",
                 position: (80, 7),
                },
               ],
              },
              String {
               parts: [
                Raw {
                 content: "Extra text to include in the cloned configuration.nix included in this\ninstaller.\n",
                },
               ],
               position: (80, 21),
              },
             ),
            ],
            recursive: false,
            position: (78, 43),
           },
          ],
         },
        ),
       ],
       recursive: false,
       position: (60, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (87, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "installer",
            position: (89, 5),
           },
           Raw {
            content: "cloneConfigIncludes",
            position: (89, 15),
           },
          ],
         },
         BinaryOperation {
          operator: Concatenation,
          operands: [
           PropertyAccess {
            expression: Variable {
             identifier: "relocatedModuleFiles",
             position: (90, 7),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "nixos",
               position: (90, 28),
              },
             ],
            },
            default: None,
           },
           PropertyAccess {
            expression: Variable {
             identifier: "relocatedModuleFiles",
             position: (90, 37),
            },
            attribute_path: AttributePath {
             attributes: [
              Raw {
               content: "others",
               position: (90, 58),
              },
             ],
            },
            default: None,
           },
          ],
          position: (90, 34),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "boot",
            position: (92, 5),
           },
           Raw {
            content: "postBootCommands",
            position: (92, 10),
           },
          ],
         },
         String {
          parts: [
           Raw {
            content: "# Provide a mount point for nixos-install.\nmkdir -p /mnt\n\n",
           },
           Expression {
            expression: FunctionApplication {
             function: Variable {
              identifier: "optionalString",
              position: (97, 11),
             },
             arguments: [
              PropertyAccess {
               expression: Variable {
                identifier: "config",
                position: (97, 26),
               },
               attribute_path: AttributePath {
                attributes: [
                 Raw {
                  content: "installer",
                  position: (97, 33),
                 },
                 Raw {
                  content: "cloneConfig",
                  position: (97, 43),
                 },
                ],
               },
               default: None,
              },
              String {
               parts: [
                Raw {
                 content: "# Provide a configuration for the CD/DVD itself, to allow users\n# to run nixos-rebuild to change the configuration of the\n# running system on the CD/DVD.\nif ! [ -e /etc/nixos/configuration.nix ]; then\n  cp ",
                },
                Expression {
                 expression: Variable {
                  identifier: "configClone",
                  position: (102, 18),
                 },
                },
                Raw {
                 content: " /etc/nixos/configuration.nix\nfi\n",
                },
               ],
               position: (97, 55),
              },
             ],
            },
           },
           Raw {
            content: "\n",
           },
          ],
          position: (93, 7),
         },
        ),
       ],
       recursive: false,
       position: (87, 12),
      },
     ),
    ],
    recursive: false,
    position: (58, 1),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}