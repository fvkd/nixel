---
Function {
 argument: None,
 arguments: FunctionArguments {
  arguments: [
   FunctionArgument {
    identifier: "pkgs",
    default: None,
   },
   FunctionArgument {
    identifier: "lib",
    default: None,
   },
   FunctionArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (3, 6),
  },
  target: LetIn {
   bindings: [
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "cfg",
        position: (7, 3),
       },
      ],
     },
     PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (7, 9),
      },
      attribute_path: AttributePath {
       attributes: [
        Raw {
         content: "services",
         position: (7, 16),
        },
        Raw {
         content: "thinkfan",
         position: (7, 25),
        },
       ],
      },
      default: None,
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "settingsFormat",
        position: (8, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (8, 20),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "formats",
          position: (8, 25),
         },
         Raw {
          content: "yaml",
          position: (8, 33),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [],
        recursive: false,
        position: (8, 38),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "configFile",
        position: (9, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "settingsFormat",
        position: (9, 16),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "generate",
          position: (9, 31),
         },
        ],
       },
       default: None,
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "thinkfan.yaml",
         },
        ],
        position: (9, 40),
       },
       PropertyAccess {
        expression: Variable {
         identifier: "cfg",
         position: (9, 56),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "settings",
           position: (9, 60),
          },
         ],
        },
        default: None,
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "thinkfan",
        position: (10, 3),
       },
      ],
     },
     FunctionApplication {
      function: PropertyAccess {
       expression: Variable {
        identifier: "pkgs",
        position: (10, 14),
       },
       attribute_path: AttributePath {
        attributes: [
         Raw {
          content: "thinkfan",
          position: (10, 19),
         },
         Raw {
          content: "override",
          position: (10, 28),
         },
        ],
       },
       default: None,
      },
      arguments: [
       Map {
        bindings: [
         Inherit(
          Some(
           Variable {
            identifier: "cfg",
            position: (10, 48),
           },
          ),
          [
           Raw {
            content: "smartSupport",
            position: (10, 53),
           },
          ],
         ),
        ],
        recursive: false,
        position: (10, 37),
       },
      ],
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "levelType",
        position: (13, 3),
       },
      ],
     },
     With {
      expression: Variable {
       identifier: "types",
       position: (13, 20),
      },
      target: LetIn {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "tuple",
            position: (15, 7),
           },
          ],
         },
         Function {
          argument: Some(
           "ts",
          ),
          arguments: FunctionArguments {
           arguments: [],
           ellipsis: false,
          },
          definition: FunctionApplication {
           function: Variable {
            identifier: "mkOptionType",
            position: (15, 19),
           },
           arguments: [
            Map {
             bindings: [
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "name",
                  position: (16, 9),
                 },
                ],
               },
               String {
                parts: [
                 Raw {
                  content: "tuple",
                 },
                ],
                position: (16, 16),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "merge",
                  position: (17, 9),
                 },
                ],
               },
               Variable {
                identifier: "mergeOneOption",
                position: (17, 17),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "check",
                  position: (18, 9),
                 },
                ],
               },
               Function {
                argument: Some(
                 "xs",
                ),
                arguments: FunctionArguments {
                 arguments: [],
                 ellipsis: false,
                },
                definition: FunctionApplication {
                 function: Variable {
                  identifier: "all",
                  position: (18, 21),
                 },
                 arguments: [
                  Variable {
                   identifier: "id",
                   position: (18, 25),
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "zipListsWith",
                    position: (18, 29),
                   },
                   arguments: [
                    Function {
                     argument: Some(
                      "t",
                     ),
                     arguments: FunctionArguments {
                      arguments: [],
                      ellipsis: false,
                     },
                     definition: Function {
                      argument: Some(
                       "x",
                      ),
                      arguments: FunctionArguments {
                       arguments: [],
                       ellipsis: false,
                      },
                      definition: FunctionApplication {
                       function: PropertyAccess {
                        expression: Variable {
                         identifier: "t",
                         position: (18, 49),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "check",
                           position: (18, 51),
                          },
                         ],
                        },
                        default: None,
                       },
                       arguments: [
                        Variable {
                         identifier: "x",
                         position: (18, 57),
                        },
                       ],
                      },
                      position: (18, 46),
                     },
                     position: (18, 43),
                    },
                    Variable {
                     identifier: "ts",
                     position: (18, 60),
                    },
                    Variable {
                     identifier: "xs",
                     position: (18, 63),
                    },
                   ],
                  },
                 ],
                },
                position: (18, 17),
               },
              ),
              KeyValue(
               AttributePath {
                attributes: [
                 Raw {
                  content: "description",
                  position: (19, 9),
                 },
                ],
               },
               BinaryOperation {
                operator: Addition,
                operands: [
                 String {
                  parts: [
                   Raw {
                    content: "tuple of",
                   },
                  ],
                  position: (19, 23),
                 },
                 FunctionApplication {
                  function: Variable {
                   identifier: "concatMapStrings",
                   position: (19, 36),
                  },
                  arguments: [
                   Function {
                    argument: Some(
                     "t",
                    ),
                    arguments: FunctionArguments {
                     arguments: [],
                     ellipsis: false,
                    },
                    definition: String {
                     parts: [
                      Raw {
                       content: " (",
                      },
                      Expression {
                       expression: PropertyAccess {
                        expression: Variable {
                         identifier: "t",
                         position: (19, 62),
                        },
                        attribute_path: AttributePath {
                         attributes: [
                          Raw {
                           content: "description",
                           position: (19, 64),
                          },
                         ],
                        },
                        default: None,
                       },
                      },
                      Raw {
                       content: ")",
                      },
                     ],
                     position: (19, 57),
                    },
                    position: (19, 54),
                   },
                   Variable {
                    identifier: "ts",
                    position: (19, 80),
                   },
                  ],
                 },
                ],
                position: (19, 34),
               },
              ),
             ],
             recursive: false,
             position: (15, 32),
            },
           ],
          },
          position: (15, 15),
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "level",
            position: (21, 7),
           },
          ],
         },
         PropertyAccess {
          expression: Variable {
           identifier: "ints",
           position: (21, 15),
          },
          attribute_path: AttributePath {
           attributes: [
            Raw {
             content: "unsigned",
             position: (21, 20),
            },
           ],
          },
          default: None,
         },
        ),
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "special",
            position: (22, 7),
           },
          ],
         },
         FunctionApplication {
          function: Variable {
           identifier: "enum",
           position: (22, 17),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "level auto",
               },
              ],
              position: (22, 24),
             },
             String {
              parts: [
               Raw {
                content: "level full-speed",
               },
              ],
              position: (22, 37),
             },
             String {
              parts: [
               Raw {
                content: "level disengaged",
               },
              ],
              position: (22, 56),
             },
            ],
            position: (22, 22),
           },
          ],
         },
        ),
       ],
       target: FunctionApplication {
        function: Variable {
         identifier: "tuple",
         position: (24, 7),
        },
        arguments: [
         List {
          elements: [
           FunctionApplication {
            function: Variable {
             identifier: "either",
             position: (24, 16),
            },
            arguments: [
             Variable {
              identifier: "level",
              position: (24, 23),
             },
             Variable {
              identifier: "special",
              position: (24, 29),
             },
            ],
           },
           Variable {
            identifier: "level",
            position: (24, 38),
           },
           Variable {
            identifier: "level",
            position: (24, 44),
           },
          ],
          position: (24, 13),
         },
        ],
       },
       position: (14, 5),
      },
      position: (13, 15),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "sensorType",
        position: (27, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: FunctionApplication {
       function: PropertyAccess {
        expression: Variable {
         identifier: "types",
         position: (27, 22),
        },
        attribute_path: AttributePath {
         attributes: [
          Raw {
           content: "submodule",
           position: (27, 28),
          },
         ],
        },
        default: None,
       },
       arguments: [
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "freeformType",
              position: (28, 5),
             },
            ],
           },
           FunctionApplication {
            function: PropertyAccess {
             expression: Variable {
              identifier: "types",
              position: (28, 20),
             },
             attribute_path: AttributePath {
              attributes: [
               Raw {
                content: "attrsOf",
                position: (28, 26),
               },
              ],
             },
             default: None,
            },
            arguments: [
             PropertyAccess {
              expression: Variable {
               identifier: "settingsFormat",
               position: (28, 34),
              },
              attribute_path: AttributePath {
               attributes: [
                Raw {
                 content: "type",
                 position: (28, 49),
                },
               ],
              },
              default: None,
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "options",
              position: (29, 5),
             },
            ],
           },
           BinaryOperation {
            operator: Update,
            operands: [
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "type",
                   position: (30, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOption",
                  position: (30, 14),
                 },
                 arguments: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "type",
                        position: (31, 9),
                       },
                      ],
                     },
                     FunctionApplication {
                      function: PropertyAccess {
                       expression: Variable {
                        identifier: "types",
                        position: (31, 16),
                       },
                       attribute_path: AttributePath {
                        attributes: [
                         Raw {
                          content: "enum",
                          position: (31, 22),
                         },
                        ],
                       },
                       default: None,
                      },
                      arguments: [
                       List {
                        elements: [
                         String {
                          parts: [
                           Raw {
                            content: "hwmon",
                           },
                          ],
                          position: (31, 29),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "atasmart",
                           },
                          ],
                          position: (31, 37),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "tpacpi",
                           },
                          ],
                          position: (31, 48),
                         },
                         String {
                          parts: [
                           Raw {
                            content: "nvml",
                           },
                          ],
                          position: (31, 57),
                         },
                        ],
                        position: (31, 27),
                       },
                      ],
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "description",
                        position: (32, 9),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "The ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (33, 17),
                        },
                       },
                       Raw {
                        content: " type, can be\n<literal>hwmon</literal> for standard ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (34, 51),
                        },
                       },
                       Raw {
                        content: "s,\n\n<literal>atasmart</literal> to read the temperature via\nS.M.A.R.T (requires smartSupport to be enabled),\n\n<literal>tpacpi</literal> for the legacy thinkpac_acpi driver, or\n\n<literal>nvml</literal> for the (proprietary) nVidia driver.\n",
                       },
                      ],
                      position: (32, 23),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (30, 23),
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "query",
                   position: (44, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOption",
                  position: (44, 15),
                 },
                 arguments: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "type",
                        position: (45, 9),
                       },
                      ],
                     },
                     PropertyAccess {
                      expression: Variable {
                       identifier: "types",
                       position: (45, 16),
                      },
                      attribute_path: AttributePath {
                       attributes: [
                        Raw {
                         content: "str",
                         position: (45, 22),
                        },
                       ],
                      },
                      default: None,
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "description",
                        position: (46, 9),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "The query string used to match one or more ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (47, 56),
                        },
                       },
                       Raw {
                        content: "s: can be\na fullpath to the temperature file (single ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (48, 56),
                        },
                       },
                       Raw {
                        content: ") or a fullpath\nto a driver directory (multiple ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (49, 45),
                        },
                       },
                       Raw {
                        content: "s).\n\n<note><para>\n  When multiple ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (52, 29),
                        },
                       },
                       Raw {
                        content: "s match, the query can be restricted using the\n  <option>name</option> or <option>indices</option> options.\n</para></note>\n",
                       },
                      ],
                      position: (46, 23),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (44, 24),
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "indices",
                   position: (57, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "mkOption",
                  position: (57, 17),
                 },
                 arguments: [
                  Map {
                   bindings: [
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "type",
                        position: (58, 9),
                       },
                      ],
                     },
                     With {
                      expression: Variable {
                       identifier: "types",
                       position: (58, 21),
                      },
                      target: FunctionApplication {
                       function: Variable {
                        identifier: "nullOr",
                        position: (58, 28),
                       },
                       arguments: [
                        FunctionApplication {
                         function: Variable {
                          identifier: "listOf",
                          position: (58, 36),
                         },
                         arguments: [
                          PropertyAccess {
                           expression: Variable {
                            identifier: "ints",
                            position: (58, 43),
                           },
                           attribute_path: AttributePath {
                            attributes: [
                             Raw {
                              content: "unsigned",
                              position: (58, 48),
                             },
                            ],
                           },
                           default: None,
                          },
                         ],
                        },
                       ],
                      },
                      position: (58, 16),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "default",
                        position: (59, 9),
                       },
                      ],
                     },
                     Variable {
                      identifier: "null",
                      position: (59, 19),
                     },
                    ),
                    KeyValue(
                     AttributePath {
                      attributes: [
                       Raw {
                        content: "description",
                        position: (60, 9),
                       },
                      ],
                     },
                     String {
                      parts: [
                       Raw {
                        content: "A list of ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (61, 23),
                        },
                       },
                       Raw {
                        content: "s to pick in case multiple ",
                       },
                       Expression {
                        expression: Variable {
                         identifier: "name",
                         position: (61, 57),
                        },
                       },
                       Raw {
                        content: "s match the query.\n\n<note><para>Indices start from 0.</para></note>\n",
                       },
                      ],
                      position: (60, 23),
                     },
                    ),
                   ],
                   recursive: false,
                   position: (57, 26),
                  },
                 ],
                },
               ),
              ],
              recursive: false,
              position: (29, 15),
             },
             FunctionApplication {
              function: Variable {
               identifier: "optionalAttrs",
               position: (66, 10),
              },
              arguments: [
               BinaryOperation {
                operator: EqualTo,
                operands: [
                 Variable {
                  identifier: "name",
                  position: (66, 25),
                 },
                 String {
                  parts: [
                   Raw {
                    content: "sensor",
                   },
                  ],
                  position: (66, 33),
                 },
                ],
                position: (66, 30),
               },
               Map {
                bindings: [
                 KeyValue(
                  AttributePath {
                   attributes: [
                    Raw {
                     content: "correction",
                     position: (67, 7),
                    },
                   ],
                  },
                  FunctionApplication {
                   function: Variable {
                    identifier: "mkOption",
                    position: (67, 20),
                   },
                   arguments: [
                    Map {
                     bindings: [
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "type",
                          position: (68, 9),
                         },
                        ],
                       },
                       With {
                        expression: Variable {
                         identifier: "types",
                         position: (68, 21),
                        },
                        target: FunctionApplication {
                         function: Variable {
                          identifier: "nullOr",
                          position: (68, 28),
                         },
                         arguments: [
                          FunctionApplication {
                           function: Variable {
                            identifier: "listOf",
                            position: (68, 36),
                           },
                           arguments: [
                            Variable {
                             identifier: "int",
                             position: (68, 43),
                            },
                           ],
                          },
                         ],
                        },
                        position: (68, 16),
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "default",
                          position: (69, 9),
                         },
                        ],
                       },
                       Variable {
                        identifier: "null",
                        position: (69, 19),
                       },
                      ),
                      KeyValue(
                       AttributePath {
                        attributes: [
                         Raw {
                          content: "description",
                          position: (70, 9),
                         },
                        ],
                       },
                       String {
                        parts: [
                         Raw {
                          content: "A list of values to be added to the temperature of each sensor,\ncan be used to equalize small discrepancies in temperature ratings.\n",
                         },
                        ],
                        position: (70, 23),
                       },
                      ),
                     ],
                     recursive: false,
                     position: (67, 29),
                    },
                   ],
                  },
                 ),
                ],
                recursive: false,
                position: (66, 43),
               },
              ],
             },
            ],
            position: (66, 7),
           },
          ),
         ],
         recursive: false,
         position: (27, 38),
        },
       ],
      },
      position: (27, 16),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "sensorToConf",
        position: (79, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "args",
      ),
      arguments: FunctionArguments {
       arguments: [
        FunctionArgument {
         identifier: "query",
         default: None,
        },
        FunctionArgument {
         identifier: "type",
         default: None,
        },
       ],
       ellipsis: true,
      },
      definition: BinaryOperation {
       operator: Update,
       operands: [
        FunctionApplication {
         function: Variable {
          identifier: "filterAttrs",
          position: (80, 6),
         },
         arguments: [
          Function {
           argument: Some(
            "k",
           ),
           arguments: FunctionArguments {
            arguments: [],
            ellipsis: false,
           },
           definition: Function {
            argument: Some(
             "v",
            ),
            arguments: FunctionArguments {
             arguments: [],
             ellipsis: false,
            },
            definition: BinaryOperation {
             operator: LogicalAnd,
             operands: [
              BinaryOperation {
               operator: NotEqualTo,
               operands: [
                Variable {
                 identifier: "v",
                 position: (80, 25),
                },
                Variable {
                 identifier: "null",
                 position: (80, 30),
                },
               ],
               position: (80, 27),
              },
              UnaryOperation {
               operator: Not,
               operand: FunctionApplication {
                function: Variable {
                 identifier: "elem",
                 position: (80, 40),
                },
                arguments: [
                 Variable {
                  identifier: "k",
                  position: (80, 45),
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "type",
                     },
                    ],
                    position: (80, 48),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "query",
                     },
                    ],
                    position: (80, 55),
                   },
                  ],
                  position: (80, 47),
                 },
                ],
               },
               position: (80, 38),
              },
             ],
             position: (80, 35),
            },
            position: (80, 22),
           },
           position: (80, 19),
          },
          Variable {
           identifier: "args",
           position: (80, 66),
          },
         ],
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Expression {
              expression: String {
               parts: [
                Expression {
                 expression: Variable {
                  identifier: "type",
                  position: (81, 13),
                 },
                },
               ],
               position: (81, 10),
              },
             },
            ],
           },
           Variable {
            identifier: "query",
            position: (81, 22),
           },
          ),
         ],
         recursive: false,
         position: (81, 8),
        },
       ],
       position: (81, 5),
      },
      position: (79, 18),
     },
    ),
    KeyValue(
     AttributePath {
      attributes: [
       Raw {
        content: "syntaxNote",
        position: (83, 3),
       },
      ],
     },
     Function {
      argument: Some(
       "name",
      ),
      arguments: FunctionArguments {
       arguments: [],
       ellipsis: false,
      },
      definition: String {
       parts: [
        Raw {
         content: "<note><para>\n  This section slightly departs from the thinkfan.conf syntax.\n  The type and path must be specified like this:\n  <literal>\n    type = \"tpacpi\";\n    query = \"/proc/acpi/ibm/",
        },
        Expression {
         expression: Variable {
          identifier: "name",
          position: (89, 35),
         },
        },
        Raw {
         content: "\";\n  </literal>\n  instead of a single declaration like:\n  <literal>\n    - tpacpi: /proc/acpi/ibm/",
        },
        Expression {
         expression: Variable {
          identifier: "name",
          position: (93, 36),
         },
        },
        Raw {
         content: "\n  </literal>\n</para></note>\n",
        },
       ],
       position: (83, 22),
      },
      position: (83, 16),
     },
    ),
   ],
   target: Map {
    bindings: [
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "options",
         position: (100, 3),
        },
       ],
      },
      Map {
       bindings: [
        KeyValue(
         AttributePath {
          attributes: [
           Raw {
            content: "services",
            position: (102, 5),
           },
           Raw {
            content: "thinkfan",
            position: (102, 14),
           },
          ],
         },
         Map {
          bindings: [
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "enable",
               position: (104, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (104, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (105, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (105, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (105, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (106, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (106, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (107, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to enable thinkfan, a fan control program.\n\n<note><para>\n  This module targets IBM/Lenovo thinkpads by default, for\n  other hardware you will have configure it more carefully.\n</para></note>\n",
                   },
                  ],
                  position: (107, 23),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "relatedPackages",
                    position: (115, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "thinkfan",
                     },
                    ],
                    position: (115, 29),
                   },
                  ],
                  position: (115, 27),
                 },
                ),
               ],
               recursive: false,
               position: (104, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "smartSupport",
               position: (118, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (118, 22),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (119, 9),
                   },
                  ],
                 },
                 PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (119, 16),
                  },
                  attribute_path: AttributePath {
                   attributes: [
                    Raw {
                     content: "bool",
                     position: (119, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (120, 9),
                   },
                  ],
                 },
                 Variable {
                  identifier: "false",
                  position: (120, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (121, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Whether to build thinkfan with S.M.A.R.T. support to read temperatures\ndirectly from hard disks.\n",
                   },
                  ],
                  position: (121, 23),
                 },
                ),
               ],
               recursive: false,
               position: (118, 31),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "sensors",
               position: (127, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (127, 17),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (128, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (128, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (128, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "sensorType",
                     position: (128, 30),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "sensor",
                       },
                      ],
                      position: (128, 41),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (129, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "type",
                         position: (130, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "tpacpi",
                        },
                       ],
                       position: (130, 20),
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "query",
                         position: (131, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "/proc/acpi/ibm/thermal",
                        },
                       ],
                       position: (131, 21),
                      },
                     ),
                    ],
                    recursive: false,
                    position: (130, 11),
                   },
                  ],
                  position: (129, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (134, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "List of temperature sensors thinkfan will monitor.\n",
                     },
                    ],
                    position: (134, 23),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "syntaxNote",
                     position: (136, 14),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "thermal",
                       },
                      ],
                      position: (136, 25),
                     },
                    ],
                   },
                  ],
                  position: (136, 12),
                 },
                ),
               ],
               recursive: false,
               position: (127, 26),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "fans",
               position: (139, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (139, 14),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (140, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (140, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (140, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   FunctionApplication {
                    function: Variable {
                     identifier: "sensorType",
                     position: (140, 30),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "fan",
                       },
                      ],
                      position: (140, 41),
                     },
                    ],
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (141, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   Map {
                    bindings: [
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "type",
                         position: (142, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "tpacpi",
                        },
                       ],
                       position: (142, 20),
                      },
                     ),
                     KeyValue(
                      AttributePath {
                       attributes: [
                        Raw {
                         content: "query",
                         position: (143, 13),
                        },
                       ],
                      },
                      String {
                       parts: [
                        Raw {
                         content: "/proc/acpi/ibm/fan",
                        },
                       ],
                       position: (143, 21),
                      },
                     ),
                    ],
                    recursive: false,
                    position: (142, 11),
                   },
                  ],
                  position: (141, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (146, 9),
                   },
                  ],
                 },
                 BinaryOperation {
                  operator: Addition,
                  operands: [
                   String {
                    parts: [
                     Raw {
                      content: "List of fans thinkfan will control.\n",
                     },
                    ],
                    position: (146, 23),
                   },
                   FunctionApplication {
                    function: Variable {
                     identifier: "syntaxNote",
                     position: (148, 14),
                    },
                    arguments: [
                     String {
                      parts: [
                       Raw {
                        content: "fan",
                       },
                      ],
                      position: (148, 25),
                     },
                    ],
                   },
                  ],
                  position: (148, 12),
                 },
                ),
               ],
               recursive: false,
               position: (139, 23),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "levels",
               position: (151, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (151, 16),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (152, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (152, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (152, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   Variable {
                    identifier: "levelType",
                    position: (152, 29),
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (153, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   List {
                    elements: [
                     Int {
                      value: 0,
                      position: (154, 12),
                     },
                     Int {
                      value: 0,
                      position: (154, 15),
                     },
                     Int {
                      value: 55,
                      position: (154, 19),
                     },
                    ],
                    position: (154, 11),
                   },
                   List {
                    elements: [
                     Int {
                      value: 1,
                      position: (155, 12),
                     },
                     Int {
                      value: 48,
                      position: (155, 15),
                     },
                     Int {
                      value: 60,
                      position: (155, 19),
                     },
                    ],
                    position: (155, 11),
                   },
                   List {
                    elements: [
                     Int {
                      value: 2,
                      position: (156, 12),
                     },
                     Int {
                      value: 50,
                      position: (156, 15),
                     },
                     Int {
                      value: 61,
                      position: (156, 19),
                     },
                    ],
                    position: (156, 11),
                   },
                   List {
                    elements: [
                     Int {
                      value: 3,
                      position: (157, 12),
                     },
                     Int {
                      value: 52,
                      position: (157, 15),
                     },
                     Int {
                      value: 63,
                      position: (157, 19),
                     },
                    ],
                    position: (157, 11),
                   },
                   List {
                    elements: [
                     Int {
                      value: 6,
                      position: (158, 12),
                     },
                     Int {
                      value: 56,
                      position: (158, 15),
                     },
                     Int {
                      value: 65,
                      position: (158, 19),
                     },
                    ],
                    position: (158, 11),
                   },
                   List {
                    elements: [
                     Int {
                      value: 7,
                      position: (159, 12),
                     },
                     Int {
                      value: 60,
                      position: (159, 15),
                     },
                     Int {
                      value: 85,
                      position: (159, 19),
                     },
                    ],
                    position: (159, 11),
                   },
                   List {
                    elements: [
                     String {
                      parts: [
                       Raw {
                        content: "level auto",
                       },
                      ],
                      position: (160, 12),
                     },
                     Int {
                      value: 80,
                      position: (160, 25),
                     },
                     Int {
                      value: 32767,
                      position: (160, 28),
                     },
                    ],
                    position: (160, 11),
                   },
                  ],
                  position: (153, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (162, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "[LEVEL LOW HIGH]\n\nLEVEL is the fan level to use: it can be an integer (0-7 with thinkpad_acpi),\n\"level auto\" (to keep the default firmware behavior), \"level full-speed\" or\n\"level disengaged\" (to run the fan as fast as possible).\nLOW is the temperature at which to step down to the previous level.\nHIGH is the temperature at which to step up to the next level.\nAll numbers are integers.\n",
                   },
                  ],
                  position: (162, 23),
                 },
                ),
               ],
               recursive: false,
               position: (151, 25),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "extraArgs",
               position: (174, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (174, 19),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (175, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (175, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "listOf",
                      position: (175, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "types",
                     position: (175, 29),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "str",
                       position: (175, 35),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (176, 9),
                   },
                  ],
                 },
                 List {
                  elements: [],
                  position: (176, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "example",
                    position: (177, 9),
                   },
                  ],
                 },
                 List {
                  elements: [
                   String {
                    parts: [
                     Raw {
                      content: "-b",
                     },
                    ],
                    position: (177, 21),
                   },
                   String {
                    parts: [
                     Raw {
                      content: "0",
                     },
                    ],
                    position: (177, 26),
                   },
                  ],
                  position: (177, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (178, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "A list of extra command line arguments to pass to thinkfan.\nCheck the thinkfan(1) manpage for available arguments.\n",
                   },
                  ],
                  position: (178, 23),
                 },
                ),
               ],
               recursive: false,
               position: (174, 28),
              },
             ],
            },
           ),
           KeyValue(
            AttributePath {
             attributes: [
              Raw {
               content: "settings",
               position: (184, 7),
              },
             ],
            },
            FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (184, 18),
             },
             arguments: [
              Map {
               bindings: [
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "type",
                    position: (185, 9),
                   },
                  ],
                 },
                 FunctionApplication {
                  function: PropertyAccess {
                   expression: Variable {
                    identifier: "types",
                    position: (185, 16),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "attrsOf",
                      position: (185, 22),
                     },
                    ],
                   },
                   default: None,
                  },
                  arguments: [
                   PropertyAccess {
                    expression: Variable {
                     identifier: "settingsFormat",
                     position: (185, 30),
                    },
                    attribute_path: AttributePath {
                     attributes: [
                      Raw {
                       content: "type",
                       position: (185, 45),
                      },
                     ],
                    },
                    default: None,
                   },
                  ],
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "default",
                    position: (186, 9),
                   },
                  ],
                 },
                 Map {
                  bindings: [],
                  recursive: false,
                  position: (186, 19),
                 },
                ),
                KeyValue(
                 AttributePath {
                  attributes: [
                   Raw {
                    content: "description",
                    position: (187, 9),
                   },
                  ],
                 },
                 String {
                  parts: [
                   Raw {
                    content: "Thinkfan settings. Use this option to configure thinkfan\nsettings not exposed in a NixOS option or to bypass one.\nBefore changing this, read the <literal>thinkfan.conf(5)</literal>\nmanpage and take a look at the example config file at\n<link xlink:href=\"https://github.com/vmatare/thinkfan/blob/master/examples/thinkfan.yaml\"/>\n",
                   },
                  ],
                  position: (187, 23),
                 },
                ),
               ],
               recursive: false,
               position: (184, 27),
              },
             ],
            },
           ),
          ],
          recursive: false,
          position: (102, 25),
         },
        ),
       ],
       recursive: false,
       position: (100, 13),
      },
     ),
     KeyValue(
      AttributePath {
       attributes: [
        Raw {
         content: "config",
         position: (200, 3),
        },
       ],
      },
      FunctionApplication {
       function: Variable {
        identifier: "mkIf",
        position: (200, 12),
       },
       arguments: [
        PropertyAccess {
         expression: Variable {
          identifier: "cfg",
          position: (200, 17),
         },
         attribute_path: AttributePath {
          attributes: [
           Raw {
            content: "enable",
            position: (200, 21),
           },
          ],
         },
         default: None,
        },
        Map {
         bindings: [
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "environment",
              position: (202, 5),
             },
             Raw {
              content: "systemPackages",
              position: (202, 17),
             },
            ],
           },
           List {
            elements: [
             Variable {
              identifier: "thinkfan",
              position: (202, 36),
             },
            ],
            position: (202, 34),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "services",
              position: (204, 5),
             },
             Raw {
              content: "thinkfan",
              position: (204, 14),
             },
             Raw {
              content: "settings",
              position: (204, 23),
             },
            ],
           },
           FunctionApplication {
            function: Variable {
             identifier: "mapAttrs",
             position: (204, 34),
            },
            arguments: [
             Function {
              argument: Some(
               "k",
              ),
              arguments: FunctionArguments {
               arguments: [],
               ellipsis: false,
              },
              definition: Function {
               argument: Some(
                "v",
               ),
               arguments: FunctionArguments {
                arguments: [],
                ellipsis: false,
               },
               definition: FunctionApplication {
                function: Variable {
                 identifier: "mkDefault",
                 position: (204, 50),
                },
                arguments: [
                 Variable {
                  identifier: "v",
                  position: (204, 60),
                 },
                ],
               },
               position: (204, 47),
              },
              position: (204, 44),
             },
             Map {
              bindings: [
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "sensors",
                   position: (205, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (205, 17),
                 },
                 arguments: [
                  Variable {
                   identifier: "sensorToConf",
                   position: (205, 21),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (205, 34),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "sensors",
                      position: (205, 38),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "fans",
                   position: (206, 7),
                  },
                 ],
                },
                FunctionApplication {
                 function: Variable {
                  identifier: "map",
                  position: (206, 17),
                 },
                 arguments: [
                  Variable {
                   identifier: "sensorToConf",
                   position: (206, 21),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (206, 34),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "fans",
                      position: (206, 38),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                },
               ),
               KeyValue(
                AttributePath {
                 attributes: [
                  Raw {
                   content: "levels",
                   position: (207, 7),
                  },
                 ],
                },
                PropertyAccess {
                 expression: Variable {
                  identifier: "cfg",
                  position: (207, 17),
                 },
                 attribute_path: AttributePath {
                  attributes: [
                   Raw {
                    content: "levels",
                    position: (207, 21),
                   },
                  ],
                 },
                 default: None,
                },
               ),
              ],
              recursive: false,
              position: (204, 63),
             },
            ],
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (210, 5),
             },
             Raw {
              content: "packages",
              position: (210, 13),
             },
            ],
           },
           List {
            elements: [
             Variable {
              identifier: "thinkfan",
              position: (210, 26),
             },
            ],
            position: (210, 24),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "systemd",
              position: (212, 5),
             },
             Raw {
              content: "services",
              position: (212, 13),
             },
            ],
           },
           Map {
            bindings: [
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "thinkfan",
                 position: (213, 7),
                },
                Raw {
                 content: "environment",
                 position: (213, 16),
                },
                Raw {
                 content: "THINKFAN_ARGS",
                 position: (213, 28),
                },
               ],
              },
              FunctionApplication {
               function: Variable {
                identifier: "escapeShellArgs",
                position: (213, 44),
               },
               arguments: [
                BinaryOperation {
                 operator: Concatenation,
                 operands: [
                  List {
                   elements: [
                    String {
                     parts: [
                      Raw {
                       content: "-c",
                      },
                     ],
                     position: (213, 63),
                    },
                    Variable {
                     identifier: "configFile",
                     position: (213, 68),
                    },
                   ],
                   position: (213, 61),
                  },
                  PropertyAccess {
                   expression: Variable {
                    identifier: "cfg",
                    position: (213, 84),
                   },
                   attribute_path: AttributePath {
                    attributes: [
                     Raw {
                      content: "extraArgs",
                      position: (213, 88),
                     },
                    ],
                   },
                   default: None,
                  },
                 ],
                 position: (213, 81),
                },
               ],
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "thinkfan",
                 position: (216, 7),
                },
                Raw {
                 content: "wantedBy",
                 position: (216, 16),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "multi-user.target",
                  },
                 ],
                 position: (216, 29),
                },
               ],
               position: (216, 27),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "thinkfan-wakeup",
                 position: (217, 7),
                },
                Raw {
                 content: "wantedBy",
                 position: (217, 23),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "sleep.target",
                  },
                 ],
                 position: (217, 36),
                },
               ],
               position: (217, 34),
              },
             ),
             KeyValue(
              AttributePath {
               attributes: [
                Raw {
                 content: "thinkfan-sleep",
                 position: (218, 7),
                },
                Raw {
                 content: "wantedBy",
                 position: (218, 22),
                },
               ],
              },
              List {
               elements: [
                String {
                 parts: [
                  Raw {
                   content: "sleep.target",
                  },
                 ],
                 position: (218, 35),
                },
               ],
               position: (218, 33),
              },
             ),
            ],
            recursive: false,
            position: (212, 24),
           },
          ),
          KeyValue(
           AttributePath {
            attributes: [
             Raw {
              content: "boot",
              position: (221, 5),
             },
             Raw {
              content: "extraModprobeConfig",
              position: (221, 10),
             },
            ],
           },
           String {
            parts: [
             Raw {
              content: "options thinkpad_acpi experimental=1 fan_control=1",
             },
            ],
            position: (221, 32),
           },
          ),
         ],
         recursive: false,
         position: (200, 28),
        },
       ],
      },
     ),
    ],
    recursive: false,
    position: (98, 4),
   },
   position: (5, 1),
  },
  position: (3, 1),
 },
 position: (1, 1),
}