---
Function {
 argument: Destructured {
  identifier: None,
  arguments: [
   DestructuredArgument {
    identifier: "pkgs",
    default: None,
   },
   DestructuredArgument {
    identifier: "lib",
    default: None,
   },
   DestructuredArgument {
    identifier: "config",
    default: None,
   },
  ],
  ellipsis: true,
 },
 definition: With {
  expression: Variable {
   identifier: "lib",
   position: (6, 6),
  },
  target: LetIn {
   bindings: [
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfge",
        position: (10, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (10, 10),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "environment",
         position: (10, 17),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "cfg",
        position: (12, 3),
       },
      ],
     },
     to: PropertyAccess {
      expression: Variable {
       identifier: "config",
       position: (12, 9),
      },
      attribute_path: AttributePath {
       parts: [
        Raw {
         content: "programs",
         position: (12, 16),
        },
        Raw {
         content: "bash",
         position: (12, 25),
        },
       ],
      },
      default: None,
     },
    },
    Binding {
     from: AttributePath {
      parts: [
       Raw {
        content: "bashAliases",
        position: (14, 3),
       },
      ],
     },
     to: FunctionApplication {
      function: Variable {
       identifier: "concatStringsSep",
       position: (14, 17),
      },
      arguments: [
       String {
        parts: [
         Raw {
          content: "\n",
          position: (14, 35),
         },
        ],
        position: (14, 34),
       },
       Parentheses {
        expression: FunctionApplication {
         function: Variable {
          identifier: "mapAttrsFlatten",
          position: (15, 5),
         },
         arguments: [
          Parentheses {
           expression: Function {
            argument: Simple {
             identifier: "k",
            },
            definition: Function {
             argument: Simple {
              identifier: "v",
             },
             definition: String {
              parts: [
               Raw {
                content: "alias ",
                position: (15, 29),
               },
               Expression {
                expression: Variable {
                 identifier: "k",
                 position: (15, 37),
                },
               },
               Raw {
                content: "=",
                position: (15, 39),
               },
               Expression {
                expression: FunctionApplication {
                 function: Variable {
                  identifier: "escapeShellArg",
                  position: (15, 42),
                 },
                 arguments: [
                  Variable {
                   identifier: "v",
                   position: (15, 57),
                  },
                 ],
                },
               },
              ],
              position: (15, 28),
             },
             position: (15, 25),
            },
            position: (15, 22),
           },
           position: (15, 21),
          },
          Parentheses {
           expression: FunctionApplication {
            function: Variable {
             identifier: "filterAttrs",
             position: (16, 8),
            },
            arguments: [
             Parentheses {
              expression: Function {
               argument: Simple {
                identifier: "k",
               },
               definition: Function {
                argument: Simple {
                 identifier: "v",
                },
                definition: BinaryOperation {
                 operator: NotEqualTo,
                 operands: [
                  Variable {
                   identifier: "v",
                   position: (16, 27),
                  },
                  Variable {
                   identifier: "null",
                   position: (16, 32),
                  },
                 ],
                 position: (16, 29),
                },
                position: (16, 24),
               },
               position: (16, 21),
              },
              position: (16, 20),
             },
             PropertyAccess {
              expression: Variable {
               identifier: "cfg",
               position: (16, 38),
              },
              attribute_path: AttributePath {
               parts: [
                Raw {
                 content: "shellAliases",
                 position: (16, 42),
                },
               ],
              },
              default: None,
             },
            ],
           },
           position: (16, 7),
          },
         ],
        },
        position: (14, 39),
       },
      ],
     },
    },
   ],
   target: Map {
    bindings: [
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "imports",
         position: (22, 3),
        },
       ],
      },
      to: List {
       elements: [
        Parentheses {
         expression: FunctionApplication {
          function: Variable {
           identifier: "mkRemovedOptionModule",
           position: (23, 6),
          },
          arguments: [
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "programs",
                position: (23, 31),
               },
              ],
              position: (23, 30),
             },
             String {
              parts: [
               Raw {
                content: "bash",
                position: (23, 42),
               },
              ],
              position: (23, 41),
             },
             String {
              parts: [
               Raw {
                content: "enable",
                position: (23, 49),
               },
              ],
              position: (23, 48),
             },
            ],
            position: (23, 28),
           },
           String {
            parts: [],
            position: (23, 59),
           },
          ],
         },
         position: (23, 5),
        },
       ],
       position: (22, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "options",
         position: (26, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "programs",
            position: (28, 5),
           },
           Raw {
            content: "bash",
            position: (28, 14),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "shellAliases",
               position: (45, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (45, 22),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (46, 9),
                   },
                  ],
                 },
                 to: Map {
                  bindings: [],
                  recursive: false,
                  position: (46, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (47, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Set of aliases for bash shell, which overrides <option>environment.shellAliases</option>.\nSee <option>environment.shellAliases</option> for an option format description.\n",
                    position: (48, 1),
                   },
                  ],
                  position: (47, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (51, 9),
                   },
                  ],
                 },
                 to: With {
                  expression: Variable {
                   identifier: "types",
                   position: (51, 21),
                  },
                  target: FunctionApplication {
                   function: Variable {
                    identifier: "attrsOf",
                    position: (51, 28),
                   },
                   arguments: [
                    Parentheses {
                     expression: FunctionApplication {
                      function: Variable {
                       identifier: "nullOr",
                       position: (51, 37),
                      },
                      arguments: [
                       Parentheses {
                        expression: FunctionApplication {
                         function: Variable {
                          identifier: "either",
                          position: (51, 45),
                         },
                         arguments: [
                          Variable {
                           identifier: "str",
                           position: (51, 52),
                          },
                          Variable {
                           identifier: "path",
                           position: (51, 56),
                          },
                         ],
                        },
                        position: (51, 44),
                       },
                      ],
                     },
                     position: (51, 36),
                    },
                   ],
                  },
                  position: (51, 16),
                 },
                },
               ],
               recursive: false,
               position: (45, 31),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "shellInit",
               position: (54, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (54, 19),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (55, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (55, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (56, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Shell script code called during bash shell initialisation.\n",
                    position: (57, 1),
                   },
                  ],
                  position: (56, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (59, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (59, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (59, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               recursive: false,
               position: (54, 28),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "loginShellInit",
               position: (62, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (62, 24),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (63, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (63, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (64, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Shell script code called during login bash shell initialisation.\n",
                    position: (65, 1),
                   },
                  ],
                  position: (64, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (67, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (67, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (67, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               recursive: false,
               position: (62, 33),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "interactiveShellInit",
               position: (70, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (70, 30),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (71, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (71, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (72, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Shell script code called during interactive bash shell initialisation.\n",
                    position: (73, 1),
                   },
                  ],
                  position: (72, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (75, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (75, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (75, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               recursive: false,
               position: (70, 39),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "promptInit",
               position: (78, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (78, 20),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (79, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "# Provide a nice prompt if the terminal supports it.\nif [ \"$TERM\" != \"dumb\" ] || [ -n \"$INSIDE_EMACS\" ]; then\n  PROMPT_COLOR=\"1;31m\"\n  ((UID)) && PROMPT_COLOR=\"1;32m\"\n  if [ -n \"$INSIDE_EMACS\" ] || [ \"$TERM\" = \"eterm\" ] || [ \"$TERM\" = \"eterm-color\" ]; then\n    # Emacs term mode doesn't support xterm title escape sequence (\\e]0;)\n    PS1=\"\\n\\[\\033[$PROMPT_COLOR\\][\\u@\\h:\\w]\\\\$\\[\\033[0m\\] \"\n  else\n    PS1=\"\\n\\[\\033[$PROMPT_COLOR\\][\\[\\e]0;\\u@\\h: \\w\\a\\]\\u@\\h:\\w]\\\\$\\[\\033[0m\\] \"\n  fi\n  if test \"$TERM\" = \"xterm\"; then\n    PS1=\"\\[\\033]2;\\h:\\u:\\w\\007\\]$PS1\"\n  fi\nfi\n",
                    position: (80, 1),
                   },
                  ],
                  position: (79, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (95, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Shell script code used to initialise the bash prompt.\n",
                    position: (96, 1),
                   },
                  ],
                  position: (95, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (98, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (98, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (98, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
               ],
               recursive: false,
               position: (78, 29),
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "promptPluginInit",
               position: (101, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mkOption",
              position: (101, 26),
             },
             arguments: [
              Map {
               bindings: [
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "default",
                    position: (102, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [],
                  position: (102, 19),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "description",
                    position: (103, 9),
                   },
                  ],
                 },
                 to: String {
                  parts: [
                   Raw {
                    content: "Shell script code used to initialise bash prompt plugins.\n",
                    position: (104, 1),
                   },
                  ],
                  position: (103, 23),
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "type",
                    position: (106, 9),
                   },
                  ],
                 },
                 to: PropertyAccess {
                  expression: Variable {
                   identifier: "types",
                   position: (106, 16),
                  },
                  attribute_path: AttributePath {
                   parts: [
                    Raw {
                     content: "lines",
                     position: (106, 22),
                    },
                   ],
                  },
                  default: None,
                 },
                },
                Binding {
                 from: AttributePath {
                  parts: [
                   Raw {
                    content: "internal",
                    position: (107, 9),
                   },
                  ],
                 },
                 to: Variable {
                  identifier: "true",
                  position: (107, 20),
                 },
                },
               ],
               recursive: false,
               position: (101, 35),
              },
             ],
            },
           },
          ],
          recursive: false,
          position: (28, 21),
         },
        },
       ],
       recursive: false,
       position: (26, 13),
      },
     },
     Binding {
      from: AttributePath {
       parts: [
        Raw {
         content: "config",
         position: (114, 3),
        },
       ],
      },
      to: Map {
       bindings: [
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "programs",
            position: (116, 5),
           },
           Raw {
            content: "bash",
            position: (116, 14),
           },
          ],
         },
         to: Map {
          bindings: [
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "shellAliases",
               position: (118, 7),
              },
             ],
            },
            to: FunctionApplication {
             function: Variable {
              identifier: "mapAttrs",
              position: (118, 22),
             },
             arguments: [
              Parentheses {
               expression: Function {
                argument: Simple {
                 identifier: "name",
                },
                definition: Variable {
                 identifier: "mkDefault",
                 position: (118, 38),
                },
                position: (118, 32),
               },
               position: (118, 31),
              },
              PropertyAccess {
               expression: Variable {
                identifier: "cfge",
                position: (118, 49),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "shellAliases",
                  position: (118, 54),
                 },
                ],
               },
               default: None,
              },
             ],
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "shellInit",
               position: (120, 7),
              },
             ],
            },
            to: String {
             parts: [
              Raw {
               content: "if [ -z \"$__NIXOS_SET_ENVIRONMENT_DONE\" ]; then\n    . ",
               position: (121, 1),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "config",
                 position: (122, 17),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "system",
                   position: (122, 24),
                  },
                  Raw {
                   content: "build",
                   position: (122, 31),
                  },
                  Raw {
                   content: "setEnvironment",
                   position: (122, 37),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\nfi\n\n",
               position: (122, 52),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfge",
                 position: (125, 11),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "shellInit",
                   position: (125, 16),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (125, 26),
              },
             ],
             position: (120, 19),
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "loginShellInit",
               position: (128, 7),
              },
             ],
            },
            to: PropertyAccess {
             expression: Variable {
              identifier: "cfge",
              position: (128, 24),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "loginShellInit",
                position: (128, 29),
               },
              ],
             },
             default: None,
            },
           },
           Binding {
            from: AttributePath {
             parts: [
              Raw {
               content: "interactiveShellInit",
               position: (130, 7),
              },
             ],
            },
            to: String {
             parts: [
              Raw {
               content: "# Check the window size after every command.\nshopt -s checkwinsize\n\n# Disable hashing (i.e. caching) of command lookups.\nset +h\n\n",
               position: (131, 1),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (137, 11),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "promptInit",
                   position: (137, 15),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (137, 26),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfg",
                 position: (138, 11),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "promptPluginInit",
                   position: (138, 15),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (138, 32),
              },
              Expression {
               expression: Variable {
                identifier: "bashAliases",
                position: (139, 11),
               },
              },
              Raw {
               content: "\n\n",
               position: (139, 23),
              },
              Expression {
               expression: PropertyAccess {
                expression: Variable {
                 identifier: "cfge",
                 position: (141, 11),
                },
                attribute_path: AttributePath {
                 parts: [
                  Raw {
                   content: "interactiveShellInit",
                   position: (141, 16),
                  },
                 ],
                },
                default: None,
               },
              },
              Raw {
               content: "\n",
               position: (141, 37),
              },
             ],
             position: (130, 30),
            },
           },
          ],
          recursive: false,
          position: (116, 21),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environment",
            position: (146, 5),
           },
           Raw {
            content: "etc",
            position: (146, 17),
           },
           Raw {
            content: "profile",
            position: (146, 21),
           },
           Raw {
            content: "text",
            position: (146, 29),
           },
          ],
         },
         to: String {
          parts: [
           Raw {
            content: "# /etc/profile: DO NOT EDIT -- this file has been generated automatically.\n# This file is read for login shells.\n\n# Only execute this file once per shell.\nif [ -n \"$__ETC_PROFILE_SOURCED\" ]; then return; fi\n__ETC_PROFILE_SOURCED=1\n\n# Prevent this file from being sourced by interactive non-login child shells.\nexport __ETC_PROFILE_DONE=1\n\n",
            position: (148, 1),
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (158, 11),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "shellInit",
                position: (158, 15),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "\n",
            position: (158, 25),
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (159, 11),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "loginShellInit",
                position: (159, 15),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "\n\n# Read system-wide modifications.\nif test -f /etc/profile.local; then\n    . /etc/profile.local\nfi\n\nif [ -n \"",
            position: (159, 30),
           },
           Raw {
            content: "$",
            position: (166, 18),
           },
           Raw {
            content: "{BASH_VERSION:-}\" ]; then\n    . /etc/bashrc\nfi\n",
            position: (166, 21),
           },
          ],
          position: (147, 7),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environment",
            position: (171, 5),
           },
           Raw {
            content: "etc",
            position: (171, 17),
           },
           Raw {
            content: "bashrc",
            position: (171, 21),
           },
           Raw {
            content: "text",
            position: (171, 28),
           },
          ],
         },
         to: String {
          parts: [
           Raw {
            content: "# /etc/bashrc: DO NOT EDIT -- this file has been generated automatically.\n\n# Only execute this file once per shell.\nif [ -n \"$__ETC_BASHRC_SOURCED\" ] || [ -n \"$NOSYSBASHRC\" ]; then return; fi\n__ETC_BASHRC_SOURCED=1\n\n# If the profile was not loaded in a parent process, source\n# it.  But otherwise don't do it because we don't want to\n# clobber overridden values of $PATH, etc.\nif [ -z \"$__ETC_PROFILE_DONE\" ]; then\n    . /etc/profile\nfi\n\n# We are not always an interactive shell.\nif [ -n \"$PS1\" ]; then\n    ",
            position: (173, 1),
           },
           Expression {
            expression: PropertyAccess {
             expression: Variable {
              identifier: "cfg",
              position: (188, 15),
             },
             attribute_path: AttributePath {
              parts: [
               Raw {
                content: "interactiveShellInit",
                position: (188, 19),
               },
              ],
             },
             default: None,
            },
           },
           Raw {
            content: "\nfi\n\n# Read system-wide modifications.\nif test -f /etc/bashrc.local; then\n    . /etc/bashrc.local\nfi\n",
            position: (188, 40),
           },
          ],
          position: (172, 7),
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environment",
            position: (199, 5),
           },
           Raw {
            content: "etc",
            position: (199, 17),
           },
           Raw {
            content: "inputrc",
            position: (199, 21),
           },
           Raw {
            content: "source",
            position: (199, 29),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkOptionDefault",
           position: (199, 38),
          },
          arguments: [
           Path {
            parts: [
             Raw {
              content: "./inputrc",
              position: (199, 54),
             },
            ],
            position: (199, 54),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "users",
            position: (201, 5),
           },
           Raw {
            content: "defaultUserShell",
            position: (201, 11),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "mkDefault",
           position: (201, 30),
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "pkgs",
             position: (201, 40),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "bashInteractive",
               position: (201, 45),
              },
             ],
            },
            default: None,
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environment",
            position: (203, 5),
           },
           Raw {
            content: "pathsToLink",
            position: (203, 17),
           },
          ],
         },
         to: FunctionApplication {
          function: Variable {
           identifier: "optionals",
           position: (203, 31),
          },
          arguments: [
           PropertyAccess {
            expression: Variable {
             identifier: "cfg",
             position: (203, 41),
            },
            attribute_path: AttributePath {
             parts: [
              Raw {
               content: "enableCompletion",
               position: (203, 45),
              },
             ],
            },
            default: None,
           },
           List {
            elements: [
             String {
              parts: [
               Raw {
                content: "/etc/bash_completion.d",
                position: (204, 8),
               },
              ],
              position: (204, 7),
             },
             String {
              parts: [
               Raw {
                content: "/share/bash-completion",
                position: (205, 8),
               },
              ],
              position: (205, 7),
             },
            ],
            position: (203, 62),
           },
          ],
         },
        },
        Binding {
         from: AttributePath {
          parts: [
           Raw {
            content: "environment",
            position: (208, 5),
           },
           Raw {
            content: "shells",
            position: (208, 17),
           },
          ],
         },
         to: List {
          elements: [
           String {
            parts: [
             Raw {
              content: "/run/current-system/sw/bin/bash",
              position: (209, 10),
             },
            ],
            position: (209, 9),
           },
           String {
            parts: [
             Raw {
              content: "/run/current-system/sw/bin/sh",
              position: (210, 10),
             },
            ],
            position: (210, 9),
           },
           String {
            parts: [
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (211, 12),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bashInteractive",
                  position: (211, 17),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/bin/bash",
              position: (211, 33),
             },
            ],
            position: (211, 9),
           },
           String {
            parts: [
             Expression {
              expression: PropertyAccess {
               expression: Variable {
                identifier: "pkgs",
                position: (212, 12),
               },
               attribute_path: AttributePath {
                parts: [
                 Raw {
                  content: "bashInteractive",
                  position: (212, 17),
                 },
                ],
               },
               default: None,
              },
             },
             Raw {
              content: "/bin/sh",
              position: (212, 33),
             },
            ],
            position: (212, 9),
           },
          ],
          position: (209, 7),
         },
        },
       ],
       recursive: false,
       position: (114, 34),
      },
     },
    ],
    recursive: false,
    position: (21, 1),
   },
   position: (8, 1),
  },
  position: (6, 1),
 },
 position: (4, 1),
}